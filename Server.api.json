{
  "name": "Server",
  "url": "/Server",
  "description": "Provides functionality to allow external (developer-controlled) servers to interact with user inventories and data in a trusted manner, and to handle matchmaking and client connection orchestration",
  "datatypes": {
    "AddCharacterVirtualCurrencyRequest": {
      "name": "AddCharacterVirtualCurrencyRequest",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose virtual currency balance is to be incremented.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "VirtualCurrency",
          "description": "Name of the virtual currency which is to be incremented.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Amount",
          "description": "Amount to be added to the character balance of the specified virtual currency. Maximum VC balance is Int32 (2,147,483,647). Any increase over this value will be discarded.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "AddFriendRequest": {
      "name": "AddFriendRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab identifier of the player to add a new friend.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "FriendPlayFabId",
          "description": "The PlayFab identifier of the user being added.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendUsername",
          "description": "The PlayFab username of the user being added",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendEmail",
          "description": "Email address of the user being added.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendTitleDisplayName",
          "description": "Title-specific display name of the user to being added.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "AddSharedGroupMembersRequest": {
      "name": "AddSharedGroupMembersRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SharedGroupId",
          "description": "Unique identifier for the shared group.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PlayFabIds",
          "description": "An array of unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "AddSharedGroupMembersResult": {
      "name": "AddSharedGroupMembersResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "AddUserVirtualCurrencyRequest": {
      "name": "AddUserVirtualCurrencyRequest",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose virtual currency balance is to be increased.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "VirtualCurrency",
          "description": "Name of the virtual currency which is to be incremented.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Amount",
          "description": "Amount to be added to the user balance of the specified virtual currency. Maximum VC balance is Int32 (2,147,483,647). Any increase over this value will be discarded.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "AuthenticateSessionTicketRequest": {
      "name": "AuthenticateSessionTicketRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SessionTicket",
          "description": "Session ticket as issued by a PlayFab client login API.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "AuthenticateSessionTicketResult": {
      "name": "AuthenticateSessionTicketResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "UserInfo",
          "description": "Account info for the user whose session ticket was supplied.",
          "jsontype": "Object",
          "actualtype": "UserAccountInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "AwardSteamAchievementItem": {
      "name": "AwardSteamAchievementItem",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "AchievementName",
          "description": "Unique Steam achievement name.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Result",
          "description": "Result of the award attempt (only valid on response, not on request).",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "AwardSteamAchievementRequest": {
      "name": "AwardSteamAchievementRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Achievements",
          "description": "Array of achievements to grant and the users to whom they are to be granted.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "AwardSteamAchievementItem",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "AwardSteamAchievementResult": {
      "name": "AwardSteamAchievementResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "AchievementResults",
          "description": "Array of achievements granted.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "AwardSteamAchievementItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CatalogItem": {
      "name": "CatalogItem",
      "classNameSpace": "PlayFab.DataModel",
      "assembly": "DataModel",
      "description": "A purchasable item from the item catalog",
      "sortKey": "ItemId",
      "properties": [
        {
          "name": "ItemId",
          "description": "unique identifier for this item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemClass",
          "description": "class to which the item belongs",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "catalog version for this item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "text name for the item, to show in-game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Description",
          "description": "text description of item, to show in-game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyPrices",
          "description": "price of this item in virtual currencies and \"RM\" (the base Real Money purchase price, in USD pennies)",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "RealCurrencyPrices",
          "description": "override prices for this item for specific currencies",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "Tags",
          "description": "list of item tags",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomData",
          "description": "game specific custom data",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Consumable",
          "description": "defines the consumable properties (number of uses, timeout) for the item",
          "jsontype": "Object",
          "actualtype": "CatalogItemConsumableInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Container",
          "description": "defines the container properties for the item - what items it contains, including random drop tables and virtual currencies, and what item (if any) is required to open it via the UnlockContainerItem API",
          "jsontype": "Object",
          "actualtype": "CatalogItemContainerInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Bundle",
          "description": "defines the bundle properties for the item - bundles are items which contain other items, including random drop tables and virtual currencies",
          "jsontype": "Object",
          "actualtype": "CatalogItemBundleInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "CanBecomeCharacter",
          "description": "if true, then an item instance of this type can be used to grant a character to a user.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "IsStackable",
          "description": "if true, then only one item instance of this type will exist and its remaininguses will be incremented instead. RemainingUses will cap out at Int32.Max (2,147,483,647). All subsequent increases will be discarded",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "IsTradable",
          "description": "if true, then an item instance of this type can be traded between players using the trading APIs",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "ItemImageUrl",
          "description": "URL to the item image. For Facebook purchase to display the image on the item purchase page, this must be set to an HTTP URL.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CatalogItemBundleInfo": {
      "name": "CatalogItemBundleInfo",
      "classNameSpace": "PlayFab.DataModel",
      "assembly": "DataModel",
      "properties": [
        {
          "name": "BundledItems",
          "description": "unique ItemId values for all items which will be added to the player inventory when the bundle is added",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundledResultTables",
          "description": "unique TableId values for all RandomResultTable objects which are part of the bundle (random tables will be resolved and add the relevant items to the player inventory when the bundle is added)",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundledVirtualCurrencies",
          "description": "virtual currency types and balances which will be added to the player inventory when the bundle is added",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "CatalogItemConsumableInfo": {
      "name": "CatalogItemConsumableInfo",
      "classNameSpace": "PlayFab.DataModel",
      "assembly": "DataModel",
      "properties": [
        {
          "name": "UsageCount",
          "description": "number of times this object can be used, after which it will be removed from the player inventory",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "UsagePeriod",
          "description": "duration in seconds for how long the item will remain in the player inventory - once elapsed, the item will be removed",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "UsagePeriodGroup",
          "description": "all inventory item instances in the player inventory sharing a non-null UsagePeriodGroup have their UsagePeriod values added together, and share the result - when that period has elapsed, all the items in the group will be removed",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CatalogItemContainerInfo": {
      "name": "CatalogItemContainerInfo",
      "classNameSpace": "PlayFab.DataModel",
      "assembly": "DataModel",
      "description": "Containers are inventory items that can hold other items defined in the catalog, as well as virtual currency, which is added to the player inventory when the container is unlocked, using the UnlockContainerItem API. The items can be anything defined in the catalog, as well as RandomResultTable objects which will be resolved when the container is unlocked. Containers and their keys should be defined as Consumable (having a limited number of uses) in their catalog defintiions, unless the intent is for the player to be able to re-use them infinitely.",
      "properties": [
        {
          "name": "KeyItemId",
          "description": "ItemId for the catalog item used to unlock the container, if any (if not specified, a call to UnlockContainerItem will open the container, adding the contents to the player inventory and currency balances)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemContents",
          "description": "unique ItemId values for all items which will be added to the player inventory, once the container has been unlocked",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ResultTableContents",
          "description": "unique TableId values for all RandomResultTable objects which are part of the container (once unlocked, random tables will be resolved and add the relevant items to the player inventory)",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyContents",
          "description": "virtual currency types and balances which will be added to the player inventory when the container is unlocked",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "CharacterLeaderboardEntry": {
      "name": "CharacterLeaderboardEntry",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user for this leaderboard entry.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterId",
          "description": "PlayFab unique identifier of the character that belongs to the user for this leaderboard entry.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterName",
          "description": "Title-specific display name of the character for this leaderboard entry.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "Title-specific display name of the user for this leaderboard entry.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterType",
          "description": "Name of the character class for this entry.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "StatValue",
          "description": "Specific value of the user's statistic.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "Position",
          "description": "User's overall position in the leaderboard.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "CharacterResult": {
      "name": "CharacterResult",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CharacterId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterName",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterType",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CreateSharedGroupRequest": {
      "name": "CreateSharedGroupRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SharedGroupId",
          "description": "Unique identifier for the shared group (a random identifier will be assigned, if one is not specified).",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CreateSharedGroupResult": {
      "name": "CreateSharedGroupResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SharedGroupId",
          "description": "Unique identifier for the shared group.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "Currency": {
      "name": "Currency",
      "classNameSpace": "Utility",
      "assembly": "Utility",
      "isenum": true,
      "enumvalues": [
        {
          "name": "AED"
        },
        {
          "name": "AFN"
        },
        {
          "name": "ALL"
        },
        {
          "name": "AMD"
        },
        {
          "name": "ANG"
        },
        {
          "name": "AOA"
        },
        {
          "name": "ARS"
        },
        {
          "name": "AUD"
        },
        {
          "name": "AWG"
        },
        {
          "name": "AZN"
        },
        {
          "name": "BAM"
        },
        {
          "name": "BBD"
        },
        {
          "name": "BDT"
        },
        {
          "name": "BGN"
        },
        {
          "name": "BHD"
        },
        {
          "name": "BIF"
        },
        {
          "name": "BMD"
        },
        {
          "name": "BND"
        },
        {
          "name": "BOB"
        },
        {
          "name": "BRL"
        },
        {
          "name": "BSD"
        },
        {
          "name": "BTN"
        },
        {
          "name": "BWP"
        },
        {
          "name": "BYR"
        },
        {
          "name": "BZD"
        },
        {
          "name": "CAD"
        },
        {
          "name": "CDF"
        },
        {
          "name": "CHF"
        },
        {
          "name": "CLP"
        },
        {
          "name": "CNY"
        },
        {
          "name": "COP"
        },
        {
          "name": "CRC"
        },
        {
          "name": "CUC"
        },
        {
          "name": "CUP"
        },
        {
          "name": "CVE"
        },
        {
          "name": "CZK"
        },
        {
          "name": "DJF"
        },
        {
          "name": "DKK"
        },
        {
          "name": "DOP"
        },
        {
          "name": "DZD"
        },
        {
          "name": "EGP"
        },
        {
          "name": "ERN"
        },
        {
          "name": "ETB"
        },
        {
          "name": "EUR"
        },
        {
          "name": "FJD"
        },
        {
          "name": "FKP"
        },
        {
          "name": "GBP"
        },
        {
          "name": "GEL"
        },
        {
          "name": "GGP"
        },
        {
          "name": "GHS"
        },
        {
          "name": "GIP"
        },
        {
          "name": "GMD"
        },
        {
          "name": "GNF"
        },
        {
          "name": "GTQ"
        },
        {
          "name": "GYD"
        },
        {
          "name": "HKD"
        },
        {
          "name": "HNL"
        },
        {
          "name": "HRK"
        },
        {
          "name": "HTG"
        },
        {
          "name": "HUF"
        },
        {
          "name": "IDR"
        },
        {
          "name": "ILS"
        },
        {
          "name": "IMP"
        },
        {
          "name": "INR"
        },
        {
          "name": "IQD"
        },
        {
          "name": "IRR"
        },
        {
          "name": "ISK"
        },
        {
          "name": "JEP"
        },
        {
          "name": "JMD"
        },
        {
          "name": "JOD"
        },
        {
          "name": "JPY"
        },
        {
          "name": "KES"
        },
        {
          "name": "KGS"
        },
        {
          "name": "KHR"
        },
        {
          "name": "KMF"
        },
        {
          "name": "KPW"
        },
        {
          "name": "KRW"
        },
        {
          "name": "KWD"
        },
        {
          "name": "KYD"
        },
        {
          "name": "KZT"
        },
        {
          "name": "LAK"
        },
        {
          "name": "LBP"
        },
        {
          "name": "LKR"
        },
        {
          "name": "LRD"
        },
        {
          "name": "LSL"
        },
        {
          "name": "LYD"
        },
        {
          "name": "MAD"
        },
        {
          "name": "MDL"
        },
        {
          "name": "MGA"
        },
        {
          "name": "MKD"
        },
        {
          "name": "MMK"
        },
        {
          "name": "MNT"
        },
        {
          "name": "MOP"
        },
        {
          "name": "MRO"
        },
        {
          "name": "MUR"
        },
        {
          "name": "MVR"
        },
        {
          "name": "MWK"
        },
        {
          "name": "MXN"
        },
        {
          "name": "MYR"
        },
        {
          "name": "MZN"
        },
        {
          "name": "NAD"
        },
        {
          "name": "NGN"
        },
        {
          "name": "NIO"
        },
        {
          "name": "NOK"
        },
        {
          "name": "NPR"
        },
        {
          "name": "NZD"
        },
        {
          "name": "OMR"
        },
        {
          "name": "PAB"
        },
        {
          "name": "PEN"
        },
        {
          "name": "PGK"
        },
        {
          "name": "PHP"
        },
        {
          "name": "PKR"
        },
        {
          "name": "PLN"
        },
        {
          "name": "PYG"
        },
        {
          "name": "QAR"
        },
        {
          "name": "RON"
        },
        {
          "name": "RSD"
        },
        {
          "name": "RUB"
        },
        {
          "name": "RWF"
        },
        {
          "name": "SAR"
        },
        {
          "name": "SBD"
        },
        {
          "name": "SCR"
        },
        {
          "name": "SDG"
        },
        {
          "name": "SEK"
        },
        {
          "name": "SGD"
        },
        {
          "name": "SHP"
        },
        {
          "name": "SLL"
        },
        {
          "name": "SOS"
        },
        {
          "name": "SPL"
        },
        {
          "name": "SRD"
        },
        {
          "name": "STD"
        },
        {
          "name": "SVC"
        },
        {
          "name": "SYP"
        },
        {
          "name": "SZL"
        },
        {
          "name": "THB"
        },
        {
          "name": "TJS"
        },
        {
          "name": "TMT"
        },
        {
          "name": "TND"
        },
        {
          "name": "TOP"
        },
        {
          "name": "TRY"
        },
        {
          "name": "TTD"
        },
        {
          "name": "TVD"
        },
        {
          "name": "TWD"
        },
        {
          "name": "TZS"
        },
        {
          "name": "UAH"
        },
        {
          "name": "UGX"
        },
        {
          "name": "USD"
        },
        {
          "name": "UYU"
        },
        {
          "name": "UZS"
        },
        {
          "name": "VEF"
        },
        {
          "name": "VND"
        },
        {
          "name": "VUV"
        },
        {
          "name": "WST"
        },
        {
          "name": "XAF"
        },
        {
          "name": "XCD"
        },
        {
          "name": "XDR"
        },
        {
          "name": "XOF"
        },
        {
          "name": "XPF"
        },
        {
          "name": "YER"
        },
        {
          "name": "ZAR"
        },
        {
          "name": "ZMW"
        },
        {
          "name": "ZWD"
        }
      ]
    },
    "DeleteCharacterFromUserRequest": {
      "name": "DeleteCharacterFromUserRequest",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "SaveCharacterInventory",
          "description": "If true, the character's inventory will be transferred up to the owning user; otherwise, this request will purge those items.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "DeleteCharacterFromUserResult": {
      "name": "DeleteCharacterFromUserResult",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "DeleteSharedGroupRequest": {
      "name": "DeleteSharedGroupRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SharedGroupId",
          "description": "Unique identifier for the shared group.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "DeleteUsersRequest": {
      "name": "DeleteUsersRequest",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabIds",
          "description": "An array of unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "TitleId",
          "description": "Unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "DeleteUsersResult": {
      "name": "DeleteUsersResult",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "EmptyResult": {
      "name": "EmptyResult",
      "classNameSpace": "System.Web.Mvc",
      "assembly": "System.Web.Mvc",
      "properties": []
    },
    "FacebookPlayFabIdPair": {
      "name": "FacebookPlayFabIdPair",
      "classNameSpace": "PlayFab.WebAPIModels",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "FacebookId",
          "description": "Unique Facebook identifier for a user.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab identifier for a user, or null if no PlayFab account is linked to the Facebook identifier.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "FriendInfo": {
      "name": "FriendInfo",
      "classNameSpace": "PlayFab.WebAPIModels",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "FriendPlayFabId",
          "description": "PlayFab unique identifier for this friend.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Username",
          "description": "PlayFab unique username for this friend.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TitleDisplayName",
          "description": "Title-specific display name for this friend.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Tags",
          "description": "Tags which have been associated with this friend.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CurrentMatchmakerLobbyId",
          "description": "Unique lobby identifier of the Game Server Instance to which this player is currently connected.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FacebookInfo",
          "description": "Available Facebook information (if the user and PlayFab friend are also connected in Facebook).",
          "jsontype": "Object",
          "actualtype": "UserFacebookInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SteamInfo",
          "description": "Available Steam information (if the user and PlayFab friend are also connected in Steam).",
          "jsontype": "Object",
          "actualtype": "UserSteamInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "GameCenterInfo",
          "description": "Available Game Center information (if the user and PlayFab friend are also connected in Game Center).",
          "jsontype": "Object",
          "actualtype": "UserGameCenterInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetCatalogItemsRequest": {
      "name": "GetCatalogItemsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.Inventory",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "Which catalog is being requested.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetCatalogItemsResult": {
      "name": "GetCatalogItemsResult",
      "classNameSpace": "PlayFab.WebAPIModels.Inventory",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Catalog",
          "description": "Array of items which can be purchased.",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetCharacterDataRequest": {
      "name": "GetCharacterDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Keys",
          "description": "Specific keys to search for in the custom user data.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "IfChangedFromDataVersion",
          "description": "The version that currently exists according to the caller. The call will return the data for all of the keys if the version in the system is greater than this.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "GetCharacterDataResult": {
      "name": "GetCharacterDataResult",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DataVersion",
          "description": "Indicates the current version of the data that has been set. This is incremented with every set call for that type of data (read-only, internal, etc). This version can be provided in Get calls to find updated data.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "Data",
          "description": "User specific data for this title.",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "UserDataRecord",
          "isclass": true,
          "optional": true
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetCharacterInventoryRequest": {
      "name": "GetCharacterInventoryRequest",
      "classNameSpace": "PlayFab.WebAPIModels.Inventory",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "Used to limit results to only those from a specific catalog version.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetCharacterInventoryResult": {
      "name": "GetCharacterInventoryResult",
      "classNameSpace": "PlayFab.WebAPIModels.Inventory",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose character inventory is being returned.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterId",
          "description": "Unique identifier of the character for this inventory.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Inventory",
          "description": "Array of inventory items belonging to the character.",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "Array of virtual currency balance(s) belonging to the character.",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "VirtualCurrencyRechargeTimes",
          "description": "Array of remaining times and timestamps for virtual currencies.",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "VirtualCurrencyRechargeTime",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetCharacterLeaderboardRequest": {
      "name": "GetCharacterLeaderboardRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CharacterType",
          "description": "Optional character type on which to filter the leaderboard entries.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "StatisticName",
          "description": "Unique identifier for the title-specific statistic for the leaderboard.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "StartPosition",
          "description": "First entry in the leaderboard to be retrieved.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "MaxResultsCount",
          "description": "Maximum number of entries to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "GetCharacterLeaderboardResult": {
      "name": "GetCharacterLeaderboardResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Leaderboard",
          "description": "Ordered list of leaderboard entries.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CharacterLeaderboardEntry",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetCharacterStatisticsRequest": {
      "name": "GetCharacterStatisticsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetCharacterStatisticsResult": {
      "name": "GetCharacterStatisticsResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose character statistics are being returned.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterId",
          "description": "Unique identifier of the character for the statistics.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterStatistics",
          "description": "Character statistics for the requested user.",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "GetContentDownloadUrlRequest": {
      "name": "GetContentDownloadUrlRequest",
      "classNameSpace": "PlayFab.WebAPIModels.Content",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Key",
          "description": "Key of the content item to fetch, usually formatted as a path, e.g. images/a.png",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "HttpMethod",
          "description": "HTTP method to fetch item - GET or HEAD. Use HEAD when only fetching metadata. Default is GET.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ThruCDN",
          "description": "True if download through CDN. CDN provides better download bandwidth and time. However, if you want latest, non-cached version of the content, set this to false. Default is true.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "GetContentDownloadUrlResult": {
      "name": "GetContentDownloadUrlResult",
      "classNameSpace": "PlayFab.WebAPIModels.Content",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "URL",
          "description": "URL for downloading content via HTTP GET or HEAD method. The URL will expire in 1 hour.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetFriendLeaderboardRequest": {
      "name": "GetFriendLeaderboardRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "The player whose friend leaderboard to get",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "StatisticName",
          "description": "Statistic used to rank friends for this leaderboard.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "StartPosition",
          "description": "Position in the leaderboard to start this listing (defaults to the first entry).",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "MaxResultsCount",
          "description": "Maximum number of entries to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "IncludeSteamFriends",
          "description": "Indicates whether Steam service friends should be included in the response. Default is true.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "IncludeFacebookFriends",
          "description": "Indicates whether Facebook friends should be included in the response. Default is true.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "GetFriendsListRequest": {
      "name": "GetFriendsListRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab identifier of the player whose friend list to get.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "IncludeSteamFriends",
          "description": "Indicates whether Steam service friends should be included in the response. Default is true.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "IncludeFacebookFriends",
          "description": "Indicates whether Facebook friends should be included in the response. Default is true.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "GetFriendsListResult": {
      "name": "GetFriendsListResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Friends",
          "description": "Array of friends found.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "FriendInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetLeaderboardAroundCharacterRequest": {
      "name": "GetLeaderboardAroundCharacterRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "StatisticName",
          "description": "Unique identifier for the title-specific statistic for the leaderboard.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CharacterType",
          "description": "Optional character type on which to filter the leaderboard entries.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MaxResultsCount",
          "description": "Maximum number of entries to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "GetLeaderboardAroundCharacterResult": {
      "name": "GetLeaderboardAroundCharacterResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Leaderboard",
          "description": "Ordered list of leaderboard entries.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CharacterLeaderboardEntry",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetLeaderboardAroundUserRequest": {
      "name": "GetLeaderboardAroundUserRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "StatisticName",
          "description": "Unique identifier for the title-specific statistic for the leaderboard.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "MaxResultsCount",
          "description": "Maximum number of entries to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "GetLeaderboardAroundUserResult": {
      "name": "GetLeaderboardAroundUserResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Leaderboard",
          "description": "Ordered list of leaderboard entries.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PlayerLeaderboardEntry",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetLeaderboardForUsersCharactersRequest": {
      "name": "GetLeaderboardForUsersCharactersRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "StatisticName",
          "description": "Unique identifier for the title-specific statistic for the leaderboard.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "MaxResultsCount",
          "description": "Maximum number of entries to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "GetLeaderboardForUsersCharactersResult": {
      "name": "GetLeaderboardForUsersCharactersResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Leaderboard",
          "description": "Ordered list of leaderboard entries.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CharacterLeaderboardEntry",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetLeaderboardRequest": {
      "name": "GetLeaderboardRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "StatisticName",
          "description": "Unique identifier for the title-specific statistic for the leaderboard.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "StartPosition",
          "description": "First entry in the leaderboard to be retrieved.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "MaxResultsCount",
          "description": "Maximum number of entries to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "GetLeaderboardResult": {
      "name": "GetLeaderboardResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Leaderboard",
          "description": "Ordered list of leaderboard entries.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PlayerLeaderboardEntry",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetPlayerStatisticsRequest": {
      "name": "GetPlayerStatisticsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "user for whom statistics are being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "StatisticNames",
          "description": "statistics to return",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetPlayerStatisticsResult": {
      "name": "GetPlayerStatisticsResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose statistics are being returned",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Statistics",
          "description": "User statistics for the requested user.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "StatisticValue",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetPlayFabIDsFromFacebookIDsRequest": {
      "name": "GetPlayFabIDsFromFacebookIDsRequest",
      "classNameSpace": "PlayFab.WebAPIModels",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "FacebookIDs",
          "description": "Array of unique Facebook identifiers for which the title needs to get PlayFab identifiers.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetPlayFabIDsFromFacebookIDsResult": {
      "name": "GetPlayFabIDsFromFacebookIDsResult",
      "classNameSpace": "PlayFab.WebAPIModels",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Data",
          "description": "Mapping of Facebook identifiers to PlayFab identifiers.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "FacebookPlayFabIdPair",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetPublisherDataRequest": {
      "name": "GetPublisherDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.PublisherData",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Keys",
          "description": " array of keys to get back data from the Publisher data blob, set by the admin tools",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetPublisherDataResult": {
      "name": "GetPublisherDataResult",
      "classNameSpace": "PlayFab.WebAPIModels.PublisherData",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Data",
          "description": "a dictionary object of key / value pairs",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetSharedGroupDataRequest": {
      "name": "GetSharedGroupDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SharedGroupId",
          "description": "Unique identifier for the shared group.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Keys",
          "description": "Specific keys to retrieve from the shared group (if not specified, all keys will be returned, while an empty array indicates that no keys should be returned).",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GetMembers",
          "description": "If true, return the list of all members of the shared group.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "GetSharedGroupDataResult": {
      "name": "GetSharedGroupDataResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Data",
          "description": "Data for the requested keys.",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "SharedGroupDataRecord",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Members",
          "description": "List of PlayFabId identifiers for the members of this group, if requested.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetTitleDataRequest": {
      "name": "GetTitleDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.TitleData",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Keys",
          "description": "Specific keys to search for in the title data (leave null to get all keys)",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetTitleDataResult": {
      "name": "GetTitleDataResult",
      "classNameSpace": "PlayFab.WebAPIModels.TitleData",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Data",
          "description": "a dictionary object of key / value pairs",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetTitleNewsRequest": {
      "name": "GetTitleNewsRequest",
      "classNameSpace": "PlayFab.WebAPIModels",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Count",
          "description": "Limits the results to the last n entries. Defaults to 10 if not set.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "GetTitleNewsResult": {
      "name": "GetTitleNewsResult",
      "classNameSpace": "PlayFab.WebAPIModels",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "News",
          "description": "Array of news items.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "TitleNewsItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetUserAccountInfoRequest": {
      "name": "GetUserAccountInfoRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetUserAccountInfoResult": {
      "name": "GetUserAccountInfoResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "UserInfo",
          "description": "Account info for the user whose information was requested.",
          "jsontype": "Object",
          "actualtype": "UserAccountInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetUserDataRequest": {
      "name": "GetUserDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Keys",
          "description": "Specific keys to search for in the custom user data.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "IfChangedFromDataVersion",
          "description": "The version that currently exists according to the caller. The call will return the data for all of the keys if the version in the system is greater than this.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "GetUserDataResult": {
      "name": "GetUserDataResult",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose custom data is being returned.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DataVersion",
          "description": "Indicates the current version of the data that has been set. This is incremented with every set call for that type of data (read-only, internal, etc). This version can be provided in Get calls to find updated data.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "Data",
          "description": "User specific data for this title.",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "UserDataRecord",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetUserInventoryRequest": {
      "name": "GetUserInventoryRequest",
      "classNameSpace": "PlayFab.WebAPIModels.Inventory",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetUserInventoryResult": {
      "name": "GetUserInventoryResult",
      "classNameSpace": "PlayFab.WebAPIModels.Inventory",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose inventory is being returned.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Inventory",
          "description": "Array of inventory items belonging to the user.",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "Array of virtual currency balance(s) belonging to the user.",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "VirtualCurrencyRechargeTimes",
          "description": "Array of remaining times and timestamps for virtual currencies.",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "VirtualCurrencyRechargeTime",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetUserStatisticsRequest": {
      "name": "GetUserStatisticsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "User for whom statistics are being requested.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetUserStatisticsResult": {
      "name": "GetUserStatisticsResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose statistics are being returned.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UserStatistics",
          "description": "User statistics for the requested user.",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "GrantCharacterToUserRequest": {
      "name": "GrantCharacterToUserRequest",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CharacterName",
          "description": "Non-unique display name of the character being granted.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CharacterType",
          "description": "Type of the character being granted; statistics can be sliced based on this value.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GrantCharacterToUserResult": {
      "name": "GrantCharacterToUserResult",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CharacterId",
          "description": "Unique identifier tagged to this character.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GrantedItemInstance": {
      "name": "GrantedItemInstance",
      "classNameSpace": "PlayFab.WebAPIModels.Inventory",
      "assembly": "WebAPIModels",
      "description": "Result of granting an item to a user",
      "sortKey": "ItemInstanceId",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Result",
          "description": "Result of this operation.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "ItemId",
          "description": "Unique identifier for the inventory item, as defined in the catalog.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemInstanceId",
          "description": "Unique item identifier for this specific instance of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemClass",
          "description": "Class name for the inventory item, as defined in the catalog.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchaseDate",
          "description": "Timestamp for when this instance was purchased.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Expiration",
          "description": "Timestamp for when this instance will expire.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "RemainingUses",
          "description": "Total number of remaining uses, if this is a consumable item.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "UsesIncrementedBy",
          "description": "The number of uses that were added or removed to this item in this call.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Annotation",
          "description": "Game specific comment associated with this instance when it was added to the user inventory.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "Catalog version for the inventory item, when this instance was created.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundleParent",
          "description": "Unique identifier for the parent inventory item, as defined in the catalog, for object which were added from a bundle or container.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UnitCurrency",
          "description": "Currency type for the cost of the catalog item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UnitPrice",
          "description": "Cost of the catalog item in the given currency.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "BundleContents",
          "description": "Array of unique items that were awarded when this catalog item was purchased.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomData",
          "description": "A set of custom key-value pairs on the inventory item.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GrantItemsToCharacterRequest": {
      "name": "GrantItemsToCharacterRequest",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "Catalog version from which items are to be granted.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Annotation",
          "description": "String detailing any additional information concerning this operation.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemIds",
          "description": "Array of itemIds to grant to the user.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GrantItemsToCharacterResult": {
      "name": "GrantItemsToCharacterResult",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "ItemGrantResults",
          "description": "Array of items granted to users.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "GrantedItemInstance",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GrantItemsToUserRequest": {
      "name": "GrantItemsToUserRequest",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "Catalog version from which items are to be granted.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Annotation",
          "description": "String detailing any additional information concerning this operation.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemIds",
          "description": "Array of itemIds to grant to the user.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GrantItemsToUserResult": {
      "name": "GrantItemsToUserResult",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "ItemGrantResults",
          "description": "Array of items granted to users.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "GrantedItemInstance",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GrantItemsToUsersRequest": {
      "name": "GrantItemsToUsersRequest",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "Catalog version from which items are to be granted.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemGrants",
          "description": "Array of items to grant and the users to whom the items are to be granted.",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "ItemGrant",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "GrantItemsToUsersResult": {
      "name": "GrantItemsToUsersResult",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "ItemGrantResults",
          "description": "Array of items granted to users.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "GrantedItemInstance",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "ItemGrant": {
      "name": "ItemGrant",
      "classNameSpace": "PlayFab.WebAPIModels.Inventory",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemId",
          "description": "Unique identifier of the catalog item to be granted to the user.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Annotation",
          "description": "String detailing any additional information concerning this operation.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ItemInstance": {
      "name": "ItemInstance",
      "classNameSpace": "PlayFab.WebAPIModels.Inventory",
      "assembly": "WebAPIModels",
      "description": "A unique instance of an item in a user's inventory",
      "sortKey": "ItemInstanceId",
      "properties": [
        {
          "name": "ItemId",
          "description": "Unique identifier for the inventory item, as defined in the catalog.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemInstanceId",
          "description": "Unique item identifier for this specific instance of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemClass",
          "description": "Class name for the inventory item, as defined in the catalog.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchaseDate",
          "description": "Timestamp for when this instance was purchased.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Expiration",
          "description": "Timestamp for when this instance will expire.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "RemainingUses",
          "description": "Total number of remaining uses, if this is a consumable item.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "UsesIncrementedBy",
          "description": "The number of uses that were added or removed to this item in this call.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Annotation",
          "description": "Game specific comment associated with this instance when it was added to the user inventory.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "Catalog version for the inventory item, when this instance was created.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundleParent",
          "description": "Unique identifier for the parent inventory item, as defined in the catalog, for object which were added from a bundle or container.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UnitCurrency",
          "description": "Currency type for the cost of the catalog item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UnitPrice",
          "description": "Cost of the catalog item in the given currency.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "BundleContents",
          "description": "Array of unique items that were awarded when this catalog item was purchased.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomData",
          "description": "A set of custom key-value pairs on the inventory item.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ListUsersCharactersRequest": {
      "name": "ListUsersCharactersRequest",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "ListUsersCharactersResult": {
      "name": "ListUsersCharactersResult",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Characters",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CharacterResult",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "LogEventRequest": {
      "name": "LogEventRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab User Id of the player associated with this event. For non-player associated events, this must be null and EntityId must be set.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "EntityId",
          "description": "For non player-associated events, a unique ID for the entity associated with this event. For player associated events, this must be null and PlayFabId must be set.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "EntityType",
          "description": "For non player-associated events, the type of entity associated with this event. For player associated events, this must be null.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Timestamp",
          "description": "Optional timestamp for this event. If null, the a timestamp is auto-assigned to the event on the server.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "EventName",
          "description": "A unique event name which will be used as the table name in the Redshift database. The name will be made lower case, and cannot not contain spaces. The use of underscores is recommended, for readability. Events also cannot match reserved terms. The PlayFab reserved terms are 'log_in' and 'purchase', 'create' and 'request', while the Redshift reserved terms can be found here: http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Body",
          "description": "Contains all the data for this event. Event Values can be strings, booleans or numerics (float, double, integer, long) and must be consistent on a per-event basis (if the Value for Key 'A' in Event 'Foo' is an integer the first time it is sent, it must be an integer in all subsequent 'Foo' events). As with event names, Keys must also not use reserved words (see above). Finally, the size of the Body for an event must be less than 32KB (UTF-8 format).",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "object",
          "optional": true
        },
        {
          "name": "ProfileSetEvent",
          "description": "Flag to set event Body as profile details in the Redshift database as well as a standard event.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "LogEventResult": {
      "name": "LogEventResult",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "ModifyCharacterVirtualCurrencyResult": {
      "name": "ModifyCharacterVirtualCurrencyResult",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "VirtualCurrency",
          "description": "Name of the virtual currency which was modified.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Balance",
          "description": "Balance of the virtual currency after modification.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "ModifyItemUsesRequest": {
      "name": "ModifyItemUsesRequest",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose item is being modified.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemInstanceId",
          "description": "Unique instance identifier of the item to be modified.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "UsesToAdd",
          "description": "Number of uses to add to the item. Can be negative to remove uses.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "ModifyItemUsesResult": {
      "name": "ModifyItemUsesResult",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "ItemInstanceId",
          "description": "Unique instance identifier of the item with uses consumed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "RemainingUses",
          "description": "Number of uses remaining on the item.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "ModifyUserVirtualCurrencyResult": {
      "name": "ModifyUserVirtualCurrencyResult",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "User currency was subtracted from.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "Name of the virtual currency which was modified.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BalanceChange",
          "description": "Amount added or subtracted from the user's virtual currency. Maximum VC balance is Int32 (2,147,483,647). Any increase over this value will be discarded.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "Balance",
          "description": "Balance of the virtual currency after modification.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "MoveItemToCharacterFromCharacterRequest": {
      "name": "MoveItemToCharacterFromCharacterRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "GivingCharacterId",
          "description": "Unique identifier of the character that currently has the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ReceivingCharacterId",
          "description": "Unique identifier of the character that will be receiving the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemInstanceId",
          "description": "Unique PlayFab assigned instance identifier of the item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "MoveItemToCharacterFromCharacterResult": {
      "name": "MoveItemToCharacterFromCharacterResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "MoveItemToCharacterFromUserRequest": {
      "name": "MoveItemToCharacterFromUserRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemInstanceId",
          "description": "Unique PlayFab assigned instance identifier of the item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "MoveItemToCharacterFromUserResult": {
      "name": "MoveItemToCharacterFromUserResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "MoveItemToUserFromCharacterRequest": {
      "name": "MoveItemToUserFromCharacterRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemInstanceId",
          "description": "Unique PlayFab assigned instance identifier of the item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "MoveItemToUserFromCharacterResult": {
      "name": "MoveItemToUserFromCharacterResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "NotifyMatchmakerPlayerLeftRequest": {
      "name": "NotifyMatchmakerPlayerLeftRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "LobbyId",
          "description": "Unique identifier of the Game Instance the user is leaving.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "NotifyMatchmakerPlayerLeftResult": {
      "name": "NotifyMatchmakerPlayerLeftResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayerState",
          "description": "State of user leaving the Game Server Instance.",
          "jsontype": "String",
          "actualtype": "PlayerConnectionState",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "PlayerConnectionState": {
      "name": "PlayerConnectionState",
      "classNameSpace": "PlayFab.DataModel",
      "assembly": "DataModel",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Unassigned"
        },
        {
          "name": "Connecting"
        },
        {
          "name": "Participating"
        },
        {
          "name": "Participated"
        },
        {
          "name": "Reconnecting"
        }
      ]
    },
    "PlayerLeaderboardEntry": {
      "name": "PlayerLeaderboardEntry",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user for this leaderboard entry.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "Title-specific display name of the user for this leaderboard entry.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "StatValue",
          "description": "Specific value of the user's statistic.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "Position",
          "description": "User's overall position in the leaderboard.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "RedeemCouponRequest": {
      "name": "RedeemCouponRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CouponCode",
          "description": "Generated coupon code to redeem.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "Catalog version of the coupon.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RedeemCouponResult": {
      "name": "RedeemCouponResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "GrantedItems",
          "description": "Items granted to the player as a result of redeeming the coupon.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "RedeemMatchmakerTicketRequest": {
      "name": "RedeemMatchmakerTicketRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Ticket",
          "description": "Server authorization ticket passed back from a call to Matchmake or StartGame.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "LobbyId",
          "description": "Unique identifier of the Game Server Instance that is asking for validation of the authorization ticket.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "RedeemMatchmakerTicketResult": {
      "name": "RedeemMatchmakerTicketResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "TicketIsValid",
          "description": "Boolean indicating whether the ticket was validated by the PlayFab service.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Error",
          "description": "Error value if the ticket was not validated.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UserInfo",
          "description": "User account information for the user validated.",
          "jsontype": "Object",
          "actualtype": "UserAccountInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "RemoveFriendRequest": {
      "name": "RemoveFriendRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "FriendPlayFabId",
          "description": "PlayFab identifier of the friend account which is to be removed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "RemoveSharedGroupMembersRequest": {
      "name": "RemoveSharedGroupMembersRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SharedGroupId",
          "description": "Unique identifier for the shared group.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PlayFabIds",
          "description": "An array of unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RemoveSharedGroupMembersResult": {
      "name": "RemoveSharedGroupMembersResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "ReportPlayerServerRequest": {
      "name": "ReportPlayerServerRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "ReporterId",
          "description": "PlayFabId of the reporting player.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ReporteeId",
          "description": "PlayFabId of the reported player.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "TitleId",
          "description": "Title player was reported in, optional if report not for specific title.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Comment",
          "description": "Optional additional comment by reporting player.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ReportPlayerServerResult": {
      "name": "ReportPlayerServerResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Updated",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "SubmissionsRemaining",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "SendPushNotificationRequest": {
      "name": "SendPushNotificationRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Recipient",
          "description": "PlayFabId of the recipient of the push notification.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Message",
          "description": "Text of message to send.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Subject",
          "description": "Subject of message to send (may not be displayed in all platforms.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "SendPushNotificationResult": {
      "name": "SendPushNotificationResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "SetPublisherDataRequest": {
      "name": "SetPublisherDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.PublisherData",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Key",
          "description": "key we want to set a value on (note, this is additive - will only replace an existing key's value if they are the same name.) Keys are trimmed of whitespace. Keys may not begin with the '!' character.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Value",
          "description": "new value to set. Set to null to remove a value",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "SetPublisherDataResult": {
      "name": "SetPublisherDataResult",
      "classNameSpace": "PlayFab.WebAPIModels.PublisherData",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "SetTitleDataRequest": {
      "name": "SetTitleDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.TitleData",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Key",
          "description": "key we want to set a value on (note, this is additive - will only replace an existing key's value if they are the same name.) Keys are trimmed of whitespace. Keys may not begin with the '!' character.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Value",
          "description": "new value to set. Set to null to remove a value",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "SetTitleDataResult": {
      "name": "SetTitleDataResult",
      "classNameSpace": "PlayFab.WebAPIModels.TitleData",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "SharedGroupDataRecord": {
      "name": "SharedGroupDataRecord",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Value",
          "description": "Data stored for the specified group data key.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "LastUpdatedBy",
          "description": "PlayFabId of the user to last update this value.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "LastUpdated",
          "description": "Timestamp for when this data was last updated.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Permission",
          "description": "Indicates whether this data can be read by all users (public) or only members of the group (private).",
          "jsontype": "String",
          "actualtype": "UserDataPermission",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "StatisticUpdate": {
      "name": "StatisticUpdate",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "StatisticName",
          "description": "unique name of the statistic",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Version",
          "description": "for updates to an existing statistic value for a player, the version of the statistic when it was loaded. Null when setting the statistic value for the first time.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Value",
          "description": "statistic value for the player",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "StatisticValue": {
      "name": "StatisticValue",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "StatisticName",
          "description": "unique name of the statistic",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Value",
          "description": "statistic value for the player",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "Version",
          "description": "for updates to an existing statistic value for a player, the version of the statistic when it was loaded",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "SubtractCharacterVirtualCurrencyRequest": {
      "name": "SubtractCharacterVirtualCurrencyRequest",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "VirtualCurrency",
          "description": "Name of the virtual currency which is to be decremented.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Amount",
          "description": "Amount to be subtracted from the user balance of the specified virtual currency.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "SubtractUserVirtualCurrencyRequest": {
      "name": "SubtractUserVirtualCurrencyRequest",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose virtual currency balance is to be decreased.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "VirtualCurrency",
          "description": "Name of the virtual currency which is to be decremented.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Amount",
          "description": "Amount to be subtracted from the user balance of the specified virtual currency.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "TitleActivationStatus": {
      "name": "TitleActivationStatus",
      "classNameSpace": "PlayFab.DataModel",
      "assembly": "DataModel",
      "isenum": true,
      "enumvalues": [
        {
          "name": "None"
        },
        {
          "name": "ActivatedTitleKey"
        },
        {
          "name": "PendingSteam"
        },
        {
          "name": "ActivatedSteam"
        },
        {
          "name": "RevokedSteam"
        }
      ]
    },
    "TitleNewsItem": {
      "name": "TitleNewsItem",
      "classNameSpace": "PlayFab.WebAPIModels",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Timestamp",
          "description": "Date and time when the news items was posted.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "NewsId",
          "description": "Unique identifier of news item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Title",
          "description": "Title of the news item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Body",
          "description": "News item text.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UpdateCharacterDataRequest": {
      "name": "UpdateCharacterDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Data",
          "description": "Key-value pairs to be written to the custom data. Note that keys are trimmed of whitespace, are limited in size, and may not begin with a '!' character.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "KeysToRemove",
          "description": "Optional list of Data-keys to remove from UserData.  Some SDKs cannot insert null-values into Data due to language constraints.  Use this to delete the keys directly.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Permission",
          "description": "Permission to be applied to all user data keys written in this request. Defaults to \"private\" if not set.",
          "jsontype": "String",
          "actualtype": "UserDataPermission",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UpdateCharacterDataResult": {
      "name": "UpdateCharacterDataResult",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "DataVersion",
          "description": "Indicates the current version of the data that has been set. This is incremented with every set call for that type of data (read-only, internal, etc). This version can be provided in Get calls to find updated data.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        }
      ]
    },
    "UpdateCharacterStatisticsRequest": {
      "name": "UpdateCharacterStatisticsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CharacterStatistics",
          "description": "Statistics to be updated with the provided values.",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "UpdateCharacterStatisticsResult": {
      "name": "UpdateCharacterStatisticsResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UpdatePlayerStatisticsRequest": {
      "name": "UpdatePlayerStatisticsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Statistics",
          "description": "Statistics to be updated with the provided values",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "StatisticUpdate",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UpdatePlayerStatisticsResult": {
      "name": "UpdatePlayerStatisticsResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UpdateSharedGroupDataRequest": {
      "name": "UpdateSharedGroupDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SharedGroupId",
          "description": "Unique identifier for the shared group.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Data",
          "description": "Key-value pairs to be written to the custom data. Note that keys are trimmed of whitespace, are limited in size, and may not begin with a '!' character.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "KeysToRemove",
          "description": "Optional list of Data-keys to remove from UserData.  Some SDKs cannot insert null-values into Data due to language constraints.  Use this to delete the keys directly.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Permission",
          "description": "Permission to be applied to all user data keys in this request.",
          "jsontype": "String",
          "actualtype": "UserDataPermission",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UpdateSharedGroupDataResult": {
      "name": "UpdateSharedGroupDataResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UpdateUserDataRequest": {
      "name": "UpdateUserDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Data",
          "description": "Key-value pairs to be written to the custom data. Note that keys are trimmed of whitespace, are limited in size, and may not begin with a '!' character.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "KeysToRemove",
          "description": "Optional list of Data-keys to remove from UserData.  Some SDKs cannot insert null-values into Data due to language constraints.  Use this to delete the keys directly.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Permission",
          "description": "Permission to be applied to all user data keys written in this request. Defaults to \"private\" if not set.",
          "jsontype": "String",
          "actualtype": "UserDataPermission",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UpdateUserDataResult": {
      "name": "UpdateUserDataResult",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "DataVersion",
          "description": "Indicates the current version of the data that has been set. This is incremented with every set call for that type of data (read-only, internal, etc). This version can be provided in Get calls to find updated data.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        }
      ]
    },
    "UpdateUserInternalDataRequest": {
      "name": "UpdateUserInternalDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Data",
          "description": "Key-value pairs to be written to the custom data. Note that keys are trimmed of whitespace, are limited in size, and may not begin with a '!' character.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "KeysToRemove",
          "description": "Optional list of Data-keys to remove from UserData.  Some SDKs cannot insert null-values into Data due to language constraints.  Use this to delete the keys directly.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UpdateUserInventoryItemDataRequest": {
      "name": "UpdateUserInventoryItemDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.Inventory",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemInstanceId",
          "description": "Unique PlayFab assigned instance identifier of the item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Data",
          "description": "Key-value pairs to be written to the custom data. Note that keys are trimmed of whitespace, are limited in size, and may not begin with a '!' character.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "KeysToRemove",
          "description": "Optional list of Data-keys to remove from UserData.  Some SDKs cannot insert null-values into Data due to language constraints.  Use this to delete the keys directly.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UpdateUserInventoryItemDataResult": {
      "name": "UpdateUserInventoryItemDataResult",
      "classNameSpace": "PlayFab.WebAPIModels.Inventory",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UpdateUserStatisticsRequest": {
      "name": "UpdateUserStatisticsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "UserStatistics",
          "description": "Statistics to be updated with the provided values.",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "UpdateUserStatisticsResult": {
      "name": "UpdateUserStatisticsResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UserAccountInfo": {
      "name": "UserAccountInfo",
      "classNameSpace": "PlayFab.WebAPIModels.UserInfo",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "unique identifier for the user account",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Created",
          "description": "timestamp indicating when the user account was created",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Username",
          "description": "user account name in the PlayFab service",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TitleInfo",
          "description": "title-specific information for the user account",
          "jsontype": "Object",
          "actualtype": "UserTitleInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PrivateInfo",
          "description": "personal information for the user which is considered more sensitive",
          "jsontype": "Object",
          "actualtype": "UserPrivateAccountInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "FacebookInfo",
          "description": "user Facebook information, if a Facebook account has been linked",
          "jsontype": "Object",
          "actualtype": "UserFacebookInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SteamInfo",
          "description": "user Steam information, if a Steam account has been linked",
          "jsontype": "Object",
          "actualtype": "UserSteamInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "GameCenterInfo",
          "description": "user Gamecenter information, if a Gamecenter account has been linked",
          "jsontype": "Object",
          "actualtype": "UserGameCenterInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UserDataPermission": {
      "name": "UserDataPermission",
      "classNameSpace": "PlayFab.DataModel",
      "assembly": "DataModel",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Private"
        },
        {
          "name": "Public"
        }
      ]
    },
    "UserDataRecord": {
      "name": "UserDataRecord",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Value",
          "description": "User-supplied data for this user data key.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "LastUpdated",
          "description": "Timestamp indicating when this data was last updated.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Permission",
          "description": "Permissions on this data key.",
          "jsontype": "String",
          "actualtype": "UserDataPermission",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UserFacebookInfo": {
      "name": "UserFacebookInfo",
      "classNameSpace": "PlayFab.WebAPIModels.UserInfo",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "FacebookId",
          "description": "Facebook identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FullName",
          "description": "Facebook full name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserGameCenterInfo": {
      "name": "UserGameCenterInfo",
      "classNameSpace": "PlayFab.WebAPIModels.UserInfo",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "GameCenterId",
          "description": "Gamecenter identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserOrigination": {
      "name": "UserOrigination",
      "classNameSpace": "PlayFab.DataModel",
      "assembly": "DataModel",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Organic"
        },
        {
          "name": "Steam"
        },
        {
          "name": "Google"
        },
        {
          "name": "Amazon"
        },
        {
          "name": "Facebook"
        },
        {
          "name": "Kongregate"
        },
        {
          "name": "GamersFirst"
        },
        {
          "name": "Unknown"
        },
        {
          "name": "IOS"
        },
        {
          "name": "LoadTest"
        },
        {
          "name": "Android"
        },
        {
          "name": "PSN"
        },
        {
          "name": "GameCenter"
        },
        {
          "name": "CustomId"
        },
        {
          "name": "XboxLive"
        }
      ]
    },
    "UserPrivateAccountInfo": {
      "name": "UserPrivateAccountInfo",
      "classNameSpace": "PlayFab.WebAPIModels.UserInfo",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Email",
          "description": "user email address",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserSteamInfo": {
      "name": "UserSteamInfo",
      "classNameSpace": "PlayFab.WebAPIModels.UserInfo",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SteamId",
          "description": "Steam identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SteamCountry",
          "description": "the country in which the player resides, from Steam data",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SteamCurrency",
          "description": "currency type set in the user Steam account",
          "jsontype": "String",
          "actualtype": "Currency",
          "isenum": true,
          "optional": true
        },
        {
          "name": "SteamActivationStatus",
          "description": "what stage of game ownership the user is listed as being in, from Steam",
          "jsontype": "String",
          "actualtype": "TitleActivationStatus",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UserTitleInfo": {
      "name": "UserTitleInfo",
      "classNameSpace": "PlayFab.WebAPIModels.UserInfo",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "DisplayName",
          "description": "name of the user, as it is displayed in-game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Origination",
          "description": "source by which the user first joined the game, if known",
          "jsontype": "String",
          "actualtype": "UserOrigination",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Created",
          "description": "timestamp indicating when the user was first associated with this game (this can differ significantly from when the user first registered with PlayFab)",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "LastLogin",
          "description": "timestamp for the last user login for this title",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "FirstLogin",
          "description": "timestamp indicating when the user first signed into this game (this can differ from the Created timestamp, as other events, such as issuing a beta key to the user, can associate the title to the user)",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "isBanned",
          "description": "boolean indicating whether or not the user is currently banned for a title",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "VirtualCurrencyRechargeTime": {
      "name": "VirtualCurrencyRechargeTime",
      "classNameSpace": "PlayFab.WebAPIModels.Inventory",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SecondsToRecharge",
          "description": "Time remaining (in seconds) before the next recharge increment of the virtual currency.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "RechargeTime",
          "description": "Server timestamp in UTC indicating the next time the virtual currency will be incremented.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "RechargeMax",
          "description": "Maximum value to which the regenerating currency will automatically increment. Note that it can exceed this value through use of the AddUserVirtualCurrency API call. However, it will not regenerate automatically until it has fallen below this value.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    }
  },
  "calls": [
    {
      "name": "AuthenticateSessionTicket",
      "summary": "Validated a client's session ticket, and if successful, returns details for that user",
      "requestDetails": "Note that data returned may be Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for users who have accessed the title, the recommendation is to not store this data locally.",
      "subgroup": "Authentication",
      "titleTiers": null,
      "url": "/Server/AuthenticateSessionTicket",
      "auth": "SecretKey",
      "method": "POST",
      "request": "AuthenticateSessionTicketRequest",
      "requestExample": "{\r\n  \"SessionTicket\": \"4D2----8D11F4249A80000-7C64AB0A9F1D8D1A.CD803BF233CE76CC\"\r\n}",
      "result": "AuthenticateSessionTicketResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"UserInfo\": {\r\n      \"PlayFabId\": \"10931252888739651331\",\r\n      \"Created\": \"0001-01-01T00:00:00Z\",\r\n      \"Username\": \"accountname\"\r\n    }\r\n  }\r\n}",
      "errors": [
        "InvalidParams",
        "InvalidSessionTicket"
      ]
    },
    {
      "name": "GetPlayFabIDsFromFacebookIDs",
      "summary": "Retrieves the unique PlayFab identifiers for the given set of Facebook identifiers.",
      "resultDetails": "For Facebook identifiers which have not been linked to PlayFab accounts, null will be returned.",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Server/GetPlayFabIDsFromFacebookIDs",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetPlayFabIDsFromFacebookIDsRequest",
      "requestExample": "{\r\n  \"FacebookIDs\": [\r\n    \"857498576495\",\r\n    \"759374651209\"\r\n  ]\r\n}",
      "result": "GetPlayFabIDsFromFacebookIDsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Data\": [\r\n      {\r\n        \"FacebookId\": \"857498576495\",\r\n        \"PlayFabId\": \"5a446c83645201\"\r\n      },\r\n      {\r\n        \"FacebookId\": \"759374651209\",\r\n        \"PlayFabId\": \"6345cd25a6c7cc\"\r\n      }\r\n    ]\r\n  }\r\n}",
      "errors": [
        "AccountNotFound"
      ]
    },
    {
      "name": "GetUserAccountInfo",
      "summary": "Retrieves the relevant details for a specified user",
      "requestDetails": "This API allows for access to details regarding a user in the PlayFab service, usually for purposes of customer support. Note that data returned may be Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for users who have accessed the title, the recommendation is to not store this data locally.",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Server/GetUserAccountInfo",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserAccountInfoRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"10931252888739651331\"\r\n}",
      "result": "GetUserAccountInfoResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"UserInfo\": {\r\n      \"PlayFabId\": \"10931252888739651331\",\r\n      \"Created\": \"0001-01-01T00:00:00Z\",\r\n      \"Username\": \"accountname\"\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "GetUserInventory"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "SendPushNotification",
      "summary": "Sends an iOS/Android Push Notification to a specific user, if that user's device has been configured for Push Notifications in PlayFab. If a user has linked both Android and iOS devices, both will be notified.",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Server/SendPushNotification",
      "auth": "SecretKey",
      "method": "POST",
      "request": "SendPushNotificationRequest",
      "requestExample": "{\r\n  \"Recipient\": \"F8763A987E\",\r\n  \"Message\": \"You have been attacked! Go defend your base!\"\r\n}",
      "result": "SendPushNotificationResult",
      "resultExample": "",
      "errors": [
        "InvalidParams",
        "PushNotEnabledForAccount",
        "PushServiceError"
      ]
    },
    {
      "name": "DeleteUsers",
      "summary": "Deletes the users for the provided game. Deletes custom data, all account linkages, and statistics.",
      "requestDetails": "Note that this action cannot be undone. It will unlink all accounts and remove all PII information, as well as                              reset any statistics and leaderboards and clear out any stored custom data for the user.                               This API must be enabled for use as an option in the game manager website. It is disabled by default.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Server/DeleteUsers",
      "auth": "SecretKey",
      "method": "POST",
      "request": "DeleteUsersRequest",
      "requestExample": "",
      "result": "DeleteUsersResult",
      "resultExample": "",
      "errors": [
        "InvalidParams",
        "AccountNotFound",
        "APINotEnabledForGameServerAccess"
      ]
    },
    {
      "name": "GetLeaderboard",
      "summary": "Retrieves a list of ranked users for the given statistic, starting from the indicated point in the leaderboard",
      "resultDetails": "Note that the Position of the user in the results is for the overall leaderboard.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Server/GetLeaderboard",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetLeaderboardRequest",
      "requestExample": "{\r\n  \"StatisticName\": \"Kills\",\r\n  \"StartPosition\": 0,\r\n  \"MaxResultsCount\": 20\r\n}",
      "result": "GetLeaderboardResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Leaderboard\": [\r\n      {\r\n        \"PlayFabId\": \"10931252888739651331\",\r\n        \"DisplayName\": \"username\",\r\n        \"StatValue\": 12,\r\n        \"Position\": 0\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "GetLeaderboardAroundUser",
        "GetUserStatistics",
        "UpdateUserStatistics"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetLeaderboardAroundUser",
      "summary": "Retrieves a list of ranked users for the given statistic, centered on the currently signed-in user",
      "resultDetails": "Note that the Position of the user in the results is for the overall leaderboard.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Server/GetLeaderboardAroundUser",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetLeaderboardAroundUserRequest",
      "requestExample": "{\r\n  \"StatisticName\": \"Kills\",\r\n  \"PlayFabId\": \"10931252888739651331\",\r\n  \"MaxResultsCount\": 20\r\n}",
      "result": "GetLeaderboardAroundUserResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Leaderboard\": [\r\n      {\r\n        \"PlayFabId\": \"10931252888739651331\",\r\n        \"DisplayName\": \"username\",\r\n        \"StatValue\": 12,\r\n        \"Position\": 0\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "GetLeaderboard",
        "GetUserStatistics",
        "UpdateUserStatistics"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "GetUserData",
      "summary": "Retrieves the title-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Server/GetUserData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"Keys\": [\r\n    \"preferences\",\r\n    \"progress\"\r\n  ],\r\n  \"IfChangedFromDataVersion\": 13\r\n}",
      "result": "GetUserDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"2039475\",\r\n    \"DataVersion\": 12,\r\n    \"Data\": {\r\n      \"preferences\": {\r\n        \"Value\": \"alpha\",\r\n        \"LastUpdated\": \"2014-08-20T12:30:45Z\",\r\n        \"Permission\": \"Public\"\r\n      },\r\n      \"progress\": {\r\n        \"Value\": \"level_twenty\",\r\n        \"LastUpdated\": \"2014-09-01T10:12:30Z\",\r\n        \"Permission\": \"Private\"\r\n      }\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "UpdateUserData",
        "GetUserReadOnlyData",
        "UpdateUserReadOnlyData",
        "GetUserInternalData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserInternalData",
      "summary": "Retrieves the title-specific custom data for the user which cannot be accessed by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Server/GetUserInternalData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"Keys\": [\r\n    \"preferences\",\r\n    \"progress\"\r\n  ],\r\n  \"IfChangedFromDataVersion\": 13\r\n}",
      "result": "GetUserDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"2039475\",\r\n    \"DataVersion\": 12,\r\n    \"Data\": {\r\n      \"preferences\": {\r\n        \"Value\": \"alpha\",\r\n        \"LastUpdated\": \"2014-08-20T12:30:45Z\",\r\n        \"Permission\": \"Public\"\r\n      },\r\n      \"progress\": {\r\n        \"Value\": \"level_twenty\",\r\n        \"LastUpdated\": \"2014-09-01T10:12:30Z\",\r\n        \"Permission\": \"Private\"\r\n      }\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData",
        "GetUserReadOnlyData",
        "UpdateUserReadOnlyData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserPublisherData",
      "summary": "Retrieves the publisher-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Server/GetUserPublisherData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"Keys\": [\r\n    \"preferences\",\r\n    \"progress\"\r\n  ],\r\n  \"IfChangedFromDataVersion\": 13\r\n}",
      "result": "GetUserDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"2039475\",\r\n    \"DataVersion\": 12,\r\n    \"Data\": {\r\n      \"preferences\": {\r\n        \"Value\": \"alpha\",\r\n        \"LastUpdated\": \"2014-08-20T12:30:45Z\",\r\n        \"Permission\": \"Public\"\r\n      },\r\n      \"progress\": {\r\n        \"Value\": \"level_twenty\",\r\n        \"LastUpdated\": \"2014-09-01T10:12:30Z\",\r\n        \"Permission\": \"Private\"\r\n      }\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "UpdateUserPublisherData",
        "GetUserPublisherReadOnlyData",
        "UpdateUserPublisherReadOnlyData",
        "GetUserPublisherInternalData",
        "UpdateUserPublisherInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserPublisherInternalData",
      "summary": "Retrieves the publisher-specific custom data for the user which cannot be accessed by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Server/GetUserPublisherInternalData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"Keys\": [\r\n    \"preferences\",\r\n    \"progress\"\r\n  ],\r\n  \"IfChangedFromDataVersion\": 13\r\n}",
      "result": "GetUserDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"2039475\",\r\n    \"DataVersion\": 12,\r\n    \"Data\": {\r\n      \"preferences\": {\r\n        \"Value\": \"alpha\",\r\n        \"LastUpdated\": \"2014-08-20T12:30:45Z\",\r\n        \"Permission\": \"Public\"\r\n      },\r\n      \"progress\": {\r\n        \"Value\": \"level_twenty\",\r\n        \"LastUpdated\": \"2014-09-01T10:12:30Z\",\r\n        \"Permission\": \"Private\"\r\n      }\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "GetUserPublisherData",
        "UpdateUserPublisherData",
        "GetUserPublisherReadOnlyData",
        "UpdateUserPublisherReadOnlyData",
        "UpdateUserPublisherInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserPublisherReadOnlyData",
      "summary": "Retrieves the publisher-specific custom data for the user which can only be read by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Server/GetUserPublisherReadOnlyData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"Keys\": [\r\n    \"preferences\",\r\n    \"progress\"\r\n  ],\r\n  \"IfChangedFromDataVersion\": 13\r\n}",
      "result": "GetUserDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"2039475\",\r\n    \"DataVersion\": 12,\r\n    \"Data\": {\r\n      \"preferences\": {\r\n        \"Value\": \"alpha\",\r\n        \"LastUpdated\": \"2014-08-20T12:30:45Z\",\r\n        \"Permission\": \"Public\"\r\n      },\r\n      \"progress\": {\r\n        \"Value\": \"level_twenty\",\r\n        \"LastUpdated\": \"2014-09-01T10:12:30Z\",\r\n        \"Permission\": \"Private\"\r\n      }\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "GetUserPublisherData",
        "UpdateUserPublisherData",
        "UpdateUserPublisherReadOnlyData",
        "GetUserPublisherInternalData",
        "UpdateUserPublisherInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserReadOnlyData",
      "summary": "Retrieves the title-specific custom data for the user which can only be read by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Server/GetUserReadOnlyData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"Keys\": [\r\n    \"preferences\",\r\n    \"progress\"\r\n  ],\r\n  \"IfChangedFromDataVersion\": 13\r\n}",
      "result": "GetUserDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"2039475\",\r\n    \"DataVersion\": 12,\r\n    \"Data\": {\r\n      \"preferences\": {\r\n        \"Value\": \"alpha\",\r\n        \"LastUpdated\": \"2014-08-20T12:30:45Z\",\r\n        \"Permission\": \"Public\"\r\n      },\r\n      \"progress\": {\r\n        \"Value\": \"level_twenty\",\r\n        \"LastUpdated\": \"2014-09-01T10:12:30Z\",\r\n        \"Permission\": \"Private\"\r\n      }\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData",
        "UpdateUserReadOnlyData",
        "GetUserInternalData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserStatistics",
      "summary": "Retrieves the details of all title-specific statistics for the user",
      "resultDetails": "User statistics are numeric values which may only be updated by a  server operation, in order to minimize the opportunity for unauthorized changes. In addition to  being available for use by the title, the statistics are used for all leaderboard operations in PlayFab.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Server/GetUserStatistics",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserStatisticsRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"10931252888739651331\"\r\n}",
      "result": "GetUserStatisticsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"10931252888739651331\",\r\n    \"UserStatistics\": {\r\n      \"Headshots\": 18,\r\n      \"Kills\": 47\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "GetLeaderboard",
        "GetLeaderboardAroundUser",
        "UpdateUserStatistics"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "UpdateUserData",
      "summary": "Updates the title-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Server/UpdateUserData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateUserDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"Data\": {\r\n    \"Class\": \"Fighter\",\r\n    \"Gender\": \"Female\",\r\n    \"Icon\": \"Guard 3\",\r\n    \"Theme\": \"Colorful\"\r\n  },\r\n  \"Permission\": \"Public\"\r\n}",
      "result": "UpdateUserDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"DataVersion\": 8\r\n  }\r\n}",
      "seeAlso": [
        "GetUserData",
        "GetUserReadOnlyData",
        "UpdateUserReadOnlyData",
        "GetUserInternalData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams",
        "KeyLengthExceeded",
        "DataLengthExceeded",
        "DeleteKeyConflict"
      ]
    },
    {
      "name": "UpdateUserInternalData",
      "summary": "Updates the title-specific custom data for the user which cannot be accessed by the client",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Server/UpdateUserInternalData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateUserInternalDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"Data\": {\r\n    \"Class\": \"Fighter\",\r\n    \"Gender\": \"Female\",\r\n    \"Icon\": \"Guard 3\",\r\n    \"Theme\": \"Colorful\"\r\n  }\r\n}",
      "result": "UpdateUserDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"DataVersion\": 8\r\n  }\r\n}",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData",
        "GetUserReadOnlyData",
        "UpdateUserReadOnlyData",
        "GetUserInternalData"
      ],
      "errors": [
        "InvalidParams",
        "KeyLengthExceeded",
        "DataLengthExceeded",
        "DeleteKeyConflict"
      ]
    },
    {
      "name": "UpdateUserPublisherData",
      "summary": "Updates the publisher-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Server/UpdateUserPublisherData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateUserDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"Data\": {\r\n    \"Class\": \"Fighter\",\r\n    \"Gender\": \"Female\",\r\n    \"Icon\": \"Guard 3\",\r\n    \"Theme\": \"Colorful\"\r\n  },\r\n  \"Permission\": \"Public\"\r\n}",
      "result": "UpdateUserDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"DataVersion\": 8\r\n  }\r\n}",
      "seeAlso": [
        "GetUserPublisherData",
        "GetUserPublisherReadOnlyData",
        "UpdateUserPublisherReadOnlyData",
        "GetUserPublisherInternalData",
        "UpdateUserPublisherInternalData"
      ],
      "errors": [
        "InvalidParams",
        "KeyLengthExceeded",
        "DataLengthExceeded",
        "DeleteKeyConflict"
      ]
    },
    {
      "name": "UpdateUserPublisherInternalData",
      "summary": "Updates the publisher-specific custom data for the user which cannot be accessed by the client",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Server/UpdateUserPublisherInternalData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateUserInternalDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"Data\": {\r\n    \"Class\": \"Fighter\",\r\n    \"Gender\": \"Female\",\r\n    \"Icon\": \"Guard 3\",\r\n    \"Theme\": \"Colorful\"\r\n  }\r\n}",
      "result": "UpdateUserDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"DataVersion\": 8\r\n  }\r\n}",
      "seeAlso": [
        "GetUserPublisherData",
        "UpdateUserPublisherData",
        "GetUserPublisherReadOnlyData",
        "UpdateUserPublisherReadOnlyData",
        "GetUserPublisherInternalData"
      ],
      "errors": [
        "InvalidParams",
        "KeyLengthExceeded",
        "DataLengthExceeded",
        "DeleteKeyConflict"
      ]
    },
    {
      "name": "UpdateUserPublisherReadOnlyData",
      "summary": "Updates the publisher-specific custom data for the user which can only be read by the client",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Server/UpdateUserPublisherReadOnlyData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateUserDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"Data\": {\r\n    \"Class\": \"Fighter\",\r\n    \"Gender\": \"Female\",\r\n    \"Icon\": \"Guard 3\",\r\n    \"Theme\": \"Colorful\"\r\n  },\r\n  \"Permission\": \"Public\"\r\n}",
      "result": "UpdateUserDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"DataVersion\": 8\r\n  }\r\n}",
      "seeAlso": [
        "GetUserPublisherData",
        "UpdateUserPublisherData",
        "GetUserPublisherReadOnlyData",
        "GetUserPublisherInternalData",
        "UpdateUserPublisherInternalData"
      ],
      "errors": [
        "InvalidParams",
        "KeyLengthExceeded",
        "DataLengthExceeded",
        "DeleteKeyConflict"
      ]
    },
    {
      "name": "UpdateUserReadOnlyData",
      "summary": "Updates the title-specific custom data for the user which can only be read by the client",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Server/UpdateUserReadOnlyData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateUserDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"Data\": {\r\n    \"Class\": \"Fighter\",\r\n    \"Gender\": \"Female\",\r\n    \"Icon\": \"Guard 3\",\r\n    \"Theme\": \"Colorful\"\r\n  },\r\n  \"Permission\": \"Public\"\r\n}",
      "result": "UpdateUserDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"DataVersion\": 8\r\n  }\r\n}",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData",
        "GetUserReadOnlyData",
        "GetUserInternalData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams",
        "KeyLengthExceeded",
        "DataLengthExceeded",
        "DeleteKeyConflict"
      ]
    },
    {
      "name": "UpdateUserStatistics",
      "summary": "Updates the values of the specified title-specific statistics for the user",
      "requestDetails": "This operation is additive. Statistics not currently defined will be added, while those already defined will be updated with the given values. All other user statistics will remain unchanged.",
      "resultDetails": "In addition to being available for use by the title, the statistics are used for all leaderboard operations in PlayFab.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Server/UpdateUserStatistics",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateUserStatisticsRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"10931252888739651331\",\r\n  \"UserStatistics\": {\r\n    \"Headshots\": 18,\r\n    \"Kills\": 47\r\n  }\r\n}",
      "result": "UpdateUserStatisticsResult",
      "resultExample": "",
      "seeAlso": [
        "GetLeaderboard",
        "GetLeaderboardAroundUser",
        "GetUserStatistics"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound",
        "InvalidUserStatistics"
      ]
    },
    {
      "name": "GetCatalogItems",
      "summary": "Retrieves the specified version of the title's catalog of virtual goods, including all defined properties",
      "subgroup": "Title-Wide Data Management",
      "titleTiers": null,
      "url": "/Server/GetCatalogItems",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetCatalogItemsRequest",
      "requestExample": "{\r\n  \"CatalogVersion\": \"5\"\r\n}",
      "result": "GetCatalogItemsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Catalog\": [\r\n      {\r\n        \"ItemId\": \"shield_level_5\",\r\n        \"ItemClass\": \"shields\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Level 5 Shield\",\r\n        \"Description\": \"Strong defense against projectile attacks\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 199,\r\n          \"GV\": 25\r\n        },\r\n        \"RealCurrencyPrices\": {\r\n          \"GBP\": 149,\r\n          \"EUR\": 169\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"energy_boost_1\",\r\n        \"ItemClass\": \"boosts\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Energy Drink Six-Pack\",\r\n        \"Description\": \"Get a quick burst of energy whenever you need it\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 199,\r\n          \"GV\": 25\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"required_item_for_grant_a_1\",\r\n        \"ItemClass\": \"sets\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Grant Set Item 1\",\r\n        \"Description\": \"Item 1 from the set of items needed to get Granted Item A for free\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 249,\r\n          \"GV\": 1500\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"required_item_for_grant_a_2\",\r\n        \"ItemClass\": \"sets\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Grant Set Item 2\",\r\n        \"Description\": \"Item 2 from the set of items needed to get Granted Item A for free\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 249,\r\n          \"GV\": 1500\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"required_item_for_grant_a_3\",\r\n        \"ItemClass\": \"sets\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Grant Set Item 3\",\r\n        \"Description\": \"Item 3 from the set of items needed to get Granted Item A for free\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 249,\r\n          \"GV\": 1500\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"required_item_for_grant_a_4\",\r\n        \"ItemClass\": \"sets\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Grant Set Item 4\",\r\n        \"Description\": \"Item 4 from the set of items needed to get Granted Item A for free\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 249,\r\n          \"GV\": 1500\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"granted_item_a\",\r\n        \"ItemClass\": \"sets\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Granted Item A\",\r\n        \"Description\": \"Bonus item granted for free once the full set of 4 Grant Set items are collected\",\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"consumable_item_1\",\r\n        \"ItemClass\": \"Consumables\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Consumable Item 1\",\r\n        \"Description\": \"Item demonstrating usage-based consumables\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"GV\": 500\r\n        },\r\n        \"Consumable\": {\r\n          \"UsageCount\": 3\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"consumable_item_2\",\r\n        \"ItemClass\": \"Consumables\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Consumable Item 2\",\r\n        \"Description\": \"Item demonstrating time-based consumables\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"GV\": 750\r\n        },\r\n        \"Consumable\": {\r\n          \"UsagePeriod\": 3600,\r\n          \"UsagePeriodGroup\": \"usage_group_1\"\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"sub_bundle_item_1\",\r\n        \"ItemClass\": \"Bundles\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Bundled Item 1\",\r\n        \"Description\": \"Item which is added to the user inventory as part of a bundle\",\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"sub_bundle_item_2\",\r\n        \"ItemClass\": \"Bundles\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Bundled Item 2\",\r\n        \"Description\": \"Item which is added to the user inventory as part of a bundle\",\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"item_bundle_1\",\r\n        \"ItemClass\": \"Bundles\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Item bundle 1\",\r\n        \"Description\": \"Item which, when added to the user inventory, also adds other bundled items\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 599\r\n        },\r\n        \"Bundle\": {\r\n          \"BundledItems\": [\r\n            \"sub_bundle_item_1\",\r\n            \"sub_bundle_item_2\"\r\n          ],\r\n          \"BundledResultTables\": [\r\n            \"random_result_1\"\r\n          ],\r\n          \"BundledVirtualCurrencies\": {\r\n            \"GV\": 1000\r\n          }\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"key_item_1\",\r\n        \"ItemClass\": \"Containers\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Key Item 1\",\r\n        \"Description\": \"Key used to unlock Container 1\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 199\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"sub_container_item_1\",\r\n        \"ItemClass\": \"Containers\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Container Item 1\",\r\n        \"Description\": \"Item which is added to the user inventory as part of opening a container\",\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"sub_container_item_2\",\r\n        \"ItemClass\": \"Containers\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Container Item 2\",\r\n        \"Description\": \"Item which is added to the user inventory as part of opening a container\",\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"item_container_1\",\r\n        \"ItemClass\": \"Containers\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Item Container 1\",\r\n        \"Description\": \"Item which, when opened with Key Item 1, also adds the items it holds to the user inventory\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 499\r\n        },\r\n        \"Consumable\": {\r\n          \"UsageCount\": 1\r\n        },\r\n        \"Container\": {\r\n          \"KeyItemId\": \"key_item_1\",\r\n          \"ItemContents\": [\r\n            \"sub_container_item_1\",\r\n            \"sub_container_item_2\"\r\n          ],\r\n          \"ResultTableContents\": [\r\n            \"random_result_1\"\r\n          ],\r\n          \"VirtualCurrencyContents\": {\r\n            \"GV\": 1000\r\n          }\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"item_container_2\",\r\n        \"ItemClass\": \"Containers\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Item Container 2\",\r\n        \"Description\": \"Item which, when opened (no key needed), adds the items it holds to the user inventory\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 99\r\n        },\r\n        \"Consumable\": {\r\n          \"UsageCount\": 1\r\n        },\r\n        \"Container\": {\r\n          \"VirtualCurrencyContents\": {\r\n            \"GV\": 1000\r\n          }\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"starterpack_1\",\r\n        \"ItemClass\": \"starterpacks\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Super Starter Pack\",\r\n        \"Description\": \"Everything you need to get started fast track at the right price\",\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      }\r\n    ]\r\n  }\r\n}",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetTitleData",
      "summary": "Retrieves the key-value store of custom title settings",
      "requestDetails": "This API is designed to return title specific values which can be read, but not written to, by the client. For example, a developer could choose to store values which modify the user experience, such as enemy spawn rates, weapon strengths, movement speeds, etc. This allows a developer to update the title without the need to create, test, and ship a new build. Note that there may up to a minute delay in between updating title data and this API call returning the newest value.",
      "subgroup": "Title-Wide Data Management",
      "titleTiers": null,
      "url": "/Server/GetTitleData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetTitleDataRequest",
      "requestExample": "{\r\n  \"Keys\": [\r\n    \"color\",\r\n    \"propertyA\"\r\n  ]\r\n}",
      "result": "GetTitleDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Data\": {\r\n      \"color\": \"blue\",\r\n      \"propertyA\": \"xyz123\"\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "SetTitleData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetTitleInternalData",
      "summary": "Retrieves the key-value store of custom internal title settings",
      "requestDetails": "This API is designed to return title specific values which are accessible only to the server. This can be used to tweak settings on game servers and Cloud Scripts without needed to update and re-deploy them. Note that there may up to a minute delay in between updating title data and this API call returning the newest value.",
      "subgroup": "Title-Wide Data Management",
      "titleTiers": null,
      "url": "/Server/GetTitleInternalData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetTitleDataRequest",
      "requestExample": "{\r\n  \"Keys\": [\r\n    \"color\",\r\n    \"propertyA\"\r\n  ]\r\n}",
      "result": "GetTitleDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Data\": {\r\n      \"color\": \"blue\",\r\n      \"propertyA\": \"xyz123\"\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "SetTitleInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetTitleNews",
      "summary": "Retrieves the title news feed, as configured in the developer portal",
      "subgroup": "Title-Wide Data Management",
      "titleTiers": null,
      "url": "/Server/GetTitleNews",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetTitleNewsRequest",
      "requestExample": "{\r\n  \"Count\": 25\r\n}",
      "result": "GetTitleNewsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"News\": [\r\n      {\r\n        \"Timestamp\": \"2014-04-06T00:00:00Z\",\r\n        \"Title\": \"News of the Day\",\r\n        \"Body\": \"<b>We have a new object to buy!</b>\"\r\n      }\r\n    ]\r\n  }\r\n}",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "SetTitleData",
      "summary": "Updates the key-value store of custom title settings",
      "requestDetails": "This API is designed to store title specific values which can be read, but not written to, by the client. For example, a developer could choose to store values which modify the user experience, such as enemy spawn rates, weapon strengths, movement speeds, etc. This allows a developer to update the title without the need to create, test, and ship a new build. This operation is additive. If a Key does not exist in the current dataset, it will be added with the specified Value. If it already exists, the Value for that key will be overwritten with the new Value.",
      "subgroup": "Title-Wide Data Management",
      "titleTiers": null,
      "url": "/Server/SetTitleData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "SetTitleDataRequest",
      "requestExample": "{\r\n  \"Key\": \"Running Speed\",\r\n  \"Value\": \"1.03\"\r\n}",
      "result": "SetTitleDataResult",
      "resultExample": "",
      "seeAlso": [
        "GetTitleData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "SetTitleInternalData",
      "summary": "Updates the key-value store of custom title settings",
      "requestDetails": "This API is designed to store title specific values which are accessible only to the server. This can be used to tweak settings on game servers and Cloud Scripts without needed to update and re-deploy them. This operation is additive. If a Key does not exist in the current dataset, it will be added with the specified Value. If it already exists, the Value for that key will be overwritten with the new Value.",
      "subgroup": "Title-Wide Data Management",
      "titleTiers": null,
      "url": "/Server/SetTitleInternalData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "SetTitleDataRequest",
      "requestExample": "{\r\n  \"Key\": \"Running Speed\",\r\n  \"Value\": \"1.03\"\r\n}",
      "result": "SetTitleDataResult",
      "resultExample": "",
      "seeAlso": [
        "GetTitleInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "AddCharacterVirtualCurrency",
      "summary": "Increments  the character's balance of the specified virtual currency by the stated amount",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Server/AddCharacterVirtualCurrency",
      "auth": "SecretKey",
      "method": "POST",
      "request": "AddCharacterVirtualCurrencyRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"20394883\",\r\n  \"CharacterId\": \"23424524523\",\r\n  \"VirtualCurrency\": \"GC\",\r\n  \"Amount\": 100\r\n}",
      "result": "ModifyCharacterVirtualCurrencyResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"VirtualCurrency\": \"GC\",\r\n    \"Balance\": 1500\r\n  }\r\n}",
      "seeAlso": [
        "AddUserVirtualCurrency",
        "SubtractCharacterVirtualCurrency"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "AddUserVirtualCurrency",
      "summary": "Increments  the user's balance of the specified virtual currency by the stated amount",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Server/AddUserVirtualCurrency",
      "auth": "SecretKey",
      "method": "POST",
      "request": "AddUserVirtualCurrencyRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"20394883\",\r\n  \"VirtualCurrency\": \"GC\",\r\n  \"Amount\": 100\r\n}",
      "result": "ModifyUserVirtualCurrencyResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"B456AE0\",\r\n    \"VirtualCurrency\": \"GC\",\r\n    \"BalanceChange\": 10,\r\n    \"Balance\": 1500\r\n  }\r\n}",
      "seeAlso": [
        "SubtractUserVirtualCurrency"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetCharacterInventory",
      "summary": "Retrieves the specified character's current inventory of virtual goods",
      "requestDetails": "All items currently in the character inventory will be returned, irrespective of how they were acquired (via purchasing, grants, coupons, etc.). Items that are expired, fully consumed, or are no longer valid are not considered to be in the user's current inventory, and so will not be not included. Also returns their virtual currency balances.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Server/GetCharacterInventory",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetCharacterInventoryRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"204883457\",\r\n  \"CharacterId\": \"9890723423\",\r\n  \"CatalogVersion\": \"5\"\r\n}",
      "result": "GetCharacterInventoryResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"204883457\",\r\n    \"CharacterId\": \"9890723423\",\r\n    \"Inventory\": [\r\n      {\r\n        \"ItemId\": \"shield_level_5\",\r\n        \"ItemInstanceId\": \"9879843\",\r\n        \"ItemClass\": \"shields\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"UnitPrice\": 0\r\n      },\r\n      {\r\n        \"ItemId\": \"energy_boost_1\",\r\n        \"ItemInstanceId\": \"3854637\",\r\n        \"ItemClass\": \"boosts\",\r\n        \"RemainingUses\": 4,\r\n        \"CatalogVersion\": \"5\",\r\n        \"UnitPrice\": 0\r\n      }\r\n    ],\r\n    \"VirtualCurrency\": {\r\n      \"GC\": 15\r\n    },\r\n    \"VirtualCurrencyRechargeTimes\": {\r\n      \"GC\": {\r\n        \"SecondsToRecharge\": 3600,\r\n        \"RechargeTime\": \"2014-01-01T12:00:00Z\",\r\n        \"RechargeMax\": 50\r\n      }\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "GetUserInventory"
      ],
      "errors": [
        "InvalidParams",
        "CharacterNotFound"
      ]
    },
    {
      "name": "GetUserInventory",
      "summary": "Retrieves the specified user's current inventory of virtual goods",
      "requestDetails": "All items currently in the user inventory will be returned, irrespective of how they were acquired (via purchasing, grants, coupons, etc.). Items that are expired, fully consumed, or are no longer valid are not considered to be in the user's current inventory, and so will not be not included.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Server/GetUserInventory",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserInventoryRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"204883457\"\r\n}",
      "result": "GetUserInventoryResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"204883457\",\r\n    \"Inventory\": [\r\n      {\r\n        \"ItemId\": \"shield_level_5\",\r\n        \"ItemInstanceId\": \"9879843\",\r\n        \"ItemClass\": \"shields\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"UnitPrice\": 0\r\n      },\r\n      {\r\n        \"ItemId\": \"energy_boost_1\",\r\n        \"ItemInstanceId\": \"3854637\",\r\n        \"ItemClass\": \"boosts\",\r\n        \"RemainingUses\": 4,\r\n        \"CatalogVersion\": \"5\",\r\n        \"UnitPrice\": 0\r\n      }\r\n    ],\r\n    \"VirtualCurrency\": {\r\n      \"GC\": 15\r\n    },\r\n    \"VirtualCurrencyRechargeTimes\": {\r\n      \"GC\": {\r\n        \"SecondsToRecharge\": 3600,\r\n        \"RechargeTime\": \"2014-01-01T12:00:00Z\",\r\n        \"RechargeMax\": 50\r\n      }\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "GetUserAccountInfo"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GrantItemsToCharacter",
      "summary": "Adds the specified items to the specified character's inventory",
      "requestDetails": "This function directly adds inventory items to the character's inventories. As  a result of this operations, the user will not be charged any transaction fee, regardless of the inventory item  catalog definition.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Server/GrantItemsToCharacter",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GrantItemsToCharacterRequest",
      "requestExample": "{\r\n  \"CharacterId\": \"9876543268\",\r\n  \"PlayFabId\": \"20394883\",\r\n  \"Annotation\": \"Entered Level 2\",\r\n  \"ItemIds\": [\r\n    \"Crate 1\",\r\n    \"Crate 2\"\r\n  ]\r\n}",
      "result": "GrantItemsToCharacterResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"ItemGrantResults\": [\r\n      {\r\n        \"PlayFabId\": \"20394883\",\r\n        \"Result\": true,\r\n        \"ItemId\": \"Crate 1\",\r\n        \"Annotation\": \"Entered Level 2\",\r\n        \"UnitPrice\": 0\r\n      },\r\n      {\r\n        \"PlayFabId\": \"20394883\",\r\n        \"Result\": true,\r\n        \"ItemId\": \"Crate 2\",\r\n        \"Annotation\": \"Entered Level 2\",\r\n        \"UnitPrice\": 0\r\n      }\r\n    ]\r\n  }\r\n}",
      "errors": [
        "InvalidParams",
        "CharacterNotFound",
        "AccountNotFound"
      ]
    },
    {
      "name": "GrantItemsToUser",
      "summary": "Adds the specified items to the specified user's inventory",
      "requestDetails": "This function directly adds inventory items to the user's inventories. As a result of this operations, the user will not be charged any transaction fee, regardless of the inventory item catalog definition.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Server/GrantItemsToUser",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GrantItemsToUserRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"20394883\",\r\n  \"Annotation\": \"Entered Level 2\",\r\n  \"ItemIds\": [\r\n    \"Crate 1\",\r\n    \"Crate 2\"\r\n  ]\r\n}",
      "result": "GrantItemsToUserResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"ItemGrantResults\": [\r\n      {\r\n        \"PlayFabId\": \"20394883\",\r\n        \"Result\": true,\r\n        \"ItemId\": \"Crate 1\",\r\n        \"Annotation\": \"Entered Level 2\",\r\n        \"UnitPrice\": 0\r\n      },\r\n      {\r\n        \"PlayFabId\": \"20394883\",\r\n        \"Result\": true,\r\n        \"ItemId\": \"Crate 2\",\r\n        \"Annotation\": \"Entered Level 2\",\r\n        \"UnitPrice\": 0\r\n      }\r\n    ]\r\n  }\r\n}",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GrantItemsToUsers",
      "summary": "Adds the specified items to the specified user inventories",
      "requestDetails": "This function directly adds inventory items to user inventories. As a result of this operations, the user will not be charged any transaction fee, regardless of the inventory item catalog definition.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Server/GrantItemsToUsers",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GrantItemsToUsersRequest",
      "requestExample": "{\r\n  \"CatalogVersion\": \"5\",\r\n  \"ItemGrants\": [\r\n    {\r\n      \"PlayFabId\": \"20394883\",\r\n      \"ItemId\": \"Crate 1\",\r\n      \"Annotation\": \"Entered Level 2\"\r\n    },\r\n    {\r\n      \"PlayFabId\": \"20394883\",\r\n      \"ItemId\": \"Crate 2\",\r\n      \"Annotation\": \"Entered Level 2\"\r\n    }\r\n  ]\r\n}",
      "result": "GrantItemsToUsersResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"ItemGrantResults\": [\r\n      {\r\n        \"PlayFabId\": \"20394883\",\r\n        \"Result\": true,\r\n        \"ItemId\": \"Crate 1\",\r\n        \"Annotation\": \"Entered Level 2\",\r\n        \"UnitPrice\": 0\r\n      },\r\n      {\r\n        \"PlayFabId\": \"20394883\",\r\n        \"Result\": true,\r\n        \"ItemId\": \"Crate 2\",\r\n        \"Annotation\": \"Entered Level 2\",\r\n        \"UnitPrice\": 0\r\n      }\r\n    ]\r\n  }\r\n}",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "ModifyItemUses",
      "summary": "Modifies the number of remaining uses of a player's inventory item",
      "requestDetails": "This function can both add and remove uses of an inventory item. If the number of uses drops below zero, the item will be removed from active inventory.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Server/ModifyItemUses",
      "auth": "SecretKey",
      "method": "POST",
      "request": "ModifyItemUsesRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"20394883\",\r\n  \"ItemInstanceId\": \"94585729\",\r\n  \"UsesToAdd\": 1\r\n}",
      "result": "ModifyItemUsesResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"ItemInstanceId\": \"94585729\",\r\n    \"RemainingUses\": 0\r\n  }\r\n}",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "MoveItemToCharacterFromCharacter",
      "summary": "Moves an item from a character's inventory into another of the users's character's inventory.",
      "requestDetails": "Transfers an item from a character to another character that is owned by the same user. This will remove the item from the character's inventory (until and unless it is moved back), and will enable the other character to make use of the item instead.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Server/MoveItemToCharacterFromCharacter",
      "auth": "SecretKey",
      "method": "POST",
      "request": "MoveItemToCharacterFromCharacterRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"234234897234\",\r\n  \"GivingCharacterId\": \"98092347523\",\r\n  \"ReceivingCharacterId\": \"6323489712\",\r\n  \"ItemInstanceId\": \"701231299999\"\r\n}",
      "result": "MoveItemToCharacterFromCharacterResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "seeAlso": [
        "GrantItemsToCharacter",
        "MoveItemToCharacterFromUser",
        "MoveItemToUserFromCharacter"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound",
        "CharacterNotFound",
        "ItemNotOwned"
      ]
    },
    {
      "name": "MoveItemToCharacterFromUser",
      "summary": "Moves an item from a user's inventory into their character's inventory.",
      "requestDetails": "Transfers an item from a user to a character she owns. This will remove the item from the user's inventory (until and unless it is moved back), and will enable the character to make use of the item instead.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Server/MoveItemToCharacterFromUser",
      "auth": "SecretKey",
      "method": "POST",
      "request": "MoveItemToCharacterFromUserRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"234234897234\",\r\n  \"CharacterId\": \"98092347523\",\r\n  \"ItemInstanceId\": \"701231299999\"\r\n}",
      "result": "MoveItemToCharacterFromUserResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "seeAlso": [
        "GrantItemsToCharacter",
        "MoveItemToUserFromCharacter"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound",
        "CharacterNotFound",
        "ItemNotOwned"
      ]
    },
    {
      "name": "MoveItemToUserFromCharacter",
      "summary": "Moves an item from a character's inventory into the owning user's inventory.",
      "requestDetails": "Transfers an item from a character to the owning user. This will remove the item from the character's inventory (until and unless it is moved back), and will enable the user to make use of the item instead.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Server/MoveItemToUserFromCharacter",
      "auth": "SecretKey",
      "method": "POST",
      "request": "MoveItemToUserFromCharacterRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"234234897234\",\r\n  \"CharacterId\": \"98092347523\",\r\n  \"ItemInstanceId\": \"701231299999\"\r\n}",
      "result": "MoveItemToUserFromCharacterResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "seeAlso": [
        "GrantItemsToCharacter",
        "MoveItemToCharacterFromUser"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound",
        "CharacterNotFound",
        "ItemNotOwned"
      ]
    },
    {
      "name": "RedeemCoupon",
      "summary": "Adds the virtual goods associated with the coupon to the user's inventory. Coupons can be generated  via the Promotions->Coupons tab in the PlayFab Game Manager. See this post for more information on coupons:  https://playfab.com/blog/2015/06/18/using-stores-and-coupons-game-manager",
      "requestDetails": "Coupon codes can be created for any item, or set of items, in the catalog for the title. This operation causes the coupon to be consumed, and the specific items to be awarded to the user. Attempting to re-use an already consumed code, or a code which has not yet been created in the service, will result in an error.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Server/RedeemCoupon",
      "auth": "SecretKey",
      "method": "POST",
      "request": "RedeemCouponRequest",
      "requestExample": "{\r\n  \"CouponCode\": \"123-1234-123\",\r\n  \"CatalogVersion\": \"5\"\r\n}",
      "result": "RedeemCouponResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"GrantedItems\": [\r\n      {\r\n        \"ItemId\": \"shield_level_5\",\r\n        \"ItemInstanceId\": \"Unique Item ID\",\r\n        \"ItemClass\": \"shields\",\r\n        \"PurchaseDate\": \"2014-03-07T00:00:00Z\",\r\n        \"Expiration\": \"2015-10-01T00:00:00Z\",\r\n        \"RemainingUses\": 10,\r\n        \"Annotation\": \"No Annotation\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"BundleParent\": \"crate block 1\",\r\n        \"UnitPrice\": 0\r\n      }\r\n    ]\r\n  }\r\n}",
      "errors": [
        "InvalidParams",
        "CouponCodeNotFound"
      ]
    },
    {
      "name": "ReportPlayer",
      "summary": "Submit a report about a player (due to bad bahavior, etc.) on behalf of another player, so that customer service representatives for the title can take action concerning potentially poxic players.",
      "resultDetails": "Players are currently limited to five reports per day. Attempts by a single user account to submit reports beyond five will result in Updated being returned as false.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Server/ReportPlayer",
      "auth": "SecretKey",
      "method": "POST",
      "request": "ReportPlayerServerRequest",
      "requestExample": "{\r\n  \"ReporterId\": \"9ddafe27d6d445da\",\r\n  \"ReporteeId\": \"1a46086aed40f142\",\r\n  \"TitleId\": \"06dd\",\r\n  \"Comment\": \"cheating\"\r\n}",
      "result": "ReportPlayerServerResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Updated\": true,\r\n    \"SubmissionsRemaining\": 2\r\n  }\r\n}",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "SubtractCharacterVirtualCurrency",
      "summary": "Decrements the character's balance of the specified virtual currency by the stated amount",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Server/SubtractCharacterVirtualCurrency",
      "auth": "SecretKey",
      "method": "POST",
      "request": "SubtractCharacterVirtualCurrencyRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"20394883\",\r\n  \"CharacterId\": \"23424524523\",\r\n  \"VirtualCurrency\": \"GC\",\r\n  \"Amount\": 100\r\n}",
      "result": "ModifyCharacterVirtualCurrencyResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"VirtualCurrency\": \"GC\",\r\n    \"Balance\": 1500\r\n  }\r\n}",
      "seeAlso": [
        "SubtractUserVirtualCurrency",
        "AddCharacterVirtualCurrency"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "SubtractUserVirtualCurrency",
      "summary": "Decrements the user's balance of the specified virtual currency by the stated amount",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Server/SubtractUserVirtualCurrency",
      "auth": "SecretKey",
      "method": "POST",
      "request": "SubtractUserVirtualCurrencyRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"20394883\",\r\n  \"VirtualCurrency\": \"GC\",\r\n  \"Amount\": 100\r\n}",
      "result": "ModifyUserVirtualCurrencyResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"B456AE0\",\r\n    \"VirtualCurrency\": \"GC\",\r\n    \"BalanceChange\": 10,\r\n    \"Balance\": 1500\r\n  }\r\n}",
      "seeAlso": [
        "AddUserVirtualCurrency"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateUserInventoryItemCustomData",
      "summary": "Updates the key-value pair data tagged to the specified item, which is read-only from the client.",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the item instance which belongs to the specified user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while  keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Server/UpdateUserInventoryItemCustomData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateUserInventoryItemDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"ItemInstanceId\": \"88331144\",\r\n  \"Data\": {\r\n    \"Equipped\": \"True\",\r\n    \"Slot\": \"Head\"\r\n  }\r\n}",
      "result": "UpdateUserInventoryItemDataResult",
      "resultExample": "",
      "seeAlso": [
        "GetUserInventory",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams",
        "KeyLengthExceeded",
        "DataLengthExceeded",
        "DeleteKeyConflict"
      ]
    },
    {
      "name": "NotifyMatchmakerPlayerLeft",
      "summary": "Informs the PlayFab match-making service that the user specified has left the Game Server Instance",
      "subgroup": "Matchmaking APIs",
      "titleTiers": null,
      "url": "/Server/NotifyMatchmakerPlayerLeft",
      "auth": "SecretKey",
      "method": "POST",
      "request": "NotifyMatchmakerPlayerLeftRequest",
      "requestExample": "{\r\n  \"LobbyId\": \"29439584\",\r\n  \"PlayFabId\": \"204883457\"\r\n}",
      "result": "NotifyMatchmakerPlayerLeftResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayerState\": \"Unassigned\"\r\n  }\r\n}",
      "errors": [
        "InvalidParams",
        "InvalidLobbyId",
        "GameNotFound"
      ]
    },
    {
      "name": "RedeemMatchmakerTicket",
      "summary": "Validates a Game Server session ticket and returns details about the user",
      "requestDetails": "This function is used by a Game Server Instance to validate with the PlayFab service that a user has been registered as connected to the server. The Ticket is provided to the client either as a result of a call to StartGame or Matchmake, each of which return a Ticket specific to the Game Server Instance. This function will fail in any case where the Ticket presented is not valid for the specific Game Server Instance making the call. Note that data returned may be Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for users who have accessed the title, the recommendation is to not store this data locally.",
      "subgroup": "Matchmaking APIs",
      "titleTiers": null,
      "url": "/Server/RedeemMatchmakerTicket",
      "auth": "SecretKey",
      "method": "POST",
      "request": "RedeemMatchmakerTicketRequest",
      "requestExample": "{\r\n  \"Ticket\": \"2398349939a03499bc\",\r\n  \"LobbyId\": \"2353\"\r\n}",
      "result": "RedeemMatchmakerTicketResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"TicketIsValid\": true,\r\n    \"Error\": \"\",\r\n    \"UserInfo\": {\r\n      \"PlayFabId\": \"10931252888739651331\",\r\n      \"Created\": \"0001-01-01T00:00:00Z\",\r\n      \"Username\": \"accountname\"\r\n    }\r\n  }\r\n}",
      "errors": [
        "InvalidParams",
        "InvalidLobbyId",
        "InvalidGameTicket",
        "ExpiredGameTicket",
        "GameTicketDoesNotMatchLobby",
        "GameNotFound"
      ]
    },
    {
      "name": "AwardSteamAchievement",
      "summary": "Awards the specified users the specified Steam achievements",
      "subgroup": "Steam-Specific APIs",
      "titleTiers": null,
      "url": "/Server/AwardSteamAchievement",
      "auth": "SecretKey",
      "method": "POST",
      "request": "AwardSteamAchievementRequest",
      "requestExample": "{\r\n  \"Achievements\": [\r\n    {\r\n      \"PlayFabId\": \"234974573892\",\r\n      \"AchievementName\": \"FinishLevel1\",\r\n      \"Result\": false\r\n    },\r\n    {\r\n      \"PlayFabId\": \"334353433\",\r\n      \"AchievementName\": \"FinishLevel1\",\r\n      \"Result\": false\r\n    }\r\n  ]\r\n}",
      "result": "AwardSteamAchievementResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"AchievementResults\": [\r\n      {\r\n        \"PlayFabId\": \"234974573892\",\r\n        \"AchievementName\": \"FinishLevel1\",\r\n        \"Result\": true\r\n      },\r\n      {\r\n        \"PlayFabId\": \"334353433\",\r\n        \"AchievementName\": \"FinishLevel1\",\r\n        \"Result\": true\r\n      }\r\n    ]\r\n  }\r\n}",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "LogEvent",
      "summary": "Logs a custom analytics event",
      "requestDetails": "This API is designed to track analytics events. Events logged using this API will be stored in the title's Redshift database. Each unique eventName will create a distinct table within the database. Within that table, a column will be created for every unique key. Using a first-person shooter as an example, the title may need to track headshots as a distinct event. The sample request below demonstrates an example of this. In addition to the values sent, timestamps and User IDs are automatically added as 'ts' and 'user_id' to each table. The 'Headshot' table in this example would then have the schema: 'user_id'|'ts'|'victim'|'gun'|'x_coord'|'y_coord'|'z_coord'|'damage|aim_assist' and the row corresponding to this event would look like: 'EF987654ABAB012'|'2014-1-1 12:12:12'|'B76543AEAE65'|'big_bad_sniper'|10|20|1|1000|1.The PlayFab service automatically creates events for all login and purchase operations. This API is intended for game specific events only. Please note that event logging is not enabled for titles by default. If you need event logging enabled, please contact us at devrel@playfab.com for more information.",
      "subgroup": "Analytics",
      "titleTiers": null,
      "url": "/Server/LogEvent",
      "auth": "SecretKey",
      "method": "POST",
      "request": "LogEventRequest",
      "requestExample": "{\r\n  \"EventName\": \"Headshot\",\r\n  \"Body\": {\r\n    \"victim\": \"B76543AEAE65\",\r\n    \"gun\": \"sniper_rifle\",\r\n    \"x_coord\": 10,\r\n    \"y_coord\": 20,\r\n    \"z_coord\": 1,\r\n    \"damage\": 1000,\r\n    \"aim_assist\": false\r\n  },\r\n  \"ProfileSetEvent\": false\r\n}",
      "result": "LogEventResult",
      "resultExample": "",
      "errors": [
        "BodyTooLarge",
        "ReservedWordInBody",
        "ReservedEventName",
        "InvalidRequest",
        "InvalidTypeInBody"
      ]
    },
    {
      "name": "AddSharedGroupMembers",
      "summary": "Adds users to the set of those able to update both the shared data, as well as the set of users in the group. Only users in the group (and the server) can add new members.",
      "subgroup": "Shared Group Data",
      "titleTiers": null,
      "url": "/Server/AddSharedGroupMembers",
      "auth": "SecretKey",
      "method": "POST",
      "request": "AddSharedGroupMembersRequest",
      "requestExample": "{\r\n  \"SharedGroupId\": \"Clan Data\",\r\n  \"PlayFabIds\": [\r\n    \"D984A64B832\",\r\n    \"F74A523E1562\"\r\n  ]\r\n}",
      "result": "AddSharedGroupMembersResult",
      "resultExample": "",
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "CreateSharedGroup",
      "summary": "Requests the creation of a shared group object, containing key/value pairs which may be updated by all members of the group. When created by a server, the group will initially have no members.",
      "requestDetails": "If SharedGroupId is specified, the service will attempt to create a group with that identifier, and will return an error if it is already in use. If no SharedGroupId is specified, a random identifier will be assigned.",
      "subgroup": "Shared Group Data",
      "titleTiers": null,
      "url": "/Server/CreateSharedGroup",
      "auth": "SecretKey",
      "method": "POST",
      "request": "CreateSharedGroupRequest",
      "requestExample": "{\r\n  \"SharedGroupId\": \"Clan Data\"\r\n}",
      "result": "CreateSharedGroupResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"SharedGroupId\": \"Clan Data\"\r\n  }\r\n}",
      "errors": [
        "InvalidParams",
        "InvalidSharedGroupId"
      ]
    },
    {
      "name": "DeleteSharedGroup",
      "summary": "Deletes a shared group, freeing up the shared group ID to be reused for a new group",
      "subgroup": "Shared Group Data",
      "titleTiers": null,
      "url": "/Server/DeleteSharedGroup",
      "auth": "SecretKey",
      "method": "POST",
      "request": "DeleteSharedGroupRequest",
      "requestExample": "{\r\n  \"SharedGroupId\": \"Clan Data\"\r\n}",
      "result": "EmptyResult",
      "resultExample": "",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetPublisherData",
      "summary": "Retrieves the key-value store of custom publisher settings",
      "requestDetails": "This API is designed to return publisher-specific values which can be read, but not written to, by the client. This data is shared across all titles assigned to a particular publisher, and can be used for cross-game coordination. Only titles assigned to a publisher can use this API.  For more information email devrel@playfab.com. Note that there may up to a minute delay in between updating title data and this API call returning the newest value.",
      "subgroup": "Shared Group Data",
      "titleTiers": null,
      "url": "/Server/GetPublisherData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetPublisherDataRequest",
      "requestExample": "{\r\n  \"Keys\": [\r\n    \"color\",\r\n    \"propertyA\"\r\n  ]\r\n}",
      "result": "GetPublisherDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Data\": {\r\n      \"color\": \"blue\",\r\n      \"propertyA\": \"xyz123\"\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "SetPublisherData"
      ],
      "errors": [
        "InvalidParams",
        "PublisherNotSet"
      ]
    },
    {
      "name": "GetSharedGroupData",
      "summary": "Retrieves data stored in a shared group object, as well as the list of members in the group. The server can access all public and private group data.",
      "subgroup": "Shared Group Data",
      "titleTiers": null,
      "url": "/Server/GetSharedGroupData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetSharedGroupDataRequest",
      "requestExample": "{\r\n  \"SharedGroupId\": \"Clan Data\",\r\n  \"Keys\": [\r\n    \"ClanKills\",\r\n    \"LastClanUpdate\"\r\n  ],\r\n  \"GetMembers\": true\r\n}",
      "result": "GetSharedGroupDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Data\": {\r\n      \"ClanKills\": {\r\n        \"Value\": \"34\",\r\n        \"LastUpdatedBy\": \"D984A64B832\",\r\n        \"LastUpdated\": \"2015-01-03T17:44:21Z\",\r\n        \"Permission\": \"Public\"\r\n      },\r\n      \"LastClanUpdate\": {\r\n        \"Value\": \"2015-01-03T17:44:21Z\",\r\n        \"LastUpdatedBy\": \"D984A64B832\",\r\n        \"LastUpdated\": \"2015-01-03T17:44:21Z\",\r\n        \"Permission\": \"Private\"\r\n      }\r\n    },\r\n    \"Members\": [\r\n      \"D984A64B832\",\r\n      \"F74A523E1562\"\r\n    ]\r\n  }\r\n}",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "RemoveSharedGroupMembers",
      "summary": "Removes users from the set of those able to update the shared data and the set of users in the group. Only users in the group can remove members. If as a result of the call, zero users remain with access, the group and its associated data will be deleted.",
      "subgroup": "Shared Group Data",
      "titleTiers": null,
      "url": "/Server/RemoveSharedGroupMembers",
      "auth": "SecretKey",
      "method": "POST",
      "request": "RemoveSharedGroupMembersRequest",
      "requestExample": "{\r\n  \"SharedGroupId\": \"Clan Data\",\r\n  \"PlayFabIds\": [\r\n    \"D984A64B832\",\r\n    \"F74A523E1562\"\r\n  ]\r\n}",
      "result": "RemoveSharedGroupMembersResult",
      "resultExample": "",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "SetPublisherData",
      "summary": "Updates the key-value store of custom publisher settings",
      "requestDetails": "This API is designed to store publisher-specific values which can be read, but not written to, by the client. This data is shared across all titles assigned to a particular publisher, and can be used for cross-game coordination. Only titles assigned to a publisher can use this API. This operation is additive.  If a Key does not exist in the current dataset, it will be added with the specified Value. If it already exists, the Value for that key will be overwritten with the new Value. For more information email devrel@playfab.com",
      "subgroup": "Shared Group Data",
      "titleTiers": null,
      "url": "/Server/SetPublisherData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "SetPublisherDataRequest",
      "requestExample": "{\r\n  \"Key\": \"Running Speed\",\r\n  \"Value\": \"1.03\"\r\n}",
      "result": "SetPublisherDataResult",
      "resultExample": "",
      "seeAlso": [
        "GetPublisherData"
      ],
      "errors": [
        "InvalidParams",
        "PublisherNotSet"
      ]
    },
    {
      "name": "UpdateSharedGroupData",
      "summary": "Adds, updates, and removes data keys for a shared group object. If the permission is set to Public, all fields updated or added in this call will be readable by users not in the group. By default, data permissions are set to Private. Regardless of the permission setting, only members of the group (and the server) can update the data.",
      "requestDetails": "Note that in the case of multiple calls to write to the same shared group data keys, the last write received by the PlayFab service will determine the value available to subsequent read operations. For scenarios requiring coordination of data updates, it is recommended that titles make use of user data with read permission set to public, or a combination of user data and shared group data.",
      "subgroup": "Shared Group Data",
      "titleTiers": null,
      "url": "/Server/UpdateSharedGroupData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateSharedGroupDataRequest",
      "requestExample": "{\r\n  \"SharedGroupId\": \"Clan Data\",\r\n  \"Data\": {\r\n    \"ClanKills\": \"34\",\r\n    \"LastClanUpdate\": \"2014-10-03T09:21:14Z\"\r\n  },\r\n  \"Permission\": \"Public\"\r\n}",
      "result": "UpdateSharedGroupDataResult",
      "resultExample": "",
      "errors": [
        "InvalidParams",
        "NotAuthorized"
      ]
    },
    {
      "name": "GetContentDownloadUrl",
      "summary": "This API retrieves a pre-signed URL for accessing a content file for the title. A subsequent  HTTP GET to the returned URL will attempt to download the content. A HEAD query to the returned URL will attempt to  retrieve the metadata of the content. Note that a successful result does not guarantee the existence of this content -  if it has not been uploaded, the query to retrieve the data will fail. See this post for more information:  https://support.playfab.com/support/discussions/topics/1000059929",
      "subgroup": "Content",
      "titleTiers": null,
      "url": "/Server/GetContentDownloadUrl",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetContentDownloadUrlRequest",
      "requestExample": "{\r\n  \"Key\": \"images/sword_icon.png\"\r\n}",
      "result": "GetContentDownloadUrlResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"URL\": \"https://...\"\r\n  }\r\n}",
      "seeAlso": [
        "GetContentDownloadUrl",
        "GetContentUploadUrl",
        "DeleteContent",
        "GetContentList"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "DeleteCharacterFromUser",
      "summary": "Deletes the specific character ID from the specified user.",
      "requestDetails": "This function will delete the specified character from the list allowed by the user, and  will also delete any inventory or VC currently held by that character. It will NOT delete any statistics  associated for this character, in order to preserve leaderboard integrity.",
      "subgroup": "Characters",
      "titleTiers": null,
      "url": "/Server/DeleteCharacterFromUser",
      "auth": "SecretKey",
      "method": "POST",
      "request": "DeleteCharacterFromUserRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"12345\",\r\n  \"CharacterId\": \"98765432\",\r\n  \"SaveCharacterInventory\": false\r\n}",
      "result": "DeleteCharacterFromUserResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "errors": [
        "InvalidParams",
        "CharacterNotFound"
      ]
    },
    {
      "name": "GetAllUsersCharacters",
      "summary": "Lists all of the characters that belong to a specific user.",
      "requestDetails": "Returns a list of every character that currently belongs to a user.",
      "subgroup": "Characters",
      "titleTiers": null,
      "url": "/Server/GetAllUsersCharacters",
      "auth": "SecretKey",
      "method": "POST",
      "request": "ListUsersCharactersRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"98333765432\"\r\n}",
      "result": "ListUsersCharactersResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Characters\": [\r\n      {\r\n        \"CharacterId\": \"3345677\",\r\n        \"CharacterName\": \"CoolDude\",\r\n        \"CharacterType\": \"StrongWarrior\"\r\n      }\r\n    ]\r\n  }\r\n}",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetCharacterLeaderboard",
      "summary": "Retrieves a list of ranked characters for the given statistic, starting from the indicated point in the leaderboard",
      "resultDetails": "Note that the Position of the character in the results is for the overall leaderboard.",
      "subgroup": "Characters",
      "titleTiers": null,
      "url": "/Server/GetCharacterLeaderboard",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetCharacterLeaderboardRequest",
      "requestExample": "{\r\n  \"StatisticName\": \"Kills\",\r\n  \"StartPosition\": 0,\r\n  \"MaxResultsCount\": 20\r\n}",
      "result": "GetCharacterLeaderboardResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Leaderboard\": [\r\n      {\r\n        \"PlayFabId\": \"10931252888739651331\",\r\n        \"CharacterId\": \"9874325\",\r\n        \"DisplayName\": \"username\",\r\n        \"CharacterType\": \"blue_warriors\",\r\n        \"StatValue\": 12,\r\n        \"Position\": 0\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "GetLeaderboardAroundCharacter",
        "GetCharacterStatistics",
        "UpdateCharacterStatistics"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetCharacterStatistics",
      "summary": "Retrieves the details of all title-specific statistics for the specific character",
      "requestDetails": "Character statistics are similar to user statistics in that they are numeric values which  may only be updated by a server operation, in order to minimize the opportunity for unauthorized changes. In addition to  being available for use by the title, the statistics are used for all leaderboard operations in PlayFab.",
      "subgroup": "Characters",
      "titleTiers": null,
      "url": "/Server/GetCharacterStatistics",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetCharacterStatisticsRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"10931252888739651331\",\r\n  \"CharacterId\": \"98765432\"\r\n}",
      "result": "GetCharacterStatisticsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"10931252888739651331\",\r\n    \"CharacterId\": \"98765432\",\r\n    \"CharacterStatistics\": {\r\n      \"Headshots\": 18,\r\n      \"Kills\": 47\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "GetLeaderboard",
        "GetUserStatistics",
        "UpdateCharacterStatistics"
      ],
      "errors": [
        "InvalidParams",
        "CharacterNotFound",
        "AccountNotFound"
      ]
    },
    {
      "name": "GetLeaderboardAroundCharacter",
      "summary": "Retrieves a list of ranked characters for the given statistic, centered on the requested user",
      "resultDetails": "Note that the Position of the user in the results is for the overall leaderboard.",
      "subgroup": "Characters",
      "titleTiers": null,
      "url": "/Server/GetLeaderboardAroundCharacter",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetLeaderboardAroundCharacterRequest",
      "requestExample": "{\r\n  \"StatisticName\": \"Kills\",\r\n  \"PlayFabId\": \"10931252888739651331\",\r\n  \"CharacterId\": \"987343220\",\r\n  \"MaxResultsCount\": 20\r\n}",
      "result": "GetLeaderboardAroundCharacterResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Leaderboard\": [\r\n      {\r\n        \"PlayFabId\": \"10931252888739651331\",\r\n        \"CharacterId\": \"987343220\",\r\n        \"CharacterName\": \"FighterDude\",\r\n        \"DisplayName\": \"username\",\r\n        \"CharacterType\": \"blue_warrior\",\r\n        \"StatValue\": 12,\r\n        \"Position\": 0\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "GetLeaderboard",
        "GetCharacterLeaderboard",
        "UpdateCharacterStatistics"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "GetLeaderboardForUserCharacters",
      "summary": "Retrieves a list of all of the user's characters for the given statistic.",
      "resultDetails": "Note that the Position of the user in the results is for the overall leaderboard.",
      "subgroup": "Characters",
      "titleTiers": null,
      "url": "/Server/GetLeaderboardForUserCharacters",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetLeaderboardForUsersCharactersRequest",
      "requestExample": "{\r\n  \"StatisticName\": \"Kills\",\r\n  \"PlayFabId\": \"10931252888739651331\",\r\n  \"MaxResultsCount\": 20\r\n}",
      "result": "GetLeaderboardForUsersCharactersResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Leaderboard\": [\r\n      {\r\n        \"PlayFabId\": \"10931252888739651331\",\r\n        \"CharacterId\": \"987343220\",\r\n        \"CharacterName\": \"FighterDude\",\r\n        \"DisplayName\": \"username\",\r\n        \"CharacterType\": \"blue_warrior\",\r\n        \"StatValue\": 12,\r\n        \"Position\": 0\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "GetLeaderboard",
        "GetLeaderboardAroundCharacter",
        "UpdateCharacterStatistics"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "GrantCharacterToUser",
      "summary": "Grants the specified character type to the user.",
      "requestDetails": "Grants a character to the user of the type and name specified in the request.",
      "subgroup": "Characters",
      "titleTiers": null,
      "url": "/Server/GrantCharacterToUser",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GrantCharacterToUserRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"20394883567\",\r\n  \"CharacterName\": \"FighterDude\",\r\n  \"CharacterType\": \"Blue Warrior\"\r\n}",
      "result": "GrantCharacterToUserResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"CharacterId\": \"98765432\"\r\n  }\r\n}",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateCharacterStatistics",
      "summary": "Updates the values of the specified title-specific statistics for the specific character",
      "requestDetails": "Character statistics are similar to user statistics in that they are numeric values which  may only be updated by a server operation, in order to minimize the opportunity for unauthorized changes. In addition to  being available for use by the title, the statistics are used for all leaderboard operations in PlayFab.",
      "subgroup": "Characters",
      "titleTiers": null,
      "url": "/Server/UpdateCharacterStatistics",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateCharacterStatisticsRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"10931252888739651331\",\r\n  \"CharacterId\": \"98765432\",\r\n  \"CharacterStatistics\": {\r\n    \"Headshots\": 18,\r\n    \"Kills\": 47\r\n  }\r\n}",
      "result": "UpdateCharacterStatisticsResult",
      "resultExample": "",
      "errors": [
        "InvalidParams",
        "CharacterNotFound",
        "AccountNotFound"
      ]
    },
    {
      "name": "GetCharacterData",
      "summary": "Retrieves the title-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Character Data",
      "titleTiers": null,
      "url": "/Server/GetCharacterData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetCharacterDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"CharacterId\": \"98342357\",\r\n  \"Keys\": [\r\n    \"preferences\",\r\n    \"progress\"\r\n  ],\r\n  \"IfChangedFromDataVersion\": 1\r\n}",
      "result": "GetCharacterDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"2039475\",\r\n    \"DataVersion\": 12,\r\n    \"Data\": {\r\n      \"preferences\": {\r\n        \"Value\": \"alpha\",\r\n        \"LastUpdated\": \"2014-08-20T12:30:45Z\",\r\n        \"Permission\": \"Public\"\r\n      },\r\n      \"progress\": {\r\n        \"Value\": \"level_twenty\",\r\n        \"LastUpdated\": \"2014-09-01T10:12:30Z\",\r\n        \"Permission\": \"Private\"\r\n      }\r\n    },\r\n    \"CharacterId\": \"3945734562\"\r\n  }\r\n}",
      "seeAlso": [
        "GetUserData",
        "UpdateCharacterData",
        "UpdateCharacterReadOnlyData",
        "UpdateCharacterInternalData"
      ],
      "errors": [
        "InvalidParams",
        "UserisNotValid",
        "CharacterNotFound"
      ]
    },
    {
      "name": "GetCharacterInternalData",
      "summary": "Retrieves the title-specific custom data for the user's character which cannot be accessed by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Character Data",
      "titleTiers": null,
      "url": "/Server/GetCharacterInternalData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetCharacterDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"CharacterId\": \"98342357\",\r\n  \"Keys\": [\r\n    \"preferences\",\r\n    \"progress\"\r\n  ],\r\n  \"IfChangedFromDataVersion\": 1\r\n}",
      "result": "GetCharacterDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"2039475\",\r\n    \"DataVersion\": 12,\r\n    \"Data\": {\r\n      \"preferences\": {\r\n        \"Value\": \"alpha\",\r\n        \"LastUpdated\": \"2014-08-20T12:30:45Z\",\r\n        \"Permission\": \"Public\"\r\n      },\r\n      \"progress\": {\r\n        \"Value\": \"level_twenty\",\r\n        \"LastUpdated\": \"2014-09-01T10:12:30Z\",\r\n        \"Permission\": \"Private\"\r\n      }\r\n    },\r\n    \"CharacterId\": \"3945734562\"\r\n  }\r\n}",
      "seeAlso": [
        "GetUserInternalData",
        "UpdateCharacterInternalData",
        "UpdateCharacterReadOnlyData",
        "UpdateCharacterData"
      ],
      "errors": [
        "InvalidParams",
        "UserisNotValid",
        "CharacterNotFound"
      ]
    },
    {
      "name": "GetCharacterReadOnlyData",
      "summary": "Retrieves the title-specific custom data for the user's character which can only be read by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom data will be returned.",
      "subgroup": "Character Data",
      "titleTiers": null,
      "url": "/Server/GetCharacterReadOnlyData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetCharacterDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"CharacterId\": \"98342357\",\r\n  \"Keys\": [\r\n    \"preferences\",\r\n    \"progress\"\r\n  ],\r\n  \"IfChangedFromDataVersion\": 1\r\n}",
      "result": "GetCharacterDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"2039475\",\r\n    \"DataVersion\": 12,\r\n    \"Data\": {\r\n      \"preferences\": {\r\n        \"Value\": \"alpha\",\r\n        \"LastUpdated\": \"2014-08-20T12:30:45Z\",\r\n        \"Permission\": \"Public\"\r\n      },\r\n      \"progress\": {\r\n        \"Value\": \"level_twenty\",\r\n        \"LastUpdated\": \"2014-09-01T10:12:30Z\",\r\n        \"Permission\": \"Private\"\r\n      }\r\n    },\r\n    \"CharacterId\": \"3945734562\"\r\n  }\r\n}",
      "seeAlso": [
        "GetUserReadOnlyData",
        "UpdateCharacterReadOnlyData",
        "GetCharacterInternalData",
        "GetCharacterData"
      ],
      "errors": [
        "InvalidParams",
        "UserisNotValid",
        "CharacterNotFound"
      ]
    },
    {
      "name": "UpdateCharacterData",
      "summary": "Updates the title-specific custom data for the user's chjaracter which is readable and writable by the client",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. No other key-value pairs will be changed apart  from those specified in the call.",
      "subgroup": "Character Data",
      "titleTiers": null,
      "url": "/Server/UpdateCharacterData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateCharacterDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"CharacterId\": \"98342357\",\r\n  \"Data\": {\r\n    \"Class\": \"Fighter\",\r\n    \"Gender\": \"Female\",\r\n    \"Icon\": \"Guard 3\",\r\n    \"Theme\": \"Colorful\"\r\n  },\r\n  \"Permission\": \"Public\"\r\n}",
      "result": "UpdateCharacterDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"DataVersion\": 13\r\n  }\r\n}",
      "seeAlso": [
        "UpdateUserData",
        "GetCharacterData",
        "UpdateCharacterReadOnlyData",
        "UpdateCharacterInternalData"
      ],
      "errors": [
        "InvalidParams",
        "UserisNotValid",
        "CharacterNotFound"
      ]
    },
    {
      "name": "UpdateCharacterInternalData",
      "summary": "Updates the title-specific custom data for the user's character which cannot  be accessed by the client",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed.  No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Character Data",
      "titleTiers": null,
      "url": "/Server/UpdateCharacterInternalData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateCharacterDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"CharacterId\": \"98342357\",\r\n  \"Data\": {\r\n    \"Class\": \"Fighter\",\r\n    \"Gender\": \"Female\",\r\n    \"Icon\": \"Guard 3\",\r\n    \"Theme\": \"Colorful\"\r\n  },\r\n  \"Permission\": \"Public\"\r\n}",
      "result": "UpdateCharacterDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"DataVersion\": 13\r\n  }\r\n}",
      "seeAlso": [
        "UpdateUserInternalData",
        "GetCharacterInternalData",
        "UpdateCharacterReadOnlyData",
        "UpdateCharacterData"
      ],
      "errors": [
        "InvalidParams",
        "UserisNotValid",
        "CharacterNotFound"
      ]
    },
    {
      "name": "UpdateCharacterReadOnlyData",
      "summary": "Updates the title-specific custom data for the user's character which can only be read by the client",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Character Data",
      "titleTiers": null,
      "url": "/Server/UpdateCharacterReadOnlyData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateCharacterDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"CharacterId\": \"98342357\",\r\n  \"Data\": {\r\n    \"Class\": \"Fighter\",\r\n    \"Gender\": \"Female\",\r\n    \"Icon\": \"Guard 3\",\r\n    \"Theme\": \"Colorful\"\r\n  },\r\n  \"Permission\": \"Public\"\r\n}",
      "result": "UpdateCharacterDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"DataVersion\": 13\r\n  }\r\n}",
      "seeAlso": [
        "GetUserReadOnlyData",
        "GetCharacterReadOnlyData",
        "GetCharacterInternalData",
        "GetCharacterData"
      ],
      "errors": [
        "InvalidParams",
        "UserisNotValid",
        "CharacterNotFound"
      ]
    }
  ],
  "subgroups": [
    {
      "name": "Authentication",
      "methods": [
        "AuthenticateSessionTicket"
      ]
    },
    {
      "name": "Account Management",
      "methods": [
        "GetPlayFabIDsFromFacebookIDs",
        "GetUserAccountInfo",
        "SendPushNotification"
      ]
    },
    {
      "name": "Player Data Management",
      "methods": [
        "DeleteUsers",
        "GetLeaderboard",
        "GetLeaderboardAroundUser",
        "GetUserData",
        "GetUserInternalData",
        "GetUserPublisherData",
        "GetUserPublisherInternalData",
        "GetUserPublisherReadOnlyData",
        "GetUserReadOnlyData",
        "GetUserStatistics",
        "UpdateUserData",
        "UpdateUserInternalData",
        "UpdateUserPublisherData",
        "UpdateUserPublisherInternalData",
        "UpdateUserPublisherReadOnlyData",
        "UpdateUserReadOnlyData",
        "UpdateUserStatistics"
      ]
    },
    {
      "name": "Title-Wide Data Management",
      "methods": [
        "GetCatalogItems",
        "GetTitleData",
        "GetTitleInternalData",
        "GetTitleNews",
        "SetTitleData",
        "SetTitleInternalData"
      ]
    },
    {
      "name": "Player Item Management",
      "methods": [
        "AddCharacterVirtualCurrency",
        "AddUserVirtualCurrency",
        "GetCharacterInventory",
        "GetUserInventory",
        "GrantItemsToCharacter",
        "GrantItemsToUser",
        "GrantItemsToUsers",
        "ModifyItemUses",
        "MoveItemToCharacterFromCharacter",
        "MoveItemToCharacterFromUser",
        "MoveItemToUserFromCharacter",
        "RedeemCoupon",
        "ReportPlayer",
        "SubtractCharacterVirtualCurrency",
        "SubtractUserVirtualCurrency",
        "UpdateUserInventoryItemCustomData"
      ]
    },
    {
      "name": "Friend List Management",
      "methods": []
    },
    {
      "name": "Matchmaking APIs",
      "methods": [
        "NotifyMatchmakerPlayerLeft",
        "RedeemMatchmakerTicket"
      ]
    },
    {
      "name": "Steam-Specific APIs",
      "methods": [
        "AwardSteamAchievement"
      ]
    },
    {
      "name": "Analytics",
      "methods": [
        "LogEvent"
      ]
    },
    {
      "name": "Shared Group Data",
      "methods": [
        "AddSharedGroupMembers",
        "CreateSharedGroup",
        "DeleteSharedGroup",
        "GetPublisherData",
        "GetSharedGroupData",
        "RemoveSharedGroupMembers",
        "SetPublisherData",
        "UpdateSharedGroupData"
      ]
    },
    {
      "name": "Content",
      "methods": [
        "GetContentDownloadUrl"
      ]
    },
    {
      "name": "Characters",
      "methods": [
        "DeleteCharacterFromUser",
        "GetAllUsersCharacters",
        "GetCharacterLeaderboard",
        "GetCharacterStatistics",
        "GetLeaderboardAroundCharacter",
        "GetLeaderboardForUserCharacters",
        "GrantCharacterToUser",
        "UpdateCharacterStatistics"
      ]
    },
    {
      "name": "Character Data",
      "methods": [
        "GetCharacterData",
        "GetCharacterInternalData",
        "GetCharacterReadOnlyData",
        "UpdateCharacterData",
        "UpdateCharacterInternalData",
        "UpdateCharacterReadOnlyData"
      ]
    }
  ],
  "errors": {
    "Success": {
      "id": 0,
      "name": "Success"
    },
    "InvalidParams": {
      "id": 1000,
      "name": "InvalidParams"
    },
    "AccountNotFound": {
      "id": 1001,
      "name": "AccountNotFound"
    },
    "AccountBanned": {
      "id": 1002,
      "name": "AccountBanned"
    },
    "InvalidUsernameOrPassword": {
      "id": 1003,
      "name": "InvalidUsernameOrPassword"
    },
    "InvalidTitleId": {
      "id": 1004,
      "name": "InvalidTitleId"
    },
    "InvalidEmailAddress": {
      "id": 1005,
      "name": "InvalidEmailAddress"
    },
    "EmailAddressNotAvailable": {
      "id": 1006,
      "name": "EmailAddressNotAvailable"
    },
    "InvalidUsername": {
      "id": 1007,
      "name": "InvalidUsername"
    },
    "InvalidPassword": {
      "id": 1008,
      "name": "InvalidPassword"
    },
    "UsernameNotAvailable": {
      "id": 1009,
      "name": "UsernameNotAvailable"
    },
    "InvalidSteamTicket": {
      "id": 1010,
      "name": "InvalidSteamTicket"
    },
    "AccountAlreadyLinked": {
      "id": 1011,
      "name": "AccountAlreadyLinked"
    },
    "LinkedAccountAlreadyClaimed": {
      "id": 1012,
      "name": "LinkedAccountAlreadyClaimed"
    },
    "InvalidFacebookToken": {
      "id": 1013,
      "name": "InvalidFacebookToken"
    },
    "AccountNotLinked": {
      "id": 1014,
      "name": "AccountNotLinked"
    },
    "FailedByPaymentProvider": {
      "id": 1015,
      "name": "FailedByPaymentProvider"
    },
    "CouponCodeNotFound": {
      "id": 1016,
      "name": "CouponCodeNotFound"
    },
    "InvalidContainerItem": {
      "id": 1017,
      "name": "InvalidContainerItem"
    },
    "ContainerNotOwned": {
      "id": 1018,
      "name": "ContainerNotOwned"
    },
    "KeyNotOwned": {
      "id": 1019,
      "name": "KeyNotOwned"
    },
    "InvalidItemIdInTable": {
      "id": 1020,
      "name": "InvalidItemIdInTable"
    },
    "InvalidReceipt": {
      "id": 1021,
      "name": "InvalidReceipt"
    },
    "ReceiptAlreadyUsed": {
      "id": 1022,
      "name": "ReceiptAlreadyUsed"
    },
    "ReceiptCancelled": {
      "id": 1023,
      "name": "ReceiptCancelled"
    },
    "GameNotFound": {
      "id": 1024,
      "name": "GameNotFound"
    },
    "GameModeNotFound": {
      "id": 1025,
      "name": "GameModeNotFound"
    },
    "InvalidGoogleToken": {
      "id": 1026,
      "name": "InvalidGoogleToken"
    },
    "UserIsNotPartOfDeveloper": {
      "id": 1027,
      "name": "UserIsNotPartOfDeveloper"
    },
    "InvalidTitleForDeveloper": {
      "id": 1028,
      "name": "InvalidTitleForDeveloper"
    },
    "TitleNameConflicts": {
      "id": 1029,
      "name": "TitleNameConflicts"
    },
    "UserisNotValid": {
      "id": 1030,
      "name": "UserisNotValid"
    },
    "ValueAlreadyExists": {
      "id": 1031,
      "name": "ValueAlreadyExists"
    },
    "BuildNotFound": {
      "id": 1032,
      "name": "BuildNotFound"
    },
    "PlayerNotInGame": {
      "id": 1033,
      "name": "PlayerNotInGame"
    },
    "InvalidTicket": {
      "id": 1034,
      "name": "InvalidTicket"
    },
    "InvalidDeveloper": {
      "id": 1035,
      "name": "InvalidDeveloper"
    },
    "InvalidOrderInfo": {
      "id": 1036,
      "name": "InvalidOrderInfo"
    },
    "RegistrationIncomplete": {
      "id": 1037,
      "name": "RegistrationIncomplete"
    },
    "InvalidPlatform": {
      "id": 1038,
      "name": "InvalidPlatform"
    },
    "UnknownError": {
      "id": 1039,
      "name": "UnknownError"
    },
    "SteamApplicationNotOwned": {
      "id": 1040,
      "name": "SteamApplicationNotOwned"
    },
    "WrongSteamAccount": {
      "id": 1041,
      "name": "WrongSteamAccount"
    },
    "TitleNotActivated": {
      "id": 1042,
      "name": "TitleNotActivated"
    },
    "RegistrationSessionNotFound": {
      "id": 1043,
      "name": "RegistrationSessionNotFound"
    },
    "NoSuchMod": {
      "id": 1044,
      "name": "NoSuchMod"
    },
    "FileNotFound": {
      "id": 1045,
      "name": "FileNotFound"
    },
    "DuplicateEmail": {
      "id": 1046,
      "name": "DuplicateEmail"
    },
    "ItemNotFound": {
      "id": 1047,
      "name": "ItemNotFound"
    },
    "ItemNotOwned": {
      "id": 1048,
      "name": "ItemNotOwned"
    },
    "ItemNotRecycleable": {
      "id": 1049,
      "name": "ItemNotRecycleable"
    },
    "ItemNotAffordable": {
      "id": 1050,
      "name": "ItemNotAffordable"
    },
    "InvalidVirtualCurrency": {
      "id": 1051,
      "name": "InvalidVirtualCurrency"
    },
    "WrongVirtualCurrency": {
      "id": 1052,
      "name": "WrongVirtualCurrency"
    },
    "WrongPrice": {
      "id": 1053,
      "name": "WrongPrice"
    },
    "NonPositiveValue": {
      "id": 1054,
      "name": "NonPositiveValue"
    },
    "InvalidRegion": {
      "id": 1055,
      "name": "InvalidRegion"
    },
    "RegionAtCapacity": {
      "id": 1056,
      "name": "RegionAtCapacity"
    },
    "ServerFailedToStart": {
      "id": 1057,
      "name": "ServerFailedToStart"
    },
    "NameNotAvailable": {
      "id": 1058,
      "name": "NameNotAvailable"
    },
    "InsufficientFunds": {
      "id": 1059,
      "name": "InsufficientFunds"
    },
    "InvalidDeviceID": {
      "id": 1060,
      "name": "InvalidDeviceID"
    },
    "InvalidPushNotificationToken": {
      "id": 1061,
      "name": "InvalidPushNotificationToken"
    },
    "NoRemainingUses": {
      "id": 1062,
      "name": "NoRemainingUses"
    },
    "InvalidPaymentProvider": {
      "id": 1063,
      "name": "InvalidPaymentProvider"
    },
    "PurchaseInitializationFailure": {
      "id": 1064,
      "name": "PurchaseInitializationFailure"
    },
    "DuplicateUsername": {
      "id": 1065,
      "name": "DuplicateUsername"
    },
    "InvalidBuyerInfo": {
      "id": 1066,
      "name": "InvalidBuyerInfo"
    },
    "NoGameModeParamsSet": {
      "id": 1067,
      "name": "NoGameModeParamsSet"
    },
    "BodyTooLarge": {
      "id": 1068,
      "name": "BodyTooLarge"
    },
    "ReservedWordInBody": {
      "id": 1069,
      "name": "ReservedWordInBody"
    },
    "InvalidTypeInBody": {
      "id": 1070,
      "name": "InvalidTypeInBody"
    },
    "InvalidRequest": {
      "id": 1071,
      "name": "InvalidRequest"
    },
    "ReservedEventName": {
      "id": 1072,
      "name": "ReservedEventName"
    },
    "InvalidUserStatistics": {
      "id": 1073,
      "name": "InvalidUserStatistics"
    },
    "NotAuthenticated": {
      "id": 1074,
      "name": "NotAuthenticated"
    },
    "StreamAlreadyExists": {
      "id": 1075,
      "name": "StreamAlreadyExists"
    },
    "ErrorCreatingStream": {
      "id": 1076,
      "name": "ErrorCreatingStream"
    },
    "StreamNotFound": {
      "id": 1077,
      "name": "StreamNotFound"
    },
    "InvalidAccount": {
      "id": 1078,
      "name": "InvalidAccount"
    },
    "PurchaseDoesNotExist": {
      "id": 1080,
      "name": "PurchaseDoesNotExist"
    },
    "InvalidPurchaseTransactionStatus": {
      "id": 1081,
      "name": "InvalidPurchaseTransactionStatus"
    },
    "APINotEnabledForGameClientAccess": {
      "id": 1082,
      "name": "APINotEnabledForGameClientAccess"
    },
    "NoPushNotificationARNForTitle": {
      "id": 1083,
      "name": "NoPushNotificationARNForTitle"
    },
    "BuildAlreadyExists": {
      "id": 1084,
      "name": "BuildAlreadyExists"
    },
    "BuildPackageDoesNotExist": {
      "id": 1085,
      "name": "BuildPackageDoesNotExist"
    },
    "CustomAnalyticsEventsNotEnabledForTitle": {
      "id": 1087,
      "name": "CustomAnalyticsEventsNotEnabledForTitle"
    },
    "InvalidSharedGroupId": {
      "id": 1088,
      "name": "InvalidSharedGroupId"
    },
    "NotAuthorized": {
      "id": 1089,
      "name": "NotAuthorized"
    },
    "MissingTitleGoogleProperties": {
      "id": 1090,
      "name": "MissingTitleGoogleProperties"
    },
    "InvalidItemProperties": {
      "id": 1091,
      "name": "InvalidItemProperties"
    },
    "InvalidPSNAuthCode": {
      "id": 1092,
      "name": "InvalidPSNAuthCode"
    },
    "InvalidItemId": {
      "id": 1093,
      "name": "InvalidItemId"
    },
    "PushNotEnabledForAccount": {
      "id": 1094,
      "name": "PushNotEnabledForAccount"
    },
    "PushServiceError": {
      "id": 1095,
      "name": "PushServiceError"
    },
    "ReceiptDoesNotContainInAppItems": {
      "id": 1096,
      "name": "ReceiptDoesNotContainInAppItems"
    },
    "ReceiptContainsMultipleInAppItems": {
      "id": 1097,
      "name": "ReceiptContainsMultipleInAppItems"
    },
    "InvalidBundleID": {
      "id": 1098,
      "name": "InvalidBundleID"
    },
    "JavascriptException": {
      "id": 1099,
      "name": "JavascriptException"
    },
    "InvalidSessionTicket": {
      "id": 1100,
      "name": "InvalidSessionTicket"
    },
    "UnableToConnectToDatabase": {
      "id": 1101,
      "name": "UnableToConnectToDatabase"
    },
    "InternalServerError": {
      "id": 1110,
      "name": "InternalServerError"
    },
    "InvalidReportDate": {
      "id": 1111,
      "name": "InvalidReportDate"
    },
    "ReportNotAvailable": {
      "id": 1112,
      "name": "ReportNotAvailable"
    },
    "DatabaseThroughputExceeded": {
      "id": 1113,
      "name": "DatabaseThroughputExceeded"
    },
    "InvalidLobbyId": {
      "id": 1114,
      "name": "InvalidLobbyId"
    },
    "InvalidGameTicket": {
      "id": 1115,
      "name": "InvalidGameTicket"
    },
    "ExpiredGameTicket": {
      "id": 1116,
      "name": "ExpiredGameTicket"
    },
    "GameTicketDoesNotMatchLobby": {
      "id": 1117,
      "name": "GameTicketDoesNotMatchLobby"
    },
    "LinkedDeviceAlreadyClaimed": {
      "id": 1118,
      "name": "LinkedDeviceAlreadyClaimed"
    },
    "DeviceAlreadyLinked": {
      "id": 1119,
      "name": "DeviceAlreadyLinked"
    },
    "DeviceNotLinked": {
      "id": 1120,
      "name": "DeviceNotLinked"
    },
    "PartialFailure": {
      "id": 1121,
      "name": "PartialFailure"
    },
    "PublisherNotSet": {
      "id": 1122,
      "name": "PublisherNotSet"
    },
    "ServiceUnavailable": {
      "id": 1123,
      "name": "ServiceUnavailable"
    },
    "VersionNotFound": {
      "id": 1124,
      "name": "VersionNotFound"
    },
    "RevisionNotFound": {
      "id": 1125,
      "name": "RevisionNotFound"
    },
    "InvalidPublisherId": {
      "id": 1126,
      "name": "InvalidPublisherId"
    },
    "DownstreamServiceUnavailable": {
      "id": 1127,
      "name": "DownstreamServiceUnavailable"
    },
    "APINotIncludedInTitleUsageTier": {
      "id": 1128,
      "name": "APINotIncludedInTitleUsageTier"
    },
    "DAULimitExceeded": {
      "id": 1129,
      "name": "DAULimitExceeded"
    },
    "APIRequestLimitExceeded": {
      "id": 1130,
      "name": "APIRequestLimitExceeded"
    },
    "InvalidAPIEndpoint": {
      "id": 1131,
      "name": "InvalidAPIEndpoint"
    },
    "BuildNotAvailable": {
      "id": 1132,
      "name": "BuildNotAvailable"
    },
    "ConcurrentEditError": {
      "id": 1133,
      "name": "ConcurrentEditError"
    },
    "ContentNotFound": {
      "id": 1134,
      "name": "ContentNotFound"
    },
    "CharacterNotFound": {
      "id": 1135,
      "name": "CharacterNotFound"
    },
    "CloudScriptNotFound": {
      "id": 1136,
      "name": "CloudScriptNotFound"
    },
    "ContentQuotaExceeded": {
      "id": 1137,
      "name": "ContentQuotaExceeded"
    },
    "InvalidCharacterStatistics": {
      "id": 1138,
      "name": "InvalidCharacterStatistics"
    },
    "PhotonNotEnabledForTitle": {
      "id": 1139,
      "name": "PhotonNotEnabledForTitle"
    },
    "PhotonApplicationNotFound": {
      "id": 1140,
      "name": "PhotonApplicationNotFound"
    },
    "PhotonApplicationNotAssociatedWithTitle": {
      "id": 1141,
      "name": "PhotonApplicationNotAssociatedWithTitle"
    },
    "InvalidEmailOrPassword": {
      "id": 1142,
      "name": "InvalidEmailOrPassword"
    },
    "FacebookAPIError": {
      "id": 1143,
      "name": "FacebookAPIError"
    },
    "InvalidContentType": {
      "id": 1144,
      "name": "InvalidContentType"
    },
    "KeyLengthExceeded": {
      "id": 1145,
      "name": "KeyLengthExceeded"
    },
    "DataLengthExceeded": {
      "id": 1146,
      "name": "DataLengthExceeded"
    },
    "TooManyKeys": {
      "id": 1147,
      "name": "TooManyKeys"
    },
    "FreeTierCannotHaveVirtualCurrency": {
      "id": 1148,
      "name": "FreeTierCannotHaveVirtualCurrency"
    },
    "MissingAmazonSharedKey": {
      "id": 1149,
      "name": "MissingAmazonSharedKey"
    },
    "AmazonValidationError": {
      "id": 1150,
      "name": "AmazonValidationError"
    },
    "InvalidPSNIssuerId": {
      "id": 1151,
      "name": "InvalidPSNIssuerId"
    },
    "PSNInaccessible": {
      "id": 1152,
      "name": "PSNInaccessible"
    },
    "ExpiredAuthToken": {
      "id": 1153,
      "name": "ExpiredAuthToken"
    },
    "FailedToGetEntitlements": {
      "id": 1154,
      "name": "FailedToGetEntitlements"
    },
    "FailedToConsumeEntitlement": {
      "id": 1155,
      "name": "FailedToConsumeEntitlement"
    },
    "TradeAcceptingUserNotAllowed": {
      "id": 1156,
      "name": "TradeAcceptingUserNotAllowed"
    },
    "TradeInventoryItemIsAssignedToCharacter": {
      "id": 1157,
      "name": "TradeInventoryItemIsAssignedToCharacter"
    },
    "TradeInventoryItemIsBundle": {
      "id": 1158,
      "name": "TradeInventoryItemIsBundle"
    },
    "TradeStatusNotValidForCancelling": {
      "id": 1159,
      "name": "TradeStatusNotValidForCancelling"
    },
    "TradeStatusNotValidForAccepting": {
      "id": 1160,
      "name": "TradeStatusNotValidForAccepting"
    },
    "TradeDoesNotExist": {
      "id": 1161,
      "name": "TradeDoesNotExist"
    },
    "TradeCancelled": {
      "id": 1162,
      "name": "TradeCancelled"
    },
    "TradeAlreadyFilled": {
      "id": 1163,
      "name": "TradeAlreadyFilled"
    },
    "TradeWaitForStatusTimeout": {
      "id": 1164,
      "name": "TradeWaitForStatusTimeout"
    },
    "TradeInventoryItemExpired": {
      "id": 1165,
      "name": "TradeInventoryItemExpired"
    },
    "TradeMissingOfferedAndAcceptedItems": {
      "id": 1166,
      "name": "TradeMissingOfferedAndAcceptedItems"
    },
    "TradeAcceptedItemIsBundle": {
      "id": 1167,
      "name": "TradeAcceptedItemIsBundle"
    },
    "TradeAcceptedItemIsStackable": {
      "id": 1168,
      "name": "TradeAcceptedItemIsStackable"
    },
    "TradeInventoryItemInvalidStatus": {
      "id": 1169,
      "name": "TradeInventoryItemInvalidStatus"
    },
    "TradeAcceptedCatalogItemInvalid": {
      "id": 1170,
      "name": "TradeAcceptedCatalogItemInvalid"
    },
    "TradeAllowedUsersInvalid": {
      "id": 1171,
      "name": "TradeAllowedUsersInvalid"
    },
    "TradeInventoryItemDoesNotExist": {
      "id": 1172,
      "name": "TradeInventoryItemDoesNotExist"
    },
    "TradeInventoryItemIsConsumed": {
      "id": 1173,
      "name": "TradeInventoryItemIsConsumed"
    },
    "TradeInventoryItemIsStackable": {
      "id": 1174,
      "name": "TradeInventoryItemIsStackable"
    },
    "TradeAcceptedItemsMismatch": {
      "id": 1175,
      "name": "TradeAcceptedItemsMismatch"
    },
    "InvalidKongregateToken": {
      "id": 1176,
      "name": "InvalidKongregateToken"
    },
    "FeatureNotConfiguredForTitle": {
      "id": 1177,
      "name": "FeatureNotConfiguredForTitle"
    },
    "NoMatchingCatalogItemForReceipt": {
      "id": 1178,
      "name": "NoMatchingCatalogItemForReceipt"
    },
    "InvalidCurrencyCode": {
      "id": 1179,
      "name": "InvalidCurrencyCode"
    },
    "NoRealMoneyPriceForCatalogItem": {
      "id": 1180,
      "name": "NoRealMoneyPriceForCatalogItem"
    },
    "TradeInventoryItemIsNotTradable": {
      "id": 1181,
      "name": "TradeInventoryItemIsNotTradable"
    },
    "TradeAcceptedCatalogItemIsNotTradable": {
      "id": 1182,
      "name": "TradeAcceptedCatalogItemIsNotTradable"
    },
    "UsersAlreadyFriends": {
      "id": 1183,
      "name": "UsersAlreadyFriends"
    },
    "LinkedIdentifierAlreadyClaimed": {
      "id": 1184,
      "name": "LinkedIdentifierAlreadyClaimed"
    },
    "CustomIdNotLinked": {
      "id": 1185,
      "name": "CustomIdNotLinked"
    },
    "TotalDataSizeExceeded": {
      "id": 1186,
      "name": "TotalDataSizeExceeded"
    },
    "DeleteKeyConflict": {
      "id": 1187,
      "name": "DeleteKeyConflict"
    },
    "InvalidXboxLiveToken": {
      "id": 1188,
      "name": "InvalidXboxLiveToken"
    },
    "ExpiredXboxLiveToken": {
      "id": 1189,
      "name": "ExpiredXboxLiveToken"
    },
    "ResettableStatisticVersionRequired": {
      "id": 1190,
      "name": "ResettableStatisticVersionRequired"
    },
    "NotAuthorizedByTitle": {
      "id": 1191,
      "name": "NotAuthorizedByTitle"
    },
    "NoPartnerEnabled": {
      "id": 1192,
      "name": "NoPartnerEnabled"
    },
    "InvalidPartnerResponse": {
      "id": 1193,
      "name": "InvalidPartnerResponse"
    },
    "APINotEnabledForGameServerAccess": {
      "id": 1194,
      "name": "APINotEnabledForGameServerAccess"
    },
    "StatisticNotFound": {
      "id": 1195,
      "name": "StatisticNotFound"
    },
    "StatisticNameConflict": {
      "id": 1196,
      "name": "StatisticNameConflict"
    }
  },
  "errorList": [
    "Success",
    "InvalidParams",
    "AccountNotFound",
    "AccountBanned",
    "InvalidUsernameOrPassword",
    "InvalidTitleId",
    "InvalidEmailAddress",
    "EmailAddressNotAvailable",
    "InvalidUsername",
    "InvalidPassword",
    "UsernameNotAvailable",
    "InvalidSteamTicket",
    "AccountAlreadyLinked",
    "LinkedAccountAlreadyClaimed",
    "InvalidFacebookToken",
    "AccountNotLinked",
    "FailedByPaymentProvider",
    "CouponCodeNotFound",
    "InvalidContainerItem",
    "ContainerNotOwned",
    "KeyNotOwned",
    "InvalidItemIdInTable",
    "InvalidReceipt",
    "ReceiptAlreadyUsed",
    "ReceiptCancelled",
    "GameNotFound",
    "GameModeNotFound",
    "InvalidGoogleToken",
    "UserIsNotPartOfDeveloper",
    "InvalidTitleForDeveloper",
    "TitleNameConflicts",
    "UserisNotValid",
    "ValueAlreadyExists",
    "BuildNotFound",
    "PlayerNotInGame",
    "InvalidTicket",
    "InvalidDeveloper",
    "InvalidOrderInfo",
    "RegistrationIncomplete",
    "InvalidPlatform",
    "UnknownError",
    "SteamApplicationNotOwned",
    "WrongSteamAccount",
    "TitleNotActivated",
    "RegistrationSessionNotFound",
    "NoSuchMod",
    "FileNotFound",
    "DuplicateEmail",
    "ItemNotFound",
    "ItemNotOwned",
    "ItemNotRecycleable",
    "ItemNotAffordable",
    "InvalidVirtualCurrency",
    "WrongVirtualCurrency",
    "WrongPrice",
    "NonPositiveValue",
    "InvalidRegion",
    "RegionAtCapacity",
    "ServerFailedToStart",
    "NameNotAvailable",
    "InsufficientFunds",
    "InvalidDeviceID",
    "InvalidPushNotificationToken",
    "NoRemainingUses",
    "InvalidPaymentProvider",
    "PurchaseInitializationFailure",
    "DuplicateUsername",
    "InvalidBuyerInfo",
    "NoGameModeParamsSet",
    "BodyTooLarge",
    "ReservedWordInBody",
    "InvalidTypeInBody",
    "InvalidRequest",
    "ReservedEventName",
    "InvalidUserStatistics",
    "NotAuthenticated",
    "StreamAlreadyExists",
    "ErrorCreatingStream",
    "StreamNotFound",
    "InvalidAccount",
    "PurchaseDoesNotExist",
    "InvalidPurchaseTransactionStatus",
    "APINotEnabledForGameClientAccess",
    "NoPushNotificationARNForTitle",
    "BuildAlreadyExists",
    "BuildPackageDoesNotExist",
    "CustomAnalyticsEventsNotEnabledForTitle",
    "InvalidSharedGroupId",
    "NotAuthorized",
    "MissingTitleGoogleProperties",
    "InvalidItemProperties",
    "InvalidPSNAuthCode",
    "InvalidItemId",
    "PushNotEnabledForAccount",
    "PushServiceError",
    "ReceiptDoesNotContainInAppItems",
    "ReceiptContainsMultipleInAppItems",
    "InvalidBundleID",
    "JavascriptException",
    "InvalidSessionTicket",
    "UnableToConnectToDatabase",
    "InternalServerError",
    "InvalidReportDate",
    "ReportNotAvailable",
    "DatabaseThroughputExceeded",
    "InvalidLobbyId",
    "InvalidGameTicket",
    "ExpiredGameTicket",
    "GameTicketDoesNotMatchLobby",
    "LinkedDeviceAlreadyClaimed",
    "DeviceAlreadyLinked",
    "DeviceNotLinked",
    "PartialFailure",
    "PublisherNotSet",
    "ServiceUnavailable",
    "VersionNotFound",
    "RevisionNotFound",
    "InvalidPublisherId",
    "DownstreamServiceUnavailable",
    "APINotIncludedInTitleUsageTier",
    "DAULimitExceeded",
    "APIRequestLimitExceeded",
    "InvalidAPIEndpoint",
    "BuildNotAvailable",
    "ConcurrentEditError",
    "ContentNotFound",
    "CharacterNotFound",
    "CloudScriptNotFound",
    "ContentQuotaExceeded",
    "InvalidCharacterStatistics",
    "PhotonNotEnabledForTitle",
    "PhotonApplicationNotFound",
    "PhotonApplicationNotAssociatedWithTitle",
    "InvalidEmailOrPassword",
    "FacebookAPIError",
    "InvalidContentType",
    "KeyLengthExceeded",
    "DataLengthExceeded",
    "TooManyKeys",
    "FreeTierCannotHaveVirtualCurrency",
    "MissingAmazonSharedKey",
    "AmazonValidationError",
    "InvalidPSNIssuerId",
    "PSNInaccessible",
    "ExpiredAuthToken",
    "FailedToGetEntitlements",
    "FailedToConsumeEntitlement",
    "TradeAcceptingUserNotAllowed",
    "TradeInventoryItemIsAssignedToCharacter",
    "TradeInventoryItemIsBundle",
    "TradeStatusNotValidForCancelling",
    "TradeStatusNotValidForAccepting",
    "TradeDoesNotExist",
    "TradeCancelled",
    "TradeAlreadyFilled",
    "TradeWaitForStatusTimeout",
    "TradeInventoryItemExpired",
    "TradeMissingOfferedAndAcceptedItems",
    "TradeAcceptedItemIsBundle",
    "TradeAcceptedItemIsStackable",
    "TradeInventoryItemInvalidStatus",
    "TradeAcceptedCatalogItemInvalid",
    "TradeAllowedUsersInvalid",
    "TradeInventoryItemDoesNotExist",
    "TradeInventoryItemIsConsumed",
    "TradeInventoryItemIsStackable",
    "TradeAcceptedItemsMismatch",
    "InvalidKongregateToken",
    "FeatureNotConfiguredForTitle",
    "NoMatchingCatalogItemForReceipt",
    "InvalidCurrencyCode",
    "NoRealMoneyPriceForCatalogItem",
    "TradeInventoryItemIsNotTradable",
    "TradeAcceptedCatalogItemIsNotTradable",
    "UsersAlreadyFriends",
    "LinkedIdentifierAlreadyClaimed",
    "CustomIdNotLinked",
    "TotalDataSizeExceeded",
    "DeleteKeyConflict",
    "InvalidXboxLiveToken",
    "ExpiredXboxLiveToken",
    "ResettableStatisticVersionRequired",
    "NotAuthorizedByTitle",
    "NoPartnerEnabled",
    "InvalidPartnerResponse",
    "APINotEnabledForGameServerAccess",
    "StatisticNotFound",
    "StatisticNameConflict"
  ]
}