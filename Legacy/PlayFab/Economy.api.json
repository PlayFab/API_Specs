{
  "name": "Economy",
  "url": "/Economy",
  "description": "API methods for managing User Generated Content. API methods for managing the catalog. Inventory manages in-game assets for any given entity.",
  "apiDescriptionList": [
    "API methods for managing User Generated Content.",
    "API methods for managing the catalog.",
    "Inventory manages in-game assets for any given entity."
  ],
  "AnyInclusiveFlags": [
    "Beta"
  ],
  "datatypes": {
    "AccessToken": {
      "name": "AccessToken",
      "className": "AccessToken",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "ExpiresOn",
          "description": "The date time the access token expires.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Token",
          "description": "The access token.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "AddInventoryItemsRequest": {
      "name": "AddInventoryItemsRequest",
      "className": "AddInventoryItemsRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Given an entity type, entity identifier and container details, will add the specified inventory items.",
      "isRequest": true,
      "properties": [
        {
          "name": "CountryCode",
          "description": "The country code of the real money transaction.",
          "jsontype": "String",
          "actualtype": "CountryCode",
          "isenum": true,
          "optional": true
        },
        {
          "name": "CurrencyCode",
          "description": "The currency code of the real money transaction.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency ID for this request.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Items",
          "description": "A list of Items to modify.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PurchasePrice",
          "description": "Purchase price of the offer.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "ReturnInventory",
          "description": "Indicates if the full inventory should be returned.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "AddInventoryItemsResult": {
      "name": "AddInventoryItemsResult",
      "className": "AddInventoryItemsResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The idempotency ID for this request.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "InventoryItems",
          "description": "Details of the current inventory items. Null if ReturnInventory was set to false in request or InventoryTooLarge is set to true in response.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "InventoryTooLarge",
          "description": "Whether the number of inventory items is too large to be returned.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "UpdatedItems",
          "description": "The updated items for this request.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "AddVirtualCurrenciesRequest": {
      "name": "AddVirtualCurrenciesRequest",
      "className": "AddVirtualCurrenciesRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Given an entity type, entity identifier and container details, will increase the entity's currencies by a specific amount. ",
      "isRequest": true,
      "properties": [
        {
          "name": "CountryCode",
          "description": "The country code where the real money transaction took place",
          "jsontype": "String",
          "actualtype": "CountryCode",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Currencies",
          "description": "A list of currencies to modify",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CurrencyDetails",
          "isclass": true,
          "optional": false
        },
        {
          "name": "CurrencyCode",
          "description": "The currency code of the real money transaction",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchasePrice",
          "description": "Purchase price of the offer",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "AddVirtualCurrenciesResult": {
      "name": "AddVirtualCurrenciesResult",
      "className": "AddVirtualCurrenciesResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "Currencies",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CurrencyResponseDto",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CatalogAlternateId": {
      "name": "CatalogAlternateId",
      "className": "CatalogAlternateId",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Type",
          "description": "Type of the alternate ID.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Value",
          "description": "Value of the alternate ID.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CatalogConfig": {
      "name": "CatalogConfig",
      "className": "CatalogConfig",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Admins",
          "description": "A list of title player accounts that will have admin permissions.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Catalog",
          "description": "The set of configuration that only applies to catalog items.",
          "jsontype": "Object",
          "actualtype": "CatalogSpecificConfig",
          "isclass": true,
          "optional": true
        },
        {
          "name": "CustomCdnDomains",
          "description": "A set of Custom CDN domains to maps default domains to.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CustomCdnDomain",
          "isclass": true,
          "optional": true
        },
        {
          "name": "DeepLinkFormats",
          "description": "A list of deep link formats.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "DeepLinkFormat",
          "isclass": true,
          "optional": true
        },
        {
          "name": "DisplayPropertyIndexInfos",
          "description": "A list of display properties to index.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "DisplayPropertyIndexInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Reviewers",
          "description": "A set of player entity keys that are allowed to review content.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Search",
          "description": "A set of search configurations that can be applied to a search query.",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "SearchConfig",
          "isclass": true,
          "optional": true
        },
        {
          "name": "UserGeneratedContent",
          "description": "The set of configuration that only applies to user generated contents.",
          "jsontype": "Object",
          "actualtype": "UserGeneratedContentSpecificConfig",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CatalogItem": {
      "name": "CatalogItem",
      "className": "CatalogItem",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "AllowMultipleStacks",
          "description": "Indicates whether there can be multiple stacks of this item.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "AlternateIds",
          "description": "The alternate IDs associated with this item.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "BoostFactor",
          "description": "The boost factor applied at search time of the item.",
          "jsontype": "Number",
          "actualtype": "double",
          "optional": true
        },
        {
          "name": "Contents",
          "description": "The set of contents associated with this item.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "Content",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ContentType",
          "description": "The client-defined type of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CreationDate",
          "description": "The date and time when this item was created.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "CreatorEntityKey",
          "description": "The ID of the creator of this catalog item.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "DeepLinks",
          "description": "The set of platform specific deep links for this item.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "DeepLink",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Description",
          "description": "A dictionary of localized descriptions. Key is language code and localized string is the value. The neutral locale is required.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayProperties",
          "description": "Game specific properties for display purposes. This is an arbitrary JSON blob.",
          "jsontype": "Object",
          "actualtype": "object",
          "optional": true
        },
        {
          "name": "DisplayVersion",
          "description": "The user provided version of the item for display purposes.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "EndDate",
          "description": "The date of when the item will cease to be available. If not provided then the product will be available indefinitely.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "ETag",
          "description": "The current ETag value that can be used for optimistic concurrency in the If-None-Match header.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Id",
          "description": "The unique ID of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Images",
          "description": "The images associated with this item. Images can be thumbnails or screenshots.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "Image",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IsConsumable",
          "description": "Whether the item is a consumable or durable.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "IsHidden",
          "description": "Indicates if the item is hidden.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "IsStackable",
          "description": "Indicates if this item can be stacked or if they should be handled individually.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "IsTradeable",
          "description": "Indicates if this item can be traded.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "ItemReferences",
          "description": "The item references associated with this item.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItemReference",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Keywords",
          "description": "A dictionary of localized keywords. Key is language code and localized list of keywords is the value.",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "KeywordSet",
          "isclass": true,
          "optional": true
        },
        {
          "name": "LastModifiedDate",
          "description": "The date and time this item was last updated.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Moderation",
          "description": "The moderation state for this item.",
          "jsontype": "Object",
          "actualtype": "ModerationState",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PayoutDetails",
          "description": "The payout information of the payee.",
          "jsontype": "Object",
          "actualtype": "PayoutDetails",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Platforms",
          "description": "The platforms supported by this item.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Price",
          "description": "The base price of this item.",
          "jsontype": "Object",
          "actualtype": "CatalogPrice",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Rating",
          "description": "Rating summary for this item.",
          "jsontype": "Object",
          "actualtype": "Rating",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "StartDate",
          "description": "The date of when the item will be available. If not provided then the product will appear immediately.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Subscription",
          "description": "Additional metadata for subscription items.",
          "jsontype": "Object",
          "actualtype": "SubscriptionDetails",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Tags",
          "description": "The list of tags that are associated with this item.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Title",
          "description": "A dictionary of localized titles. Key is language code and localized string is the value. The neutral locale is required.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Type",
          "description": "The high-level type of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CatalogItemMetadata": {
      "name": "CatalogItemMetadata",
      "className": "CatalogItemMetadata",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "AllowMultipleStacks",
          "description": "Indicates whether there can be multiple stacks of this item.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "AlternateIds",
          "description": "The alternate IDs associated with this item.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "BoostFactor",
          "description": "The boost factor applied at search time of the item.",
          "jsontype": "Number",
          "actualtype": "double",
          "optional": true
        },
        {
          "name": "Contents",
          "description": "The set of contents associated with this item.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "Content",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ContentType",
          "description": "The client-defined type of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CreationDate",
          "description": "The date and time when this item was created.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "CreatorEntityKey",
          "description": "The ID of the creator of this catalog item.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "DeepLinks",
          "description": "The set of platform specific deep links for this item.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "DeepLink",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Description",
          "description": "A dictionary of localized descriptions. Key is language code and localized string is the value. The neutral locale is required.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayProperties",
          "description": "Game specific properties for display purposes. This is an arbitrary JSON blob.",
          "jsontype": "Object",
          "actualtype": "object",
          "optional": true
        },
        {
          "name": "DisplayVersion",
          "description": "The user provided version of the item for display purposes.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "EndDate",
          "description": "The date of when the item will cease to be available. If not provided then the product will be available indefinitely.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "ETag",
          "description": "The current ETag value that can be used for optimistic concurrency in the If-None-Match header.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Id",
          "description": "The unique ID of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Images",
          "description": "The images associated with this item. Images can be thumbnails or screenshots.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "Image",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IsConsumable",
          "description": "Whether the item is a consumable or durable.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "IsHidden",
          "description": "Indicates if the item is hidden.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "IsStackable",
          "description": "Indicates if this item can be stacked or if they should be handled individually.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "IsTradeable",
          "description": "Indicates if this item can be traded.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "ItemReferences",
          "description": "The item references associated with this item.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItemReference",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Keywords",
          "description": "A dictionary of localized keywords. Key is language code and localized list of keywords is the value.",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "KeywordSet",
          "isclass": true,
          "optional": true
        },
        {
          "name": "LastModifiedDate",
          "description": "The date and time this item was last updated.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Moderation",
          "description": "The moderation state for this item.",
          "jsontype": "Object",
          "actualtype": "ModerationState",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PayoutDetails",
          "description": "The payout information of the payee.",
          "jsontype": "Object",
          "actualtype": "PayoutDetails",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Platforms",
          "description": "The platforms supported by this item.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Price",
          "description": "The base price of this item.",
          "jsontype": "Object",
          "actualtype": "CatalogPrice",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Rating",
          "description": "Rating summary for this item.",
          "jsontype": "Object",
          "actualtype": "Rating",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "StartDate",
          "description": "The date of when the item will be available. If not provided then the product will appear immediately.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Subscription",
          "description": "Additional metadata for subscription items.",
          "jsontype": "Object",
          "actualtype": "SubscriptionDetails",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Tags",
          "description": "The list of tags that are associated with this item.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Title",
          "description": "A dictionary of localized titles. Key is language code and localized string is the value. The neutral locale is required.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Type",
          "description": "The high-level type of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CatalogItemReference": {
      "name": "CatalogItemReference",
      "className": "CatalogItemReference",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Amount",
          "description": "The amount of the catalog item.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Id",
          "description": "The unique ID of the catalog item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Price",
          "description": "The price of the catalog item.",
          "jsontype": "Object",
          "actualtype": "CatalogPrice",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CatalogPrice": {
      "name": "CatalogPrice",
      "className": "CatalogPrice",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "PayoutAmount",
          "description": "The amount the payee will receive.",
          "jsontype": "Number",
          "actualtype": "double",
          "optional": true
        },
        {
          "name": "Prices",
          "description": "Prices of the catalog item.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogPriceInstance",
          "isclass": true,
          "optional": true
        },
        {
          "name": "RealPrices",
          "description": "Real prices of the catalog item.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogPriceInstance",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Sort",
          "description": "Sort setting of the catalog item.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "CatalogPriceAmount": {
      "name": "CatalogPriceAmount",
      "className": "CatalogPriceAmount",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Amount",
          "description": "The amount of the catalog price.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "CurrencyId",
          "description": "The currency ID of the catalog price.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CatalogPriceInstance": {
      "name": "CatalogPriceInstance",
      "className": "CatalogPriceInstance",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Amounts",
          "description": "The amounts of the catalog item price.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogPriceAmount",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CatalogSearchRequest": {
      "name": "CatalogSearchRequest",
      "className": "CatalogSearchRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "ConfigurationName",
          "description": "The search configuration to use for this search.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Filter",
          "description": "An OData filter used to refine the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OrderBy",
          "description": "An OData orderBy used to order the results of the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Search",
          "description": "The text to search for.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Select",
          "description": "An OData select query option used to augment the search results. If not defined, the default search result metadata will be returned.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Skip",
          "description": "The number of results to skip.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace to search under.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "TitleId",
          "description": "The ID of the title that this catalog item is associated with.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Top",
          "description": "The number of results to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "CatalogSearchResult": {
      "name": "CatalogSearchResult",
      "className": "CatalogSearchResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "ConfigurationName",
          "description": "The name of the search configuration that was used for the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Count",
          "description": "The total count of hits for the search query.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Items",
          "description": "The paginated set of results for the search query.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CatalogSpecificConfig": {
      "name": "CatalogSpecificConfig",
      "className": "CatalogSpecificConfig",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "ContentTypes",
          "description": "The set of content types that will be used for validation and if no values are provided then anything is allowed.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Tags",
          "description": "The set of tags that will be used for validation and if no values are provided then anything is allowed.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ConcernCategory": {
      "name": "ConcernCategory",
      "className": "ConcernCategory",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isenum": true,
      "enumvalues": [
        {
          "name": "None"
        },
        {
          "name": "OffensiveContent"
        },
        {
          "name": "ChildExploitation"
        },
        {
          "name": "MalwareOrVirus"
        },
        {
          "name": "PrivacyConcerns"
        },
        {
          "name": "MisleadingApp"
        },
        {
          "name": "PoorPerformance"
        },
        {
          "name": "ReviewResponse"
        },
        {
          "name": "SpamAdvertising"
        },
        {
          "name": "Profanity"
        }
      ]
    },
    "ConsumeInventoryItemsRequest": {
      "name": "ConsumeInventoryItemsRequest",
      "className": "ConsumeInventoryItemsRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Given an entity type, entity identifier and container details, will consume the specified inventory items. ",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Items",
          "description": "A list of Items to modify",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItemDetails",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "ConsumeInventoryItemsResult": {
      "name": "ConsumeInventoryItemsResult",
      "className": "ConsumeInventoryItemsResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Items",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItemResponseDto",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "ContainerType": {
      "name": "ContainerType",
      "className": "ContainerType",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isenum": true,
      "enumvalues": [
        {
          "name": "None"
        },
        {
          "name": "Bundles"
        },
        {
          "name": "Stores"
        },
        {
          "name": "Subscriptions"
        },
        {
          "name": "Recipes"
        }
      ]
    },
    "Content": {
      "name": "Content",
      "className": "Content",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Id",
          "description": "The content unique ID.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MaxClientVersion",
          "description": "The maximum client version that this content is compatible with.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MinClientVersion",
          "description": "The minimum client version that this content is compatible with.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Tags",
          "description": "The list of tags that are associated with this content.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Type",
          "description": "The client-defined type of the content.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Url",
          "description": "The Azure CDN URL for retrieval of the catalog item binary content.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CountryCode": {
      "name": "CountryCode",
      "className": "CountryCode",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isenum": true,
      "enumvalues": [
        {
          "name": "AF"
        },
        {
          "name": "AX"
        },
        {
          "name": "AL"
        },
        {
          "name": "DZ"
        },
        {
          "name": "AS"
        },
        {
          "name": "AD"
        },
        {
          "name": "AO"
        },
        {
          "name": "AI"
        },
        {
          "name": "AQ"
        },
        {
          "name": "AG"
        },
        {
          "name": "AR"
        },
        {
          "name": "AM"
        },
        {
          "name": "AW"
        },
        {
          "name": "AU"
        },
        {
          "name": "AT"
        },
        {
          "name": "AZ"
        },
        {
          "name": "BS"
        },
        {
          "name": "BH"
        },
        {
          "name": "BD"
        },
        {
          "name": "BB"
        },
        {
          "name": "BY"
        },
        {
          "name": "BE"
        },
        {
          "name": "BZ"
        },
        {
          "name": "BJ"
        },
        {
          "name": "BM"
        },
        {
          "name": "BT"
        },
        {
          "name": "BO"
        },
        {
          "name": "BQ"
        },
        {
          "name": "BA"
        },
        {
          "name": "BW"
        },
        {
          "name": "BV"
        },
        {
          "name": "BR"
        },
        {
          "name": "IO"
        },
        {
          "name": "BN"
        },
        {
          "name": "BG"
        },
        {
          "name": "BF"
        },
        {
          "name": "BI"
        },
        {
          "name": "KH"
        },
        {
          "name": "CM"
        },
        {
          "name": "CA"
        },
        {
          "name": "CV"
        },
        {
          "name": "KY"
        },
        {
          "name": "CF"
        },
        {
          "name": "TD"
        },
        {
          "name": "CL"
        },
        {
          "name": "CN"
        },
        {
          "name": "CX"
        },
        {
          "name": "CC"
        },
        {
          "name": "CO"
        },
        {
          "name": "KM"
        },
        {
          "name": "CG"
        },
        {
          "name": "CD"
        },
        {
          "name": "CK"
        },
        {
          "name": "CR"
        },
        {
          "name": "CI"
        },
        {
          "name": "HR"
        },
        {
          "name": "CU"
        },
        {
          "name": "CW"
        },
        {
          "name": "CY"
        },
        {
          "name": "CZ"
        },
        {
          "name": "DK"
        },
        {
          "name": "DJ"
        },
        {
          "name": "DM"
        },
        {
          "name": "DO"
        },
        {
          "name": "EC"
        },
        {
          "name": "EG"
        },
        {
          "name": "SV"
        },
        {
          "name": "GQ"
        },
        {
          "name": "ER"
        },
        {
          "name": "EE"
        },
        {
          "name": "ET"
        },
        {
          "name": "FK"
        },
        {
          "name": "FO"
        },
        {
          "name": "FJ"
        },
        {
          "name": "FI"
        },
        {
          "name": "FR"
        },
        {
          "name": "GF"
        },
        {
          "name": "PF"
        },
        {
          "name": "TF"
        },
        {
          "name": "GA"
        },
        {
          "name": "GM"
        },
        {
          "name": "GE"
        },
        {
          "name": "DE"
        },
        {
          "name": "GH"
        },
        {
          "name": "GI"
        },
        {
          "name": "GR"
        },
        {
          "name": "GL"
        },
        {
          "name": "GD"
        },
        {
          "name": "GP"
        },
        {
          "name": "GU"
        },
        {
          "name": "GT"
        },
        {
          "name": "GG"
        },
        {
          "name": "GN"
        },
        {
          "name": "GW"
        },
        {
          "name": "GY"
        },
        {
          "name": "HT"
        },
        {
          "name": "HM"
        },
        {
          "name": "VA"
        },
        {
          "name": "HN"
        },
        {
          "name": "HK"
        },
        {
          "name": "HU"
        },
        {
          "name": "IS"
        },
        {
          "name": "IN"
        },
        {
          "name": "ID"
        },
        {
          "name": "IR"
        },
        {
          "name": "IQ"
        },
        {
          "name": "IE"
        },
        {
          "name": "IM"
        },
        {
          "name": "IL"
        },
        {
          "name": "IT"
        },
        {
          "name": "JM"
        },
        {
          "name": "JP"
        },
        {
          "name": "JE"
        },
        {
          "name": "JO"
        },
        {
          "name": "KZ"
        },
        {
          "name": "KE"
        },
        {
          "name": "KI"
        },
        {
          "name": "KP"
        },
        {
          "name": "KR"
        },
        {
          "name": "KW"
        },
        {
          "name": "KG"
        },
        {
          "name": "LA"
        },
        {
          "name": "LV"
        },
        {
          "name": "LB"
        },
        {
          "name": "LS"
        },
        {
          "name": "LR"
        },
        {
          "name": "LY"
        },
        {
          "name": "LI"
        },
        {
          "name": "LT"
        },
        {
          "name": "LU"
        },
        {
          "name": "MO"
        },
        {
          "name": "MK"
        },
        {
          "name": "MG"
        },
        {
          "name": "MW"
        },
        {
          "name": "MY"
        },
        {
          "name": "MV"
        },
        {
          "name": "ML"
        },
        {
          "name": "MT"
        },
        {
          "name": "MH"
        },
        {
          "name": "MQ"
        },
        {
          "name": "MR"
        },
        {
          "name": "MU"
        },
        {
          "name": "YT"
        },
        {
          "name": "MX"
        },
        {
          "name": "FM"
        },
        {
          "name": "MD"
        },
        {
          "name": "MC"
        },
        {
          "name": "MN"
        },
        {
          "name": "ME"
        },
        {
          "name": "MS"
        },
        {
          "name": "MA"
        },
        {
          "name": "MZ"
        },
        {
          "name": "MM"
        },
        {
          "name": "NA"
        },
        {
          "name": "NR"
        },
        {
          "name": "NP"
        },
        {
          "name": "NL"
        },
        {
          "name": "NC"
        },
        {
          "name": "NZ"
        },
        {
          "name": "NI"
        },
        {
          "name": "NE"
        },
        {
          "name": "NG"
        },
        {
          "name": "NU"
        },
        {
          "name": "NF"
        },
        {
          "name": "MP"
        },
        {
          "name": "NO"
        },
        {
          "name": "OM"
        },
        {
          "name": "PK"
        },
        {
          "name": "PW"
        },
        {
          "name": "PS"
        },
        {
          "name": "PA"
        },
        {
          "name": "PG"
        },
        {
          "name": "PY"
        },
        {
          "name": "PE"
        },
        {
          "name": "PH"
        },
        {
          "name": "PN"
        },
        {
          "name": "PL"
        },
        {
          "name": "PT"
        },
        {
          "name": "PR"
        },
        {
          "name": "QA"
        },
        {
          "name": "RE"
        },
        {
          "name": "RO"
        },
        {
          "name": "RU"
        },
        {
          "name": "RW"
        },
        {
          "name": "BL"
        },
        {
          "name": "SH"
        },
        {
          "name": "KN"
        },
        {
          "name": "LC"
        },
        {
          "name": "MF"
        },
        {
          "name": "PM"
        },
        {
          "name": "VC"
        },
        {
          "name": "WS"
        },
        {
          "name": "SM"
        },
        {
          "name": "ST"
        },
        {
          "name": "SA"
        },
        {
          "name": "SN"
        },
        {
          "name": "RS"
        },
        {
          "name": "SC"
        },
        {
          "name": "SL"
        },
        {
          "name": "SG"
        },
        {
          "name": "SX"
        },
        {
          "name": "SK"
        },
        {
          "name": "SI"
        },
        {
          "name": "SB"
        },
        {
          "name": "SO"
        },
        {
          "name": "ZA"
        },
        {
          "name": "GS"
        },
        {
          "name": "SS"
        },
        {
          "name": "ES"
        },
        {
          "name": "LK"
        },
        {
          "name": "SD"
        },
        {
          "name": "SR"
        },
        {
          "name": "SJ"
        },
        {
          "name": "SZ"
        },
        {
          "name": "SE"
        },
        {
          "name": "CH"
        },
        {
          "name": "SY"
        },
        {
          "name": "TW"
        },
        {
          "name": "TJ"
        },
        {
          "name": "TZ"
        },
        {
          "name": "TH"
        },
        {
          "name": "TL"
        },
        {
          "name": "TG"
        },
        {
          "name": "TK"
        },
        {
          "name": "TO"
        },
        {
          "name": "TT"
        },
        {
          "name": "TN"
        },
        {
          "name": "TR"
        },
        {
          "name": "TM"
        },
        {
          "name": "TC"
        },
        {
          "name": "TV"
        },
        {
          "name": "UG"
        },
        {
          "name": "UA"
        },
        {
          "name": "AE"
        },
        {
          "name": "GB"
        },
        {
          "name": "US"
        },
        {
          "name": "UM"
        },
        {
          "name": "UY"
        },
        {
          "name": "UZ"
        },
        {
          "name": "VU"
        },
        {
          "name": "VE"
        },
        {
          "name": "VN"
        },
        {
          "name": "VG"
        },
        {
          "name": "VI"
        },
        {
          "name": "WF"
        },
        {
          "name": "EH"
        },
        {
          "name": "YE"
        },
        {
          "name": "ZM"
        },
        {
          "name": "ZW"
        }
      ]
    },
    "CraftItemsFromRecipeRequest": {
      "name": "CraftItemsFromRecipeRequest",
      "className": "CraftItemsFromRecipeRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Craft a recipe by id, paying the associated ingredients.",
      "isRequest": true,
      "properties": [
        {
          "name": "CountryCode",
          "description": "The country code where the real money transaction took place.",
          "jsontype": "String",
          "actualtype": "CountryCode",
          "isenum": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency ID for this request.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Ingredients",
          "description": "The ingredients used to craft the recipe.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogPriceAmount",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Recipe",
          "description": "The recipe to be crafted.",
          "jsontype": "Object",
          "actualtype": "InventoryItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ReturnInventory",
          "description": "Indicates if the full inventory should be returned.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Store",
          "description": "The store to buy the item through.",
          "jsontype": "Object",
          "actualtype": "StoreInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CraftItemsFromRecipeResult": {
      "name": "CraftItemsFromRecipeResult",
      "className": "CraftItemsFromRecipeResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The idempotency ID for this request.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "InventoryItems",
          "description": "Details of the current inventory items. Null if ReturnInventory was set to false in request or InventoryTooLarge is set to true in response.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "InventoryTooLarge",
          "description": "Whether the number of inventory items is too large to be returned.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "UpdatedItems",
          "description": "The updated items for this request.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CraftRecipeByFriendlyIdRequest": {
      "name": "CraftRecipeByFriendlyIdRequest",
      "className": "CraftRecipeByFriendlyIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Craft recipe by friendly Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "AutoConsume",
          "description": "Sets a value indicating whether the crafted item should be automatically consumed. The specified item quantity will be both increased and decreased.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Ingredients",
          "description": "The ingredients used to craft the recipe.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CraftRecipeIngredient",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Properties",
          "description": "Additional properties to be associated with crafted item.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Quantity",
          "description": "The quantity of the item to craft.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "RecipeFriendlyId",
          "description": "Friendly identifier of the recipe to craft.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ReturnInventory",
          "description": "Indicates if the full inventory should be returned.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Store",
          "description": "The store to craft the item through.",
          "jsontype": "Object",
          "actualtype": "PurchaseStoreInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Uaid",
          "description": "The Universal account ID for the creator of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CraftRecipeByIdRequest": {
      "name": "CraftRecipeByIdRequest",
      "className": "CraftRecipeByIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Craft recipe by Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "AutoConsume",
          "description": "Sets a value indicating whether the crafted item should be automatically consumed. The specified item quantity will be both increased and decreased.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Ingredients",
          "description": "The ingredients used to craft the recipe.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CraftRecipeIngredient",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Properties",
          "description": "Additional properties to be associated with crafted item.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Quantity",
          "description": "The quantity of the item to craft.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "RecipeId",
          "description": "Unique identifier of the recipe to craft.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ReturnInventory",
          "description": "Indicates if the full inventory should be returned.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Store",
          "description": "The store to craft the item through.",
          "jsontype": "Object",
          "actualtype": "PurchaseStoreInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Uaid",
          "description": "The Universal account ID for the creator of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CraftRecipeIngredient": {
      "name": "CraftRecipeIngredient",
      "className": "CraftRecipeIngredient",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "ExpectedAmount",
          "description": "Amount the client expects to use to craft the item.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "IngredientId",
          "description": "The unique identifier of the ingredient.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "CraftRecipeLegacyResult": {
      "name": "CraftRecipeLegacyResult",
      "className": "CraftRecipeLegacyResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Craft recipe result",
      "isResult": true,
      "properties": [
        {
          "name": "CraftedItems",
          "description": "Details for the items crafted.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CraftRecipeResultItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Ingredients",
          "description": "Details of the ingredients used to craft the recipe.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CraftRecipeResultIngredient",
          "isclass": true,
          "optional": true
        },
        {
          "name": "InventoryItems",
          "description": "Details of the current inventory items.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CraftRecipeResultItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "InventoryTooLarge",
          "description": "Indicates whether the number of inventory items is too large to be returned.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "CraftRecipeResultIngredient": {
      "name": "CraftRecipeResultIngredient",
      "className": "CraftRecipeResultIngredient",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Amount",
          "description": "The total amount of the ingredient on inventory.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "ChangedAmount",
          "description": "The amount of the ingredient used in this call.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "IngredientId",
          "description": "The ID of the currency used in this crafting operation.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CraftRecipeResultItem": {
      "name": "CraftRecipeResultItem",
      "className": "CraftRecipeResultItem",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Amount",
          "description": "The total amount of the item on inventory.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "ChangedAmount",
          "description": "The amount of the item purchased in this call.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "FriendlyId",
          "description": "Friendly id of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "InstanceId",
          "description": "Unique item identifier for this specific instance of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "Unique identifier of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemType",
          "description": "The type of item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Properties",
          "description": "The properties associated to the currency.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CreateBundleRequest": {
      "name": "CreateBundleRequest",
      "className": "CreateBundleRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Create bundle request",
      "isRequest": true,
      "properties": [
        {
          "name": "AllowOverwrite",
          "description": "Allow overwrite",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Bundle",
          "description": "Bundle details",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": false
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CreateBundleResult": {
      "name": "CreateBundleResult",
      "className": "CreateBundleResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Create bundle result",
      "isResult": true,
      "properties": [
        {
          "name": "Bundle",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CreateCurrencyRequest": {
      "name": "CreateCurrencyRequest",
      "className": "CreateCurrencyRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Given a title entity token, and currency details, create a currency.",
      "isRequest": true,
      "properties": [
        {
          "name": "Currency",
          "description": "Metadata describing the new currency item to be created.",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": false
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CreateCurrencyResult": {
      "name": "CreateCurrencyResult",
      "className": "CreateCurrencyResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "CurrencyMetadata",
          "description": "Updated metadata describing the catalog item just created.",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CreateDraftItemRequest": {
      "name": "CreateDraftItemRequest",
      "className": "CreateDraftItemRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "The item will not be published to the public catalog until the user makes a call to the PublishItem API.",
      "isRequest": true,
      "properties": [
        {
          "name": "AllowOverwrite",
          "description": "Whether allow overwrite if the item already exists.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Item",
          "description": "Metadata describing the new catalog item to be created.",
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Publish",
          "description": "Whether the item should be published immediately.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "CreateDraftItemResult": {
      "name": "CreateDraftItemResult",
      "className": "CreateDraftItemResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "Item",
          "description": "Updated metadata describing the catalog item just created.",
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CreateOrUpdateReviewRequest": {
      "name": "CreateOrUpdateReviewRequest",
      "className": "CreateOrUpdateReviewRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "The ID of the item to submit a review for.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Review",
          "description": "The review to submit.",
          "jsontype": "Object",
          "actualtype": "ReviewSubmission",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CreateOrUpdateReviewResult": {
      "name": "CreateOrUpdateReviewResult",
      "className": "CreateOrUpdateReviewResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": []
    },
    "CreateRecipeRequest": {
      "name": "CreateRecipeRequest",
      "className": "CreateRecipeRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Create recipe request",
      "isRequest": true,
      "properties": [
        {
          "name": "AllowOverwrite",
          "description": "Allow overwrite",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Recipe",
          "description": "Recipe details",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "CreateRecipeResult": {
      "name": "CreateRecipeResult",
      "className": "CreateRecipeResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Create recipe result",
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Recipe",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CreateStoreRequest": {
      "name": "CreateStoreRequest",
      "className": "CreateStoreRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Create store request",
      "isRequest": true,
      "properties": [
        {
          "name": "AllowOverwrite",
          "description": "Allow overwrite",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Store",
          "description": "Store details",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "CreateStoreResult": {
      "name": "CreateStoreResult",
      "className": "CreateStoreResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Create store result",
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Store",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CreateSubscriptionRequest": {
      "name": "CreateSubscriptionRequest",
      "className": "CreateSubscriptionRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Create subscription request",
      "isRequest": true,
      "properties": [
        {
          "name": "AllowOverwrite",
          "description": "Allow overwrite",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Subscription",
          "description": "Subscription details",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "CreateSubscriptionResult": {
      "name": "CreateSubscriptionResult",
      "className": "CreateSubscriptionResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Create subscription result",
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Subscription",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CreateUploadUrlsRequest": {
      "name": "CreateUploadUrlsRequest",
      "className": "CreateUploadUrlsRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Upload URLs point to Azure Blobs; clients must follow the Microsoft Azure Storage Blob Service REST API pattern for uploading content. The response contains upload URLs and IDs for each file. The IDs and URLs returned must be added to the item metadata and commited using the CreateDraftItem or UpdateDraftItem Item APIs.",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Files",
          "description": "Description of the files to be uploaded by the client.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "UploadInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CreateUploadUrlsResult": {
      "name": "CreateUploadUrlsResult",
      "className": "CreateUploadUrlsResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "UploadUrls",
          "description": "List of urls metadata for the files to be uploaded by the client.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "UploadUrlMetadata",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CurrencyDetails": {
      "name": "CurrencyDetails",
      "className": "CurrencyDetails",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "AlternateId",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Amount",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "CurrencyId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "InstanceId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CurrencyResponseDto": {
      "name": "CurrencyResponseDto",
      "className": "CurrencyResponseDto",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Amount",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "ChangedAmount",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "CurrencyId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CustomCdnDomain": {
      "name": "CustomCdnDomain",
      "className": "CustomCdnDomain",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "CdnHost",
          "description": "The custom CDN host URL to use.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Name",
          "description": "Name of the CDN to replace the host for.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "DecaySearchConfig": {
      "name": "DecaySearchConfig",
      "className": "DecaySearchConfig",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Decay",
          "description": "The decay factor for the decay function.",
          "jsontype": "Number",
          "actualtype": "double",
          "optional": false
        },
        {
          "name": "Ignore",
          "description": "Flag defining whether the property should be included in the search Query.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Offset",
          "description": "The offset of the decay function.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "DeepLink": {
      "name": "DeepLink",
      "className": "DeepLink",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Platform",
          "description": "Target platform for this deep link.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Url",
          "description": "The deep link for this platform.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "DeepLinkFormat": {
      "name": "DeepLinkFormat",
      "className": "DeepLinkFormat",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Format",
          "description": "The format of the deep link to return. The format should contain '{id}' to represent where the item ID should be placed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Platform",
          "description": "The target platform for the deep link.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "DeleteBundleByFriendlyIdRequest": {
      "name": "DeleteBundleByFriendlyIdRequest",
      "className": "DeleteBundleByFriendlyIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Delete bundle by friendly Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendlyId",
          "description": "The friendly Id of target bundle.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace the bundle is in.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "DeleteBundleByIdRequest": {
      "name": "DeleteBundleByIdRequest",
      "className": "DeleteBundleByIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Delete bundle by Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Id",
          "description": "Id of target bundle",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace the bundle is in.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "DeleteBundleResult": {
      "name": "DeleteBundleResult",
      "className": "DeleteBundleResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Delete bundle result",
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "DeleteItemRequest": {
      "name": "DeleteItemRequest",
      "className": "DeleteItemRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "AlternateId",
          "description": "An alternate ID associated with this item.",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "The unique ID of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "DeleteItemResult": {
      "name": "DeleteItemResult",
      "className": "DeleteItemResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": []
    },
    "DeleteRecipeByFriendlyIdRequest": {
      "name": "DeleteRecipeByFriendlyIdRequest",
      "className": "DeleteRecipeByFriendlyIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Delete Recipe by friendly Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendlyId",
          "description": "The friendly Id of target recipe.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace the recipe is in.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "DeleteRecipeByIdRequest": {
      "name": "DeleteRecipeByIdRequest",
      "className": "DeleteRecipeByIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Delete recipe by Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Id",
          "description": "The Id of target recipe",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace the recipe is in.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "DeleteRecipeResult": {
      "name": "DeleteRecipeResult",
      "className": "DeleteRecipeResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Delete recipe result",
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "DeleteStoreByFriendlyIdRequest": {
      "name": "DeleteStoreByFriendlyIdRequest",
      "className": "DeleteStoreByFriendlyIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Delete store by Friendly Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "FriendlyId",
          "description": "The friendly Id of target store.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace the store is in.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "DeleteStoreByIdRequest": {
      "name": "DeleteStoreByIdRequest",
      "className": "DeleteStoreByIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Delete store by Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Id",
          "description": "Id of target store",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace the store is in.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "DeleteStoreResult": {
      "name": "DeleteStoreResult",
      "className": "DeleteStoreResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Delete store result",
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "DeleteSubscriptionByFriendlyIdRequest": {
      "name": "DeleteSubscriptionByFriendlyIdRequest",
      "className": "DeleteSubscriptionByFriendlyIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Delete Subscription by friendly Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendlyId",
          "description": "The friendly Id of target subscription.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace the subscription is in.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "DeleteSubscriptionByIdRequest": {
      "name": "DeleteSubscriptionByIdRequest",
      "className": "DeleteSubscriptionByIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Delete subscription by Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Id",
          "description": "The Id of target subscription",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace the subscription is in.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "DeleteSubscriptionResult": {
      "name": "DeleteSubscriptionResult",
      "className": "DeleteSubscriptionResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Delete subscription result",
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "DisplayPropertyIndexInfo": {
      "name": "DisplayPropertyIndexInfo",
      "className": "DisplayPropertyIndexInfo",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Name",
          "description": "The property name in the 'DisplayProperties' property to be indexed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Type",
          "description": "The type of the property to be indexed.",
          "jsontype": "String",
          "actualtype": "DisplayPropertyType",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "DisplayPropertyType": {
      "name": "DisplayPropertyType",
      "className": "DisplayPropertyType",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isenum": true,
      "enumvalues": [
        {
          "name": "QueryDateTime"
        },
        {
          "name": "QueryDouble"
        },
        {
          "name": "QueryString"
        },
        {
          "name": "SearchString"
        }
      ]
    },
    "EntityKey": {
      "name": "EntityKey",
      "className": "EntityKey",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Combined entity type and ID structure which uniquely identifies a single entity.",
      "properties": [
        {
          "name": "Id",
          "description": "Unique ID of the entity.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Type",
          "description": "Entity type. See https://docs.microsoft.com/gaming/playfab/features/data/entities/available-built-in-entity-types",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TypeString",
          "description": "Alternate name for Type.",
          "deprecation": {
            "ProposedAfter": "6/1/2018",
            "DeprecatedAfter": "7/1/2018",
            "ObsoleteAfter": "8/1/2018",
            "ReplacedBy": "Type"
          },
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetAccessTokensRequest": {
      "name": "GetAccessTokensRequest",
      "className": "GetAccessTokensRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Get a set of Access Tokens to interact with the specified marketplace",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MarketplaceConfigInstance",
          "description": "The marketplace configuration instance to perform this action on",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TargetMarketplace",
          "description": "The marketplace to get the AccessTokens from. (default=OneStore)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetAccessTokensResult": {
      "name": "GetAccessTokensResult",
      "className": "GetAccessTokensResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "AccessTokens",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "AccessToken",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetBundleByFriendlyIdRequest": {
      "name": "GetBundleByFriendlyIdRequest",
      "className": "GetBundleByFriendlyIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Get bundle by friendly Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether to expand the referenced items",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "FriendlyId",
          "description": "The friendly Id of target bundle.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace the item is in.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetBundleByIdRequest": {
      "name": "GetBundleByIdRequest",
      "className": "GetBundleByIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Get bundle by Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether to expand the referenced items",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Id",
          "description": "Id of target bundle",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace the item is in.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetBundleByMarketplaceOfferIdRequest": {
      "name": "GetBundleByMarketplaceOfferIdRequest",
      "className": "GetBundleByMarketplaceOfferIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Get bundle by marketplace offer Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether to expand the referenced items",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "MarketplaceOfferId",
          "description": "The Marketplace offer Id of target bundle.",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace the item is in.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetBundleResult": {
      "name": "GetBundleResult",
      "className": "GetBundleResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Get bundle result",
      "isResult": true,
      "properties": [
        {
          "name": "Bundle",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ReferencedItems",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetCatalogConfigRequest": {
      "name": "GetCatalogConfigRequest",
      "className": "GetCatalogConfigRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetCatalogConfigResult": {
      "name": "GetCatalogConfigResult",
      "className": "GetCatalogConfigResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "Config",
          "description": "The catalog configuration.",
          "jsontype": "Object",
          "actualtype": "CatalogConfig",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetCurrencyByIdRequest": {
      "name": "GetCurrencyByIdRequest",
      "className": "GetCurrencyByIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "CurrencyId",
          "description": "ID of the currency to retrieve.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetCurrencyByIdResult": {
      "name": "GetCurrencyByIdResult",
      "className": "GetCurrencyByIdResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "Currency",
          "description": "Full metadata of the currency requested.",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetDraftItemByAlternateIdRequest": {
      "name": "GetDraftItemByAlternateIdRequest",
      "className": "GetDraftItemByAlternateIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "AlternateIdType",
          "description": "Type of AlternateId of the catalog item to retrieve from the working catalog.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "AlternateIdValue",
          "description": "Value of AlternateId of the catalog item to retrieve from the working catalog.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace to search under.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetDraftItemRequest": {
      "name": "GetDraftItemRequest",
      "className": "GetDraftItemRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "AlternateId",
          "description": "An alternate ID associated with this item.",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether to expand the item references.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "ItemId",
          "description": "The unique ID of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetDraftItemResult": {
      "name": "GetDraftItemResult",
      "className": "GetDraftItemResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "Item",
          "description": "Full metadata of the catalog item requested.",
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ReferencedItems",
          "description": "The paginated set of results of referenced items for the search query.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetDraftItemsRequest": {
      "name": "GetDraftItemsRequest",
      "className": "GetDraftItemsRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "AlternateIds",
          "description": "List of item alternate IDs.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ContinuationToken",
          "description": "An opaque token used to retrieve the next page of items created by the caller, if any are available. Should be null on initial request.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Count",
          "description": "Number of items to retrieve. Maximum page size is 10.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether to expand the item references.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Filter",
          "description": "OData Filter to specify ItemType.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Ids",
          "description": "List of Item Ids.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetDraftItemsResult": {
      "name": "GetDraftItemsResult",
      "className": "GetDraftItemsResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "ContinuationToken",
          "description": "An opaque token used to retrieve the next page of items, if any are available.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Items",
          "description": "A set of items created by the caller.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PartialExpandedResults",
          "description": "Whether the results are partial.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "ReferencedItems",
          "description": "The paginated set of results of referenced items for the search query.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "TotalCount",
          "description": "The total count of items returned.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "GetEntityItemReviewRequest": {
      "name": "GetEntityItemReviewRequest",
      "className": "GetEntityItemReviewRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "AlternateId",
          "description": "An alternate ID associated with this item.",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "The unique ID of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetEntityItemReviewResult": {
      "name": "GetEntityItemReviewResult",
      "className": "GetEntityItemReviewResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "Review",
          "description": "The review the entity submitted for the requested item.",
          "jsontype": "Object",
          "actualtype": "Review",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetInventoryItemsRequest": {
      "name": "GetInventoryItemsRequest",
      "className": "GetInventoryItemsRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Given an entity type, entity identifier and container details, will get the entity's inventory items. ",
      "isRequest": true,
      "properties": [
        {
          "name": "ContinuationToken",
          "description": "An opaque token used to retrieve the next page of items in the inventory, if any are available. Should be null on initial request.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Count",
          "description": "Number of items to retrieve. Maximum page size is 200.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Filter",
          "description": "The filters to limit what is returned to the client.",
          "jsontype": "Object",
          "actualtype": "ItemFilter",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ReturnCatalogItemMetadata",
          "description": "Whether to return additional metadata for inventory items from the catalog.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "GetInventoryItemsResult": {
      "name": "GetInventoryItemsResult",
      "className": "GetInventoryItemsResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "ContinuationToken",
          "description": "An opaque token used to retrieve the next page of items, if any are available.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemMetadata",
          "description": "A list of item metadata.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Items",
          "description": "A list of inventory items.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "TotalCount",
          "description": "The total count of items returned.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "GetIssuerKeyRequest": {
      "name": "GetIssuerKeyRequest",
      "className": "GetIssuerKeyRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Retrieves the issuer certificate used to sign receipts formatted as a JSON Web Key.",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetItemModerationStateRequest": {
      "name": "GetItemModerationStateRequest",
      "className": "GetItemModerationStateRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "AlternateId",
          "description": "An alternate ID associated with this item.",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "The unique ID of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetItemModerationStateResult": {
      "name": "GetItemModerationStateResult",
      "className": "GetItemModerationStateResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "State",
          "description": "The current moderation state for the requested item.",
          "jsontype": "Object",
          "actualtype": "ModerationState",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetItemPublishStatusRequest": {
      "name": "GetItemPublishStatusRequest",
      "className": "GetItemPublishStatusRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "AlternateId",
          "description": "An alternate ID associated with this item.",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "The unique ID of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetItemPublishStatusResult": {
      "name": "GetItemPublishStatusResult",
      "className": "GetItemPublishStatusResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "FailedScanResults",
          "description": "Scan results for any items that failed content scans.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ScanResult",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Result",
          "description": "High level status of the published item.",
          "jsontype": "String",
          "actualtype": "PublishResult",
          "isenum": true,
          "optional": true
        },
        {
          "name": "StatusMessage",
          "description": "Descriptive message about the current status of the publish.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetItemReferencersRequest": {
      "name": "GetItemReferencersRequest",
      "className": "GetItemReferencersRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Given an item id and a container type (bundles/subscriptions/stores or a combination of those), return a set of bundles/subscriptions/stores containing the item.",
      "isRequest": true,
      "properties": [
        {
          "name": "AlternateId",
          "description": "An alternate ID associated with this item.",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ContinuationToken",
          "description": "An opaque token used to retrieve the next page of items in the inventory, if any are available. Should be null on initial request.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Count",
          "description": "Number of items to retrieve. Maximum page size is 200.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Filter",
          "description": "OData Filter to specify ItemType.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "The unique ID of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetItemReferencersResult": {
      "name": "GetItemReferencersResult",
      "className": "GetItemReferencersResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "ContinuationToken",
          "description": "An opaque token used to retrieve the next page of items, if any are available.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Referencers",
          "description": "List of Bundles/Recipes/Stores/Subscriptions containing any of one of the requested items.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "TotalCount",
          "description": "The total count of items returned.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "GetItemRequest": {
      "name": "GetItemRequest",
      "className": "GetItemRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "AlternateId",
          "description": "An alternate ID associated with this item.",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether to expand the item references.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "ItemId",
          "description": "The unique ID of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetItemResult": {
      "name": "GetItemResult",
      "className": "GetItemResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Get item result.",
      "isResult": true,
      "properties": [
        {
          "name": "Item",
          "description": "The item result.",
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ReferencedItems",
          "description": "The set of results of referenced items from the item.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetItemReviewsRequest": {
      "name": "GetItemReviewsRequest",
      "className": "GetItemReviewsRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "AlternateId",
          "description": "An alternate ID associated with this item.",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ContinuationToken",
          "description": "An opaque token used to retrieve the next page of items, if any are available.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Count",
          "description": "Number of items to retrieve. Maximum page size is 200.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "The unique ID of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OrderBy",
          "description": "An OData orderBy used to order the results of the query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetItemReviewsResult": {
      "name": "GetItemReviewsResult",
      "className": "GetItemReviewsResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "ContinuationToken",
          "description": "An opaque token used to retrieve the next page of items, if any are available.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Reviews",
          "description": "The paginated set of results.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "Review",
          "isclass": true,
          "optional": true
        },
        {
          "name": "TotalCount",
          "description": "The total count of items returned.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "GetItemReviewSummaryRequest": {
      "name": "GetItemReviewSummaryRequest",
      "className": "GetItemReviewSummaryRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "AlternateId",
          "description": "An alternate ID associated with this item.",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "The unique ID of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetItemReviewSummaryResult": {
      "name": "GetItemReviewSummaryResult",
      "className": "GetItemReviewSummaryResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "LeastFavorableReview",
          "description": "The least favorable review for this item.",
          "jsontype": "Object",
          "actualtype": "Review",
          "isclass": true,
          "optional": true
        },
        {
          "name": "MostFavorableReview",
          "description": "The most favorable review for this item.",
          "jsontype": "Object",
          "actualtype": "Review",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Rating",
          "description": "The summary of ratings associated with this item.",
          "jsontype": "Object",
          "actualtype": "Rating",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ReviewsCount",
          "description": "The total number of reviews associated with this item.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "GetItemsRequest": {
      "name": "GetItemsRequest",
      "className": "GetItemsRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "AlternateIds",
          "description": "List of item alternate IDs.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether to expand the referenced items.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Ids",
          "description": "List of Item Ids.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetItemsResult": {
      "name": "GetItemsResult",
      "className": "GetItemsResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "Items",
          "description": "A set of items.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PartialExpandedResults",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "ReferencedItems",
          "description": "A unique set of referenced items.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetMarketplaceAccessTokenRequest": {
      "name": "GetMarketplaceAccessTokenRequest",
      "className": "GetMarketplaceAccessTokenRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Get a set of Access Tokens to interact with the specified marketplace",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MarketplaceDetail",
          "description": "The marketplace details to retrieve the access token.",
          "jsontype": "Object",
          "actualtype": "MarketplaceDetail",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetMarketplaceAccessTokenResult": {
      "name": "GetMarketplaceAccessTokenResult",
      "className": "GetMarketplaceAccessTokenResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "AccessTokens",
          "description": "A collections of access tokens for the specified marketplace.",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "AccessToken",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetMyReviewRequest": {
      "name": "GetMyReviewRequest",
      "className": "GetMyReviewRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "The ID of the item to retrieve the user's review for.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetMyReviewResult": {
      "name": "GetMyReviewResult",
      "className": "GetMyReviewResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "Review",
          "description": "The review the user submitted for the requested item.",
          "jsontype": "Object",
          "actualtype": "Review",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetPublishedItemRequest": {
      "name": "GetPublishedItemRequest",
      "className": "GetPublishedItemRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "ID of the catalog item to retrieve from the working catalog.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetPublishedItemResult": {
      "name": "GetPublishedItemResult",
      "className": "GetPublishedItemResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "Item",
          "description": "Full metadata of the catalog item requested.",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetReceiptIssuerCertificateAsJwkResult": {
      "name": "GetReceiptIssuerCertificateAsJwkResult",
      "className": "GetReceiptIssuerCertificateAsJwkResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Jwk",
          "description": "The receipt issuer certificate formatted as a JSON Web Key.",
          "jsontype": "Object",
          "actualtype": "object",
          "optional": true
        }
      ]
    },
    "GetReceiptIssuerCertificateAsPemCertResult": {
      "name": "GetReceiptIssuerCertificateAsPemCertResult",
      "className": "GetReceiptIssuerCertificateAsPemCertResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PemCert",
          "description": "The receipt issuer certificate formatted as a PEM certificate.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetReceiptIssuerCertificatesRequest": {
      "name": "GetReceiptIssuerCertificatesRequest",
      "className": "GetReceiptIssuerCertificatesRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Retrieves the issuer certificate used to sign receipts formatted as a JSON Web Key and a PEM encoded certificate.",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetReceiptIssuerCertificatesResult": {
      "name": "GetReceiptIssuerCertificatesResult",
      "className": "GetReceiptIssuerCertificatesResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "Jwks",
          "description": "The receipt issuer certificates formatted as a JSON Web Key.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "object",
          "optional": true
        },
        {
          "name": "PemCerts",
          "description": "The receipt issuer certificates formatted as a PEM certificate.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetRecipeByFriendlyIdRequest": {
      "name": "GetRecipeByFriendlyIdRequest",
      "className": "GetRecipeByFriendlyIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Get recipe by friendly Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether to expand the referenced items",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "FriendlyId",
          "description": "The friendly Id of target recipe.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace the item is in.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetRecipeByIdRequest": {
      "name": "GetRecipeByIdRequest",
      "className": "GetRecipeByIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Get recipe by Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether to expand the referenced items",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Id",
          "description": "Id of target recipe",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace the item is in.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetRecipeByMarketplaceOfferIdRequest": {
      "name": "GetRecipeByMarketplaceOfferIdRequest",
      "className": "GetRecipeByMarketplaceOfferIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Get recipe by marketplace offer Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether to expand the referenced items",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "MarketplaceOfferId",
          "description": "The Marketplace offer Id of target recipe.",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace the item is in.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetRecipeResult": {
      "name": "GetRecipeResult",
      "className": "GetRecipeResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Get recipe result",
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Recipe",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ReferencedItems",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetStoreByFriendlyIdRequest": {
      "name": "GetStoreByFriendlyIdRequest",
      "className": "GetStoreByFriendlyIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Get store by friendly Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether to expand the referenced items",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "FriendlyId",
          "description": "The friendly Id of target store.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace the item is in.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetStoreByIdRequest": {
      "name": "GetStoreByIdRequest",
      "className": "GetStoreByIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Get store by Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether to expand the referenced items",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Id",
          "description": "Id of target store",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace the item is in.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetStoreResult": {
      "name": "GetStoreResult",
      "className": "GetStoreResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Get store result",
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ReferencedItems",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Store",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetSubscriptionByFriendlyIdRequest": {
      "name": "GetSubscriptionByFriendlyIdRequest",
      "className": "GetSubscriptionByFriendlyIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Get subscription by friendly Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether to expand the referenced items",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "FriendlyId",
          "description": "The friendly Id of target subscription.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace the item is in.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetSubscriptionByIdRequest": {
      "name": "GetSubscriptionByIdRequest",
      "className": "GetSubscriptionByIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Get subscription by Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether to expand the referenced items",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Id",
          "description": "Id of target subscription",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace the item is in.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetSubscriptionByMarketplaceOfferIdRequest": {
      "name": "GetSubscriptionByMarketplaceOfferIdRequest",
      "className": "GetSubscriptionByMarketplaceOfferIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Get subscription by marketplace offer Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether to expand the referenced items",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "MarketplaceOfferId",
          "description": "The Marketplace offer Id of target bundle.",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace the item is in.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetSubscriptionResult": {
      "name": "GetSubscriptionResult",
      "className": "GetSubscriptionResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Get subscription result",
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ReferencedItems",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Subscription",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetUgcItemModerationStateRequest": {
      "name": "GetUgcItemModerationStateRequest",
      "className": "GetUgcItemModerationStateRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "ID of the UGC item to get the moderation state for.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetUgcItemModerationStateResult": {
      "name": "GetUgcItemModerationStateResult",
      "className": "GetUgcItemModerationStateResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "State",
          "description": "The current moderation state for the requested item.",
          "jsontype": "Object",
          "actualtype": "ModerationState",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetVirtualCurrenciesRequest": {
      "name": "GetVirtualCurrenciesRequest",
      "className": "GetVirtualCurrenciesRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Given an entity type, entity identifier and container details, will get the entity's virtual currencies. ",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Indicates whether to return metadata for virtual currencies",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetVirtualCurrenciesResult": {
      "name": "GetVirtualCurrenciesResult",
      "className": "GetVirtualCurrenciesResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "Currencies",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CurrencyResponseDto",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Items",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GrantInventoryItemsRequest": {
      "name": "GrantInventoryItemsRequest",
      "className": "GrantInventoryItemsRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Given an entity type, entity identifier and container details, will grant the specified inventory items. ",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Items",
          "description": "A list of Items to modify",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItemDetails",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "GrantInventoryItemsResult": {
      "name": "GrantInventoryItemsResult",
      "className": "GrantInventoryItemsResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Items",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItemResponseDto",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "HelpfulnessVote": {
      "name": "HelpfulnessVote",
      "className": "HelpfulnessVote",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isenum": true,
      "enumvalues": [
        {
          "name": "UnHelpful"
        },
        {
          "name": "Helpful"
        }
      ]
    },
    "HelpfulnessVoteRequest": {
      "name": "HelpfulnessVoteRequest",
      "className": "HelpfulnessVoteRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IsHelpful",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "ReviewId",
          "description": "The ID of the review to submit a helpfulness vote for.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "HelpfulnessVoteResult": {
      "name": "HelpfulnessVoteResult",
      "className": "HelpfulnessVoteResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": []
    },
    "Image": {
      "name": "Image",
      "className": "Image",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Id",
          "description": "The image unique ID.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Locales",
          "description": "The optional list of locales that are supported by this image.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Tag",
          "description": "The client-defined tag associated with this image.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Type",
          "description": "The client-defined type of this image.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Url",
          "description": "The URL for retrieval of the image.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "InventoryItem": {
      "name": "InventoryItem",
      "className": "InventoryItem",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "AlternateId",
          "description": "Only used for requests. The alternate ID.",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Amount",
          "description": "The amount of the item.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "ChangedAmount",
          "description": "The changed amount of the item after completion of operation.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Duration",
          "description": "Only used for subscriptions. The duration of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpirationDate",
          "description": "Only used for subscriptions. The date of when the item will expire. If not provided then the product will be available indefinitely.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "InstanceId",
          "description": "The item instance ID.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "The unique ID of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "LastRefreshDate",
          "description": "Only used for subscriptions. The date of when the item was last refreshed.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "MergeProperties",
          "description": "Whether the properties of items should be merged when performing operations.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "NextRecommendedRefreshDate",
          "description": "Only used for subscriptions. The date of when the item should be refreshed next.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Origin",
          "description": "The origin of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OriginId",
          "description": "The origin id of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Properties",
          "description": "Additional properties associated with the item.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "Only used for requests. The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Type",
          "description": "The high-level type of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "InventoryItemDetails": {
      "name": "InventoryItemDetails",
      "className": "InventoryItemDetails",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "AlternateId",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Duration",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpirationDate",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "InstanceId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "IsSubscription",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "ItemId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "LastRefreshDate",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Marketplace",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MergeProperties",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "NextRecommendedRefreshDate",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Origin",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OriginId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Properties",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Quantity",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "InventoryItemResponseDto": {
      "name": "InventoryItemResponseDto",
      "className": "InventoryItemResponseDto",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Amount",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "ChangedAmount",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "InstanceId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Origin",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OriginId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Properties",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Receipt",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ItemFilter": {
      "name": "ItemFilter",
      "className": "ItemFilter",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Inclusive",
          "description": "Whether the query should be inclusive or exclusive.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "InstanceIds",
          "description": "The list item instance ids to include/exclude in the filtered results.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemIds",
          "description": "The list item ids to include/exclude in the filtered results.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemTypes",
          "description": "The list of item types to include/exclude in the filtered results.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "KeywordSet": {
      "name": "KeywordSet",
      "className": "KeywordSet",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Values",
          "description": "A list of localized keywords.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "MarketplaceData": {
      "name": "MarketplaceData",
      "className": "MarketplaceData",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Data",
          "description": "The marketplace data.",
          "jsontype": "Object",
          "actualtype": "object",
          "optional": true
        },
        {
          "name": "Name",
          "description": "The marketplace name.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "MarketplaceDetail": {
      "name": "MarketplaceDetail",
      "className": "MarketplaceDetail",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Name",
          "description": "The marketplace name.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ModerationState": {
      "name": "ModerationState",
      "className": "ModerationState",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "LastModifiedDate",
          "description": "The date and time this moderation state was last updated.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Reason",
          "description": "The current stated reason for the associated item being moderated.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Status",
          "description": "The current moderation status for the associated item.",
          "jsontype": "String",
          "actualtype": "ModerationStatus",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "ModerationStatus": {
      "name": "ModerationStatus",
      "className": "ModerationStatus",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isenum": true,
      "enumvalues": [
        {
          "name": "Unknown"
        },
        {
          "name": "AwaitingModeration"
        },
        {
          "name": "Approved"
        },
        {
          "name": "Rejected"
        }
      ]
    },
    "OfferDetail": {
      "name": "OfferDetail",
      "className": "OfferDetail",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "PurchasePrice",
          "description": "Purchase price of the offer.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "PayoutDetails": {
      "name": "PayoutDetails",
      "className": "PayoutDetails",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "AccountSellerId",
          "description": "The Dev Center account ID of the payee.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TaxCode",
          "description": "The tax code for payout calculations.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Uaid",
          "description": "The Universal account ID of the payee.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "PropertySearchConfig": {
      "name": "PropertySearchConfig",
      "className": "PropertySearchConfig",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Ignore",
          "description": "Flag defining whether the property should be included in the search Query.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Weight",
          "description": "The weight of the property in search result score.",
          "jsontype": "Number",
          "actualtype": "double",
          "optional": false
        }
      ]
    },
    "PublishDraftItemRequest": {
      "name": "PublishDraftItemRequest",
      "className": "PublishDraftItemRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "The call kicks off a workflow to publish the item to the public catalog. The Publish Status API should be used to monitor the publish job.",
      "isRequest": true,
      "properties": [
        {
          "name": "AlternateId",
          "description": "An alternate ID associated with this item.",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ETag",
          "description": "ETag of the catalog item to published from the working catalog to the public catalog. Used for optimistic concurrency. If the provided ETag does not match the ETag in the current working catalog, the request will be rejected. If not provided, the current version of the document in the working catalog will be published.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "The unique ID of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "PublishDraftItemResult": {
      "name": "PublishDraftItemResult",
      "className": "PublishDraftItemResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": []
    },
    "PublishItemRequest": {
      "name": "PublishItemRequest",
      "className": "PublishItemRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "The call kicks off a workflow to publish the item to the public catalog. The Publish Status API should be used to monitor the publish job.",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ETag",
          "description": "ETag of the catalog item to published from the working catalog to the public catalog. Used for optimistic concurrency. If the provided ETag does not match the ETag in the current working catalog, the request will be reject. If not provided, the current version of the document in the working catalog will be published.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "ID of the catalog item to publish from the working catalog to the public catalog.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "PublishItemResult": {
      "name": "PublishItemResult",
      "className": "PublishItemResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": []
    },
    "PublishResult": {
      "name": "PublishResult",
      "className": "PublishResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isenum": true,
      "enumvalues": [
        {
          "name": "Unknown"
        },
        {
          "name": "Pending"
        },
        {
          "name": "Succeeded"
        },
        {
          "name": "Failed"
        },
        {
          "name": "Canceled"
        }
      ]
    },
    "PublishStatusRequest": {
      "name": "PublishStatusRequest",
      "className": "PublishStatusRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "ID of the catalog item to publish from the working catalog to the public catalog.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "PublishStatusResult": {
      "name": "PublishStatusResult",
      "className": "PublishStatusResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "FailedScanResults",
          "description": "Scan results for any items that failed content scans.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ScanResult",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Result",
          "description": "High level state of the publish.",
          "jsontype": "String",
          "actualtype": "PublishResult",
          "isenum": true,
          "optional": true
        },
        {
          "name": "StatusMessage",
          "description": "Descriptive message about the current status of the publish.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "PurchaseItemByFriendlyIdRequest": {
      "name": "PurchaseItemByFriendlyIdRequest",
      "className": "PurchaseItemByFriendlyIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Purchase item by friendly Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "AutoConsume",
          "description": "Sets a value indicating whether the purchased item should be automatically consumed. The specified item quantity will be both increased and decreased.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "CountryCode",
          "description": "The country code where the real money transaction took place",
          "jsontype": "String",
          "actualtype": "CountryCode",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Currencies",
          "description": "The currencies used to pay for item.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PurchaseItemCurrency",
          "isclass": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemFriendlyId",
          "description": "Friendly identifier of the item to purchase.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Properties",
          "description": "Additional properties to be associated with purchased item.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Quantity",
          "description": "The quantity of the item to purchase.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "ReturnInventory",
          "description": "Indicates if the full inventory should be returned.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Store",
          "description": "The store to buy the item through.",
          "jsontype": "Object",
          "actualtype": "PurchaseStoreInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Uaid",
          "description": "The Universal account ID for the creator of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "PurchaseItemByIdRequest": {
      "name": "PurchaseItemByIdRequest",
      "className": "PurchaseItemByIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Purchase item by Id request",
      "isRequest": true,
      "properties": [
        {
          "name": "AutoConsume",
          "description": "Sets a value indicating whether the purchased item should be automatically consumed. The specified item quantity will be both increased and decreased.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "CountryCode",
          "description": "The country code where the real money transaction took place",
          "jsontype": "String",
          "actualtype": "CountryCode",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Currencies",
          "description": "The currencies used to pay for item.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PurchaseItemCurrency",
          "isclass": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "Unique identifier of the item to purchase.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Properties",
          "description": "Additional properties to be associated with purchased item.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Quantity",
          "description": "The quantity of the item to purchase.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "ReturnInventory",
          "description": "Indicates if the full inventory should be returned.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Store",
          "description": "The store to buy the item through.",
          "jsontype": "Object",
          "actualtype": "PurchaseStoreInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Uaid",
          "description": "The Universal account ID for the creator of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "PurchaseItemCurrency": {
      "name": "PurchaseItemCurrency",
      "className": "PurchaseItemCurrency",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "CurrencyId",
          "description": "The unique identifier of the currency.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ExpectedPrice",
          "description": "Price the client expects to pay for the item.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "PurchaseItemLegacyResult": {
      "name": "PurchaseItemLegacyResult",
      "className": "PurchaseItemLegacyResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Purchase item result",
      "isResult": true,
      "properties": [
        {
          "name": "Currencies",
          "description": "Details of the currencies used to purchase the items.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PurchaseItemResultCurrency",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "InventoryItems",
          "description": "Details of the current inventory items.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PurchaseItemResultItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "InventoryTooLarge",
          "description": "Indicates whether the number of inventory items is too large to be returned.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "PurchasedItems",
          "description": "Details for the items purchased.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PurchaseItemResultItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "PurchaseItemRequest": {
      "name": "PurchaseItemRequest",
      "className": "PurchaseItemRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Purchase a single item, bundle or subscription by id, paying the associated price.",
      "isRequest": true,
      "properties": [
        {
          "name": "CountryCode",
          "description": "The country code where the real money transaction took place.",
          "jsontype": "String",
          "actualtype": "CountryCode",
          "isenum": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ExpectedPrice",
          "description": "The expected payment used to for the item.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogPriceAmount",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency ID for this request.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Item",
          "description": "The item to be purchased.",
          "jsontype": "Object",
          "actualtype": "InventoryItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ReturnInventory",
          "description": "Indicates if the full inventory should be returned.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Store",
          "description": "The store to buy the item through.",
          "jsontype": "Object",
          "actualtype": "StoreInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "PurchaseItemResult": {
      "name": "PurchaseItemResult",
      "className": "PurchaseItemResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The idempotency ID for this request.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "InventoryItems",
          "description": "Details of the current inventory items. Null if ReturnInventory was set to false in request or InventoryTooLarge is set to true in response.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "InventoryTooLarge",
          "description": "Whether the number of inventory items is too large to be returned.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "UpdatedItems",
          "description": "The updated items for this request.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "PurchaseItemResultCurrency": {
      "name": "PurchaseItemResultCurrency",
      "className": "PurchaseItemResultCurrency",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Amount",
          "description": "The total amount of the currency on inventory.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "ChangedAmount",
          "description": "The amount of the currency used in this call.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "CurrencyId",
          "description": "The ID of the currency used in this purchase.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "PurchaseItemResultItem": {
      "name": "PurchaseItemResultItem",
      "className": "PurchaseItemResultItem",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Amount",
          "description": "The total amount of the item on inventory.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "ChangedAmount",
          "description": "The amount of the item purchased in this call.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "FriendlyId",
          "description": "Friendly id of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "InstanceId",
          "description": "Unique item identifier for this specific instance of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "Unique identifier of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemType",
          "description": "The type of item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Properties",
          "description": "The properties associated to the currency.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "PurchaseStoreInfo": {
      "name": "PurchaseStoreInfo",
      "className": "PurchaseStoreInfo",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "FriendlyId",
          "description": "The friendly identifier of the store.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Id",
          "description": "The unique identifier of the store.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "Rating": {
      "name": "Rating",
      "className": "Rating",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Average",
          "description": "The average rating for this item.",
          "jsontype": "Number",
          "actualtype": "float",
          "optional": true
        },
        {
          "name": "Count1Star",
          "description": "The total count of 1 star ratings for this item.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Count2Star",
          "description": "The total count of 2 star ratings for this item.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Count3Star",
          "description": "The total count of 3 star ratings for this item.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Count4Star",
          "description": "The total count of 4 star ratings for this item.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Count5Star",
          "description": "The total count of 5 star ratings for this item.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "TotalCount",
          "description": "The total count of ratings for this item.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "RedeemFailure": {
      "name": "RedeemFailure",
      "className": "RedeemFailure",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "FailureCode",
          "description": "The marketplace failure code.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FailureDetails",
          "description": "The marketplace error details explaining why the offer failed to redeem.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MarketplaceTransactionId",
          "description": "The marketplace transaction id.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OfferId",
          "description": "The failed to redeemed offer id .",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RedeemFailureLegacy": {
      "name": "RedeemFailureLegacy",
      "className": "RedeemFailureLegacy",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "FailureCode",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FailureDetails",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MarketplaceTransactionId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OfferId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RedeemInAppPurchaseRequest": {
      "name": "RedeemInAppPurchaseRequest",
      "className": "RedeemInAppPurchaseRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Redeem assets from a specified marketplace.",
      "isRequest": true,
      "properties": [
        {
          "name": "CountryCode",
          "description": "The country code where the real money transaction took place.",
          "jsontype": "String",
          "actualtype": "CountryCode",
          "isenum": true,
          "optional": true
        },
        {
          "name": "CurrencyCode",
          "description": "The currency code of the real money transaction.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency ID for this request.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MarketplaceData",
          "description": "The marketplace data required to interact with the marketplace on behalf of the user.",
          "jsontype": "Object",
          "actualtype": "MarketplaceData",
          "isclass": true,
          "optional": true
        },
        {
          "name": "OfferDetails",
          "description": "Mapping of offer IDs to the offer detail.",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "OfferDetail",
          "isclass": true,
          "optional": true
        },
        {
          "name": "RedeemOfferDetailsListOnly",
          "description": "Flag indicating whether we should only redeem offers specified in OfferDetails list.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "RedeemInAppPurchaseResult": {
      "name": "RedeemInAppPurchaseResult",
      "className": "RedeemInAppPurchaseResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "Failed",
          "description": "A list of failed redeemed offers.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "RedeemFailure",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency ID for this request.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Succeeded",
          "description": "A list of successful redeemed offers.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "RedeemSuccess",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "RedeemItemResponse": {
      "name": "RedeemItemResponse",
      "className": "RedeemItemResponse",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "ChangedQuantity",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "CurrencyId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CurrencyType",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "InstanceId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Quantity",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        }
      ]
    },
    "RedeemMarketplaceAssetsRequest": {
      "name": "RedeemMarketplaceAssetsRequest",
      "className": "RedeemMarketplaceAssetsRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Redeem assets from a specified marketplace.",
      "isRequest": true,
      "properties": [
        {
          "name": "CountryCode",
          "description": "The country code where the real money transaction took place",
          "jsontype": "String",
          "actualtype": "CountryCode",
          "isenum": true,
          "optional": true
        },
        {
          "name": "CurrencyCode",
          "description": "The currency code of the real money transaction",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MarketplaceConfigInstance",
          "description": "The Marketplace configuration instance to perform this action on",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MarketplaceData",
          "description": "The Marketplace data required to interact with the Marketplace on behalf of the user",
          "jsontype": "Object",
          "actualtype": "object",
          "optional": true
        },
        {
          "name": "OfferDetails",
          "description": "Mapping of offer identifiers to the offer detail",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "OfferDetail",
          "isclass": true,
          "optional": true
        },
        {
          "name": "OnlyRedeemOfferDetailsList",
          "description": "Flag indicating whether we should only redeem offers specified in OfferDetails list",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "TargetMarketplace",
          "description": "The Marketplace to run the redemption request against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "RedeemMarketplaceAssetsResult": {
      "name": "RedeemMarketplaceAssetsResult",
      "className": "RedeemMarketplaceAssetsResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "Failed",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "RedeemFailureLegacy",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Succeeded",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "RedeemSuccessLegacy",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "RedeemSuccess": {
      "name": "RedeemSuccess",
      "className": "RedeemSuccess",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Items",
          "description": "A list of items granted by the offer id.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "MarketplaceTransactionId",
          "description": "The marketplace transaction id.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OfferId",
          "description": "The successfully redeemed offer id.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "RedeemTimeStamp",
          "description": "The timestamp for when the redeem was completed.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        }
      ]
    },
    "RedeemSuccessLegacy": {
      "name": "RedeemSuccessLegacy",
      "className": "RedeemSuccessLegacy",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Items",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "RedeemItemResponse",
          "isclass": true,
          "optional": true
        },
        {
          "name": "MarketplaceTransactionId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OfferId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "RedeemTimeStamp",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        }
      ]
    },
    "RefreshSubscriptionFailure": {
      "name": "RefreshSubscriptionFailure",
      "className": "RefreshSubscriptionFailure",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "FailureCode",
          "description": "The marketplace failure code.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FailureDetails",
          "description": "The marketplace error details explaining why the offer failed to redeem.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MarketplaceName",
          "description": "The marketplace name.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MarketplaceTransactionId",
          "description": "The marketplace transaction id.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OfferId",
          "description": "The failed to redeemed offer id .",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RefreshSubscriptionsRequest": {
      "name": "RefreshSubscriptionsRequest",
      "className": "RefreshSubscriptionsRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Refresh Subscriptions for specified marketplaces.",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "MarketplaceDetails",
          "description": "The marketplaces to refresh subscriptions for.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "MarketplaceDetail",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "RefreshSubscriptionsResult": {
      "name": "RefreshSubscriptionsResult",
      "className": "RefreshSubscriptionsResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "Failed",
          "description": "A list of failed refreshed subscriptions.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "RefreshSubscriptionFailure",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Succeeded",
          "description": "A list of successful refreshed subscriptions.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "RefreshSubscriptionSuccess",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "RefreshSubscriptionSuccess": {
      "name": "RefreshSubscriptionSuccess",
      "className": "RefreshSubscriptionSuccess",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Items",
          "description": "A list of items granted by the offer id.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "MarketplaceName",
          "description": "The marketplace name.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MarketplaceTransactionId",
          "description": "The marketplace transaction id.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OfferId",
          "description": "The successfully redeemed offer id.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "RedeemTimeStamp",
          "description": "The timestamp for when the redeem was completed.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        }
      ]
    },
    "ReportItemRequest": {
      "name": "ReportItemRequest",
      "className": "ReportItemRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "AlternateId",
          "description": "An alternate ID associated with this item.",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Concern",
          "description": "Category of concern for this report.",
          "jsontype": "String",
          "actualtype": "ConcernCategory",
          "isenum": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "The unique ID of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Reason",
          "description": "The string reason for this report.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "ReportItemResult": {
      "name": "ReportItemResult",
      "className": "ReportItemResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": []
    },
    "ReportItemReviewRequest": {
      "name": "ReportItemReviewRequest",
      "className": "ReportItemReviewRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Submit a report for an inappropriate review, allowing the submitting user to specify their concern.",
      "isRequest": true,
      "properties": [
        {
          "name": "ConcernCategory",
          "description": "The reason this review is being reported.",
          "jsontype": "String",
          "actualtype": "ConcernCategory",
          "isenum": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ReviewId",
          "description": "The ID of the review to submit a report for.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ReportItemReviewResult": {
      "name": "ReportItemReviewResult",
      "className": "ReportItemReviewResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": []
    },
    "ReportReviewRequest": {
      "name": "ReportReviewRequest",
      "className": "ReportReviewRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Submit a report for an inappropriate review, allowing the submitting user to specify their concern.",
      "isRequest": true,
      "properties": [
        {
          "name": "ConcernCategory",
          "description": "The reason this review is being reported.",
          "jsontype": "String",
          "actualtype": "ConcernCategory",
          "isenum": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ReviewId",
          "description": "The ID of the review to submit a report for.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ReportReviewResult": {
      "name": "ReportReviewResult",
      "className": "ReportReviewResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": []
    },
    "Review": {
      "name": "Review",
      "className": "Review",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "HelpfulNegative",
          "description": "The number of negative helpfulness votes for this review.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "HelpfulnessVotes",
          "description": "Total number of helpfulness votes for this review.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "HelpfulPositive",
          "description": "The number of positive helpfulness votes for this review.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "IsInstalled",
          "description": "Indicates whether the review author has the item installed.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "ItemId",
          "description": "The ID of the item being reviewed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemVersion",
          "description": "The version of the item being reviewed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Locale",
          "description": "The locale for which this review was submitted in.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Rating",
          "description": "Star rating associated with this review.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "ReviewerId",
          "description": "The ID of the author of the review.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ReviewId",
          "description": "The ID of the review.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ReviewText",
          "description": "The full text of this review.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Submitted",
          "description": "The date and time this review was last submitted.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Title",
          "description": "The title of this review.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ReviewItemRequest": {
      "name": "ReviewItemRequest",
      "className": "ReviewItemRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "AlternateId",
          "description": "An alternate ID associated with this item.",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "The unique ID of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Review",
          "description": "The review to submit.",
          "jsontype": "Object",
          "actualtype": "Review",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "ReviewItemResult": {
      "name": "ReviewItemResult",
      "className": "ReviewItemResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": []
    },
    "ReviewSubmission": {
      "name": "ReviewSubmission",
      "className": "ReviewSubmission",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "IsInstalled",
          "description": "Indicates whether the review author has the item installed.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "ItemVersion",
          "description": "The version of the item being reviewed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Rating",
          "description": "Star rating associated with this review.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "ReviewText",
          "description": "The full text of this review.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Title",
          "description": "The title of this review.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ReviewTakedown": {
      "name": "ReviewTakedown",
      "className": "ReviewTakedown",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "ItemId",
          "description": "The ID of the item associated with the review to take down.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ReviewId",
          "description": "The ID of the review to take down.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ScanResult": {
      "name": "ScanResult",
      "className": "ScanResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Url",
          "description": "The URL of the item which failed the scan.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "SearchBundlesRequest": {
      "name": "SearchBundlesRequest",
      "className": "SearchBundlesRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Search for bundles request",
      "isRequest": true,
      "properties": [
        {
          "name": "ConfigurationName",
          "description": "The search configuration to use for this search.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether the referenced items should be expanded.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Filter",
          "description": "An OData filter used to refine the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OrderBy",
          "description": "An OData orderBy used to order the results of the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Search",
          "description": "The text to search for",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Skip",
          "description": "The number of search results to skip.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace to search under.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Top",
          "description": "The number of search results to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "SearchBundlesResult": {
      "name": "SearchBundlesResult",
      "className": "SearchBundlesResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Search for bundles result",
      "isResult": true,
      "properties": [
        {
          "name": "Bundles",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "GetBundleResult",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ConfigurationName",
          "description": "The name of the search configuration that was used for the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Count",
          "description": "The total number of items returned by the search query.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "SearchConfig": {
      "name": "SearchConfig",
      "className": "SearchConfig",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "Description",
          "description": "The search configuration for the Description property.",
          "jsontype": "Object",
          "actualtype": "PropertySearchConfig",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IgnoreBoostFactor",
          "description": "Flag defining whether items boost factor will be ignored in the search result scores.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Keywords",
          "description": "The search configuration for the Keywords property.",
          "jsontype": "Object",
          "actualtype": "PropertySearchConfig",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Ratings",
          "description": "The search configuration for the Ratings property.",
          "jsontype": "Object",
          "actualtype": "PropertySearchConfig",
          "isclass": true,
          "optional": true
        },
        {
          "name": "StartDate",
          "description": "The search configuration for the StartDate property.",
          "jsontype": "Object",
          "actualtype": "DecaySearchConfig",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Title",
          "description": "The search configuration for the Title property.",
          "jsontype": "Object",
          "actualtype": "PropertySearchConfig",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "SearchForItemsContainingItemByFriendlyIdRequest": {
      "name": "SearchForItemsContainingItemByFriendlyIdRequest",
      "className": "SearchForItemsContainingItemByFriendlyIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Search for bundles/subscriptions/stores containing any item from a list of items. The items are referenced by Friendly Ids.",
      "isRequest": true,
      "properties": [
        {
          "name": "ContainerType",
          "description": "Do we want to restrict the Search to Bundles/Subscriptions/Stores?",
          "jsontype": "String",
          "actualtype": "ContainerType",
          "isenum": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendlyIds",
          "description": "FriendlyIds of the items",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace to search under.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "SearchForItemsContainingItemByIdRequest": {
      "name": "SearchForItemsContainingItemByIdRequest",
      "className": "SearchForItemsContainingItemByIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Search for bundles/subscriptions/stores containing any item from a list of items. The items are referenced by Ids.",
      "isRequest": true,
      "properties": [
        {
          "name": "ContainerType",
          "description": "Do we want to restrict the Search to Bundles/Subscriptions/Stores?",
          "jsontype": "String",
          "actualtype": "ContainerType",
          "isenum": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Ids",
          "description": "Ids of the items",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace to search under.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "SearchForItemsContainingItemResult": {
      "name": "SearchForItemsContainingItemResult",
      "className": "SearchForItemsContainingItemResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Search for items containing an item result",
      "isResult": true,
      "properties": [
        {
          "name": "Bundles",
          "description": "List of Bundles containing the item.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Recipes",
          "description": "List of Recipes containing the item.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Stores",
          "description": "List of Stores containing the item.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Subscriptions",
          "description": "List of Subscriptions containing the item.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "SearchInStoreByFriendlyIdRequest": {
      "name": "SearchInStoreByFriendlyIdRequest",
      "className": "SearchInStoreByFriendlyIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Search for items within a store request. The store is referenced by Friendly Id.",
      "isRequest": true,
      "properties": [
        {
          "name": "ConfigurationName",
          "description": "The search configuration to use for this search.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Filter",
          "description": "An OData filter used to refine the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendlyId",
          "description": "FriendlyId of target store",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "OrderBy",
          "description": "An OData orderBy used to order the results of the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Search",
          "description": "The text to search for",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Skip",
          "description": "The number of search results to skip.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace to search under.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Top",
          "description": "The number of search results to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "SearchInStoreByIdRequest": {
      "name": "SearchInStoreByIdRequest",
      "className": "SearchInStoreByIdRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Search for items within a store request. The store is referenced by Id.",
      "isRequest": true,
      "properties": [
        {
          "name": "ConfigurationName",
          "description": "The search configuration to use for this search.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Filter",
          "description": "An OData filter used to refine the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Id",
          "description": "Id of target store",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "OrderBy",
          "description": "An OData orderBy used to order the results of the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Search",
          "description": "The text to search for",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Skip",
          "description": "The number of search results to skip.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace to search under.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Top",
          "description": "The number of search results to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "SearchInStoreResult": {
      "name": "SearchInStoreResult",
      "className": "SearchInStoreResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Search within a store result",
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Items",
          "description": "List of Items within the Store that satisfy the search condition.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "SearchItemsRequest": {
      "name": "SearchItemsRequest",
      "className": "SearchItemsRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "ConfigurationName",
          "description": "The search configuration to use for this search.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ContinuationToken",
          "description": "An opaque token used to retrieve the next page of items, if any are available.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Count",
          "description": "Number of items to retrieve. Maximum page size is 200. Default value is 10.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether to expand the item references. ExpandReferencedItems has not yet been implemented.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Filter",
          "description": "An OData filter used to refine the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OrderBy",
          "description": "An OData orderBy used to order the results of the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Search",
          "description": "The text to search for.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Select",
          "description": "An OData select query option used to augment the search results. If not defined, the default search result metadata will be returned.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Store",
          "description": "The store information to filter the search request. Store support has not yet been implemented.",
          "jsontype": "Object",
          "actualtype": "StoreInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "SearchItemsResult": {
      "name": "SearchItemsResult",
      "className": "SearchItemsResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "ConfigurationName",
          "description": "The name of the search configuration that was used for the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ContinuationToken",
          "description": "An opaque token used to retrieve the next page of items, if any are available.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Items",
          "description": "The paginated set of results for the search query.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PartialExpandedResults",
          "description": "Whether the results are partial.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "ReferencedItems",
          "description": "Set of results of referenced items in the paged items.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "TotalCount",
          "description": "The total count of items returned.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "SearchRecipesRequest": {
      "name": "SearchRecipesRequest",
      "className": "SearchRecipesRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Search for recipes request",
      "isRequest": true,
      "properties": [
        {
          "name": "ConfigurationName",
          "description": "The search configuration to use for this search.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether the referenced items should be expanded.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Filter",
          "description": "An OData filter used to refine the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OrderBy",
          "description": "An OData orderBy used to order the results of the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Search",
          "description": "The text to search for",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Skip",
          "description": "The number of search results to skip.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace to search under.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Top",
          "description": "The number of search results to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "SearchRecipesResult": {
      "name": "SearchRecipesResult",
      "className": "SearchRecipesResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Search for recipes result",
      "isResult": true,
      "properties": [
        {
          "name": "ConfigurationName",
          "description": "The name of the search configuration that was used for the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Count",
          "description": "The total number of items returned by the search query.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Recipes",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "GetRecipeResult",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "SearchStoresRequest": {
      "name": "SearchStoresRequest",
      "className": "SearchStoresRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Search for stores request",
      "isRequest": true,
      "properties": [
        {
          "name": "ConfigurationName",
          "description": "The search configuration to use for this search.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether the referenced items should be expanded.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Filter",
          "description": "An OData filter used to refine the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OrderBy",
          "description": "An OData orderBy used to order the results of the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Search",
          "description": "The text to search for",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Skip",
          "description": "The number of search results to skip.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace to search under.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Top",
          "description": "The number of search results to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "SearchStoresResult": {
      "name": "SearchStoresResult",
      "className": "SearchStoresResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Search for stores result",
      "isResult": true,
      "properties": [
        {
          "name": "ConfigurationName",
          "description": "The name of the search configuration that was used for the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Count",
          "description": "The total number of items returned by the search query.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Stores",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "GetStoreResult",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "SearchSubscriptionsRequest": {
      "name": "SearchSubscriptionsRequest",
      "className": "SearchSubscriptionsRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Search for subscriptions request",
      "isRequest": true,
      "properties": [
        {
          "name": "ConfigurationName",
          "description": "The search configuration to use for this search.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExpandReferencedItems",
          "description": "Whether the referenced items should be expanded.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Filter",
          "description": "An OData filter used to refine the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OrderBy",
          "description": "An OData orderBy used to order the results of the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Search",
          "description": "The text to search for",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Skip",
          "description": "The number of search results to skip.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "SourceEntityKey",
          "description": "The title or namespace to search under.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Top",
          "description": "The number of search results to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "SearchSubscriptionsResult": {
      "name": "SearchSubscriptionsResult",
      "className": "SearchSubscriptionsResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Search for subscriptions result",
      "isResult": true,
      "properties": [
        {
          "name": "ConfigurationName",
          "description": "The name of the search configuration that was used for the search query.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Count",
          "description": "The total number of items returned by the search query.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Subscriptions",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "GetSubscriptionResult",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "SetInventoryItemsRequest": {
      "name": "SetInventoryItemsRequest",
      "className": "SetInventoryItemsRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Given an entity type, entity identifier and container details, will set the entity's inventory items",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Items",
          "description": "A list of Items to modify",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItemDetails",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "SetInventoryItemsResult": {
      "name": "SetInventoryItemsResult",
      "className": "SetInventoryItemsResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Items",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItemResponseDto",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "SetItemModerationStateRequest": {
      "name": "SetItemModerationStateRequest",
      "className": "SetItemModerationStateRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "AlternateId",
          "description": "An alternate ID associated with this item.",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "The unique ID of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Reason",
          "description": "The reason for the moderation state change for the associated item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Status",
          "description": "The status to set for the associated item.",
          "jsontype": "String",
          "actualtype": "ModerationStatus",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "SetItemModerationStateResult": {
      "name": "SetItemModerationStateResult",
      "className": "SetItemModerationStateResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": []
    },
    "SetUgcItemModerationStateRequest": {
      "name": "SetUgcItemModerationStateRequest",
      "className": "SetUgcItemModerationStateRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "ID of the UGC item to set the moderation state for.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Reason",
          "description": "The reason for the moderation state change for the associated UGC item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Status",
          "description": "The status to set for the associated UGC item.",
          "jsontype": "String",
          "actualtype": "ModerationStatus",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "SetUgcItemModerationStateResult": {
      "name": "SetUgcItemModerationStateResult",
      "className": "SetUgcItemModerationStateResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": []
    },
    "SetVirtualCurrenciesRequest": {
      "name": "SetVirtualCurrenciesRequest",
      "className": "SetVirtualCurrenciesRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Given an entity type, entity identifier and container details, will set the entity's currencies to a specific amount. ",
      "isRequest": true,
      "properties": [
        {
          "name": "CountryCode",
          "description": "The country code where the real money transaction took place",
          "jsontype": "String",
          "actualtype": "CountryCode",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Currencies",
          "description": "A list of currencies to modify",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CurrencyDetails",
          "isclass": true,
          "optional": false
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "SetVirtualCurrenciesResult": {
      "name": "SetVirtualCurrenciesResult",
      "className": "SetVirtualCurrenciesResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "Currencies",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CurrencyResponseDto",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "StoreInfo": {
      "name": "StoreInfo",
      "className": "StoreInfo",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "AlternateId",
          "description": "An alternate ID of the store.",
          "jsontype": "Object",
          "actualtype": "CatalogAlternateId",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Id",
          "description": "The unique ID of the store.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "SubmitItemReviewVoteRequest": {
      "name": "SubmitItemReviewVoteRequest",
      "className": "SubmitItemReviewVoteRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ReviewId",
          "description": "The ID of the review to submit a helpfulness vote for.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Vote",
          "description": "The helpfulness vote of the review.",
          "jsontype": "String",
          "actualtype": "HelpfulnessVote",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "SubmitItemReviewVoteResult": {
      "name": "SubmitItemReviewVoteResult",
      "className": "SubmitItemReviewVoteResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": []
    },
    "SubscriptionDetails": {
      "name": "SubscriptionDetails",
      "className": "SubscriptionDetails",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "DurationInSeconds",
          "description": "The length of time that the subscription will last in seconds.",
          "jsontype": "Number",
          "actualtype": "double",
          "optional": false
        }
      ]
    },
    "SubscriptionItemResponseDto": {
      "name": "SubscriptionItemResponseDto",
      "className": "SubscriptionItemResponseDto",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "ExpirationDate",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "ItemIds",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "LastRefreshDate",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Marketplace",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "NextRecommendedRefreshDate",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "OfferId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Receipt",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "SubtractInventoryItemsRequest": {
      "name": "SubtractInventoryItemsRequest",
      "className": "SubtractInventoryItemsRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Given an entity type, entity identifier and container details, will subtract the specified inventory items. ",
      "isRequest": true,
      "properties": [
        {
          "name": "CountryCode",
          "description": "The country code of the real money transaction.",
          "jsontype": "String",
          "actualtype": "CountryCode",
          "isenum": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency ID for this request.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Items",
          "description": "A list of Items to modify.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ReturnInventory",
          "description": "Indicates if the full inventory should be returned.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "SubtractInventoryItemsResult": {
      "name": "SubtractInventoryItemsResult",
      "className": "SubtractInventoryItemsResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The idempotency ID for this request.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "InventoryItems",
          "description": "Details of the current inventory items. Null if ReturnInventory was set to false in request or InventoryTooLarge is set to true in response.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "InventoryTooLarge",
          "description": "Whether the number of inventory items is too large to be returned.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "UpdatedItems",
          "description": "The updated items for this request.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "SubtractVirtualCurrenciesRequest": {
      "name": "SubtractVirtualCurrenciesRequest",
      "className": "SubtractVirtualCurrenciesRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Given an entity type, entity identifier and container details, will decrease the entity's currencies by a specific amount. ",
      "isRequest": true,
      "properties": [
        {
          "name": "CountryCode",
          "description": "The country code where the real money transaction took place",
          "jsontype": "String",
          "actualtype": "CountryCode",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Currencies",
          "description": "A list of currencies to modify",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CurrencyDetails",
          "isclass": true,
          "optional": false
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "SubtractVirtualCurrenciesResult": {
      "name": "SubtractVirtualCurrenciesResult",
      "className": "SubtractVirtualCurrenciesResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "Currencies",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CurrencyResponseDto",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "TakedownReviewsRequest": {
      "name": "TakedownReviewsRequest",
      "className": "TakedownReviewsRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Submit a request to takedown one or more reviews, removing them from public view. Authors will still be able to see their reviews after being taken down.",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Reviews",
          "description": "The set of reviews to take down.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ReviewTakedown",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "TakedownReviewsResult": {
      "name": "TakedownReviewsResult",
      "className": "TakedownReviewsResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": []
    },
    "UpdateBundleRequest": {
      "name": "UpdateBundleRequest",
      "className": "UpdateBundleRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Update bundle request",
      "isRequest": true,
      "properties": [
        {
          "name": "Bundle",
          "description": "Bundle details",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": false
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UpdateBundleResult": {
      "name": "UpdateBundleResult",
      "className": "UpdateBundleResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Update bundle result",
      "isResult": true,
      "properties": [
        {
          "name": "Bundle",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UpdateCatalogConfigRequest": {
      "name": "UpdateCatalogConfigRequest",
      "className": "UpdateCatalogConfigRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "Config",
          "description": "The updated catalog configuration.",
          "jsontype": "Object",
          "actualtype": "CatalogConfig",
          "isclass": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SourceEntity",
          "description": "The title or namespace the item is in. If null, then calling entity will be used.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UpdateCatalogConfigResult": {
      "name": "UpdateCatalogConfigResult",
      "className": "UpdateCatalogConfigResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": []
    },
    "UpdateCurrencyRequest": {
      "name": "UpdateCurrencyRequest",
      "className": "UpdateCurrencyRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "Currency",
          "description": "Updated metadata describing the currency item to be updated.",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": false
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UpdateCurrencyResult": {
      "name": "UpdateCurrencyResult",
      "className": "UpdateCurrencyResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "Currency",
          "description": "Updated metadata describing the currency item just updated.",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UpdateDraftItemRequest": {
      "name": "UpdateDraftItemRequest",
      "className": "UpdateDraftItemRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Item",
          "description": "Updated metadata describing the catalog item to be updated.",
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Publish",
          "description": "Whether the item should be published immediately.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "UpdateDraftItemResult": {
      "name": "UpdateDraftItemResult",
      "className": "UpdateDraftItemResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "Item",
          "description": "Updated metadata describing the catalog item just updated.",
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UpdateInventoryItemsPropertiesRequest": {
      "name": "UpdateInventoryItemsPropertiesRequest",
      "className": "UpdateInventoryItemsPropertiesRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Update the specified inventory items.",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Items",
          "description": "A list of Items to modify",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItemDetails",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "UpdateInventoryItemsRequest": {
      "name": "UpdateInventoryItemsRequest",
      "className": "UpdateInventoryItemsRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Given an entity type, entity identifier and container details, will update the entity's inventory items",
      "isRequest": true,
      "properties": [
        {
          "name": "CountryCode",
          "description": "The country code of the real money transaction.",
          "jsontype": "String",
          "actualtype": "CountryCode",
          "isenum": true,
          "optional": true
        },
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "IdempotencyId",
          "description": "The Idempotency ID for this request.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Items",
          "description": "A list of Items to modify.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ReturnInventory",
          "description": "Indicates if the full inventory should be returned.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "UpdateInventoryItemsResult": {
      "name": "UpdateInventoryItemsResult",
      "className": "UpdateInventoryItemsResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The idempotency ID for this request.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "InventoryItems",
          "description": "Details of the current inventory items. Null if ReturnInventory was set to false in request or InventoryTooLarge is set to true in response.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "InventoryTooLarge",
          "description": "Whether the number of inventory items is too large to be returned.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "UpdatedItems",
          "description": "The updated items for this request.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UpdateInventoryPropertiesItemsResult": {
      "name": "UpdateInventoryPropertiesItemsResult",
      "className": "UpdateInventoryPropertiesItemsResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Items",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "InventoryItemResponseDto",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Subscriptions",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "SubscriptionItemResponseDto",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UpdateRecipeRequest": {
      "name": "UpdateRecipeRequest",
      "className": "UpdateRecipeRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Update recipe request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Recipe",
          "description": "recipe details",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "UpdateRecipeResult": {
      "name": "UpdateRecipeResult",
      "className": "UpdateRecipeResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Update recipe result",
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Recipe",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UpdateStoreRequest": {
      "name": "UpdateStoreRequest",
      "className": "UpdateStoreRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Update store request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Entity",
          "description": "The entity to perform this action on.",
          "jsontype": "Object",
          "actualtype": "EntityKey",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Store",
          "description": "Bundle details",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "UpdateStoreResult": {
      "name": "UpdateStoreResult",
      "className": "UpdateStoreResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Update store result",
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Store",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UpdateSubscriptionRequest": {
      "name": "UpdateSubscriptionRequest",
      "className": "UpdateSubscriptionRequest",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Update subscription request",
      "isRequest": true,
      "properties": [
        {
          "name": "CustomTags",
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Subscription",
          "description": "subscription details",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "UpdateSubscriptionResult": {
      "name": "UpdateSubscriptionResult",
      "className": "UpdateSubscriptionResult",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "description": "Update subscription result",
      "isResult": true,
      "properties": [
        {
          "name": "IdempotencyId",
          "description": "The Idempotency Id for this request",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Subscription",
          "jsontype": "Object",
          "actualtype": "CatalogItemMetadata",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UploadInfo": {
      "name": "UploadInfo",
      "className": "UploadInfo",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "FileName",
          "description": "Name of the file to be uploaded.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FileSize",
          "description": "Size of the file to be uploaded, in bytes.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "UploadUrlMetadata": {
      "name": "UploadUrlMetadata",
      "className": "UploadUrlMetadata",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "FileName",
          "description": "Name of the file for which this upload URL was requested.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Id",
          "description": "Unique ID for the binary content to be uploaded to the target URL.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Url",
          "description": "URL for the binary content to be uploaded to.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserGeneratedContentSpecificConfig": {
      "name": "UserGeneratedContentSpecificConfig",
      "className": "UserGeneratedContentSpecificConfig",
      "classNameSpace": "PlayFab.Economy.Models",
      "assembly": "PlayFab.Economy.Models",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "properties": [
        {
          "name": "ContentTypes",
          "description": "The set of content types that will be used for validation and if no values are provided then anything is allowed.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Enabled",
          "description": "Flag defining whether user generated content is enabled.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Tags",
          "description": "The set of tags that will be used for validation and if no values are provided then anything is allowed.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    }
  },
  "subgroups": [
    {
      "name": "Catalog",
      "methods": [
        "CraftItemsFromRecipe",
        "CraftRecipeByFriendlyId",
        "CraftRecipeById",
        "CreateBundle",
        "CreateCurrency",
        "CreateDraftItem",
        "CreateOrUpdateReview",
        "CreateRecipe",
        "CreateStore",
        "CreateSubscription",
        "CreateUploadUrls",
        "DeleteBundleByFriendlyId",
        "DeleteBundleById",
        "DeleteItem",
        "DeleteRecipeByFriendlyId",
        "DeleteRecipeById",
        "DeleteStoreByFriendlyId",
        "DeleteStoreById",
        "DeleteSubscriptionByFriendlyId",
        "DeleteSubscriptionById",
        "GetBundleByFriendlyId",
        "GetBundleById",
        "GetBundleByMarketplaceOfferId",
        "GetCatalogConfig",
        "GetCurrencyById",
        "GetDraftBundleByAlternateId",
        "GetDraftBundleById",
        "GetDraftBundles",
        "GetDraftItem",
        "GetDraftItemByAlternateId",
        "GetDraftItems",
        "GetDraftStoreByAlternateId",
        "GetDraftStoreById",
        "GetDraftStores",
        "GetEntityItemReview",
        "GetItem",
        "GetItemModerationState",
        "GetItemPublishStatus",
        "GetItemReferencers",
        "GetItemReviews",
        "GetItemReviewSummary",
        "GetItems",
        "GetMyReview",
        "GetPublishedItem",
        "GetPublishStatus",
        "GetRecipeByFriendlyId",
        "GetRecipeById",
        "GetRecipeByMarketplaceOfferId",
        "GetStoreByFriendlyId",
        "GetStoreById",
        "GetSubscriptionByFriendlyId",
        "GetSubscriptionById",
        "GetSubscriptionByMarketplaceOfferId",
        "PublishDraftItem",
        "PublishItem",
        "PurchaseItem",
        "PurchaseItemByFriendlyId",
        "PurchaseItemById",
        "ReportItem",
        "ReportItemReview",
        "ReportReview",
        "ReviewItem",
        "Search",
        "SearchBundles",
        "SearchForItemsContainingItemByFriendlyId",
        "SearchForItemsContainingItemById",
        "SearchInStoreByFriendlyId",
        "SearchInStoreById",
        "SearchItems",
        "SearchRecipes",
        "SearchStores",
        "SearchSubscriptions",
        "SetItemModerationState",
        "SubmitHelpfulnessVote",
        "SubmitItemReviewVote",
        "TakedownReviews",
        "UpdateBundle",
        "UpdateCatalogConfig",
        "UpdateCurrency",
        "UpdateDraftItem",
        "UpdateRecipe",
        "UpdateStore",
        "UpdateSubscription"
      ]
    },
    {
      "name": "Inventory",
      "methods": [
        "AddInventoryItems",
        "AddVirtualCurrencies",
        "ConsumeInventoryItems",
        "GetAccessTokens",
        "GetInventoryItems",
        "GetMarketplaceAccessToken",
        "GetReceiptIssuerCertificateAsJwk",
        "GetReceiptIssuerCertificateAsPem",
        "GetReceiptIssuerCertificates",
        "GetVirtualCurrencies",
        "GrantInventoryItems",
        "Redeem",
        "RedeemInAppPurchase",
        "RefreshSubscriptions",
        "SetInventoryItems",
        "SetVirtualCurrencies",
        "SubtractInventoryItems",
        "SubtractVirtualCurrencies",
        "UpdateInventoryItems",
        "UpdateInventoryItemsProperties"
      ]
    },
    {
      "name": "UserGeneratedContent",
      "methods": [
        "CreateDraftUgcItem",
        "CreateUgcUploadUrls",
        "DeleteUgcItem",
        "GetDraftUgcItem",
        "GetDraftUgcItemByAlternateId",
        "GetDraftUgcItems",
        "GetPublishedUgcItem",
        "GetUgcItemModerationState",
        "GetUgcPublishStatus",
        "PublishUgcItem",
        "ReportUgcItem",
        "SetUgcItemModerationState",
        "UpdateDraftUgcItem"
      ]
    }
  ],
  "calls": [
    {
      "name": "AddInventoryItems",
      "summary": "Add inventory items.",
      "requestDetails": "Given an entity type, entity identifier and container details, will add the specified inventory items.",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/AddInventoryItems",
      "auth": "EntityToken",
      "method": "POST",
      "request": "AddInventoryItemsRequest",
      "requestExample": "",
      "result": "AddInventoryItemsResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable",
        "ForbiddenByEntityPolicy"
      ]
    },
    {
      "name": "AddVirtualCurrencies",
      "summary": "Increase virtual currencies amount.",
      "requestDetails": "Given an entity type, entity identifier and container details, will increase the entity's currencies by a specific amount. ",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/AddVirtualCurrencies",
      "auth": "EntityToken",
      "method": "POST",
      "request": "AddVirtualCurrenciesRequest",
      "requestExample": "",
      "result": "AddVirtualCurrenciesResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable",
        "ForbiddenByEntityPolicy"
      ]
    },
    {
      "name": "ConsumeInventoryItems",
      "summary": "Consume inventory items.",
      "requestDetails": "Given an entity type, entity identifier and container details, will consume the specified inventory items. ",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/ConsumeInventoryItems",
      "auth": "EntityToken",
      "method": "POST",
      "request": "ConsumeInventoryItemsRequest",
      "requestExample": "",
      "result": "ConsumeInventoryItemsResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable",
        "ForbiddenByEntityPolicy"
      ]
    },
    {
      "name": "CraftItemsFromRecipe",
      "summary": "Craft a recipe by id.",
      "requestDetails": "Craft a recipe by id, paying the associated ingredients.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Inventory/CraftItemsFromRecipe",
      "auth": "EntityToken",
      "method": "POST",
      "request": "CraftItemsFromRecipeRequest",
      "requestExample": "",
      "result": "CraftItemsFromRecipeResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable",
        "InventoryApiNotImplemented"
      ]
    },
    {
      "name": "CraftRecipeByFriendlyId",
      "summary": "Craft a recipe by friendly id.",
      "requestDetails": "Craft a recipe by friendly id, paying the associated ingredients.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/CraftRecipeByFriendlyId",
      "auth": "EntityToken",
      "method": "POST",
      "request": "CraftRecipeByFriendlyIdRequest",
      "requestExample": "{\r\n  \"RecipeFriendlyId\": \"Example Item\",\r\n  \"Quantity\": 99,\r\n  \"Ingredients\": [\r\n    {\r\n      \"IngredientId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\",\r\n      \"ExpectedAmount\": 99\r\n    }\r\n  ],\r\n  \"Store\": {\r\n    \"Id\": \"ffffffff-ffff-ffff-ffff-ffffffffffff\"\r\n  },\r\n  \"AutoConsume\": false,\r\n  \"Properties\": {\r\n    \"AKey\": \"AValue\",\r\n    \"BKey\": \"BValue\"\r\n  },\r\n  \"ReturnInventory\": false,\r\n  \"Entity\": {\r\n    \"Id\": \"AAAAAAAAAAAAAAAA\",\r\n    \"Type\": \"TitlePlayerAccount\",\r\n    \"TypeString\": \"TitlePlayerAccount\"\r\n  }\r\n}",
      "result": "CraftRecipeLegacyResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ]
    },
    {
      "name": "CraftRecipeById",
      "summary": "Craft a recipe by id.",
      "requestDetails": "Craft a recipe by id, paying the associated ingredients.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/CraftRecipeById",
      "auth": "EntityToken",
      "method": "POST",
      "request": "CraftRecipeByIdRequest",
      "requestExample": "{\r\n  \"RecipeId\": \"eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee\",\r\n  \"Quantity\": 99,\r\n  \"Ingredients\": [\r\n    {\r\n      \"IngredientId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\",\r\n      \"ExpectedAmount\": 99\r\n    }\r\n  ],\r\n  \"Store\": {\r\n    \"Id\": \"ffffffff-ffff-ffff-ffff-ffffffffffff\"\r\n  },\r\n  \"AutoConsume\": false,\r\n  \"Properties\": {\r\n    \"AKey\": \"AValue\",\r\n    \"BKey\": \"BValue\"\r\n  },\r\n  \"ReturnInventory\": false,\r\n  \"Entity\": {\r\n    \"Id\": \"AAAAAAAAAAAAAAAA\",\r\n    \"Type\": \"TitlePlayerAccount\",\r\n    \"TypeString\": \"TitlePlayerAccount\"\r\n  }\r\n}",
      "result": "CraftRecipeLegacyResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ]
    },
    {
      "name": "CreateBundle",
      "summary": "Create a bundle",
      "requestDetails": "Given a title entity token and bundle details, create a bundle.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/CreateBundle",
      "auth": "EntityToken",
      "method": "POST",
      "request": "CreateBundleRequest",
      "requestExample": "",
      "result": "CreateBundleResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "CreateCurrency",
      "summary": "Create a currency",
      "requestDetails": "Given a title entity token, and currency details, create a currency.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/CreateCurrency",
      "auth": "EntityToken",
      "method": "POST",
      "request": "CreateCurrencyRequest",
      "requestExample": "{\r\n  \"Currency\": {\r\n    \"AlternateIds\": [\r\n      {\r\n        \"Type\": \"FriendlyId\",\r\n        \"Value\": \"AU\"\r\n      }\r\n    ],\r\n    \"Title\": {\r\n      \"neutral\": \"gold\"\r\n    },\r\n    \"IsHidden\": false,\r\n    \"StartDate\": \"2018-08-17T22:32:10.472Z\",\r\n    \"Images\": [\r\n      {\r\n        \"Id\": \"00000000-0000-0000-0000-000000000003\",\r\n        \"Tag\": \"display\",\r\n        \"Type\": \"thumbnail\",\r\n        \"Url\": \"https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/gold_thumb.jpg\"\r\n      }\r\n    ],\r\n    \"ETag\": \"opaqueString\"\r\n  }\r\n}",
      "result": "CreateCurrencyResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"CurrencyMetadata\": {\r\n      \"Id\": \"00000000-0000-0000-0000-000000000004\",\r\n      \"AlternateIds\": [\r\n        {\r\n          \"Type\": \"FriendlyId\",\r\n          \"Value\": \"AU\"\r\n        }\r\n      ],\r\n      \"Title\": {\r\n        \"neutral\": \"gold\"\r\n      },\r\n      \"IsHidden\": false,\r\n      \"StartDate\": \"2018-08-17T22:32:10.472Z\",\r\n      \"Images\": [\r\n        {\r\n          \"Id\": \"00000000-0000-0000-0000-000000000003\",\r\n          \"Tag\": \"display\",\r\n          \"Type\": \"thumbnail\",\r\n          \"Url\": \"https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/gold_thumb.jpg\"\r\n        }\r\n      ],\r\n      \"ETag\": \"opaqueString\"\r\n    }\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogBadRequest"
      ]
    },
    {
      "name": "CreateDraftItem",
      "summary": "Creates a new item in the working catalog using provided metadata.",
      "requestDetails": "The item will not be published to the public catalog until the PublishItem API is called for the item.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/CreateDraftItem",
      "auth": "EntityToken",
      "method": "POST",
      "request": "CreateDraftItemRequest",
      "requestExample": "{\r\n  \"Item\": {\r\n    \"Title\": {\r\n      \"neutral\": \"Neutral title\",\r\n      \"en-US\": \"US English title\"\r\n    },\r\n    \"Description\": {\r\n      \"neutral\": \"Neutral description\",\r\n      \"en-US\": \"US English description\"\r\n    },\r\n    \"Keywords\": {\r\n      \"neutral\": {\r\n        \"Values\": [\r\n          \"Keyword_1\",\r\n          \"Keyword_2\"\r\n        ]\r\n      }\r\n    },\r\n    \"BoostFactor\": 0.8,\r\n    \"ContentType\": \"example catalog item\",\r\n    \"IsHidden\": false,\r\n    \"Platforms\": [\r\n      \"android\",\r\n      \"xboxone\",\r\n      \"ios\"\r\n    ],\r\n    \"Tags\": [\r\n      \"pirates\",\r\n      \"holiday\"\r\n    ],\r\n    \"DisplayVersion\": \"1.0.0\",\r\n    \"Contents\": [\r\n      {\r\n        \"Id\": \"00000000-0000-0000-0000-000000000001\",\r\n        \"Url\": \"https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip\",\r\n        \"MaxClientVersion\": \"2.4.1\",\r\n        \"MinClientVersion\": \"2.0.0\",\r\n        \"Tags\": [\r\n          \"pirate\",\r\n          \"desert\"\r\n        ],\r\n        \"Type\": \"textures\"\r\n      }\r\n    ],\r\n    \"Images\": [\r\n      {\r\n        \"Id\": \"00000000-0000-0000-0000-000000000003\",\r\n        \"Tag\": \"splashscreen\",\r\n        \"Type\": \"thumbnail\",\r\n        \"Url\": \"https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg\"\r\n      }\r\n    ],\r\n    \"DisplayProperties\": {\r\n      \"mapDetails\": {\r\n        \"mapType\": \"desertIsland\",\r\n        \"gameMode\": \"capture\",\r\n        \"maxPlayers\": 16\r\n      },\r\n      \"averageMatchLengthInSeconds\": 947\r\n    },\r\n    \"ETag\": \"opaqueString\"\r\n  },\r\n  \"Publish\": false,\r\n  \"AllowOverwrite\": false,\r\n  \"PublishItem\": false\r\n}",
      "result": "CreateDraftItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Item\": {\r\n      \"Id\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\",\r\n      \"Title\": {\r\n        \"neutral\": \"Neutral title\",\r\n        \"en-US\": \"US English title\"\r\n      },\r\n      \"Description\": {\r\n        \"neutral\": \"Neutral description\",\r\n        \"en-US\": \"US English description\"\r\n      },\r\n      \"Keywords\": {\r\n        \"neutral\": {\r\n          \"Values\": [\r\n            \"Keyword_1\",\r\n            \"Keyword_2\"\r\n          ]\r\n        }\r\n      },\r\n      \"BoostFactor\": 0.8,\r\n      \"ContentType\": \"example item\",\r\n      \"CreatorEntityKey\": {\r\n        \"Id\": \"someId\",\r\n        \"Type\": \"title_player_account\",\r\n        \"TypeString\": \"title_player_account\"\r\n      },\r\n      \"IsHidden\": false,\r\n      \"Platforms\": [\r\n        \"android\",\r\n        \"xboxone\",\r\n        \"ios\"\r\n      ],\r\n      \"Tags\": [\r\n        \"pirates\",\r\n        \"holiday\"\r\n      ],\r\n      \"DisplayVersion\": \"1.0.0\",\r\n      \"CreationDate\": \"2018-08-17T22:32:10.472Z\",\r\n      \"LastModifiedDate\": \"2018-08-17T22:32:31.911Z\",\r\n      \"Contents\": [\r\n        {\r\n          \"Id\": \"00000000-0000-0000-0000-000000000001\",\r\n          \"Url\": \"https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip\",\r\n          \"MaxClientVersion\": \"2.4.1\",\r\n          \"MinClientVersion\": \"2.0.0\",\r\n          \"Tags\": [\r\n            \"pirate\",\r\n            \"desert\"\r\n          ],\r\n          \"Type\": \"textures\"\r\n        }\r\n      ],\r\n      \"Images\": [\r\n        {\r\n          \"Id\": \"00000000-0000-0000-0000-000000000003\",\r\n          \"Tag\": \"splashscreen\",\r\n          \"Type\": \"thumbnail\",\r\n          \"Url\": \"https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg\"\r\n        }\r\n      ],\r\n      \"DisplayProperties\": {\r\n        \"mapDetails\": {\r\n          \"mapType\": \"desertIsland\",\r\n          \"gameMode\": \"capture\",\r\n          \"maxPlayers\": 16\r\n        },\r\n        \"averageMatchLengthInSeconds\": 947\r\n      },\r\n      \"ETag\": \"opaqueString\"\r\n    }\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogApiNotImplemented",
        "CatalogBadRequest",
        "CatalogClientIdentityInvalid",
        "CatalogItemMetadataInvalid",
        "CatalogItemTypeInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "CreateDraftUgcItem",
      "summary": "Creates a new community catalog item in the working catalog using provided metadata.",
      "requestDetails": "The item will not be published to the public catalog until the user makes a call to the PublishItem API.",
      "subgroup": "UserGeneratedContent",
      "titleTiers": null,
      "url": "/UserGeneratedContent/CreateDraftUgcItem",
      "auth": "EntityToken",
      "method": "POST",
      "request": "CreateDraftItemRequest",
      "requestExample": "{\r\n  \"Item\": {\r\n    \"Title\": {\r\n      \"neutral\": \"Neutral title\",\r\n      \"en-US\": \"US English title\"\r\n    },\r\n    \"Description\": {\r\n      \"neutral\": \"Neutral description\",\r\n      \"en-US\": \"US English description\"\r\n    },\r\n    \"Keywords\": {\r\n      \"neutral\": {\r\n        \"Values\": [\r\n          \"Keyword_1\",\r\n          \"Keyword_2\"\r\n        ]\r\n      }\r\n    },\r\n    \"BoostFactor\": 0.8,\r\n    \"ContentType\": \"example catalog item\",\r\n    \"IsHidden\": false,\r\n    \"Platforms\": [\r\n      \"android\",\r\n      \"xboxone\",\r\n      \"ios\"\r\n    ],\r\n    \"Tags\": [\r\n      \"pirates\",\r\n      \"holiday\"\r\n    ],\r\n    \"DisplayVersion\": \"1.0.0\",\r\n    \"Contents\": [\r\n      {\r\n        \"Id\": \"00000000-0000-0000-0000-000000000001\",\r\n        \"Url\": \"https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip\",\r\n        \"MaxClientVersion\": \"2.4.1\",\r\n        \"MinClientVersion\": \"2.0.0\",\r\n        \"Tags\": [\r\n          \"pirate\",\r\n          \"desert\"\r\n        ],\r\n        \"Type\": \"textures\"\r\n      }\r\n    ],\r\n    \"Images\": [\r\n      {\r\n        \"Id\": \"00000000-0000-0000-0000-000000000003\",\r\n        \"Tag\": \"splashscreen\",\r\n        \"Type\": \"thumbnail\",\r\n        \"Url\": \"https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg\"\r\n      }\r\n    ],\r\n    \"DisplayProperties\": {\r\n      \"mapDetails\": {\r\n        \"mapType\": \"desertIsland\",\r\n        \"gameMode\": \"capture\",\r\n        \"maxPlayers\": 16\r\n      },\r\n      \"averageMatchLengthInSeconds\": 947\r\n    },\r\n    \"ETag\": \"opaqueString\"\r\n  },\r\n  \"Publish\": false,\r\n  \"AllowOverwrite\": false,\r\n  \"PublishItem\": false\r\n}",
      "result": "CreateDraftItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Item\": {\r\n      \"Id\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\",\r\n      \"Title\": {\r\n        \"neutral\": \"Neutral title\",\r\n        \"en-US\": \"US English title\"\r\n      },\r\n      \"Description\": {\r\n        \"neutral\": \"Neutral description\",\r\n        \"en-US\": \"US English description\"\r\n      },\r\n      \"Keywords\": {\r\n        \"neutral\": {\r\n          \"Values\": [\r\n            \"Keyword_1\",\r\n            \"Keyword_2\"\r\n          ]\r\n        }\r\n      },\r\n      \"BoostFactor\": 0.8,\r\n      \"ContentType\": \"example item\",\r\n      \"CreatorEntityKey\": {\r\n        \"Id\": \"someId\",\r\n        \"Type\": \"title_player_account\",\r\n        \"TypeString\": \"title_player_account\"\r\n      },\r\n      \"IsHidden\": false,\r\n      \"Platforms\": [\r\n        \"android\",\r\n        \"xboxone\",\r\n        \"ios\"\r\n      ],\r\n      \"Tags\": [\r\n        \"pirates\",\r\n        \"holiday\"\r\n      ],\r\n      \"DisplayVersion\": \"1.0.0\",\r\n      \"CreationDate\": \"2018-08-17T22:32:10.472Z\",\r\n      \"LastModifiedDate\": \"2018-08-17T22:32:31.911Z\",\r\n      \"Contents\": [\r\n        {\r\n          \"Id\": \"00000000-0000-0000-0000-000000000001\",\r\n          \"Url\": \"https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip\",\r\n          \"MaxClientVersion\": \"2.4.1\",\r\n          \"MinClientVersion\": \"2.0.0\",\r\n          \"Tags\": [\r\n            \"pirate\",\r\n            \"desert\"\r\n          ],\r\n          \"Type\": \"textures\"\r\n        }\r\n      ],\r\n      \"Images\": [\r\n        {\r\n          \"Id\": \"00000000-0000-0000-0000-000000000003\",\r\n          \"Tag\": \"splashscreen\",\r\n          \"Type\": \"thumbnail\",\r\n          \"Url\": \"https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg\"\r\n        }\r\n      ],\r\n      \"DisplayProperties\": {\r\n        \"mapDetails\": {\r\n          \"mapType\": \"desertIsland\",\r\n          \"gameMode\": \"capture\",\r\n          \"maxPlayers\": 16\r\n        },\r\n        \"averageMatchLengthInSeconds\": 947\r\n      },\r\n      \"ETag\": \"opaqueString\"\r\n    }\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogBadRequest",
        "CatalogClientIdentityInvalid",
        "CatalogItemMetadataInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "CreateOrUpdateReview",
      "summary": "Creates or updates a review for the specified item.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/CreateOrUpdateReview",
      "auth": "EntityToken",
      "method": "POST",
      "request": "CreateOrUpdateReviewRequest",
      "requestExample": "{\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\",\r\n  \"Review\": {\r\n    \"Title\": \"Best Game Ever\",\r\n    \"ReviewText\": \"I play this game every day. It's my favorite game yet.\",\r\n    \"Rating\": 5,\r\n    \"IsInstalled\": true,\r\n    \"ItemVersion\": \"2.4.1\"\r\n  }\r\n}",
      "result": "CreateOrUpdateReviewResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogBadRequest",
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "CreateRecipe",
      "summary": "Create a recipe",
      "requestDetails": "Given a title entity token and recipe details, create a recipe.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/CreateRecipe",
      "auth": "EntityToken",
      "method": "POST",
      "request": "CreateRecipeRequest",
      "requestExample": "",
      "result": "CreateRecipeResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "CreateStore",
      "summary": "Create a store",
      "requestDetails": "Given a title entity token, and store details, create a store. ",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/CreateStore",
      "auth": "EntityToken",
      "method": "POST",
      "request": "CreateStoreRequest",
      "requestExample": "",
      "result": "CreateStoreResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "CreateSubscription",
      "summary": "Create a subscription",
      "requestDetails": "Given a title entity token, and subscription details, create a subscription ",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/CreateSubscription",
      "auth": "EntityToken",
      "method": "POST",
      "request": "CreateSubscriptionRequest",
      "requestExample": "",
      "result": "CreateSubscriptionResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "CreateUgcUploadUrls",
      "summary": "Creates one or more upload URLs which can be used by the client to upload raw mod file data.",
      "requestDetails": "Upload URLs point to Azure Blobs; clients must follow the Microsoft Azure Storage Blob Service REST API pattern for uploading content. The response contains upload URLs and IDs for each file. The IDs and URLs returned must be added to the item metadata and commited using the CreateDraftItem or UpdateDraftItem Item APIs.",
      "subgroup": "UserGeneratedContent",
      "titleTiers": null,
      "url": "/UserGeneratedContent/CreateUgcUploadUrls",
      "auth": "EntityToken",
      "method": "POST",
      "request": "CreateUploadUrlsRequest",
      "requestExample": "{\r\n  \"Files\": [\r\n    {\r\n      \"FileName\": \"textures.zip\",\r\n      \"FileSize\": 100\r\n    },\r\n    {\r\n      \"FileName\": \"sprites.png\",\r\n      \"FileSize\": 200\r\n    }\r\n  ]\r\n}",
      "result": "CreateUploadUrlsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"UploadUrls\": [\r\n      {\r\n        \"Id\": \"11111111-1111-1111-1111-111111111111\",\r\n        \"Url\": \"https://endpoint.blob.core.windows.net/some-identifier-private/11111111-1111-1111-1111-111111111111/textures.zip\",\r\n        \"FileName\": \"textures.zip\"\r\n      },\r\n      {\r\n        \"Id\": \"22222222-2222-2222-2222-222222222222\",\r\n        \"Url\": \"https://endpoint.blob.core.windows.net/some-identifier-private/22222222-2222-2222-2222-222222222222/sprites.png\",\r\n        \"FileName\": \"sprites.png\"\r\n      }\r\n    ]\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogBadRequest",
        "CatalogClientIdentityInvalid",
        "CatalogOneOrMoreFilesInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "CreateUploadUrls",
      "summary": "Creates one or more upload URLs which can be used by the client to upload raw file data.",
      "requestDetails": "Upload URLs point to Azure Blobs; clients must follow the Microsoft Azure Storage Blob Service REST API pattern for uploading content. The response contains upload URLs and IDs for each file. The IDs and URLs returned must be added to the item metadata and committed using the CreateDraftItem or UpdateDraftItem Item APIs.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/CreateUploadUrls",
      "auth": "EntityToken",
      "method": "POST",
      "request": "CreateUploadUrlsRequest",
      "requestExample": "{\r\n  \"Files\": [\r\n    {\r\n      \"FileName\": \"textures.zip\",\r\n      \"FileSize\": 100\r\n    },\r\n    {\r\n      \"FileName\": \"sprites.png\",\r\n      \"FileSize\": 200\r\n    }\r\n  ]\r\n}",
      "result": "CreateUploadUrlsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"UploadUrls\": [\r\n      {\r\n        \"Id\": \"11111111-1111-1111-1111-111111111111\",\r\n        \"Url\": \"https://endpoint.blob.core.windows.net/some-identifier-private/11111111-1111-1111-1111-111111111111/textures.zip\",\r\n        \"FileName\": \"textures.zip\"\r\n      },\r\n      {\r\n        \"Id\": \"22222222-2222-2222-2222-222222222222\",\r\n        \"Url\": \"https://endpoint.blob.core.windows.net/some-identifier-private/22222222-2222-2222-2222-222222222222/sprites.png\",\r\n        \"FileName\": \"sprites.png\"\r\n      }\r\n    ]\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogClientIdentityInvalid",
        "CatalogOneOrMoreFilesInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "DeleteBundleByFriendlyId",
      "summary": "Delete a bundle by friendly Id",
      "requestDetails": "Given a title entity token and Friendly Id, delete a bundle. ",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/DeleteBundleByFriendlyId",
      "auth": "EntityToken",
      "method": "POST",
      "request": "DeleteBundleByFriendlyIdRequest",
      "requestExample": "",
      "result": "DeleteBundleResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "DeleteBundleById",
      "summary": "Delete a bundle by Id",
      "requestDetails": "Given a title entity token and Id, delete a bundle. ",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/DeleteBundleById",
      "auth": "EntityToken",
      "method": "POST",
      "request": "DeleteBundleByIdRequest",
      "requestExample": "",
      "result": "DeleteBundleResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "DeleteItem",
      "summary": "Removes an item from working catalog and all published versions from the public catalog.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/DeleteItem",
      "auth": "EntityToken",
      "method": "POST",
      "request": "DeleteItemRequest",
      "requestExample": "{\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "DeleteItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "DeleteRecipeByFriendlyId",
      "summary": "Delete a recipe by friendly Id",
      "requestDetails": "Given a title entity token and friendly Id, delete a recipe. ",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/DeleteRecipeByFriendlyId",
      "auth": "EntityToken",
      "method": "POST",
      "request": "DeleteRecipeByFriendlyIdRequest",
      "requestExample": "",
      "result": "DeleteRecipeResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ]
    },
    {
      "name": "DeleteRecipeById",
      "summary": "Delete a recipe by Id",
      "requestDetails": "Given a title entity token and Id, delete a recipe. ",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/DeleteRecipeById",
      "auth": "EntityToken",
      "method": "POST",
      "request": "DeleteRecipeByIdRequest",
      "requestExample": "",
      "result": "DeleteRecipeResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ]
    },
    {
      "name": "DeleteStoreByFriendlyId",
      "summary": "Delete a store by friendly Id",
      "requestDetails": "Given a title entity token and friendly Id, delete a store. ",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/DeleteStoreByFriendlyId",
      "auth": "EntityToken",
      "method": "POST",
      "request": "DeleteStoreByFriendlyIdRequest",
      "requestExample": "",
      "result": "DeleteStoreResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "DeleteStoreById",
      "summary": "Delete a store by Id",
      "requestDetails": "Given a title entity token and Id, delete a store. ",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/DeleteStoreById",
      "auth": "EntityToken",
      "method": "POST",
      "request": "DeleteStoreByIdRequest",
      "requestExample": "",
      "result": "DeleteStoreResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "DeleteSubscriptionByFriendlyId",
      "summary": "Delete a subscription by friendly Id",
      "requestDetails": "Given a title entity token and friendly Id, delete a subscription. ",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/DeleteSubscriptionByFriendlyId",
      "auth": "EntityToken",
      "method": "POST",
      "request": "DeleteSubscriptionByFriendlyIdRequest",
      "requestExample": "",
      "result": "DeleteSubscriptionResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "DeleteSubscriptionById",
      "summary": "Delete a subscription by Id",
      "requestDetails": "Given a title entity token and Id, delete a subscription. ",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/DeleteSubscriptionById",
      "auth": "EntityToken",
      "method": "POST",
      "request": "DeleteSubscriptionByIdRequest",
      "requestExample": "",
      "result": "DeleteSubscriptionResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "DeleteUgcItem",
      "summary": "Removes an item from working catalog and all published versions from the public catalog.",
      "subgroup": "UserGeneratedContent",
      "titleTiers": null,
      "url": "/UserGeneratedContent/DeleteUgcItem",
      "auth": "EntityToken",
      "method": "POST",
      "request": "DeleteItemRequest",
      "requestExample": "{\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "DeleteItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetAccessTokens",
      "summary": "Get Access Tokens",
      "requestDetails": "Get a set of Access Tokens to interact with the specified marketplace",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/GetAccessTokens",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetAccessTokensRequest",
      "requestExample": "",
      "result": "GetAccessTokensResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable",
        "ForbiddenByEntityPolicy"
      ]
    },
    {
      "name": "GetBundleByFriendlyId",
      "summary": "Get a bundle by Friendly Id",
      "requestDetails": "Retrieves the specified bundle by friendly Id.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetBundleByFriendlyId",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetBundleByFriendlyIdRequest",
      "requestExample": "",
      "result": "GetBundleResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "GetBundleById",
      "summary": "Get a bundle by Id",
      "requestDetails": "Retrieves the specified bundle by Id.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetBundleById",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetBundleByIdRequest",
      "requestExample": "",
      "result": "GetBundleResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "GetBundleByMarketplaceOfferId",
      "summary": "Get a bundle by marketplace offer Id",
      "requestDetails": "Retrieves the specified bundle by marketplace offer Id.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetBundleByMarketplaceOfferId",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetBundleByMarketplaceOfferIdRequest",
      "requestExample": "",
      "result": "GetBundleResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "GetCatalogConfig",
      "summary": "Gets the configuration for the catalog.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetCatalogConfig",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetCatalogConfigRequest",
      "requestExample": "{}",
      "result": "GetCatalogConfigResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Config\": {\r\n      \"Admins\": [\r\n        \"title_player_account!ABC123\"\r\n      ],\r\n      \"Catalog\": {\r\n        \"ContentTypes\": [\r\n          \"map\",\r\n          \"skin\"\r\n        ],\r\n        \"Tags\": [\r\n          \"sword\",\r\n          \"shield\"\r\n        ]\r\n      },\r\n      \"DeepLinkFormats\": [\r\n        {\r\n          \"Platform\": \"iOS\",\r\n          \"Format\": \"mygame://item/{id}\"\r\n        }\r\n      ],\r\n      \"DisplayPropertyIndexInfos\": [\r\n        {\r\n          \"Name\": \"damage\",\r\n          \"Type\": \"QueryDouble\"\r\n        }\r\n      ],\r\n      \"Reviewers\": [\r\n        \"title_player_account!ABC123\"\r\n      ],\r\n      \"UserGeneratedContent\": {\r\n        \"ContentTypes\": [\r\n          \"skin\"\r\n        ],\r\n        \"Enabled\": false,\r\n        \"Tags\": [\r\n          \"sword\",\r\n          \"shield\"\r\n        ]\r\n      },\r\n      \"Search\": {\r\n        \"Config_A\": {\r\n          \"IgnoreBoostFactor\": false,\r\n          \"Title\": {\r\n            \"Weight\": 2.3,\r\n            \"Ignore\": false\r\n          },\r\n          \"Description\": {\r\n            \"Weight\": 0.0,\r\n            \"Ignore\": true\r\n          }\r\n        },\r\n        \"Config_B\": {\r\n          \"IgnoreBoostFactor\": true\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ]
    },
    {
      "name": "GetCurrencyById",
      "summary": "Retrieve a currency by id",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetCurrencyById",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetCurrencyByIdRequest",
      "requestExample": "{\r\n  \"CurrencyId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "GetCurrencyByIdResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Currency\": {}\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ]
    },
    {
      "name": "GetDraftBundleByAlternateId",
      "summary": "Retrieves a bundle draft metadata from the working catalog. This item represents the current working state of the catalog item. Note: This item metadata may not be published yet so it may be different than what's currently visible in search results.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetDraftBundleByAlternateId",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetDraftItemByAlternateIdRequest",
      "requestExample": "{\r\n  \"AlternateIdType\": \"FriendlyId\",\r\n  \"AlternateIdValue\": \"Super Sword\"\r\n}",
      "result": "GetDraftItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Item\": {}\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogBadRequest",
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid"
      ]
    },
    {
      "name": "GetDraftBundleById",
      "summary": "Retrieves a bundle draft metadata from the working catalog. This item represents the current working state of the catalog item. Note: This item metadata may not be published yet so it may be different than what's currently visible in search results.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetDraftBundleById",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetDraftItemRequest",
      "requestExample": "{\r\n  \"ExpandReferencedItems\": false,\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "GetDraftItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Item\": {}\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetDraftBundles",
      "summary": "Retrieves a paginated list of the bundle items from the draft catalog.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetDraftBundles",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetDraftItemsRequest",
      "requestExample": "{\r\n  \"Count\": 10,\r\n  \"ExpandReferencedItems\": false\r\n}",
      "result": "GetDraftItemsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Items\": [\r\n      {},\r\n      {},\r\n      {}\r\n    ],\r\n    \"PartialExpandedResults\": false,\r\n    \"Count\": 3,\r\n    \"TotalCount\": 3,\r\n    \"ContinuationToken\": \"+RID:IQkbAIvkRQD9oQIAAAAAAA==#RT:1#TRC:10#FPC:AgEKHAoKAPEhAOAhQP8DWIAMAgB8rRACAJeAHAIA0r0=\"\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogClientIdentityInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetDraftItem",
      "summary": "Retrieves an item from the working catalog. This item represents the current working state of the catalog item.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetDraftItem",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetDraftItemRequest",
      "requestExample": "{\r\n  \"ExpandReferencedItems\": false,\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "GetDraftItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Item\": {}\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogApiNotImplemented",
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetDraftItemByAlternateId",
      "summary": "Retrieves an item from the working catalog. This item represents the current working state of the catalog item.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetDraftItemByAlternateId",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetDraftItemByAlternateIdRequest",
      "requestExample": "{\r\n  \"AlternateIdType\": \"FriendlyId\",\r\n  \"AlternateIdValue\": \"Super Sword\"\r\n}",
      "result": "GetDraftItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Item\": {}\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogBadRequest",
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid"
      ]
    },
    {
      "name": "GetDraftItems",
      "summary": "Retrieves a paginated list of the items from the draft catalog.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetDraftItems",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetDraftItemsRequest",
      "requestExample": "{\r\n  \"Count\": 10,\r\n  \"ExpandReferencedItems\": false\r\n}",
      "result": "GetDraftItemsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Items\": [\r\n      {},\r\n      {},\r\n      {}\r\n    ],\r\n    \"PartialExpandedResults\": false,\r\n    \"Count\": 3,\r\n    \"TotalCount\": 3,\r\n    \"ContinuationToken\": \"+RID:IQkbAIvkRQD9oQIAAAAAAA==#RT:1#TRC:10#FPC:AgEKHAoKAPEhAOAhQP8DWIAMAgB8rRACAJeAHAIA0r0=\"\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogApiNotImplemented",
        "CatalogClientIdentityInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing",
        "CatalogTitleIdMissing",
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "GetDraftStoreByAlternateId",
      "summary": "Retrieves a store draft metadata from the working catalog. This item represents the current working state of the catalog item. Note: This item metadata may not be published yet so it may be different than what's currently visible in search results.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetDraftStoreByAlternateId",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetDraftItemByAlternateIdRequest",
      "requestExample": "{\r\n  \"AlternateIdType\": \"FriendlyId\",\r\n  \"AlternateIdValue\": \"Super Sword\"\r\n}",
      "result": "GetDraftItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Item\": {}\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogBadRequest",
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid"
      ]
    },
    {
      "name": "GetDraftStoreById",
      "summary": "Retrieves a store draft metadata from the working catalog. This item represents the current working state of the catalog item. Note: This item metadata may not be published yet so it may be different than what's currently visible in search results.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetDraftStoreById",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetDraftItemRequest",
      "requestExample": "{\r\n  \"ExpandReferencedItems\": false,\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "GetDraftItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Item\": {}\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetDraftStores",
      "summary": "Retrieves a paginated list of the store items from the draft catalog.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetDraftStores",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetDraftItemsRequest",
      "requestExample": "{\r\n  \"Count\": 10,\r\n  \"ExpandReferencedItems\": false\r\n}",
      "result": "GetDraftItemsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Items\": [\r\n      {},\r\n      {},\r\n      {}\r\n    ],\r\n    \"PartialExpandedResults\": false,\r\n    \"Count\": 3,\r\n    \"TotalCount\": 3,\r\n    \"ContinuationToken\": \"+RID:IQkbAIvkRQD9oQIAAAAAAA==#RT:1#TRC:10#FPC:AgEKHAoKAPEhAOAhQP8DWIAMAgB8rRACAJeAHAIA0r0=\"\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogClientIdentityInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetDraftUgcItem",
      "summary": "Retrieves an item from the working catalog. This item represents the current working state of the community item.",
      "subgroup": "UserGeneratedContent",
      "titleTiers": null,
      "url": "/UserGeneratedContent/GetDraftUgcItem",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetDraftItemRequest",
      "requestExample": "{\r\n  \"ExpandReferencedItems\": false,\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "GetDraftItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Item\": {}\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetDraftUgcItemByAlternateId",
      "summary": "Retrieves an item from the working catalog. This item represents the current working state of the community item.",
      "subgroup": "UserGeneratedContent",
      "titleTiers": null,
      "url": "/UserGeneratedContent/GetDraftUgcItemByAlternateId",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetDraftItemByAlternateIdRequest",
      "requestExample": "{\r\n  \"AlternateIdType\": \"FriendlyId\",\r\n  \"AlternateIdValue\": \"Super Sword\"\r\n}",
      "result": "GetDraftItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Item\": {}\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogBadRequest",
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid"
      ]
    },
    {
      "name": "GetDraftUgcItems",
      "summary": "Retrieves a paginated list of the items created by a user.",
      "subgroup": "UserGeneratedContent",
      "titleTiers": null,
      "url": "/UserGeneratedContent/GetDraftUgcItems",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetDraftItemsRequest",
      "requestExample": "{\r\n  \"Count\": 10,\r\n  \"ExpandReferencedItems\": false\r\n}",
      "result": "GetDraftItemsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Items\": [\r\n      {},\r\n      {},\r\n      {}\r\n    ],\r\n    \"PartialExpandedResults\": false,\r\n    \"Count\": 3,\r\n    \"TotalCount\": 3,\r\n    \"ContinuationToken\": \"+RID:IQkbAIvkRQD9oQIAAAAAAA==#RT:1#TRC:10#FPC:AgEKHAoKAPEhAOAhQP8DWIAMAgB8rRACAJeAHAIA0r0=\"\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogClientIdentityInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetEntityItemReview",
      "summary": "Gets the submitted review for the specified item by the authenticated user.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetEntityItemReview",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetEntityItemReviewRequest",
      "requestExample": "{\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "GetEntityItemReviewResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogApiNotImplemented",
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetInventoryItems",
      "summary": "Get current inventory items.",
      "requestDetails": "Given an entity type, entity identifier and container details, will get the entity's inventory items. ",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/GetInventoryItems",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetInventoryItemsRequest",
      "requestExample": "",
      "result": "GetInventoryItemsResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable",
        "ForbiddenByEntityPolicy",
        "InventoryApiNotImplemented"
      ]
    },
    {
      "name": "GetItem",
      "summary": "Retrieves an item from the public catalog.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetItem",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetItemRequest",
      "requestExample": "{\r\n  \"ExpandReferencedItems\": false,\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "GetItemResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogApiNotImplemented",
        "CatalogBadRequest",
        "CatalogItemIdInvalid",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetItemModerationState",
      "summary": "Gets the moderation state for an item, including the concern category and string reason.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetItemModerationState",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetItemModerationStateRequest",
      "requestExample": "{\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "GetItemModerationStateResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogApiNotImplemented",
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetItemPublishStatus",
      "summary": "Gets the status of a publish of an item.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetItemPublishStatus",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetItemPublishStatusRequest",
      "requestExample": "{\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "GetItemPublishStatusResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Result\": \"Pending\",\r\n    \"StatusMessage\": \"scanning images\",\r\n    \"FailedScanResults\": [\r\n      {\r\n        \"Url\": \"http://example.com/00000000-0000-0000-0000-000000000000/content.bin\"\r\n      }\r\n    ]\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogApiNotImplemented",
        "CatalogBadRequest",
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetItemReferencers",
      "summary": "Search for a given item (by id) and return a set of bundles/subscriptions/stores containing the item",
      "requestDetails": "Given an item id and a container type (bundles/subscriptions/stores or a combination of those), return a set of bundles/subscriptions/stores containing the item.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetItemReferencers",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetItemReferencersRequest",
      "requestExample": "",
      "result": "GetItemReferencersResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogApiNotImplemented",
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "GetItemReviews",
      "summary": "Get a paginated set of reviews associated with the specified item.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetItemReviews",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetItemReviewsRequest",
      "requestExample": "",
      "result": "GetItemReviewsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Reviews\": [],\r\n    \"Count\": 13,\r\n    \"TotalCount\": 13,\r\n    \"ContinuationToken\": \"+RID:IQkbAIvkRQD9oQIAAAAAAA==#RT:1#TRC:10#FPC:AgEKHAoKAPEhAOAhQP8DWIAMAgB8rRACAJeAHAIA0r0=\"\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogApiNotImplemented",
        "CatalogItemIdInvalid",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetItemReviewSummary",
      "summary": "Get a summary of all reviews associated with the specified item.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetItemReviewSummary",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetItemReviewSummaryRequest",
      "requestExample": "{\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "GetItemReviewSummaryResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Rating\": {\r\n      \"Average\": 3.6,\r\n      \"TotalCount\": 8,\r\n      \"Count5Star\": 1,\r\n      \"Count4Star\": 4,\r\n      \"Count3Star\": 2,\r\n      \"Count2Star\": 1,\r\n      \"Count1Star\": 0\r\n    },\r\n    \"ReviewsCount\": 8,\r\n    \"MostFavorableReview\": {\r\n      \"ReviewId\": \"00000000-0000-0000-0000-000000000004\",\r\n      \"ItemId\": \"00000000-0000-0000-0000-000000000005\",\r\n      \"ReviewerId\": \"title_player_account!ABCD1234\",\r\n      \"ItemVersion\": \"2.1.4\",\r\n      \"Title\": \"Best game ever\",\r\n      \"ReviewText\": \"I play this game every day. It's so much fun!\",\r\n      \"Rating\": 5,\r\n      \"IsInstalled\": true,\r\n      \"Locale\": \"en-us\",\r\n      \"HelpfulnessVotes\": 17,\r\n      \"HelpfulPositive\": 16,\r\n      \"HelpfulNegative\": 1,\r\n      \"Submitted\": \"2018-08-17T22:32:10.472Z\"\r\n    },\r\n    \"LeastFavorableReview\": {\r\n      \"ReviewId\": \"00000000-0000-0000-0000-000000000006\",\r\n      \"ItemId\": \"00000000-0000-0000-0000-000000000005\",\r\n      \"ReviewerId\": \"title_player_account!EFGH5678\",\r\n      \"ItemVersion\": \"2.1.2\",\r\n      \"Title\": \"It's a game\",\r\n      \"ReviewText\": \"\",\r\n      \"Rating\": 2,\r\n      \"IsInstalled\": true,\r\n      \"Locale\": \"en-us\",\r\n      \"HelpfulnessVotes\": 10,\r\n      \"HelpfulPositive\": 0,\r\n      \"HelpfulNegative\": 10,\r\n      \"Submitted\": \"2018-08-17T22:32:10.472Z\"\r\n    }\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogItemIdInvalid",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetItems",
      "summary": "Retrieves items from the public catalog.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetItems",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetItemsRequest",
      "requestExample": "",
      "result": "GetItemsResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogApiNotImplemented",
        "CatalogBadRequest",
        "CatalogItemIdInvalid",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetMarketplaceAccessToken",
      "summary": "Get Access Tokens",
      "requestDetails": "Get a set of Access Tokens to interact with the specified marketplace",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/GetMarketplaceAccessToken",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetMarketplaceAccessTokenRequest",
      "requestExample": "",
      "result": "GetMarketplaceAccessTokenResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable",
        "ForbiddenByEntityPolicy"
      ]
    },
    {
      "name": "GetMyReview",
      "summary": "Gets the submitted review for the specified item by the authenticated user.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetMyReview",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetMyReviewRequest",
      "requestExample": "{\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "GetMyReviewResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetPublishedItem",
      "summary": "Retrieves an item from the public catalog.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetPublishedItem",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetPublishedItemRequest",
      "requestExample": "{\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "GetPublishedItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Item\": {}\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogBadRequest",
        "CatalogItemIdInvalid",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetPublishedUgcItem",
      "summary": "Retrieves an item from the public catalog.",
      "subgroup": "UserGeneratedContent",
      "titleTiers": null,
      "url": "/UserGeneratedContent/GetPublishedUgcItem",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetPublishedItemRequest",
      "requestExample": "{\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "GetPublishedItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Item\": {}\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogItemIdInvalid",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetPublishStatus",
      "summary": "Gets the status of a publish of an item.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetPublishStatus",
      "auth": "EntityToken",
      "method": "POST",
      "request": "PublishStatusRequest",
      "requestExample": "{\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "PublishStatusResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Result\": \"Pending\",\r\n    \"StatusMessage\": \"scanning images\",\r\n    \"FailedScanResults\": [\r\n      {\r\n        \"Url\": \"http://example.com/00000000-0000-0000-0000-000000000000/content.bin\"\r\n      }\r\n    ]\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogBadRequest",
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetReceiptIssuerCertificateAsJwk",
      "summary": "Gets receipt issuer certificate as JSON Web Key.",
      "requestDetails": "Retrieves the issuer certificate used to sign receipts formatted as a JSON Web Key.",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/GetReceiptIssuerCertificateAsJwk",
      "auth": "None",
      "method": "POST",
      "request": "GetIssuerKeyRequest",
      "requestExample": "{}",
      "result": "GetReceiptIssuerCertificateAsJwkResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ]
    },
    {
      "name": "GetReceiptIssuerCertificateAsPem",
      "summary": "Gets receipt issuer certificate as PEM encoded certificate.",
      "requestDetails": "Retrieves the issuer certificate used to sign receipts formatted as a PEM encoded certificate.",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/GetReceiptIssuerCertificateAsPem",
      "auth": "None",
      "method": "POST",
      "request": "GetIssuerKeyRequest",
      "requestExample": "{}",
      "result": "GetReceiptIssuerCertificateAsPemCertResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ]
    },
    {
      "name": "GetReceiptIssuerCertificates",
      "summary": "Gets receipt issuer certificate as JSON Web Key and PEM encoded certificate.",
      "requestDetails": "Retrieves the issuer certificate used to sign receipts formatted as a JSON Web Key and a PEM encoded certificate.",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/GetReceiptIssuerCertificates",
      "auth": "None",
      "method": "POST",
      "request": "GetReceiptIssuerCertificatesRequest",
      "requestExample": "{}",
      "result": "GetReceiptIssuerCertificatesResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ]
    },
    {
      "name": "GetRecipeByFriendlyId",
      "summary": "Get a recipe by Friendly Id",
      "requestDetails": "Retrieves the specified recipe by FriendlyId.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetRecipeByFriendlyId",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetRecipeByFriendlyIdRequest",
      "requestExample": "",
      "result": "GetRecipeResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ]
    },
    {
      "name": "GetRecipeById",
      "summary": "Get a recipe by Id",
      "requestDetails": "Retrieves the specified recipe by Id.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetRecipeById",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetRecipeByIdRequest",
      "requestExample": "",
      "result": "GetRecipeResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ]
    },
    {
      "name": "GetRecipeByMarketplaceOfferId",
      "summary": "Get a recipe by marketplace offer Id",
      "requestDetails": "Retrieves the specified recipe by MarketplaceOfferId.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetRecipeByMarketplaceOfferId",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetRecipeByMarketplaceOfferIdRequest",
      "requestExample": "",
      "result": "GetRecipeResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ]
    },
    {
      "name": "GetStoreByFriendlyId",
      "summary": "Get a store by Friendly Id",
      "requestDetails": "Retrieves the specified store by FriendlyId. ",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetStoreByFriendlyId",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetStoreByFriendlyIdRequest",
      "requestExample": "",
      "result": "GetStoreResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ]
    },
    {
      "name": "GetStoreById",
      "summary": "Get a store by Id",
      "requestDetails": "Retrieves the specified store by Id. ",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetStoreById",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetStoreByIdRequest",
      "requestExample": "",
      "result": "GetStoreResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "GetSubscriptionByFriendlyId",
      "summary": "Get a subscription by Friendly Id",
      "requestDetails": "Retrieves the specified subscription by FriendlyId.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetSubscriptionByFriendlyId",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetSubscriptionByFriendlyIdRequest",
      "requestExample": "",
      "result": "GetSubscriptionResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "GetSubscriptionById",
      "summary": "Get a subscription by Id",
      "requestDetails": "Retrieves the specified subscription by Id.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetSubscriptionById",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetSubscriptionByIdRequest",
      "requestExample": "",
      "result": "GetSubscriptionResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "GetSubscriptionByMarketplaceOfferId",
      "summary": "Get a subscription by marketplace offer Id",
      "requestDetails": "Retrieves the specified subscription by MarketplaceOfferId.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/GetSubscriptionByMarketplaceOfferId",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetSubscriptionByMarketplaceOfferIdRequest",
      "requestExample": "",
      "result": "GetSubscriptionResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "GetUgcItemModerationState",
      "summary": "Gets the moderation state for an item, including the concern category and string reason.",
      "subgroup": "UserGeneratedContent",
      "titleTiers": null,
      "url": "/UserGeneratedContent/GetUgcItemModerationState",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetUgcItemModerationStateRequest",
      "requestExample": "{\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "GetUgcItemModerationStateResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"State\": {\r\n      \"Status\": \"AwaitingModeration\",\r\n      \"Reason\": \"User reports over threshold\",\r\n      \"LastModifiedDate\": \"2018-08-17T22:32:31.911Z\"\r\n    }\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetUgcPublishStatus",
      "summary": "Gets the status of a publish of an item.",
      "subgroup": "UserGeneratedContent",
      "titleTiers": null,
      "url": "/UserGeneratedContent/GetUgcPublishStatus",
      "auth": "EntityToken",
      "method": "POST",
      "request": "PublishStatusRequest",
      "requestExample": "{\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "PublishStatusResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Result\": \"Pending\",\r\n    \"StatusMessage\": \"scanning images\",\r\n    \"FailedScanResults\": [\r\n      {\r\n        \"Url\": \"http://example.com/00000000-0000-0000-0000-000000000000/content.bin\"\r\n      }\r\n    ]\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "GetVirtualCurrencies",
      "summary": "Get current virtual currencies.",
      "requestDetails": "Given an entity type, entity identifier and container details, will get the entity's virtual currencies. ",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/GetVirtualCurrencies",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GetVirtualCurrenciesRequest",
      "requestExample": "",
      "result": "GetVirtualCurrenciesResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable",
        "ForbiddenByEntityPolicy"
      ]
    },
    {
      "name": "GrantInventoryItems",
      "summary": "Grant inventory items.",
      "requestDetails": "Given an entity type, entity identifier and container details, will grant the specified inventory items. ",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/GrantInventoryItems",
      "auth": "EntityToken",
      "method": "POST",
      "request": "GrantInventoryItemsRequest",
      "requestExample": "",
      "result": "GrantInventoryItemsResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable",
        "ForbiddenByEntityPolicy"
      ]
    },
    {
      "name": "PublishDraftItem",
      "summary": "Initiates a publish of an item from the working catalog to the public catalog.",
      "requestDetails": "The call kicks off a workflow to publish the item to the public catalog. The Publish Status API should be used to monitor the publish job.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/PublishDraftItem",
      "auth": "EntityToken",
      "method": "POST",
      "request": "PublishDraftItemRequest",
      "requestExample": "{\r\n  \"ETag\": \"someOpaqueString\",\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "PublishDraftItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogApiNotImplemented",
        "CatalogBadRequest",
        "CatalogItemIdInvalid",
        "CatalogTooManyRequests",
        "DownstreamServiceUnavailable",
        "InvalidTitleId",
        "NotAuthorized"
      ]
    },
    {
      "name": "PublishItem",
      "summary": "Initiates a publish of an item from the working catalog to the public catalog.",
      "requestDetails": "The call kicks off a workflow to publish the item to the public catalog. The Publish Status API should be used to monitor the publish job.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/PublishItem",
      "auth": "EntityToken",
      "method": "POST",
      "request": "PublishItemRequest",
      "requestExample": "{\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\",\r\n  \"ETag\": \"someOpaqueString\"\r\n}",
      "result": "PublishItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "PublishUgcItem",
      "summary": "Initiates a publish of a item from the working catalog to the public catalog.",
      "requestDetails": "The call kicks off a workflow to publish the item to the public catalog. The Publish Status API should be used to monitor the publish job.",
      "subgroup": "UserGeneratedContent",
      "titleTiers": null,
      "url": "/UserGeneratedContent/PublishUgcItem",
      "auth": "EntityToken",
      "method": "POST",
      "request": "PublishItemRequest",
      "requestExample": "{\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\",\r\n  \"ETag\": \"someOpaqueString\"\r\n}",
      "result": "PublishItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "PurchaseItem",
      "summary": "Purchase an item, bundle or subscription by id.",
      "requestDetails": "Purchase a single item, bundle or subscription by id, paying the associated price.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Inventory/PurchaseItem",
      "auth": "EntityToken",
      "method": "POST",
      "request": "PurchaseItemRequest",
      "requestExample": "",
      "result": "PurchaseItemResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable",
        "InventoryApiNotImplemented"
      ]
    },
    {
      "name": "PurchaseItemByFriendlyId",
      "summary": "Purchase an item, bundle or subscription by friendly id.",
      "requestDetails": "Purchase a single item, bundle or subscription by friendly id, paying the associated price.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/PurchaseItemByFriendlyId",
      "auth": "EntityToken",
      "method": "POST",
      "request": "PurchaseItemByFriendlyIdRequest",
      "requestExample": "{\r\n  \"ItemFriendlyId\": \"Example Item\",\r\n  \"Quantity\": 99,\r\n  \"Currencies\": [\r\n    {\r\n      \"CurrencyId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\",\r\n      \"ExpectedPrice\": 99\r\n    }\r\n  ],\r\n  \"Store\": {\r\n    \"Id\": \"ffffffff-ffff-ffff-ffff-ffffffffffff\"\r\n  },\r\n  \"AutoConsume\": false,\r\n  \"Properties\": {\r\n    \"AKey\": \"AValue\",\r\n    \"BKey\": \"BValue\"\r\n  },\r\n  \"ReturnInventory\": false,\r\n  \"Entity\": {\r\n    \"Id\": \"AAAAAAAAAAAAAAAA\",\r\n    \"Type\": \"TitlePlayerAccount\",\r\n    \"TypeString\": \"TitlePlayerAccount\"\r\n  }\r\n}",
      "result": "PurchaseItemLegacyResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "PurchaseItemById",
      "summary": "Purchase an item, bundle or subscription by id.",
      "requestDetails": "Purchase a single item, bundle or subscription by id, paying the associated price.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/PurchaseItemById",
      "auth": "EntityToken",
      "method": "POST",
      "request": "PurchaseItemByIdRequest",
      "requestExample": "{\r\n  \"ItemId\": \"eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee\",\r\n  \"Quantity\": 99,\r\n  \"Currencies\": [\r\n    {\r\n      \"CurrencyId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\",\r\n      \"ExpectedPrice\": 99\r\n    }\r\n  ],\r\n  \"Store\": {\r\n    \"Id\": \"ffffffff-ffff-ffff-ffff-ffffffffffff\"\r\n  },\r\n  \"AutoConsume\": false,\r\n  \"Properties\": {\r\n    \"AKey\": \"AValue\",\r\n    \"BKey\": \"BValue\"\r\n  },\r\n  \"ReturnInventory\": false,\r\n  \"Entity\": {\r\n    \"Id\": \"AAAAAAAAAAAAAAAA\",\r\n    \"Type\": \"TitlePlayerAccount\",\r\n    \"TypeString\": \"TitlePlayerAccount\"\r\n  }\r\n}",
      "result": "PurchaseItemLegacyResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "Redeem",
      "summary": "Redeem assets.",
      "requestDetails": "Redeem assets from a specified marketplace.",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/Redeem",
      "auth": "EntityToken",
      "method": "POST",
      "request": "RedeemMarketplaceAssetsRequest",
      "requestExample": "",
      "result": "RedeemMarketplaceAssetsResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable",
        "ForbiddenByEntityPolicy"
      ]
    },
    {
      "name": "RedeemInAppPurchase",
      "summary": "Redeem assets.",
      "requestDetails": "Redeem assets from a specified marketplace.",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/RedeemInAppPurchase",
      "auth": "EntityToken",
      "method": "POST",
      "request": "RedeemInAppPurchaseRequest",
      "requestExample": "",
      "result": "RedeemInAppPurchaseResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable",
        "ForbiddenByEntityPolicy"
      ]
    },
    {
      "name": "RefreshSubscriptions",
      "summary": "Refresh Subscriptions.",
      "requestDetails": "Refresh Subscriptions for specified marketplaces.",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/RefreshSubscriptions",
      "auth": "EntityToken",
      "method": "POST",
      "request": "RefreshSubscriptionsRequest",
      "requestExample": "",
      "result": "RefreshSubscriptionsResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable",
        "ForbiddenByEntityPolicy",
        "ProfileDoesNotExist"
      ]
    },
    {
      "name": "ReportItem",
      "summary": "Submit a report for an item, indicating in what way the item is inappropriate.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/ReportItem",
      "auth": "EntityToken",
      "method": "POST",
      "request": "ReportItemRequest",
      "requestExample": "{\r\n  \"Concern\": \"Profanity\",\r\n  \"Reason\": \"There was swearing in the description.\",\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "ReportItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogApiNotImplemented",
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "ReportItemReview",
      "summary": "Submit a report for a review",
      "requestDetails": "Submit a report for an inappropriate review, allowing the submitting user to specify their concern.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/ReportItemReview",
      "auth": "EntityToken",
      "method": "POST",
      "request": "ReportItemReviewRequest",
      "requestExample": "{\r\n  \"ReviewId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\",\r\n  \"ConcernCategory\": \"OffensiveContent\"\r\n}",
      "result": "ReportItemReviewResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogApiNotImplemented",
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "ReportReview",
      "summary": "Submit a report for a review",
      "requestDetails": "Submit a report for an inappropriate review, allowing the submitting user to specify their concern.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/ReportReview",
      "auth": "EntityToken",
      "method": "POST",
      "request": "ReportReviewRequest",
      "requestExample": "{\r\n  \"ReviewId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\",\r\n  \"ConcernCategory\": \"OffensiveContent\"\r\n}",
      "result": "ReportReviewResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "ReportUgcItem",
      "summary": "Submit a report for an item, indicating in what way the item is inappropriate.",
      "subgroup": "UserGeneratedContent",
      "titleTiers": null,
      "url": "/UserGeneratedContent/ReportUgcItem",
      "auth": "EntityToken",
      "method": "POST",
      "request": "ReportItemRequest",
      "requestExample": "{\r\n  \"Concern\": \"Profanity\",\r\n  \"Reason\": \"There was swearing in the description.\",\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "ReportItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "ReviewItem",
      "summary": "Creates or updates a review for the specified item.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/ReviewItem",
      "auth": "EntityToken",
      "method": "POST",
      "request": "ReviewItemRequest",
      "requestExample": "{\r\n  \"Review\": {\r\n    \"ItemVersion\": \"2.4.1\",\r\n    \"Title\": \"Best Game Ever\",\r\n    \"ReviewText\": \"I play this game every day. It's my favorite game yet.\",\r\n    \"Rating\": 5,\r\n    \"IsInstalled\": true,\r\n    \"HelpfulnessVotes\": 0,\r\n    \"HelpfulPositive\": 0,\r\n    \"HelpfulNegative\": 0,\r\n    \"Submitted\": \"0001-01-01T00:00:00Z\"\r\n  },\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "ReviewItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogApiNotImplemented",
        "CatalogBadRequest",
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "Search",
      "summary": "Execute a search against the public catalog using the provided search parameters and returns a set of paginated results.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/Search",
      "auth": "EntityToken",
      "method": "POST",
      "request": "CatalogSearchRequest",
      "requestExample": "{\r\n  \"Search\": \"Pirates\",\r\n  \"Filter\": \"tags/any(t:t eq 'desert') and contentType eq 'map'\",\r\n  \"OrderBy\": \"lastModifiedDate asc\",\r\n  \"Skip\": 0,\r\n  \"Top\": 10,\r\n  \"Select\": \"contents,images\",\r\n  \"ConfigurationName\": \"SearchConfigurationA\"\r\n}",
      "result": "CatalogSearchResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Count\": 261,\r\n    \"Items\": [],\r\n    \"ConfigurationName\": \"SearchConfiguration123\"\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogBadRequest",
        "CatalogSearchParameterInvalid",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "SearchBundles",
      "summary": "Execute a search against the set of all bundles, using the provided search parameters and returns a set of paginated results",
      "requestDetails": "Given an entity token, search text and/or (filter, orderby, skip, top and ExpandReferencedItems), search for bundles. ",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/SearchBundles",
      "auth": "EntityToken",
      "method": "POST",
      "request": "SearchBundlesRequest",
      "requestExample": "",
      "result": "SearchBundlesResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "SearchForItemsContainingItemByFriendlyId",
      "summary": "Search for a given item (by friendly ID) and return a set of bundles/subscriptions/stores containing the item",
      "requestDetails": "Given an item friendly ID and a container type (bundles/subscriptions/stores or a combination of those), return a set of bundles/subscriptions/stores containing the item.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/SearchForItemsContainingItemByFriendlyId",
      "auth": "EntityToken",
      "method": "POST",
      "request": "SearchForItemsContainingItemByFriendlyIdRequest",
      "requestExample": "",
      "result": "SearchForItemsContainingItemResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "SearchForItemsContainingItemById",
      "summary": "Search for a given item (by id) and return a set of bundles/subscriptions/stores containing the item",
      "requestDetails": "Given an item id and a container type (bundles/subscriptions/stores or a combination of those), return a set of bundles/subscriptions/stores containing the item.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/SearchForItemsContainingItemById",
      "auth": "EntityToken",
      "method": "POST",
      "request": "SearchForItemsContainingItemByIdRequest",
      "requestExample": "",
      "result": "SearchForItemsContainingItemResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "SearchInStoreByFriendlyId",
      "summary": "Execute a search against a specified store (by friendly id) using the provided search parameters and return a set of paginated results",
      "requestDetails": "Given a store friendlyId, search text and/or (filter, orderby, skip, top), search for items within the store that satisfy the search conditions. ",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/SearchInStoreByFriendlyId",
      "auth": "EntityToken",
      "method": "POST",
      "request": "SearchInStoreByFriendlyIdRequest",
      "requestExample": "",
      "result": "SearchInStoreResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "SearchInStoreById",
      "summary": "Execute a search against a specified store (by id) using the provided search parameters and return a set of paginated results",
      "requestDetails": "Given a store id, search text and/or (filter, orderby, skip, top), search for items within the store that satisfy the search conditions.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/SearchInStoreById",
      "auth": "EntityToken",
      "method": "POST",
      "request": "SearchInStoreByIdRequest",
      "requestExample": "",
      "result": "SearchInStoreResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "SearchItems",
      "summary": "Execute a search against the public catalog using the provided search parameters and returns a set of paginated results.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/SearchItems",
      "auth": "EntityToken",
      "method": "POST",
      "request": "SearchItemsRequest",
      "requestExample": "{\r\n  \"Search\": \"Pirates\",\r\n  \"Filter\": \"tags/any(t:t eq 'desert') and contentType eq 'map'\",\r\n  \"OrderBy\": \"lastModifiedDate asc\",\r\n  \"Count\": 0,\r\n  \"Select\": \"contents,images\",\r\n  \"ConfigurationName\": \"SearchConfigurationA\",\r\n  \"ExpandReferencedItems\": false\r\n}",
      "result": "SearchItemsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Items\": [],\r\n    \"ConfigurationName\": \"SearchConfiguration123\",\r\n    \"PartialExpandedResults\": false,\r\n    \"TotalCount\": 261\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogApiNotImplemented",
        "CatalogBadRequest",
        "CatalogSearchParameterInvalid",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "SearchRecipes",
      "summary": "Execute a search against the set of all recipes, using the provided search parameters and returns a set of paginated results",
      "requestDetails": "Given an entity token, search text and/or (filter, orderby, skip, top and ExpandReferencedItems), search for recipes. ",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/SearchRecipes",
      "auth": "EntityToken",
      "method": "POST",
      "request": "SearchRecipesRequest",
      "requestExample": "",
      "result": "SearchRecipesResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ]
    },
    {
      "name": "SearchStores",
      "summary": "Execute a search against the set of all stores, using the provided search parameters and returns a set of paginated results",
      "requestDetails": "Given an entity token, search text and/or (filter, orderby, skip, top and ExpandReferencedItems), search for stores. ",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/SearchStores",
      "auth": "EntityToken",
      "method": "POST",
      "request": "SearchStoresRequest",
      "requestExample": "",
      "result": "SearchStoresResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "SearchSubscriptions",
      "summary": "Execute a search against the set of all subscriptions, using the provided search parameters and returns a set of paginated results",
      "requestDetails": "Given an entity token, search text and/or (filter, orderby, skip, top and ExpandReferencedItems), search for subscriptions. ",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/SearchSubscriptions",
      "auth": "EntityToken",
      "method": "POST",
      "request": "SearchSubscriptionsRequest",
      "requestExample": "",
      "result": "SearchSubscriptionsResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ]
    },
    {
      "name": "SetInventoryItems",
      "summary": "Set inventory items",
      "requestDetails": "Given an entity type, entity identifier and container details, will set the entity's inventory items",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/SetInventoryItems",
      "auth": "EntityToken",
      "method": "POST",
      "request": "SetInventoryItemsRequest",
      "requestExample": "",
      "result": "SetInventoryItemsResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable",
        "ForbiddenByEntityPolicy"
      ]
    },
    {
      "name": "SetItemModerationState",
      "summary": "Sets the moderation state for an item, including the concern category and string reason.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/SetItemModerationState",
      "auth": "EntityToken",
      "method": "POST",
      "request": "SetItemModerationStateRequest",
      "requestExample": "{\r\n  \"Status\": \"AwaitingModeration\",\r\n  \"Reason\": \"User reports over threshold\",\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n}",
      "result": "SetItemModerationStateResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogApiNotImplemented",
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "SetUgcItemModerationState",
      "summary": "Sets the moderation state for an item, including the concern category and string reason.",
      "subgroup": "UserGeneratedContent",
      "titleTiers": null,
      "url": "/UserGeneratedContent/SetUgcItemModerationState",
      "auth": "EntityToken",
      "method": "POST",
      "request": "SetUgcItemModerationStateRequest",
      "requestExample": "{\r\n  \"ItemId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\",\r\n  \"Status\": \"AwaitingModeration\",\r\n  \"Reason\": \"User reports over threshold\"\r\n}",
      "result": "SetUgcItemModerationStateResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "SetVirtualCurrencies",
      "summary": "Set virtual currencies",
      "requestDetails": "Given an entity type, entity identifier and container details, will set the entity's currencies to a specific amount. ",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/SetVirtualCurrencies",
      "auth": "EntityToken",
      "method": "POST",
      "request": "SetVirtualCurrenciesRequest",
      "requestExample": "",
      "result": "SetVirtualCurrenciesResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable",
        "ForbiddenByEntityPolicy"
      ]
    },
    {
      "name": "SubmitHelpfulnessVote",
      "summary": "Submit a vote for a review, indicating whether the review was helpful or unhelpful.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/SubmitHelpfulnessVote",
      "auth": "EntityToken",
      "method": "POST",
      "request": "HelpfulnessVoteRequest",
      "requestExample": "{\r\n  \"ReviewId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\",\r\n  \"IsHelpful\": true\r\n}",
      "result": "HelpfulnessVoteResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "SubmitItemReviewVote",
      "summary": "Submit a vote for a review, indicating whether the review was helpful or unhelpful.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/SubmitItemReviewVote",
      "auth": "EntityToken",
      "method": "POST",
      "request": "SubmitItemReviewVoteRequest",
      "requestExample": "{\r\n  \"ReviewId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\",\r\n  \"Vote\": \"Helpful\"\r\n}",
      "result": "SubmitItemReviewVoteResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogApiNotImplemented",
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "SubtractInventoryItems",
      "summary": "Subtract inventory items.",
      "requestDetails": "Given an entity type, entity identifier and container details, will subtract the specified inventory items. ",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/SubtractInventoryItems",
      "auth": "EntityToken",
      "method": "POST",
      "request": "SubtractInventoryItemsRequest",
      "requestExample": "",
      "result": "SubtractInventoryItemsResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable",
        "ForbiddenByEntityPolicy"
      ]
    },
    {
      "name": "SubtractVirtualCurrencies",
      "summary": "Decrease virtual currencies amount.",
      "requestDetails": "Given an entity type, entity identifier and container details, will decrease the entity's currencies by a specific amount. ",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/SubtractVirtualCurrencies",
      "auth": "EntityToken",
      "method": "POST",
      "request": "SubtractVirtualCurrenciesRequest",
      "requestExample": "",
      "result": "SubtractVirtualCurrenciesResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable",
        "ForbiddenByEntityPolicy"
      ]
    },
    {
      "name": "TakedownReviews",
      "summary": "Submit a request to takedown one or more reviews.",
      "requestDetails": "Submit a request to takedown one or more reviews, removing them from public view. Authors will still be able to see their reviews after being taken down.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/TakedownReviews",
      "auth": "EntityToken",
      "method": "POST",
      "request": "TakedownReviewsRequest",
      "requestExample": "{\r\n  \"Reviews\": [\r\n    {\r\n      \"ItemId\": \"00000000-0000-0000-0000-000000000003\",\r\n      \"ReviewId\": \"dddddddd-dddd-dddd-dddd-dddddddddddd\"\r\n    }\r\n  ]\r\n}",
      "result": "TakedownReviewsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "UpdateBundle",
      "summary": "Update a bundle",
      "requestDetails": "Given a title entity token and bundle details, update a bundle. ",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/UpdateBundle",
      "auth": "EntityToken",
      "method": "POST",
      "request": "UpdateBundleRequest",
      "requestExample": "",
      "result": "UpdateBundleResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "UpdateCatalogConfig",
      "summary": "Gets the configuration for the catalog.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/UpdateCatalogConfig",
      "auth": "EntityToken",
      "method": "POST",
      "request": "UpdateCatalogConfigRequest",
      "requestExample": "{\r\n  \"Config\": {\r\n    \"Admins\": [\r\n      \"title_player_account!ABC123\"\r\n    ],\r\n    \"Catalog\": {\r\n      \"ContentTypes\": [\r\n        \"map\",\r\n        \"skin\"\r\n      ],\r\n      \"Tags\": [\r\n        \"sword\",\r\n        \"shield\"\r\n      ]\r\n    },\r\n    \"DeepLinkFormats\": [\r\n      {\r\n        \"Platform\": \"iOS\",\r\n        \"Format\": \"mygame://item/{id}\"\r\n      }\r\n    ],\r\n    \"DisplayPropertyIndexInfos\": [\r\n      {\r\n        \"Name\": \"damage\",\r\n        \"Type\": \"QueryDouble\"\r\n      }\r\n    ],\r\n    \"Reviewers\": [\r\n      \"title_player_account!ABC123\"\r\n    ],\r\n    \"UserGeneratedContent\": {\r\n      \"ContentTypes\": [\r\n        \"skin\"\r\n      ],\r\n      \"Enabled\": false,\r\n      \"Tags\": [\r\n        \"sword\",\r\n        \"shield\"\r\n      ]\r\n    },\r\n    \"Search\": {\r\n      \"Config_A\": {\r\n        \"IgnoreBoostFactor\": false,\r\n        \"Title\": {\r\n          \"Weight\": 2.3,\r\n          \"Ignore\": false\r\n        },\r\n        \"Description\": {\r\n          \"Weight\": 0.0,\r\n          \"Ignore\": true\r\n        }\r\n      },\r\n      \"Config_B\": {\r\n        \"IgnoreBoostFactor\": true\r\n      }\r\n    }\r\n  }\r\n}",
      "result": "UpdateCatalogConfigResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogConfigInvalid"
      ]
    },
    {
      "name": "UpdateCurrency",
      "summary": "Update a currency",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/UpdateCurrency",
      "auth": "EntityToken",
      "method": "POST",
      "request": "UpdateCurrencyRequest",
      "requestExample": "{\r\n  \"Currency\": {\r\n    \"Id\": \"00000000-0000-0000-0000-000000000004\",\r\n    \"AlternateIds\": [\r\n      {\r\n        \"Type\": \"FriendlyId\",\r\n        \"Value\": \"AU\"\r\n      }\r\n    ],\r\n    \"Title\": {\r\n      \"neutral\": \"gold\",\r\n      \"es-MX\": \"el oro\"\r\n    },\r\n    \"IsHidden\": false,\r\n    \"StartDate\": \"2018-08-17T22:32:10.472Z\",\r\n    \"Images\": [\r\n      {\r\n        \"Id\": \"00000000-0000-0000-0000-000000000003\",\r\n        \"Tag\": \"display\",\r\n        \"Type\": \"thumbnail\",\r\n        \"Url\": \"https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/gold_thumb.jpg\"\r\n      }\r\n    ],\r\n    \"ETag\": \"opaqueString\"\r\n  }\r\n}",
      "result": "UpdateCurrencyResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Currency\": {\r\n      \"Id\": \"00000000-0000-0000-0000-000000000004\",\r\n      \"AlternateIds\": [\r\n        {\r\n          \"Type\": \"FriendlyId\",\r\n          \"Value\": \"AU\"\r\n        }\r\n      ],\r\n      \"Title\": {\r\n        \"neutral\": \"gold\",\r\n        \"es-MX\": \"el oro\"\r\n      },\r\n      \"IsHidden\": false,\r\n      \"StartDate\": \"2018-08-17T22:32:10.472Z\",\r\n      \"Images\": [\r\n        {\r\n          \"Id\": \"00000000-0000-0000-0000-000000000003\",\r\n          \"Tag\": \"display\",\r\n          \"Type\": \"thumbnail\",\r\n          \"Url\": \"https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/gold_thumb.jpg\"\r\n        }\r\n      ],\r\n      \"ETag\": \"opaqueString\"\r\n    }\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ]
    },
    {
      "name": "UpdateDraftItem",
      "summary": "Update the metadata for an item in the working catalog.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/UpdateDraftItem",
      "auth": "EntityToken",
      "method": "POST",
      "request": "UpdateDraftItemRequest",
      "requestExample": "{\r\n  \"Publish\": false,\r\n  \"PublishItem\": false\r\n}",
      "result": "UpdateDraftItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Item\": {}\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogApiNotImplemented",
        "CatalogBadRequest",
        "CatalogClientIdentityInvalid",
        "CatalogItemMetadataInvalid",
        "CatalogItemTypeInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "UpdateDraftUgcItem",
      "summary": "Update the metadata for an item in the working catalog.",
      "subgroup": "UserGeneratedContent",
      "titleTiers": null,
      "url": "/UserGeneratedContent/UpdateDraftUgcItem",
      "auth": "EntityToken",
      "method": "POST",
      "request": "UpdateDraftItemRequest",
      "requestExample": "{\r\n  \"Publish\": false,\r\n  \"PublishItem\": false\r\n}",
      "result": "UpdateDraftItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Item\": {}\r\n  }\r\n}",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "CatalogBadRequest",
        "CatalogClientIdentityInvalid",
        "CatalogItemIdInvalid",
        "CatalogItemMetadataInvalid",
        "CatalogPlayerIdMissing",
        "CatalogTitleIdMissing"
      ]
    },
    {
      "name": "UpdateInventoryItems",
      "summary": "Update inventory items",
      "requestDetails": "Given an entity type, entity identifier and container details, will update the entity's inventory items",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/UpdateInventoryItems",
      "auth": "EntityToken",
      "method": "POST",
      "request": "UpdateInventoryItemsRequest",
      "requestExample": "",
      "result": "UpdateInventoryItemsResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable",
        "ForbiddenByEntityPolicy"
      ]
    },
    {
      "name": "UpdateInventoryItemsProperties",
      "summary": "Update inventory Items.",
      "requestDetails": "Update the specified inventory items.",
      "subgroup": "Inventory",
      "titleTiers": null,
      "url": "/Inventory/UpdateInventoryItemsProperties",
      "auth": "EntityToken",
      "method": "POST",
      "request": "UpdateInventoryItemsPropertiesRequest",
      "requestExample": "",
      "result": "UpdateInventoryPropertiesItemsResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable",
        "ForbiddenByEntityPolicy"
      ]
    },
    {
      "name": "UpdateRecipe",
      "summary": "Update a recipe",
      "requestDetails": "Given a title entity token and recipe details, update a recipe.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/UpdateRecipe",
      "auth": "EntityToken",
      "method": "POST",
      "request": "UpdateRecipeRequest",
      "requestExample": "",
      "result": "UpdateRecipeResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "UpdateStore",
      "summary": "Update a store",
      "requestDetails": "Given a title entity token, and store details, update a store. ",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/UpdateStore",
      "auth": "EntityToken",
      "method": "POST",
      "request": "UpdateStoreRequest",
      "requestExample": "",
      "result": "UpdateStoreResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    },
    {
      "name": "UpdateSubscription",
      "summary": "Update a subscription",
      "requestDetails": "Given a title entity token and subscription details, update a subscription.",
      "subgroup": "Catalog",
      "titleTiers": null,
      "url": "/Catalog/UpdateSubscription",
      "auth": "EntityToken",
      "method": "POST",
      "request": "UpdateSubscriptionRequest",
      "requestExample": "",
      "result": "UpdateSubscriptionResult",
      "resultExample": "",
      "AnyInclusiveFlags": [
        "Beta"
      ],
      "errors": [
        "EconomyServiceInternalError",
        "EconomyServiceUnavailable"
      ]
    }
  ],
  "errors": {
    "Success": {
      "id": 0,
      "name": "Success"
    },
    "UnkownError": {
      "id": 500,
      "name": "UnkownError"
    },
    "InvalidParams": {
      "id": 1000,
      "name": "InvalidParams"
    },
    "AccountNotFound": {
      "id": 1001,
      "name": "AccountNotFound"
    },
    "AccountBanned": {
      "id": 1002,
      "name": "AccountBanned"
    },
    "InvalidUsernameOrPassword": {
      "id": 1003,
      "name": "InvalidUsernameOrPassword"
    },
    "InvalidTitleId": {
      "id": 1004,
      "name": "InvalidTitleId"
    },
    "InvalidEmailAddress": {
      "id": 1005,
      "name": "InvalidEmailAddress"
    },
    "EmailAddressNotAvailable": {
      "id": 1006,
      "name": "EmailAddressNotAvailable"
    },
    "InvalidUsername": {
      "id": 1007,
      "name": "InvalidUsername"
    },
    "InvalidPassword": {
      "id": 1008,
      "name": "InvalidPassword"
    },
    "UsernameNotAvailable": {
      "id": 1009,
      "name": "UsernameNotAvailable"
    },
    "InvalidSteamTicket": {
      "id": 1010,
      "name": "InvalidSteamTicket"
    },
    "AccountAlreadyLinked": {
      "id": 1011,
      "name": "AccountAlreadyLinked"
    },
    "LinkedAccountAlreadyClaimed": {
      "id": 1012,
      "name": "LinkedAccountAlreadyClaimed"
    },
    "InvalidFacebookToken": {
      "id": 1013,
      "name": "InvalidFacebookToken"
    },
    "AccountNotLinked": {
      "id": 1014,
      "name": "AccountNotLinked"
    },
    "FailedByPaymentProvider": {
      "id": 1015,
      "name": "FailedByPaymentProvider"
    },
    "CouponCodeNotFound": {
      "id": 1016,
      "name": "CouponCodeNotFound"
    },
    "InvalidContainerItem": {
      "id": 1017,
      "name": "InvalidContainerItem"
    },
    "ContainerNotOwned": {
      "id": 1018,
      "name": "ContainerNotOwned"
    },
    "KeyNotOwned": {
      "id": 1019,
      "name": "KeyNotOwned"
    },
    "InvalidItemIdInTable": {
      "id": 1020,
      "name": "InvalidItemIdInTable"
    },
    "InvalidReceipt": {
      "id": 1021,
      "name": "InvalidReceipt"
    },
    "ReceiptAlreadyUsed": {
      "id": 1022,
      "name": "ReceiptAlreadyUsed"
    },
    "ReceiptCancelled": {
      "id": 1023,
      "name": "ReceiptCancelled"
    },
    "GameNotFound": {
      "id": 1024,
      "name": "GameNotFound"
    },
    "GameModeNotFound": {
      "id": 1025,
      "name": "GameModeNotFound"
    },
    "InvalidGoogleToken": {
      "id": 1026,
      "name": "InvalidGoogleToken"
    },
    "UserIsNotPartOfDeveloper": {
      "id": 1027,
      "name": "UserIsNotPartOfDeveloper"
    },
    "InvalidTitleForDeveloper": {
      "id": 1028,
      "name": "InvalidTitleForDeveloper"
    },
    "TitleNameConflicts": {
      "id": 1029,
      "name": "TitleNameConflicts"
    },
    "UserisNotValid": {
      "id": 1030,
      "name": "UserisNotValid"
    },
    "ValueAlreadyExists": {
      "id": 1031,
      "name": "ValueAlreadyExists"
    },
    "BuildNotFound": {
      "id": 1032,
      "name": "BuildNotFound"
    },
    "PlayerNotInGame": {
      "id": 1033,
      "name": "PlayerNotInGame"
    },
    "InvalidTicket": {
      "id": 1034,
      "name": "InvalidTicket"
    },
    "InvalidDeveloper": {
      "id": 1035,
      "name": "InvalidDeveloper"
    },
    "InvalidOrderInfo": {
      "id": 1036,
      "name": "InvalidOrderInfo"
    },
    "RegistrationIncomplete": {
      "id": 1037,
      "name": "RegistrationIncomplete"
    },
    "InvalidPlatform": {
      "id": 1038,
      "name": "InvalidPlatform"
    },
    "UnknownError": {
      "id": 1039,
      "name": "UnknownError"
    },
    "SteamApplicationNotOwned": {
      "id": 1040,
      "name": "SteamApplicationNotOwned"
    },
    "WrongSteamAccount": {
      "id": 1041,
      "name": "WrongSteamAccount"
    },
    "TitleNotActivated": {
      "id": 1042,
      "name": "TitleNotActivated"
    },
    "RegistrationSessionNotFound": {
      "id": 1043,
      "name": "RegistrationSessionNotFound"
    },
    "NoSuchMod": {
      "id": 1044,
      "name": "NoSuchMod"
    },
    "FileNotFound": {
      "id": 1045,
      "name": "FileNotFound"
    },
    "DuplicateEmail": {
      "id": 1046,
      "name": "DuplicateEmail"
    },
    "ItemNotFound": {
      "id": 1047,
      "name": "ItemNotFound"
    },
    "ItemNotOwned": {
      "id": 1048,
      "name": "ItemNotOwned"
    },
    "ItemNotRecycleable": {
      "id": 1049,
      "name": "ItemNotRecycleable"
    },
    "ItemNotAffordable": {
      "id": 1050,
      "name": "ItemNotAffordable"
    },
    "InvalidVirtualCurrency": {
      "id": 1051,
      "name": "InvalidVirtualCurrency"
    },
    "WrongVirtualCurrency": {
      "id": 1052,
      "name": "WrongVirtualCurrency"
    },
    "WrongPrice": {
      "id": 1053,
      "name": "WrongPrice"
    },
    "NonPositiveValue": {
      "id": 1054,
      "name": "NonPositiveValue"
    },
    "InvalidRegion": {
      "id": 1055,
      "name": "InvalidRegion"
    },
    "RegionAtCapacity": {
      "id": 1056,
      "name": "RegionAtCapacity"
    },
    "ServerFailedToStart": {
      "id": 1057,
      "name": "ServerFailedToStart"
    },
    "NameNotAvailable": {
      "id": 1058,
      "name": "NameNotAvailable"
    },
    "InsufficientFunds": {
      "id": 1059,
      "name": "InsufficientFunds"
    },
    "InvalidDeviceID": {
      "id": 1060,
      "name": "InvalidDeviceID"
    },
    "InvalidPushNotificationToken": {
      "id": 1061,
      "name": "InvalidPushNotificationToken"
    },
    "NoRemainingUses": {
      "id": 1062,
      "name": "NoRemainingUses"
    },
    "InvalidPaymentProvider": {
      "id": 1063,
      "name": "InvalidPaymentProvider"
    },
    "PurchaseInitializationFailure": {
      "id": 1064,
      "name": "PurchaseInitializationFailure"
    },
    "DuplicateUsername": {
      "id": 1065,
      "name": "DuplicateUsername"
    },
    "InvalidBuyerInfo": {
      "id": 1066,
      "name": "InvalidBuyerInfo"
    },
    "NoGameModeParamsSet": {
      "id": 1067,
      "name": "NoGameModeParamsSet"
    },
    "BodyTooLarge": {
      "id": 1068,
      "name": "BodyTooLarge"
    },
    "ReservedWordInBody": {
      "id": 1069,
      "name": "ReservedWordInBody"
    },
    "InvalidTypeInBody": {
      "id": 1070,
      "name": "InvalidTypeInBody"
    },
    "InvalidRequest": {
      "id": 1071,
      "name": "InvalidRequest"
    },
    "ReservedEventName": {
      "id": 1072,
      "name": "ReservedEventName"
    },
    "InvalidUserStatistics": {
      "id": 1073,
      "name": "InvalidUserStatistics"
    },
    "NotAuthenticated": {
      "id": 1074,
      "name": "NotAuthenticated"
    },
    "StreamAlreadyExists": {
      "id": 1075,
      "name": "StreamAlreadyExists"
    },
    "ErrorCreatingStream": {
      "id": 1076,
      "name": "ErrorCreatingStream"
    },
    "StreamNotFound": {
      "id": 1077,
      "name": "StreamNotFound"
    },
    "InvalidAccount": {
      "id": 1078,
      "name": "InvalidAccount"
    },
    "PurchaseDoesNotExist": {
      "id": 1080,
      "name": "PurchaseDoesNotExist"
    },
    "InvalidPurchaseTransactionStatus": {
      "id": 1081,
      "name": "InvalidPurchaseTransactionStatus"
    },
    "APINotEnabledForGameClientAccess": {
      "id": 1082,
      "name": "APINotEnabledForGameClientAccess"
    },
    "NoPushNotificationARNForTitle": {
      "id": 1083,
      "name": "NoPushNotificationARNForTitle"
    },
    "BuildAlreadyExists": {
      "id": 1084,
      "name": "BuildAlreadyExists"
    },
    "BuildPackageDoesNotExist": {
      "id": 1085,
      "name": "BuildPackageDoesNotExist"
    },
    "CustomAnalyticsEventsNotEnabledForTitle": {
      "id": 1087,
      "name": "CustomAnalyticsEventsNotEnabledForTitle"
    },
    "InvalidSharedGroupId": {
      "id": 1088,
      "name": "InvalidSharedGroupId"
    },
    "NotAuthorized": {
      "id": 1089,
      "name": "NotAuthorized"
    },
    "MissingTitleGoogleProperties": {
      "id": 1090,
      "name": "MissingTitleGoogleProperties"
    },
    "InvalidItemProperties": {
      "id": 1091,
      "name": "InvalidItemProperties"
    },
    "InvalidPSNAuthCode": {
      "id": 1092,
      "name": "InvalidPSNAuthCode"
    },
    "InvalidItemId": {
      "id": 1093,
      "name": "InvalidItemId"
    },
    "PushNotEnabledForAccount": {
      "id": 1094,
      "name": "PushNotEnabledForAccount"
    },
    "PushServiceError": {
      "id": 1095,
      "name": "PushServiceError"
    },
    "ReceiptDoesNotContainInAppItems": {
      "id": 1096,
      "name": "ReceiptDoesNotContainInAppItems"
    },
    "ReceiptContainsMultipleInAppItems": {
      "id": 1097,
      "name": "ReceiptContainsMultipleInAppItems"
    },
    "InvalidBundleID": {
      "id": 1098,
      "name": "InvalidBundleID"
    },
    "JavascriptException": {
      "id": 1099,
      "name": "JavascriptException"
    },
    "InvalidSessionTicket": {
      "id": 1100,
      "name": "InvalidSessionTicket"
    },
    "UnableToConnectToDatabase": {
      "id": 1101,
      "name": "UnableToConnectToDatabase"
    },
    "InternalServerError": {
      "id": 1110,
      "name": "InternalServerError"
    },
    "InvalidReportDate": {
      "id": 1111,
      "name": "InvalidReportDate"
    },
    "ReportNotAvailable": {
      "id": 1112,
      "name": "ReportNotAvailable"
    },
    "DatabaseThroughputExceeded": {
      "id": 1113,
      "name": "DatabaseThroughputExceeded"
    },
    "InvalidGameTicket": {
      "id": 1115,
      "name": "InvalidGameTicket"
    },
    "ExpiredGameTicket": {
      "id": 1116,
      "name": "ExpiredGameTicket"
    },
    "GameTicketDoesNotMatchLobby": {
      "id": 1117,
      "name": "GameTicketDoesNotMatchLobby"
    },
    "LinkedDeviceAlreadyClaimed": {
      "id": 1118,
      "name": "LinkedDeviceAlreadyClaimed"
    },
    "DeviceAlreadyLinked": {
      "id": 1119,
      "name": "DeviceAlreadyLinked"
    },
    "DeviceNotLinked": {
      "id": 1120,
      "name": "DeviceNotLinked"
    },
    "PartialFailure": {
      "id": 1121,
      "name": "PartialFailure"
    },
    "PublisherNotSet": {
      "id": 1122,
      "name": "PublisherNotSet"
    },
    "ServiceUnavailable": {
      "id": 1123,
      "name": "ServiceUnavailable"
    },
    "VersionNotFound": {
      "id": 1124,
      "name": "VersionNotFound"
    },
    "RevisionNotFound": {
      "id": 1125,
      "name": "RevisionNotFound"
    },
    "InvalidPublisherId": {
      "id": 1126,
      "name": "InvalidPublisherId"
    },
    "DownstreamServiceUnavailable": {
      "id": 1127,
      "name": "DownstreamServiceUnavailable"
    },
    "APINotIncludedInTitleUsageTier": {
      "id": 1128,
      "name": "APINotIncludedInTitleUsageTier"
    },
    "DAULimitExceeded": {
      "id": 1129,
      "name": "DAULimitExceeded"
    },
    "APIRequestLimitExceeded": {
      "id": 1130,
      "name": "APIRequestLimitExceeded"
    },
    "InvalidAPIEndpoint": {
      "id": 1131,
      "name": "InvalidAPIEndpoint"
    },
    "BuildNotAvailable": {
      "id": 1132,
      "name": "BuildNotAvailable"
    },
    "ConcurrentEditError": {
      "id": 1133,
      "name": "ConcurrentEditError"
    },
    "ContentNotFound": {
      "id": 1134,
      "name": "ContentNotFound"
    },
    "CharacterNotFound": {
      "id": 1135,
      "name": "CharacterNotFound"
    },
    "CloudScriptNotFound": {
      "id": 1136,
      "name": "CloudScriptNotFound"
    },
    "ContentQuotaExceeded": {
      "id": 1137,
      "name": "ContentQuotaExceeded"
    },
    "InvalidCharacterStatistics": {
      "id": 1138,
      "name": "InvalidCharacterStatistics"
    },
    "PhotonNotEnabledForTitle": {
      "id": 1139,
      "name": "PhotonNotEnabledForTitle"
    },
    "PhotonApplicationNotFound": {
      "id": 1140,
      "name": "PhotonApplicationNotFound"
    },
    "PhotonApplicationNotAssociatedWithTitle": {
      "id": 1141,
      "name": "PhotonApplicationNotAssociatedWithTitle"
    },
    "InvalidEmailOrPassword": {
      "id": 1142,
      "name": "InvalidEmailOrPassword"
    },
    "FacebookAPIError": {
      "id": 1143,
      "name": "FacebookAPIError"
    },
    "InvalidContentType": {
      "id": 1144,
      "name": "InvalidContentType"
    },
    "KeyLengthExceeded": {
      "id": 1145,
      "name": "KeyLengthExceeded"
    },
    "DataLengthExceeded": {
      "id": 1146,
      "name": "DataLengthExceeded"
    },
    "TooManyKeys": {
      "id": 1147,
      "name": "TooManyKeys"
    },
    "FreeTierCannotHaveVirtualCurrency": {
      "id": 1148,
      "name": "FreeTierCannotHaveVirtualCurrency"
    },
    "MissingAmazonSharedKey": {
      "id": 1149,
      "name": "MissingAmazonSharedKey"
    },
    "AmazonValidationError": {
      "id": 1150,
      "name": "AmazonValidationError"
    },
    "InvalidPSNIssuerId": {
      "id": 1151,
      "name": "InvalidPSNIssuerId"
    },
    "PSNInaccessible": {
      "id": 1152,
      "name": "PSNInaccessible"
    },
    "ExpiredAuthToken": {
      "id": 1153,
      "name": "ExpiredAuthToken"
    },
    "FailedToGetEntitlements": {
      "id": 1154,
      "name": "FailedToGetEntitlements"
    },
    "FailedToConsumeEntitlement": {
      "id": 1155,
      "name": "FailedToConsumeEntitlement"
    },
    "TradeAcceptingUserNotAllowed": {
      "id": 1156,
      "name": "TradeAcceptingUserNotAllowed"
    },
    "TradeInventoryItemIsAssignedToCharacter": {
      "id": 1157,
      "name": "TradeInventoryItemIsAssignedToCharacter"
    },
    "TradeInventoryItemIsBundle": {
      "id": 1158,
      "name": "TradeInventoryItemIsBundle"
    },
    "TradeStatusNotValidForCancelling": {
      "id": 1159,
      "name": "TradeStatusNotValidForCancelling"
    },
    "TradeStatusNotValidForAccepting": {
      "id": 1160,
      "name": "TradeStatusNotValidForAccepting"
    },
    "TradeDoesNotExist": {
      "id": 1161,
      "name": "TradeDoesNotExist"
    },
    "TradeCancelled": {
      "id": 1162,
      "name": "TradeCancelled"
    },
    "TradeAlreadyFilled": {
      "id": 1163,
      "name": "TradeAlreadyFilled"
    },
    "TradeWaitForStatusTimeout": {
      "id": 1164,
      "name": "TradeWaitForStatusTimeout"
    },
    "TradeInventoryItemExpired": {
      "id": 1165,
      "name": "TradeInventoryItemExpired"
    },
    "TradeMissingOfferedAndAcceptedItems": {
      "id": 1166,
      "name": "TradeMissingOfferedAndAcceptedItems"
    },
    "TradeAcceptedItemIsBundle": {
      "id": 1167,
      "name": "TradeAcceptedItemIsBundle"
    },
    "TradeAcceptedItemIsStackable": {
      "id": 1168,
      "name": "TradeAcceptedItemIsStackable"
    },
    "TradeInventoryItemInvalidStatus": {
      "id": 1169,
      "name": "TradeInventoryItemInvalidStatus"
    },
    "TradeAcceptedCatalogItemInvalid": {
      "id": 1170,
      "name": "TradeAcceptedCatalogItemInvalid"
    },
    "TradeAllowedUsersInvalid": {
      "id": 1171,
      "name": "TradeAllowedUsersInvalid"
    },
    "TradeInventoryItemDoesNotExist": {
      "id": 1172,
      "name": "TradeInventoryItemDoesNotExist"
    },
    "TradeInventoryItemIsConsumed": {
      "id": 1173,
      "name": "TradeInventoryItemIsConsumed"
    },
    "TradeInventoryItemIsStackable": {
      "id": 1174,
      "name": "TradeInventoryItemIsStackable"
    },
    "TradeAcceptedItemsMismatch": {
      "id": 1175,
      "name": "TradeAcceptedItemsMismatch"
    },
    "InvalidKongregateToken": {
      "id": 1176,
      "name": "InvalidKongregateToken"
    },
    "FeatureNotConfiguredForTitle": {
      "id": 1177,
      "name": "FeatureNotConfiguredForTitle"
    },
    "NoMatchingCatalogItemForReceipt": {
      "id": 1178,
      "name": "NoMatchingCatalogItemForReceipt"
    },
    "InvalidCurrencyCode": {
      "id": 1179,
      "name": "InvalidCurrencyCode"
    },
    "NoRealMoneyPriceForCatalogItem": {
      "id": 1180,
      "name": "NoRealMoneyPriceForCatalogItem"
    },
    "TradeInventoryItemIsNotTradable": {
      "id": 1181,
      "name": "TradeInventoryItemIsNotTradable"
    },
    "TradeAcceptedCatalogItemIsNotTradable": {
      "id": 1182,
      "name": "TradeAcceptedCatalogItemIsNotTradable"
    },
    "UsersAlreadyFriends": {
      "id": 1183,
      "name": "UsersAlreadyFriends"
    },
    "LinkedIdentifierAlreadyClaimed": {
      "id": 1184,
      "name": "LinkedIdentifierAlreadyClaimed"
    },
    "CustomIdNotLinked": {
      "id": 1185,
      "name": "CustomIdNotLinked"
    },
    "TotalDataSizeExceeded": {
      "id": 1186,
      "name": "TotalDataSizeExceeded"
    },
    "DeleteKeyConflict": {
      "id": 1187,
      "name": "DeleteKeyConflict"
    },
    "InvalidXboxLiveToken": {
      "id": 1188,
      "name": "InvalidXboxLiveToken"
    },
    "ExpiredXboxLiveToken": {
      "id": 1189,
      "name": "ExpiredXboxLiveToken"
    },
    "ResettableStatisticVersionRequired": {
      "id": 1190,
      "name": "ResettableStatisticVersionRequired"
    },
    "NotAuthorizedByTitle": {
      "id": 1191,
      "name": "NotAuthorizedByTitle"
    },
    "NoPartnerEnabled": {
      "id": 1192,
      "name": "NoPartnerEnabled"
    },
    "InvalidPartnerResponse": {
      "id": 1193,
      "name": "InvalidPartnerResponse"
    },
    "APINotEnabledForGameServerAccess": {
      "id": 1194,
      "name": "APINotEnabledForGameServerAccess"
    },
    "StatisticNotFound": {
      "id": 1195,
      "name": "StatisticNotFound"
    },
    "StatisticNameConflict": {
      "id": 1196,
      "name": "StatisticNameConflict"
    },
    "StatisticVersionClosedForWrites": {
      "id": 1197,
      "name": "StatisticVersionClosedForWrites"
    },
    "StatisticVersionInvalid": {
      "id": 1198,
      "name": "StatisticVersionInvalid"
    },
    "APIClientRequestRateLimitExceeded": {
      "id": 1199,
      "name": "APIClientRequestRateLimitExceeded"
    },
    "InvalidJSONContent": {
      "id": 1200,
      "name": "InvalidJSONContent"
    },
    "InvalidDropTable": {
      "id": 1201,
      "name": "InvalidDropTable"
    },
    "StatisticVersionAlreadyIncrementedForScheduledInterval": {
      "id": 1202,
      "name": "StatisticVersionAlreadyIncrementedForScheduledInterval"
    },
    "StatisticCountLimitExceeded": {
      "id": 1203,
      "name": "StatisticCountLimitExceeded"
    },
    "StatisticVersionIncrementRateExceeded": {
      "id": 1204,
      "name": "StatisticVersionIncrementRateExceeded"
    },
    "ContainerKeyInvalid": {
      "id": 1205,
      "name": "ContainerKeyInvalid"
    },
    "CloudScriptExecutionTimeLimitExceeded": {
      "id": 1206,
      "name": "CloudScriptExecutionTimeLimitExceeded"
    },
    "NoWritePermissionsForEvent": {
      "id": 1207,
      "name": "NoWritePermissionsForEvent"
    },
    "CloudScriptFunctionArgumentSizeExceeded": {
      "id": 1208,
      "name": "CloudScriptFunctionArgumentSizeExceeded"
    },
    "CloudScriptAPIRequestCountExceeded": {
      "id": 1209,
      "name": "CloudScriptAPIRequestCountExceeded"
    },
    "CloudScriptAPIRequestError": {
      "id": 1210,
      "name": "CloudScriptAPIRequestError"
    },
    "CloudScriptHTTPRequestError": {
      "id": 1211,
      "name": "CloudScriptHTTPRequestError"
    },
    "InsufficientGuildRole": {
      "id": 1212,
      "name": "InsufficientGuildRole"
    },
    "GuildNotFound": {
      "id": 1213,
      "name": "GuildNotFound"
    },
    "OverLimit": {
      "id": 1214,
      "name": "OverLimit"
    },
    "EventNotFound": {
      "id": 1215,
      "name": "EventNotFound"
    },
    "InvalidEventField": {
      "id": 1216,
      "name": "InvalidEventField"
    },
    "InvalidEventName": {
      "id": 1217,
      "name": "InvalidEventName"
    },
    "CatalogNotConfigured": {
      "id": 1218,
      "name": "CatalogNotConfigured"
    },
    "OperationNotSupportedForPlatform": {
      "id": 1219,
      "name": "OperationNotSupportedForPlatform"
    },
    "SegmentNotFound": {
      "id": 1220,
      "name": "SegmentNotFound"
    },
    "StoreNotFound": {
      "id": 1221,
      "name": "StoreNotFound"
    },
    "InvalidStatisticName": {
      "id": 1222,
      "name": "InvalidStatisticName"
    },
    "TitleNotQualifiedForLimit": {
      "id": 1223,
      "name": "TitleNotQualifiedForLimit"
    },
    "InvalidServiceLimitLevel": {
      "id": 1224,
      "name": "InvalidServiceLimitLevel"
    },
    "ServiceLimitLevelInTransition": {
      "id": 1225,
      "name": "ServiceLimitLevelInTransition"
    },
    "CouponAlreadyRedeemed": {
      "id": 1226,
      "name": "CouponAlreadyRedeemed"
    },
    "GameServerBuildSizeLimitExceeded": {
      "id": 1227,
      "name": "GameServerBuildSizeLimitExceeded"
    },
    "GameServerBuildCountLimitExceeded": {
      "id": 1228,
      "name": "GameServerBuildCountLimitExceeded"
    },
    "VirtualCurrencyCountLimitExceeded": {
      "id": 1229,
      "name": "VirtualCurrencyCountLimitExceeded"
    },
    "VirtualCurrencyCodeExists": {
      "id": 1230,
      "name": "VirtualCurrencyCodeExists"
    },
    "TitleNewsItemCountLimitExceeded": {
      "id": 1231,
      "name": "TitleNewsItemCountLimitExceeded"
    },
    "InvalidTwitchToken": {
      "id": 1232,
      "name": "InvalidTwitchToken"
    },
    "TwitchResponseError": {
      "id": 1233,
      "name": "TwitchResponseError"
    },
    "ProfaneDisplayName": {
      "id": 1234,
      "name": "ProfaneDisplayName"
    },
    "UserAlreadyAdded": {
      "id": 1235,
      "name": "UserAlreadyAdded"
    },
    "InvalidVirtualCurrencyCode": {
      "id": 1236,
      "name": "InvalidVirtualCurrencyCode"
    },
    "VirtualCurrencyCannotBeDeleted": {
      "id": 1237,
      "name": "VirtualCurrencyCannotBeDeleted"
    },
    "IdentifierAlreadyClaimed": {
      "id": 1238,
      "name": "IdentifierAlreadyClaimed"
    },
    "IdentifierNotLinked": {
      "id": 1239,
      "name": "IdentifierNotLinked"
    },
    "InvalidContinuationToken": {
      "id": 1240,
      "name": "InvalidContinuationToken"
    },
    "ExpiredContinuationToken": {
      "id": 1241,
      "name": "ExpiredContinuationToken"
    },
    "InvalidSegment": {
      "id": 1242,
      "name": "InvalidSegment"
    },
    "InvalidSessionId": {
      "id": 1243,
      "name": "InvalidSessionId"
    },
    "SessionLogNotFound": {
      "id": 1244,
      "name": "SessionLogNotFound"
    },
    "InvalidSearchTerm": {
      "id": 1245,
      "name": "InvalidSearchTerm"
    },
    "TwoFactorAuthenticationTokenRequired": {
      "id": 1246,
      "name": "TwoFactorAuthenticationTokenRequired"
    },
    "GameServerHostCountLimitExceeded": {
      "id": 1247,
      "name": "GameServerHostCountLimitExceeded"
    },
    "PlayerTagCountLimitExceeded": {
      "id": 1248,
      "name": "PlayerTagCountLimitExceeded"
    },
    "RequestAlreadyRunning": {
      "id": 1249,
      "name": "RequestAlreadyRunning"
    },
    "ActionGroupNotFound": {
      "id": 1250,
      "name": "ActionGroupNotFound"
    },
    "MaximumSegmentBulkActionJobsRunning": {
      "id": 1251,
      "name": "MaximumSegmentBulkActionJobsRunning"
    },
    "NoActionsOnPlayersInSegmentJob": {
      "id": 1252,
      "name": "NoActionsOnPlayersInSegmentJob"
    },
    "DuplicateStatisticName": {
      "id": 1253,
      "name": "DuplicateStatisticName"
    },
    "ScheduledTaskNameConflict": {
      "id": 1254,
      "name": "ScheduledTaskNameConflict"
    },
    "ScheduledTaskCreateConflict": {
      "id": 1255,
      "name": "ScheduledTaskCreateConflict"
    },
    "InvalidScheduledTaskName": {
      "id": 1256,
      "name": "InvalidScheduledTaskName"
    },
    "InvalidTaskSchedule": {
      "id": 1257,
      "name": "InvalidTaskSchedule"
    },
    "SteamNotEnabledForTitle": {
      "id": 1258,
      "name": "SteamNotEnabledForTitle"
    },
    "LimitNotAnUpgradeOption": {
      "id": 1259,
      "name": "LimitNotAnUpgradeOption"
    },
    "NoSecretKeyEnabledForCloudScript": {
      "id": 1260,
      "name": "NoSecretKeyEnabledForCloudScript"
    },
    "TaskNotFound": {
      "id": 1261,
      "name": "TaskNotFound"
    },
    "TaskInstanceNotFound": {
      "id": 1262,
      "name": "TaskInstanceNotFound"
    },
    "InvalidIdentityProviderId": {
      "id": 1263,
      "name": "InvalidIdentityProviderId"
    },
    "MisconfiguredIdentityProvider": {
      "id": 1264,
      "name": "MisconfiguredIdentityProvider"
    },
    "InvalidScheduledTaskType": {
      "id": 1265,
      "name": "InvalidScheduledTaskType"
    },
    "BillingInformationRequired": {
      "id": 1266,
      "name": "BillingInformationRequired"
    },
    "LimitedEditionItemUnavailable": {
      "id": 1267,
      "name": "LimitedEditionItemUnavailable"
    },
    "InvalidAdPlacementAndReward": {
      "id": 1268,
      "name": "InvalidAdPlacementAndReward"
    },
    "AllAdPlacementViewsAlreadyConsumed": {
      "id": 1269,
      "name": "AllAdPlacementViewsAlreadyConsumed"
    },
    "GoogleOAuthNotConfiguredForTitle": {
      "id": 1270,
      "name": "GoogleOAuthNotConfiguredForTitle"
    },
    "GoogleOAuthError": {
      "id": 1271,
      "name": "GoogleOAuthError"
    },
    "UserNotFriend": {
      "id": 1272,
      "name": "UserNotFriend"
    },
    "InvalidSignature": {
      "id": 1273,
      "name": "InvalidSignature"
    },
    "InvalidPublicKey": {
      "id": 1274,
      "name": "InvalidPublicKey"
    },
    "GoogleOAuthNoIdTokenIncludedInResponse": {
      "id": 1275,
      "name": "GoogleOAuthNoIdTokenIncludedInResponse"
    },
    "StatisticUpdateInProgress": {
      "id": 1276,
      "name": "StatisticUpdateInProgress"
    },
    "LeaderboardVersionNotAvailable": {
      "id": 1277,
      "name": "LeaderboardVersionNotAvailable"
    },
    "StatisticAlreadyHasPrizeTable": {
      "id": 1279,
      "name": "StatisticAlreadyHasPrizeTable"
    },
    "PrizeTableHasOverlappingRanks": {
      "id": 1280,
      "name": "PrizeTableHasOverlappingRanks"
    },
    "PrizeTableHasMissingRanks": {
      "id": 1281,
      "name": "PrizeTableHasMissingRanks"
    },
    "PrizeTableRankStartsAtZero": {
      "id": 1282,
      "name": "PrizeTableRankStartsAtZero"
    },
    "InvalidStatistic": {
      "id": 1283,
      "name": "InvalidStatistic"
    },
    "ExpressionParseFailure": {
      "id": 1284,
      "name": "ExpressionParseFailure"
    },
    "ExpressionInvokeFailure": {
      "id": 1285,
      "name": "ExpressionInvokeFailure"
    },
    "ExpressionTooLong": {
      "id": 1286,
      "name": "ExpressionTooLong"
    },
    "DataUpdateRateExceeded": {
      "id": 1287,
      "name": "DataUpdateRateExceeded"
    },
    "RestrictedEmailDomain": {
      "id": 1288,
      "name": "RestrictedEmailDomain"
    },
    "EncryptionKeyDisabled": {
      "id": 1289,
      "name": "EncryptionKeyDisabled"
    },
    "EncryptionKeyMissing": {
      "id": 1290,
      "name": "EncryptionKeyMissing"
    },
    "EncryptionKeyBroken": {
      "id": 1291,
      "name": "EncryptionKeyBroken"
    },
    "NoSharedSecretKeyConfigured": {
      "id": 1292,
      "name": "NoSharedSecretKeyConfigured"
    },
    "SecretKeyNotFound": {
      "id": 1293,
      "name": "SecretKeyNotFound"
    },
    "PlayerSecretAlreadyConfigured": {
      "id": 1294,
      "name": "PlayerSecretAlreadyConfigured"
    },
    "APIRequestsDisabledForTitle": {
      "id": 1295,
      "name": "APIRequestsDisabledForTitle"
    },
    "InvalidSharedSecretKey": {
      "id": 1296,
      "name": "InvalidSharedSecretKey"
    },
    "PrizeTableHasNoRanks": {
      "id": 1297,
      "name": "PrizeTableHasNoRanks"
    },
    "ProfileDoesNotExist": {
      "id": 1298,
      "name": "ProfileDoesNotExist"
    },
    "ContentS3OriginBucketNotConfigured": {
      "id": 1299,
      "name": "ContentS3OriginBucketNotConfigured"
    },
    "InvalidEnvironmentForReceipt": {
      "id": 1300,
      "name": "InvalidEnvironmentForReceipt"
    },
    "EncryptedRequestNotAllowed": {
      "id": 1301,
      "name": "EncryptedRequestNotAllowed"
    },
    "SignedRequestNotAllowed": {
      "id": 1302,
      "name": "SignedRequestNotAllowed"
    },
    "RequestViewConstraintParamsNotAllowed": {
      "id": 1303,
      "name": "RequestViewConstraintParamsNotAllowed"
    },
    "BadPartnerConfiguration": {
      "id": 1304,
      "name": "BadPartnerConfiguration"
    },
    "XboxBPCertificateFailure": {
      "id": 1305,
      "name": "XboxBPCertificateFailure"
    },
    "XboxXASSExchangeFailure": {
      "id": 1306,
      "name": "XboxXASSExchangeFailure"
    },
    "InvalidEntityId": {
      "id": 1307,
      "name": "InvalidEntityId"
    },
    "StatisticValueAggregationOverflow": {
      "id": 1308,
      "name": "StatisticValueAggregationOverflow"
    },
    "EmailMessageFromAddressIsMissing": {
      "id": 1309,
      "name": "EmailMessageFromAddressIsMissing"
    },
    "EmailMessageToAddressIsMissing": {
      "id": 1310,
      "name": "EmailMessageToAddressIsMissing"
    },
    "SmtpServerAuthenticationError": {
      "id": 1311,
      "name": "SmtpServerAuthenticationError"
    },
    "SmtpServerLimitExceeded": {
      "id": 1312,
      "name": "SmtpServerLimitExceeded"
    },
    "SmtpServerInsufficientStorage": {
      "id": 1313,
      "name": "SmtpServerInsufficientStorage"
    },
    "SmtpServerCommunicationError": {
      "id": 1314,
      "name": "SmtpServerCommunicationError"
    },
    "SmtpServerGeneralFailure": {
      "id": 1315,
      "name": "SmtpServerGeneralFailure"
    },
    "EmailClientTimeout": {
      "id": 1316,
      "name": "EmailClientTimeout"
    },
    "EmailClientCanceledTask": {
      "id": 1317,
      "name": "EmailClientCanceledTask"
    },
    "EmailTemplateMissing": {
      "id": 1318,
      "name": "EmailTemplateMissing"
    },
    "InvalidHostForTitleId": {
      "id": 1319,
      "name": "InvalidHostForTitleId"
    },
    "EmailConfirmationTokenDoesNotExist": {
      "id": 1320,
      "name": "EmailConfirmationTokenDoesNotExist"
    },
    "EmailConfirmationTokenExpired": {
      "id": 1321,
      "name": "EmailConfirmationTokenExpired"
    },
    "AccountDeleted": {
      "id": 1322,
      "name": "AccountDeleted"
    },
    "PlayerSecretNotConfigured": {
      "id": 1323,
      "name": "PlayerSecretNotConfigured"
    },
    "InvalidSignatureTime": {
      "id": 1324,
      "name": "InvalidSignatureTime"
    },
    "NoContactEmailAddressFound": {
      "id": 1325,
      "name": "NoContactEmailAddressFound"
    },
    "InvalidAuthToken": {
      "id": 1326,
      "name": "InvalidAuthToken"
    },
    "AuthTokenDoesNotExist": {
      "id": 1327,
      "name": "AuthTokenDoesNotExist"
    },
    "AuthTokenExpired": {
      "id": 1328,
      "name": "AuthTokenExpired"
    },
    "AuthTokenAlreadyUsedToResetPassword": {
      "id": 1329,
      "name": "AuthTokenAlreadyUsedToResetPassword"
    },
    "MembershipNameTooLong": {
      "id": 1330,
      "name": "MembershipNameTooLong"
    },
    "MembershipNotFound": {
      "id": 1331,
      "name": "MembershipNotFound"
    },
    "GoogleServiceAccountInvalid": {
      "id": 1332,
      "name": "GoogleServiceAccountInvalid"
    },
    "GoogleServiceAccountParseFailure": {
      "id": 1333,
      "name": "GoogleServiceAccountParseFailure"
    },
    "EntityTokenMissing": {
      "id": 1334,
      "name": "EntityTokenMissing"
    },
    "EntityTokenInvalid": {
      "id": 1335,
      "name": "EntityTokenInvalid"
    },
    "EntityTokenExpired": {
      "id": 1336,
      "name": "EntityTokenExpired"
    },
    "EntityTokenRevoked": {
      "id": 1337,
      "name": "EntityTokenRevoked"
    },
    "InvalidProductForSubscription": {
      "id": 1338,
      "name": "InvalidProductForSubscription"
    },
    "XboxInaccessible": {
      "id": 1339,
      "name": "XboxInaccessible"
    },
    "SubscriptionAlreadyTaken": {
      "id": 1340,
      "name": "SubscriptionAlreadyTaken"
    },
    "SmtpAddonNotEnabled": {
      "id": 1341,
      "name": "SmtpAddonNotEnabled"
    },
    "APIConcurrentRequestLimitExceeded": {
      "id": 1342,
      "name": "APIConcurrentRequestLimitExceeded"
    },
    "XboxRejectedXSTSExchangeRequest": {
      "id": 1343,
      "name": "XboxRejectedXSTSExchangeRequest"
    },
    "VariableNotDefined": {
      "id": 1344,
      "name": "VariableNotDefined"
    },
    "TemplateVersionNotDefined": {
      "id": 1345,
      "name": "TemplateVersionNotDefined"
    },
    "FileTooLarge": {
      "id": 1346,
      "name": "FileTooLarge"
    },
    "TitleDeleted": {
      "id": 1347,
      "name": "TitleDeleted"
    },
    "TitleContainsUserAccounts": {
      "id": 1348,
      "name": "TitleContainsUserAccounts"
    },
    "TitleDeletionPlayerCleanupFailure": {
      "id": 1349,
      "name": "TitleDeletionPlayerCleanupFailure"
    },
    "EntityFileOperationPending": {
      "id": 1350,
      "name": "EntityFileOperationPending"
    },
    "NoEntityFileOperationPending": {
      "id": 1351,
      "name": "NoEntityFileOperationPending"
    },
    "EntityProfileVersionMismatch": {
      "id": 1352,
      "name": "EntityProfileVersionMismatch"
    },
    "TemplateVersionTooOld": {
      "id": 1353,
      "name": "TemplateVersionTooOld"
    },
    "MembershipDefinitionInUse": {
      "id": 1354,
      "name": "MembershipDefinitionInUse"
    },
    "PaymentPageNotConfigured": {
      "id": 1355,
      "name": "PaymentPageNotConfigured"
    },
    "FailedLoginAttemptRateLimitExceeded": {
      "id": 1356,
      "name": "FailedLoginAttemptRateLimitExceeded"
    },
    "EntityBlockedByGroup": {
      "id": 1357,
      "name": "EntityBlockedByGroup"
    },
    "RoleDoesNotExist": {
      "id": 1358,
      "name": "RoleDoesNotExist"
    },
    "EntityIsAlreadyMember": {
      "id": 1359,
      "name": "EntityIsAlreadyMember"
    },
    "DuplicateRoleId": {
      "id": 1360,
      "name": "DuplicateRoleId"
    },
    "GroupInvitationNotFound": {
      "id": 1361,
      "name": "GroupInvitationNotFound"
    },
    "GroupApplicationNotFound": {
      "id": 1362,
      "name": "GroupApplicationNotFound"
    },
    "OutstandingInvitationAcceptedInstead": {
      "id": 1363,
      "name": "OutstandingInvitationAcceptedInstead"
    },
    "OutstandingApplicationAcceptedInstead": {
      "id": 1364,
      "name": "OutstandingApplicationAcceptedInstead"
    },
    "RoleIsGroupDefaultMember": {
      "id": 1365,
      "name": "RoleIsGroupDefaultMember"
    },
    "RoleIsGroupAdmin": {
      "id": 1366,
      "name": "RoleIsGroupAdmin"
    },
    "RoleNameNotAvailable": {
      "id": 1367,
      "name": "RoleNameNotAvailable"
    },
    "GroupNameNotAvailable": {
      "id": 1368,
      "name": "GroupNameNotAvailable"
    },
    "EmailReportAlreadySent": {
      "id": 1369,
      "name": "EmailReportAlreadySent"
    },
    "EmailReportRecipientBlacklisted": {
      "id": 1370,
      "name": "EmailReportRecipientBlacklisted"
    },
    "EventNamespaceNotAllowed": {
      "id": 1371,
      "name": "EventNamespaceNotAllowed"
    },
    "EventEntityNotAllowed": {
      "id": 1372,
      "name": "EventEntityNotAllowed"
    },
    "InvalidEntityType": {
      "id": 1373,
      "name": "InvalidEntityType"
    },
    "NullTokenResultFromAad": {
      "id": 1374,
      "name": "NullTokenResultFromAad"
    },
    "InvalidTokenResultFromAad": {
      "id": 1375,
      "name": "InvalidTokenResultFromAad"
    },
    "NoValidCertificateForAad": {
      "id": 1376,
      "name": "NoValidCertificateForAad"
    },
    "InvalidCertificateForAad": {
      "id": 1377,
      "name": "InvalidCertificateForAad"
    },
    "DuplicateDropTableId": {
      "id": 1378,
      "name": "DuplicateDropTableId"
    },
    "MultiplayerServerError": {
      "id": 1379,
      "name": "MultiplayerServerError"
    },
    "MultiplayerServerTooManyRequests": {
      "id": 1380,
      "name": "MultiplayerServerTooManyRequests"
    },
    "MultiplayerServerNoContent": {
      "id": 1381,
      "name": "MultiplayerServerNoContent"
    },
    "MultiplayerServerBadRequest": {
      "id": 1382,
      "name": "MultiplayerServerBadRequest"
    },
    "MultiplayerServerUnauthorized": {
      "id": 1383,
      "name": "MultiplayerServerUnauthorized"
    },
    "MultiplayerServerForbidden": {
      "id": 1384,
      "name": "MultiplayerServerForbidden"
    },
    "MultiplayerServerNotFound": {
      "id": 1385,
      "name": "MultiplayerServerNotFound"
    },
    "MultiplayerServerConflict": {
      "id": 1386,
      "name": "MultiplayerServerConflict"
    },
    "MultiplayerServerInternalServerError": {
      "id": 1387,
      "name": "MultiplayerServerInternalServerError"
    },
    "MultiplayerServerUnavailable": {
      "id": 1388,
      "name": "MultiplayerServerUnavailable"
    },
    "ExplicitContentDetected": {
      "id": 1389,
      "name": "ExplicitContentDetected"
    },
    "PIIContentDetected": {
      "id": 1390,
      "name": "PIIContentDetected"
    },
    "InvalidScheduledTaskParameter": {
      "id": 1391,
      "name": "InvalidScheduledTaskParameter"
    },
    "PerEntityEventRateLimitExceeded": {
      "id": 1392,
      "name": "PerEntityEventRateLimitExceeded"
    },
    "TitleDefaultLanguageNotSet": {
      "id": 1393,
      "name": "TitleDefaultLanguageNotSet"
    },
    "EmailTemplateMissingDefaultVersion": {
      "id": 1394,
      "name": "EmailTemplateMissingDefaultVersion"
    },
    "FacebookInstantGamesIdNotLinked": {
      "id": 1395,
      "name": "FacebookInstantGamesIdNotLinked"
    },
    "InvalidFacebookInstantGamesSignature": {
      "id": 1396,
      "name": "InvalidFacebookInstantGamesSignature"
    },
    "FacebookInstantGamesAuthNotConfiguredForTitle": {
      "id": 1397,
      "name": "FacebookInstantGamesAuthNotConfiguredForTitle"
    },
    "EntityProfileConstraintValidationFailed": {
      "id": 1398,
      "name": "EntityProfileConstraintValidationFailed"
    },
    "TelemetryIngestionKeyPending": {
      "id": 1399,
      "name": "TelemetryIngestionKeyPending"
    },
    "TelemetryIngestionKeyNotFound": {
      "id": 1400,
      "name": "TelemetryIngestionKeyNotFound"
    },
    "StatisticChildNameInvalid": {
      "id": 1402,
      "name": "StatisticChildNameInvalid"
    },
    "DataIntegrityError": {
      "id": 1403,
      "name": "DataIntegrityError"
    },
    "VirtualCurrencyCannotBeSetToOlderVersion": {
      "id": 1404,
      "name": "VirtualCurrencyCannotBeSetToOlderVersion"
    },
    "VirtualCurrencyMustBeWithinIntegerRange": {
      "id": 1405,
      "name": "VirtualCurrencyMustBeWithinIntegerRange"
    },
    "EmailTemplateInvalidSyntax": {
      "id": 1406,
      "name": "EmailTemplateInvalidSyntax"
    },
    "EmailTemplateMissingCallback": {
      "id": 1407,
      "name": "EmailTemplateMissingCallback"
    },
    "PushNotificationTemplateInvalidPayload": {
      "id": 1408,
      "name": "PushNotificationTemplateInvalidPayload"
    },
    "InvalidLocalizedPushNotificationLanguage": {
      "id": 1409,
      "name": "InvalidLocalizedPushNotificationLanguage"
    },
    "MissingLocalizedPushNotificationMessage": {
      "id": 1410,
      "name": "MissingLocalizedPushNotificationMessage"
    },
    "PushNotificationTemplateMissingPlatformPayload": {
      "id": 1411,
      "name": "PushNotificationTemplateMissingPlatformPayload"
    },
    "PushNotificationTemplatePayloadContainsInvalidJson": {
      "id": 1412,
      "name": "PushNotificationTemplatePayloadContainsInvalidJson"
    },
    "PushNotificationTemplateContainsInvalidIosPayload": {
      "id": 1413,
      "name": "PushNotificationTemplateContainsInvalidIosPayload"
    },
    "PushNotificationTemplateContainsInvalidAndroidPayload": {
      "id": 1414,
      "name": "PushNotificationTemplateContainsInvalidAndroidPayload"
    },
    "PushNotificationTemplateIosPayloadMissingNotificationBody": {
      "id": 1415,
      "name": "PushNotificationTemplateIosPayloadMissingNotificationBody"
    },
    "PushNotificationTemplateAndroidPayloadMissingNotificationBody": {
      "id": 1416,
      "name": "PushNotificationTemplateAndroidPayloadMissingNotificationBody"
    },
    "PushNotificationTemplateNotFound": {
      "id": 1417,
      "name": "PushNotificationTemplateNotFound"
    },
    "PushNotificationTemplateMissingDefaultVersion": {
      "id": 1418,
      "name": "PushNotificationTemplateMissingDefaultVersion"
    },
    "PushNotificationTemplateInvalidSyntax": {
      "id": 1419,
      "name": "PushNotificationTemplateInvalidSyntax"
    },
    "PushNotificationTemplateNoCustomPayloadForV1": {
      "id": 1420,
      "name": "PushNotificationTemplateNoCustomPayloadForV1"
    },
    "NoLeaderboardForStatistic": {
      "id": 1421,
      "name": "NoLeaderboardForStatistic"
    },
    "TitleNewsMissingDefaultLanguage": {
      "id": 1422,
      "name": "TitleNewsMissingDefaultLanguage"
    },
    "TitleNewsNotFound": {
      "id": 1423,
      "name": "TitleNewsNotFound"
    },
    "TitleNewsDuplicateLanguage": {
      "id": 1424,
      "name": "TitleNewsDuplicateLanguage"
    },
    "TitleNewsMissingTitleOrBody": {
      "id": 1425,
      "name": "TitleNewsMissingTitleOrBody"
    },
    "TitleNewsInvalidLanguage": {
      "id": 1426,
      "name": "TitleNewsInvalidLanguage"
    },
    "EmailRecipientBlacklisted": {
      "id": 1427,
      "name": "EmailRecipientBlacklisted"
    },
    "InvalidGameCenterAuthRequest": {
      "id": 1428,
      "name": "InvalidGameCenterAuthRequest"
    },
    "GameCenterAuthenticationFailed": {
      "id": 1429,
      "name": "GameCenterAuthenticationFailed"
    },
    "CannotEnablePartiesForTitle": {
      "id": 1430,
      "name": "CannotEnablePartiesForTitle"
    },
    "PartyError": {
      "id": 1431,
      "name": "PartyError"
    },
    "PartyRequests": {
      "id": 1432,
      "name": "PartyRequests"
    },
    "PartyNoContent": {
      "id": 1433,
      "name": "PartyNoContent"
    },
    "PartyBadRequest": {
      "id": 1434,
      "name": "PartyBadRequest"
    },
    "PartyUnauthorized": {
      "id": 1435,
      "name": "PartyUnauthorized"
    },
    "PartyForbidden": {
      "id": 1436,
      "name": "PartyForbidden"
    },
    "PartyNotFound": {
      "id": 1437,
      "name": "PartyNotFound"
    },
    "PartyConflict": {
      "id": 1438,
      "name": "PartyConflict"
    },
    "PartyInternalServerError": {
      "id": 1439,
      "name": "PartyInternalServerError"
    },
    "PartyUnavailable": {
      "id": 1440,
      "name": "PartyUnavailable"
    },
    "PartyTooManyRequests": {
      "id": 1441,
      "name": "PartyTooManyRequests"
    },
    "PushNotificationTemplateMissingName": {
      "id": 1442,
      "name": "PushNotificationTemplateMissingName"
    },
    "CannotEnableMultiplayerServersForTitle": {
      "id": 1443,
      "name": "CannotEnableMultiplayerServersForTitle"
    },
    "WriteAttemptedDuringExport": {
      "id": 1444,
      "name": "WriteAttemptedDuringExport"
    },
    "MultiplayerServerTitleQuotaCoresExceeded": {
      "id": 1445,
      "name": "MultiplayerServerTitleQuotaCoresExceeded"
    },
    "AutomationRuleNotFound": {
      "id": 1446,
      "name": "AutomationRuleNotFound"
    },
    "EntityAPIKeyLimitExceeded": {
      "id": 1447,
      "name": "EntityAPIKeyLimitExceeded"
    },
    "EntityAPIKeyNotFound": {
      "id": 1448,
      "name": "EntityAPIKeyNotFound"
    },
    "EntityAPIKeyOrSecretInvalid": {
      "id": 1449,
      "name": "EntityAPIKeyOrSecretInvalid"
    },
    "EconomyServiceUnavailable": {
      "id": 1450,
      "name": "EconomyServiceUnavailable"
    },
    "EconomyServiceInternalError": {
      "id": 1451,
      "name": "EconomyServiceInternalError"
    },
    "QueryRateLimitExceeded": {
      "id": 1452,
      "name": "QueryRateLimitExceeded"
    },
    "EntityAPIKeyCreationDisabledForEntity": {
      "id": 1453,
      "name": "EntityAPIKeyCreationDisabledForEntity"
    },
    "ForbiddenByEntityPolicy": {
      "id": 1454,
      "name": "ForbiddenByEntityPolicy"
    },
    "UpdateInventoryRateLimitExceeded": {
      "id": 1455,
      "name": "UpdateInventoryRateLimitExceeded"
    },
    "StudioCreationRateLimited": {
      "id": 1456,
      "name": "StudioCreationRateLimited"
    },
    "StudioCreationInProgress": {
      "id": 1457,
      "name": "StudioCreationInProgress"
    },
    "DuplicateStudioName": {
      "id": 1458,
      "name": "DuplicateStudioName"
    },
    "StudioNotFound": {
      "id": 1459,
      "name": "StudioNotFound"
    },
    "StudioDeleted": {
      "id": 1460,
      "name": "StudioDeleted"
    },
    "StudioDeactivated": {
      "id": 1461,
      "name": "StudioDeactivated"
    },
    "StudioActivated": {
      "id": 1462,
      "name": "StudioActivated"
    },
    "TitleCreationRateLimited": {
      "id": 1463,
      "name": "TitleCreationRateLimited"
    },
    "TitleCreationInProgress": {
      "id": 1464,
      "name": "TitleCreationInProgress"
    },
    "DuplicateTitleName": {
      "id": 1465,
      "name": "DuplicateTitleName"
    },
    "TitleActivationRateLimited": {
      "id": 1466,
      "name": "TitleActivationRateLimited"
    },
    "TitleActivationInProgress": {
      "id": 1467,
      "name": "TitleActivationInProgress"
    },
    "TitleDeactivated": {
      "id": 1468,
      "name": "TitleDeactivated"
    },
    "TitleActivated": {
      "id": 1469,
      "name": "TitleActivated"
    },
    "CloudScriptAzureFunctionsExecutionTimeLimitExceeded": {
      "id": 1470,
      "name": "CloudScriptAzureFunctionsExecutionTimeLimitExceeded"
    },
    "CloudScriptAzureFunctionsArgumentSizeExceeded": {
      "id": 1471,
      "name": "CloudScriptAzureFunctionsArgumentSizeExceeded"
    },
    "CloudScriptAzureFunctionsReturnSizeExceeded": {
      "id": 1472,
      "name": "CloudScriptAzureFunctionsReturnSizeExceeded"
    },
    "CloudScriptAzureFunctionsHTTPRequestError": {
      "id": 1473,
      "name": "CloudScriptAzureFunctionsHTTPRequestError"
    },
    "VirtualCurrencyBetaGetError": {
      "id": 1474,
      "name": "VirtualCurrencyBetaGetError"
    },
    "VirtualCurrencyBetaCreateError": {
      "id": 1475,
      "name": "VirtualCurrencyBetaCreateError"
    },
    "VirtualCurrencyBetaInitialDepositSaveError": {
      "id": 1476,
      "name": "VirtualCurrencyBetaInitialDepositSaveError"
    },
    "VirtualCurrencyBetaSaveError": {
      "id": 1477,
      "name": "VirtualCurrencyBetaSaveError"
    },
    "VirtualCurrencyBetaDeleteError": {
      "id": 1478,
      "name": "VirtualCurrencyBetaDeleteError"
    },
    "VirtualCurrencyBetaRestoreError": {
      "id": 1479,
      "name": "VirtualCurrencyBetaRestoreError"
    },
    "VirtualCurrencyBetaSaveConflict": {
      "id": 1480,
      "name": "VirtualCurrencyBetaSaveConflict"
    },
    "VirtualCurrencyBetaUpdateError": {
      "id": 1481,
      "name": "VirtualCurrencyBetaUpdateError"
    },
    "InsightsManagementDatabaseNotFound": {
      "id": 1482,
      "name": "InsightsManagementDatabaseNotFound"
    },
    "InsightsManagementOperationNotFound": {
      "id": 1483,
      "name": "InsightsManagementOperationNotFound"
    },
    "InsightsManagementErrorPendingOperationExists": {
      "id": 1484,
      "name": "InsightsManagementErrorPendingOperationExists"
    },
    "InsightsManagementSetPerformanceLevelInvalidParameter": {
      "id": 1485,
      "name": "InsightsManagementSetPerformanceLevelInvalidParameter"
    },
    "InsightsManagementSetStorageRetentionInvalidParameter": {
      "id": 1486,
      "name": "InsightsManagementSetStorageRetentionInvalidParameter"
    },
    "InsightsManagementGetStorageUsageInvalidParameter": {
      "id": 1487,
      "name": "InsightsManagementGetStorageUsageInvalidParameter"
    },
    "InsightsManagementGetOperationStatusInvalidParameter": {
      "id": 1488,
      "name": "InsightsManagementGetOperationStatusInvalidParameter"
    },
    "DuplicatePurchaseTransactionId": {
      "id": 1489,
      "name": "DuplicatePurchaseTransactionId"
    },
    "EvaluationModePlayerCountExceeded": {
      "id": 1490,
      "name": "EvaluationModePlayerCountExceeded"
    },
    "GetPlayersInSegmentRateLimitExceeded": {
      "id": 1491,
      "name": "GetPlayersInSegmentRateLimitExceeded"
    },
    "CloudScriptFunctionNameSizeExceeded": {
      "id": 1492,
      "name": "CloudScriptFunctionNameSizeExceeded"
    },
    "InsightsManagementTitleInEvaluationMode": {
      "id": 1493,
      "name": "InsightsManagementTitleInEvaluationMode"
    },
    "CloudScriptAzureFunctionsQueueRequestError": {
      "id": 1494,
      "name": "CloudScriptAzureFunctionsQueueRequestError"
    },
    "EvaluationModeTitleCountExceeded": {
      "id": 1495,
      "name": "EvaluationModeTitleCountExceeded"
    },
    "InsightsManagementTitleNotInFlight": {
      "id": 1496,
      "name": "InsightsManagementTitleNotInFlight"
    },
    "LimitNotFound": {
      "id": 1497,
      "name": "LimitNotFound"
    },
    "LimitNotAvailableViaAPI": {
      "id": 1498,
      "name": "LimitNotAvailableViaAPI"
    },
    "InsightsManagementSetStorageRetentionBelowMinimum": {
      "id": 1499,
      "name": "InsightsManagementSetStorageRetentionBelowMinimum"
    },
    "InsightsManagementSetStorageRetentionAboveMaximum": {
      "id": 1500,
      "name": "InsightsManagementSetStorageRetentionAboveMaximum"
    },
    "AppleNotEnabledForTitle": {
      "id": 1501,
      "name": "AppleNotEnabledForTitle"
    },
    "InsightsManagementNewActiveEventExportLimitInvalid": {
      "id": 1502,
      "name": "InsightsManagementNewActiveEventExportLimitInvalid"
    },
    "InsightsManagementSetPerformanceRateLimited": {
      "id": 1503,
      "name": "InsightsManagementSetPerformanceRateLimited"
    },
    "PartyRequestsThrottledFromRateLimiter": {
      "id": 1504,
      "name": "PartyRequestsThrottledFromRateLimiter"
    },
    "XboxServiceTooManyRequests": {
      "id": 1505,
      "name": "XboxServiceTooManyRequests"
    },
    "NintendoSwitchNotEnabledForTitle": {
      "id": 1506,
      "name": "NintendoSwitchNotEnabledForTitle"
    },
    "RequestMultiplayerServersThrottledFromRateLimiter": {
      "id": 1507,
      "name": "RequestMultiplayerServersThrottledFromRateLimiter"
    },
    "TitleDataOverrideNotFound": {
      "id": 1508,
      "name": "TitleDataOverrideNotFound"
    },
    "DuplicateKeys": {
      "id": 1509,
      "name": "DuplicateKeys"
    },
    "WasNotCreatedWithCloudRoot": {
      "id": 1510,
      "name": "WasNotCreatedWithCloudRoot"
    },
    "LegacyMultiplayerServersDeprecated": {
      "id": 1511,
      "name": "LegacyMultiplayerServersDeprecated"
    },
    "VirtualCurrencyCurrentlyUnavailable": {
      "id": 1512,
      "name": "VirtualCurrencyCurrentlyUnavailable"
    },
    "SteamUserNotFound": {
      "id": 1513,
      "name": "SteamUserNotFound"
    },
    "ElasticSearchOperationFailed": {
      "id": 1514,
      "name": "ElasticSearchOperationFailed"
    },
    "MatchmakingEntityInvalid": {
      "id": 2001,
      "name": "MatchmakingEntityInvalid"
    },
    "MatchmakingPlayerAttributesInvalid": {
      "id": 2002,
      "name": "MatchmakingPlayerAttributesInvalid"
    },
    "MatchmakingQueueNotFound": {
      "id": 2016,
      "name": "MatchmakingQueueNotFound"
    },
    "MatchmakingMatchNotFound": {
      "id": 2017,
      "name": "MatchmakingMatchNotFound"
    },
    "MatchmakingTicketNotFound": {
      "id": 2018,
      "name": "MatchmakingTicketNotFound"
    },
    "MatchmakingAlreadyJoinedTicket": {
      "id": 2028,
      "name": "MatchmakingAlreadyJoinedTicket"
    },
    "MatchmakingTicketAlreadyCompleted": {
      "id": 2029,
      "name": "MatchmakingTicketAlreadyCompleted"
    },
    "MatchmakingQueueConfigInvalid": {
      "id": 2031,
      "name": "MatchmakingQueueConfigInvalid"
    },
    "MatchmakingMemberProfileInvalid": {
      "id": 2032,
      "name": "MatchmakingMemberProfileInvalid"
    },
    "NintendoSwitchDeviceIdNotLinked": {
      "id": 2034,
      "name": "NintendoSwitchDeviceIdNotLinked"
    },
    "MatchmakingNotEnabled": {
      "id": 2035,
      "name": "MatchmakingNotEnabled"
    },
    "MatchmakingPlayerAttributesTooLarge": {
      "id": 2043,
      "name": "MatchmakingPlayerAttributesTooLarge"
    },
    "MatchmakingNumberOfPlayersInTicketTooLarge": {
      "id": 2044,
      "name": "MatchmakingNumberOfPlayersInTicketTooLarge"
    },
    "MatchmakingAttributeInvalid": {
      "id": 2046,
      "name": "MatchmakingAttributeInvalid"
    },
    "MatchmakingPlayerHasNotJoinedTicket": {
      "id": 2053,
      "name": "MatchmakingPlayerHasNotJoinedTicket"
    },
    "MatchmakingRateLimitExceeded": {
      "id": 2054,
      "name": "MatchmakingRateLimitExceeded"
    },
    "MatchmakingTicketMembershipLimitExceeded": {
      "id": 2055,
      "name": "MatchmakingTicketMembershipLimitExceeded"
    },
    "MatchmakingUnauthorized": {
      "id": 2056,
      "name": "MatchmakingUnauthorized"
    },
    "MatchmakingQueueLimitExceeded": {
      "id": 2057,
      "name": "MatchmakingQueueLimitExceeded"
    },
    "MatchmakingRequestTypeMismatch": {
      "id": 2058,
      "name": "MatchmakingRequestTypeMismatch"
    },
    "MatchmakingBadRequest": {
      "id": 2059,
      "name": "MatchmakingBadRequest"
    },
    "TitleConfigNotFound": {
      "id": 3001,
      "name": "TitleConfigNotFound"
    },
    "TitleConfigUpdateConflict": {
      "id": 3002,
      "name": "TitleConfigUpdateConflict"
    },
    "TitleConfigSerializationError": {
      "id": 3003,
      "name": "TitleConfigSerializationError"
    },
    "CatalogApiNotImplemented": {
      "id": 4000,
      "name": "CatalogApiNotImplemented"
    },
    "CatalogEntityInvalid": {
      "id": 4001,
      "name": "CatalogEntityInvalid"
    },
    "CatalogTitleIdMissing": {
      "id": 4002,
      "name": "CatalogTitleIdMissing"
    },
    "CatalogPlayerIdMissing": {
      "id": 4003,
      "name": "CatalogPlayerIdMissing"
    },
    "CatalogClientIdentityInvalid": {
      "id": 4004,
      "name": "CatalogClientIdentityInvalid"
    },
    "CatalogOneOrMoreFilesInvalid": {
      "id": 4005,
      "name": "CatalogOneOrMoreFilesInvalid"
    },
    "CatalogItemMetadataInvalid": {
      "id": 4006,
      "name": "CatalogItemMetadataInvalid"
    },
    "CatalogItemIdInvalid": {
      "id": 4007,
      "name": "CatalogItemIdInvalid"
    },
    "CatalogSearchParameterInvalid": {
      "id": 4008,
      "name": "CatalogSearchParameterInvalid"
    },
    "CatalogFeatureDisabled": {
      "id": 4009,
      "name": "CatalogFeatureDisabled"
    },
    "CatalogConfigInvalid": {
      "id": 4010,
      "name": "CatalogConfigInvalid"
    },
    "CatalogItemTypeInvalid": {
      "id": 4012,
      "name": "CatalogItemTypeInvalid"
    },
    "CatalogBadRequest": {
      "id": 4013,
      "name": "CatalogBadRequest"
    },
    "CatalogTooManyRequests": {
      "id": 4014,
      "name": "CatalogTooManyRequests"
    },
    "ExportInvalidStatusUpdate": {
      "id": 5000,
      "name": "ExportInvalidStatusUpdate"
    },
    "ExportInvalidPrefix": {
      "id": 5001,
      "name": "ExportInvalidPrefix"
    },
    "ExportBlobContainerDoesNotExist": {
      "id": 5002,
      "name": "ExportBlobContainerDoesNotExist"
    },
    "ExportNotFound": {
      "id": 5004,
      "name": "ExportNotFound"
    },
    "ExportCouldNotUpdate": {
      "id": 5005,
      "name": "ExportCouldNotUpdate"
    },
    "ExportInvalidStorageType": {
      "id": 5006,
      "name": "ExportInvalidStorageType"
    },
    "ExportAmazonBucketDoesNotExist": {
      "id": 5007,
      "name": "ExportAmazonBucketDoesNotExist"
    },
    "ExportInvalidBlobStorage": {
      "id": 5008,
      "name": "ExportInvalidBlobStorage"
    },
    "ExportKustoException": {
      "id": 5009,
      "name": "ExportKustoException"
    },
    "ExportKustoConnectionFailed": {
      "id": 5012,
      "name": "ExportKustoConnectionFailed"
    },
    "ExportUnknownError": {
      "id": 5013,
      "name": "ExportUnknownError"
    },
    "ExportCantEditPendingExport": {
      "id": 5014,
      "name": "ExportCantEditPendingExport"
    },
    "ExportLimitExports": {
      "id": 5015,
      "name": "ExportLimitExports"
    },
    "ExportLimitEvents": {
      "id": 5016,
      "name": "ExportLimitEvents"
    },
    "ExportInvalidPartitionStatusModification": {
      "id": 5017,
      "name": "ExportInvalidPartitionStatusModification"
    },
    "ExportCouldNotCreate": {
      "id": 5018,
      "name": "ExportCouldNotCreate"
    },
    "ExportNoBackingDatabaseFound": {
      "id": 5019,
      "name": "ExportNoBackingDatabaseFound"
    },
    "ExportCouldNotDelete": {
      "id": 5020,
      "name": "ExportCouldNotDelete"
    },
    "ExportCannotDetermineEventQuery": {
      "id": 5021,
      "name": "ExportCannotDetermineEventQuery"
    },
    "ExportInvalidQuerySchemaModification": {
      "id": 5022,
      "name": "ExportInvalidQuerySchemaModification"
    },
    "ExportQuerySchemaMissingRequiredColumns": {
      "id": 5023,
      "name": "ExportQuerySchemaMissingRequiredColumns"
    },
    "ExportCannotParseQuery": {
      "id": 5024,
      "name": "ExportCannotParseQuery"
    },
    "ExportControlCommandsNotAllowed": {
      "id": 5025,
      "name": "ExportControlCommandsNotAllowed"
    },
    "ExportQueryMissingTableReference": {
      "id": 5026,
      "name": "ExportQueryMissingTableReference"
    },
    "ExplorerBasicInvalidQueryName": {
      "id": 5100,
      "name": "ExplorerBasicInvalidQueryName"
    },
    "ExplorerBasicInvalidQueryDescription": {
      "id": 5101,
      "name": "ExplorerBasicInvalidQueryDescription"
    },
    "ExplorerBasicInvalidQueryConditions": {
      "id": 5102,
      "name": "ExplorerBasicInvalidQueryConditions"
    },
    "ExplorerBasicInvalidQueryStartDate": {
      "id": 5103,
      "name": "ExplorerBasicInvalidQueryStartDate"
    },
    "ExplorerBasicInvalidQueryEndDate": {
      "id": 5104,
      "name": "ExplorerBasicInvalidQueryEndDate"
    },
    "ExplorerBasicInvalidQueryGroupBy": {
      "id": 5105,
      "name": "ExplorerBasicInvalidQueryGroupBy"
    },
    "ExplorerBasicInvalidQueryAggregateType": {
      "id": 5106,
      "name": "ExplorerBasicInvalidQueryAggregateType"
    },
    "ExplorerBasicInvalidQueryAggregateProperty": {
      "id": 5107,
      "name": "ExplorerBasicInvalidQueryAggregateProperty"
    },
    "ExplorerBasicLoadQueriesError": {
      "id": 5108,
      "name": "ExplorerBasicLoadQueriesError"
    },
    "ExplorerBasicLoadQueryError": {
      "id": 5109,
      "name": "ExplorerBasicLoadQueryError"
    },
    "ExplorerBasicCreateQueryError": {
      "id": 5110,
      "name": "ExplorerBasicCreateQueryError"
    },
    "ExplorerBasicDeleteQueryError": {
      "id": 5111,
      "name": "ExplorerBasicDeleteQueryError"
    },
    "ExplorerBasicUpdateQueryError": {
      "id": 5112,
      "name": "ExplorerBasicUpdateQueryError"
    },
    "ExplorerBasicSavedQueriesLimit": {
      "id": 5113,
      "name": "ExplorerBasicSavedQueriesLimit"
    },
    "ExplorerBasicSavedQueryNotFound": {
      "id": 5114,
      "name": "ExplorerBasicSavedQueryNotFound"
    },
    "TitleNotEnabledForParty": {
      "id": 6000,
      "name": "TitleNotEnabledForParty"
    },
    "PartyVersionNotFound": {
      "id": 6001,
      "name": "PartyVersionNotFound"
    },
    "MultiplayerServerBuildReferencedByMatchmakingQueue": {
      "id": 6002,
      "name": "MultiplayerServerBuildReferencedByMatchmakingQueue"
    },
    "ExperimentationExperimentStopped": {
      "id": 7000,
      "name": "ExperimentationExperimentStopped"
    },
    "ExperimentationExperimentRunning": {
      "id": 7001,
      "name": "ExperimentationExperimentRunning"
    },
    "ExperimentationExperimentNotFound": {
      "id": 7002,
      "name": "ExperimentationExperimentNotFound"
    },
    "ExperimentationExperimentNeverStarted": {
      "id": 7003,
      "name": "ExperimentationExperimentNeverStarted"
    },
    "ExperimentationExperimentDeleted": {
      "id": 7004,
      "name": "ExperimentationExperimentDeleted"
    },
    "ExperimentationClientTimeout": {
      "id": 7005,
      "name": "ExperimentationClientTimeout"
    },
    "ExperimentationInvalidVariantConfiguration": {
      "id": 7006,
      "name": "ExperimentationInvalidVariantConfiguration"
    },
    "ExperimentationInvalidVariableConfiguration": {
      "id": 7007,
      "name": "ExperimentationInvalidVariableConfiguration"
    },
    "ExperimentInvalidId": {
      "id": 7008,
      "name": "ExperimentInvalidId"
    },
    "ExperimentationNoScorecard": {
      "id": 7009,
      "name": "ExperimentationNoScorecard"
    },
    "ExperimentationTreatmentAssignmentFailed": {
      "id": 7010,
      "name": "ExperimentationTreatmentAssignmentFailed"
    },
    "ExperimentationTreatmentAssignmentDisabled": {
      "id": 7011,
      "name": "ExperimentationTreatmentAssignmentDisabled"
    },
    "ExperimentationInvalidDuration": {
      "id": 7012,
      "name": "ExperimentationInvalidDuration"
    },
    "ExperimentationMaxExperimentsReached": {
      "id": 7013,
      "name": "ExperimentationMaxExperimentsReached"
    },
    "ExperimentationExperimentSchedulingInProgress": {
      "id": 7014,
      "name": "ExperimentationExperimentSchedulingInProgress"
    },
    "ExperimentationInvalidEndDate": {
      "id": 7015,
      "name": "ExperimentationInvalidEndDate"
    },
    "ExperimentationInvalidStartDate": {
      "id": 7016,
      "name": "ExperimentationInvalidStartDate"
    },
    "ExperimentationMaxDurationExceeded": {
      "id": 7017,
      "name": "ExperimentationMaxDurationExceeded"
    },
    "ExperimentationExclusionGroupNotFound": {
      "id": 7018,
      "name": "ExperimentationExclusionGroupNotFound"
    },
    "ExperimentationExclusionGroupInsufficientCapacity": {
      "id": 7019,
      "name": "ExperimentationExclusionGroupInsufficientCapacity"
    },
    "ExperimentationExclusionGroupCannotDelete": {
      "id": 7020,
      "name": "ExperimentationExclusionGroupCannotDelete"
    },
    "ExperimentationExclusionGroupInvalidTrafficAllocation": {
      "id": 7021,
      "name": "ExperimentationExclusionGroupInvalidTrafficAllocation"
    },
    "ExperimentationExclusionGroupInvalidName": {
      "id": 7022,
      "name": "ExperimentationExclusionGroupInvalidName"
    },
    "MaxActionDepthExceeded": {
      "id": 8000,
      "name": "MaxActionDepthExceeded"
    },
    "TitleNotOnUpdatedPricingPlan": {
      "id": 9000,
      "name": "TitleNotOnUpdatedPricingPlan"
    },
    "SegmentManagementTitleNotInFlight": {
      "id": 10000,
      "name": "SegmentManagementTitleNotInFlight"
    },
    "SegmentManagementNoExpressionTree": {
      "id": 10001,
      "name": "SegmentManagementNoExpressionTree"
    },
    "SegmentManagementTriggerActionCountOverLimit": {
      "id": 10002,
      "name": "SegmentManagementTriggerActionCountOverLimit"
    },
    "SegmentManagementSegmentCountOverLimit": {
      "id": 10003,
      "name": "SegmentManagementSegmentCountOverLimit"
    },
    "SegmentManagementInvalidSegmentId": {
      "id": 10004,
      "name": "SegmentManagementInvalidSegmentId"
    },
    "SegmentManagementInvalidInput": {
      "id": 10005,
      "name": "SegmentManagementInvalidInput"
    },
    "SegmentManagementInvalidSegmentName": {
      "id": 10006,
      "name": "SegmentManagementInvalidSegmentName"
    },
    "DeleteSegmentRateLimitExceeded": {
      "id": 10007,
      "name": "DeleteSegmentRateLimitExceeded"
    },
    "CreateSegmentRateLimitExceeded": {
      "id": 10008,
      "name": "CreateSegmentRateLimitExceeded"
    },
    "UpdateSegmentRateLimitExceeded": {
      "id": 10009,
      "name": "UpdateSegmentRateLimitExceeded"
    },
    "GetSegmentsRateLimitExceeded": {
      "id": 10010,
      "name": "GetSegmentsRateLimitExceeded"
    },
    "SnapshotNotFound": {
      "id": 11000,
      "name": "SnapshotNotFound"
    },
    "InventoryApiNotImplemented": {
      "id": 12000,
      "name": "InventoryApiNotImplemented"
    }
  },
  "errorList": [
    "Success",
    "UnkownError",
    "InvalidParams",
    "AccountNotFound",
    "AccountBanned",
    "InvalidUsernameOrPassword",
    "InvalidTitleId",
    "InvalidEmailAddress",
    "EmailAddressNotAvailable",
    "InvalidUsername",
    "InvalidPassword",
    "UsernameNotAvailable",
    "InvalidSteamTicket",
    "AccountAlreadyLinked",
    "LinkedAccountAlreadyClaimed",
    "InvalidFacebookToken",
    "AccountNotLinked",
    "FailedByPaymentProvider",
    "CouponCodeNotFound",
    "InvalidContainerItem",
    "ContainerNotOwned",
    "KeyNotOwned",
    "InvalidItemIdInTable",
    "InvalidReceipt",
    "ReceiptAlreadyUsed",
    "ReceiptCancelled",
    "GameNotFound",
    "GameModeNotFound",
    "InvalidGoogleToken",
    "UserIsNotPartOfDeveloper",
    "InvalidTitleForDeveloper",
    "TitleNameConflicts",
    "UserisNotValid",
    "ValueAlreadyExists",
    "BuildNotFound",
    "PlayerNotInGame",
    "InvalidTicket",
    "InvalidDeveloper",
    "InvalidOrderInfo",
    "RegistrationIncomplete",
    "InvalidPlatform",
    "UnknownError",
    "SteamApplicationNotOwned",
    "WrongSteamAccount",
    "TitleNotActivated",
    "RegistrationSessionNotFound",
    "NoSuchMod",
    "FileNotFound",
    "DuplicateEmail",
    "ItemNotFound",
    "ItemNotOwned",
    "ItemNotRecycleable",
    "ItemNotAffordable",
    "InvalidVirtualCurrency",
    "WrongVirtualCurrency",
    "WrongPrice",
    "NonPositiveValue",
    "InvalidRegion",
    "RegionAtCapacity",
    "ServerFailedToStart",
    "NameNotAvailable",
    "InsufficientFunds",
    "InvalidDeviceID",
    "InvalidPushNotificationToken",
    "NoRemainingUses",
    "InvalidPaymentProvider",
    "PurchaseInitializationFailure",
    "DuplicateUsername",
    "InvalidBuyerInfo",
    "NoGameModeParamsSet",
    "BodyTooLarge",
    "ReservedWordInBody",
    "InvalidTypeInBody",
    "InvalidRequest",
    "ReservedEventName",
    "InvalidUserStatistics",
    "NotAuthenticated",
    "StreamAlreadyExists",
    "ErrorCreatingStream",
    "StreamNotFound",
    "InvalidAccount",
    "PurchaseDoesNotExist",
    "InvalidPurchaseTransactionStatus",
    "APINotEnabledForGameClientAccess",
    "NoPushNotificationARNForTitle",
    "BuildAlreadyExists",
    "BuildPackageDoesNotExist",
    "CustomAnalyticsEventsNotEnabledForTitle",
    "InvalidSharedGroupId",
    "NotAuthorized",
    "MissingTitleGoogleProperties",
    "InvalidItemProperties",
    "InvalidPSNAuthCode",
    "InvalidItemId",
    "PushNotEnabledForAccount",
    "PushServiceError",
    "ReceiptDoesNotContainInAppItems",
    "ReceiptContainsMultipleInAppItems",
    "InvalidBundleID",
    "JavascriptException",
    "InvalidSessionTicket",
    "UnableToConnectToDatabase",
    "InternalServerError",
    "InvalidReportDate",
    "ReportNotAvailable",
    "DatabaseThroughputExceeded",
    "InvalidGameTicket",
    "ExpiredGameTicket",
    "GameTicketDoesNotMatchLobby",
    "LinkedDeviceAlreadyClaimed",
    "DeviceAlreadyLinked",
    "DeviceNotLinked",
    "PartialFailure",
    "PublisherNotSet",
    "ServiceUnavailable",
    "VersionNotFound",
    "RevisionNotFound",
    "InvalidPublisherId",
    "DownstreamServiceUnavailable",
    "APINotIncludedInTitleUsageTier",
    "DAULimitExceeded",
    "APIRequestLimitExceeded",
    "InvalidAPIEndpoint",
    "BuildNotAvailable",
    "ConcurrentEditError",
    "ContentNotFound",
    "CharacterNotFound",
    "CloudScriptNotFound",
    "ContentQuotaExceeded",
    "InvalidCharacterStatistics",
    "PhotonNotEnabledForTitle",
    "PhotonApplicationNotFound",
    "PhotonApplicationNotAssociatedWithTitle",
    "InvalidEmailOrPassword",
    "FacebookAPIError",
    "InvalidContentType",
    "KeyLengthExceeded",
    "DataLengthExceeded",
    "TooManyKeys",
    "FreeTierCannotHaveVirtualCurrency",
    "MissingAmazonSharedKey",
    "AmazonValidationError",
    "InvalidPSNIssuerId",
    "PSNInaccessible",
    "ExpiredAuthToken",
    "FailedToGetEntitlements",
    "FailedToConsumeEntitlement",
    "TradeAcceptingUserNotAllowed",
    "TradeInventoryItemIsAssignedToCharacter",
    "TradeInventoryItemIsBundle",
    "TradeStatusNotValidForCancelling",
    "TradeStatusNotValidForAccepting",
    "TradeDoesNotExist",
    "TradeCancelled",
    "TradeAlreadyFilled",
    "TradeWaitForStatusTimeout",
    "TradeInventoryItemExpired",
    "TradeMissingOfferedAndAcceptedItems",
    "TradeAcceptedItemIsBundle",
    "TradeAcceptedItemIsStackable",
    "TradeInventoryItemInvalidStatus",
    "TradeAcceptedCatalogItemInvalid",
    "TradeAllowedUsersInvalid",
    "TradeInventoryItemDoesNotExist",
    "TradeInventoryItemIsConsumed",
    "TradeInventoryItemIsStackable",
    "TradeAcceptedItemsMismatch",
    "InvalidKongregateToken",
    "FeatureNotConfiguredForTitle",
    "NoMatchingCatalogItemForReceipt",
    "InvalidCurrencyCode",
    "NoRealMoneyPriceForCatalogItem",
    "TradeInventoryItemIsNotTradable",
    "TradeAcceptedCatalogItemIsNotTradable",
    "UsersAlreadyFriends",
    "LinkedIdentifierAlreadyClaimed",
    "CustomIdNotLinked",
    "TotalDataSizeExceeded",
    "DeleteKeyConflict",
    "InvalidXboxLiveToken",
    "ExpiredXboxLiveToken",
    "ResettableStatisticVersionRequired",
    "NotAuthorizedByTitle",
    "NoPartnerEnabled",
    "InvalidPartnerResponse",
    "APINotEnabledForGameServerAccess",
    "StatisticNotFound",
    "StatisticNameConflict",
    "StatisticVersionClosedForWrites",
    "StatisticVersionInvalid",
    "APIClientRequestRateLimitExceeded",
    "InvalidJSONContent",
    "InvalidDropTable",
    "StatisticVersionAlreadyIncrementedForScheduledInterval",
    "StatisticCountLimitExceeded",
    "StatisticVersionIncrementRateExceeded",
    "ContainerKeyInvalid",
    "CloudScriptExecutionTimeLimitExceeded",
    "NoWritePermissionsForEvent",
    "CloudScriptFunctionArgumentSizeExceeded",
    "CloudScriptAPIRequestCountExceeded",
    "CloudScriptAPIRequestError",
    "CloudScriptHTTPRequestError",
    "InsufficientGuildRole",
    "GuildNotFound",
    "OverLimit",
    "EventNotFound",
    "InvalidEventField",
    "InvalidEventName",
    "CatalogNotConfigured",
    "OperationNotSupportedForPlatform",
    "SegmentNotFound",
    "StoreNotFound",
    "InvalidStatisticName",
    "TitleNotQualifiedForLimit",
    "InvalidServiceLimitLevel",
    "ServiceLimitLevelInTransition",
    "CouponAlreadyRedeemed",
    "GameServerBuildSizeLimitExceeded",
    "GameServerBuildCountLimitExceeded",
    "VirtualCurrencyCountLimitExceeded",
    "VirtualCurrencyCodeExists",
    "TitleNewsItemCountLimitExceeded",
    "InvalidTwitchToken",
    "TwitchResponseError",
    "ProfaneDisplayName",
    "UserAlreadyAdded",
    "InvalidVirtualCurrencyCode",
    "VirtualCurrencyCannotBeDeleted",
    "IdentifierAlreadyClaimed",
    "IdentifierNotLinked",
    "InvalidContinuationToken",
    "ExpiredContinuationToken",
    "InvalidSegment",
    "InvalidSessionId",
    "SessionLogNotFound",
    "InvalidSearchTerm",
    "TwoFactorAuthenticationTokenRequired",
    "GameServerHostCountLimitExceeded",
    "PlayerTagCountLimitExceeded",
    "RequestAlreadyRunning",
    "ActionGroupNotFound",
    "MaximumSegmentBulkActionJobsRunning",
    "NoActionsOnPlayersInSegmentJob",
    "DuplicateStatisticName",
    "ScheduledTaskNameConflict",
    "ScheduledTaskCreateConflict",
    "InvalidScheduledTaskName",
    "InvalidTaskSchedule",
    "SteamNotEnabledForTitle",
    "LimitNotAnUpgradeOption",
    "NoSecretKeyEnabledForCloudScript",
    "TaskNotFound",
    "TaskInstanceNotFound",
    "InvalidIdentityProviderId",
    "MisconfiguredIdentityProvider",
    "InvalidScheduledTaskType",
    "BillingInformationRequired",
    "LimitedEditionItemUnavailable",
    "InvalidAdPlacementAndReward",
    "AllAdPlacementViewsAlreadyConsumed",
    "GoogleOAuthNotConfiguredForTitle",
    "GoogleOAuthError",
    "UserNotFriend",
    "InvalidSignature",
    "InvalidPublicKey",
    "GoogleOAuthNoIdTokenIncludedInResponse",
    "StatisticUpdateInProgress",
    "LeaderboardVersionNotAvailable",
    "StatisticAlreadyHasPrizeTable",
    "PrizeTableHasOverlappingRanks",
    "PrizeTableHasMissingRanks",
    "PrizeTableRankStartsAtZero",
    "InvalidStatistic",
    "ExpressionParseFailure",
    "ExpressionInvokeFailure",
    "ExpressionTooLong",
    "DataUpdateRateExceeded",
    "RestrictedEmailDomain",
    "EncryptionKeyDisabled",
    "EncryptionKeyMissing",
    "EncryptionKeyBroken",
    "NoSharedSecretKeyConfigured",
    "SecretKeyNotFound",
    "PlayerSecretAlreadyConfigured",
    "APIRequestsDisabledForTitle",
    "InvalidSharedSecretKey",
    "PrizeTableHasNoRanks",
    "ProfileDoesNotExist",
    "ContentS3OriginBucketNotConfigured",
    "InvalidEnvironmentForReceipt",
    "EncryptedRequestNotAllowed",
    "SignedRequestNotAllowed",
    "RequestViewConstraintParamsNotAllowed",
    "BadPartnerConfiguration",
    "XboxBPCertificateFailure",
    "XboxXASSExchangeFailure",
    "InvalidEntityId",
    "StatisticValueAggregationOverflow",
    "EmailMessageFromAddressIsMissing",
    "EmailMessageToAddressIsMissing",
    "SmtpServerAuthenticationError",
    "SmtpServerLimitExceeded",
    "SmtpServerInsufficientStorage",
    "SmtpServerCommunicationError",
    "SmtpServerGeneralFailure",
    "EmailClientTimeout",
    "EmailClientCanceledTask",
    "EmailTemplateMissing",
    "InvalidHostForTitleId",
    "EmailConfirmationTokenDoesNotExist",
    "EmailConfirmationTokenExpired",
    "AccountDeleted",
    "PlayerSecretNotConfigured",
    "InvalidSignatureTime",
    "NoContactEmailAddressFound",
    "InvalidAuthToken",
    "AuthTokenDoesNotExist",
    "AuthTokenExpired",
    "AuthTokenAlreadyUsedToResetPassword",
    "MembershipNameTooLong",
    "MembershipNotFound",
    "GoogleServiceAccountInvalid",
    "GoogleServiceAccountParseFailure",
    "EntityTokenMissing",
    "EntityTokenInvalid",
    "EntityTokenExpired",
    "EntityTokenRevoked",
    "InvalidProductForSubscription",
    "XboxInaccessible",
    "SubscriptionAlreadyTaken",
    "SmtpAddonNotEnabled",
    "APIConcurrentRequestLimitExceeded",
    "XboxRejectedXSTSExchangeRequest",
    "VariableNotDefined",
    "TemplateVersionNotDefined",
    "FileTooLarge",
    "TitleDeleted",
    "TitleContainsUserAccounts",
    "TitleDeletionPlayerCleanupFailure",
    "EntityFileOperationPending",
    "NoEntityFileOperationPending",
    "EntityProfileVersionMismatch",
    "TemplateVersionTooOld",
    "MembershipDefinitionInUse",
    "PaymentPageNotConfigured",
    "FailedLoginAttemptRateLimitExceeded",
    "EntityBlockedByGroup",
    "RoleDoesNotExist",
    "EntityIsAlreadyMember",
    "DuplicateRoleId",
    "GroupInvitationNotFound",
    "GroupApplicationNotFound",
    "OutstandingInvitationAcceptedInstead",
    "OutstandingApplicationAcceptedInstead",
    "RoleIsGroupDefaultMember",
    "RoleIsGroupAdmin",
    "RoleNameNotAvailable",
    "GroupNameNotAvailable",
    "EmailReportAlreadySent",
    "EmailReportRecipientBlacklisted",
    "EventNamespaceNotAllowed",
    "EventEntityNotAllowed",
    "InvalidEntityType",
    "NullTokenResultFromAad",
    "InvalidTokenResultFromAad",
    "NoValidCertificateForAad",
    "InvalidCertificateForAad",
    "DuplicateDropTableId",
    "MultiplayerServerError",
    "MultiplayerServerTooManyRequests",
    "MultiplayerServerNoContent",
    "MultiplayerServerBadRequest",
    "MultiplayerServerUnauthorized",
    "MultiplayerServerForbidden",
    "MultiplayerServerNotFound",
    "MultiplayerServerConflict",
    "MultiplayerServerInternalServerError",
    "MultiplayerServerUnavailable",
    "ExplicitContentDetected",
    "PIIContentDetected",
    "InvalidScheduledTaskParameter",
    "PerEntityEventRateLimitExceeded",
    "TitleDefaultLanguageNotSet",
    "EmailTemplateMissingDefaultVersion",
    "FacebookInstantGamesIdNotLinked",
    "InvalidFacebookInstantGamesSignature",
    "FacebookInstantGamesAuthNotConfiguredForTitle",
    "EntityProfileConstraintValidationFailed",
    "TelemetryIngestionKeyPending",
    "TelemetryIngestionKeyNotFound",
    "StatisticChildNameInvalid",
    "DataIntegrityError",
    "VirtualCurrencyCannotBeSetToOlderVersion",
    "VirtualCurrencyMustBeWithinIntegerRange",
    "EmailTemplateInvalidSyntax",
    "EmailTemplateMissingCallback",
    "PushNotificationTemplateInvalidPayload",
    "InvalidLocalizedPushNotificationLanguage",
    "MissingLocalizedPushNotificationMessage",
    "PushNotificationTemplateMissingPlatformPayload",
    "PushNotificationTemplatePayloadContainsInvalidJson",
    "PushNotificationTemplateContainsInvalidIosPayload",
    "PushNotificationTemplateContainsInvalidAndroidPayload",
    "PushNotificationTemplateIosPayloadMissingNotificationBody",
    "PushNotificationTemplateAndroidPayloadMissingNotificationBody",
    "PushNotificationTemplateNotFound",
    "PushNotificationTemplateMissingDefaultVersion",
    "PushNotificationTemplateInvalidSyntax",
    "PushNotificationTemplateNoCustomPayloadForV1",
    "NoLeaderboardForStatistic",
    "TitleNewsMissingDefaultLanguage",
    "TitleNewsNotFound",
    "TitleNewsDuplicateLanguage",
    "TitleNewsMissingTitleOrBody",
    "TitleNewsInvalidLanguage",
    "EmailRecipientBlacklisted",
    "InvalidGameCenterAuthRequest",
    "GameCenterAuthenticationFailed",
    "CannotEnablePartiesForTitle",
    "PartyError",
    "PartyRequests",
    "PartyNoContent",
    "PartyBadRequest",
    "PartyUnauthorized",
    "PartyForbidden",
    "PartyNotFound",
    "PartyConflict",
    "PartyInternalServerError",
    "PartyUnavailable",
    "PartyTooManyRequests",
    "PushNotificationTemplateMissingName",
    "CannotEnableMultiplayerServersForTitle",
    "WriteAttemptedDuringExport",
    "MultiplayerServerTitleQuotaCoresExceeded",
    "AutomationRuleNotFound",
    "EntityAPIKeyLimitExceeded",
    "EntityAPIKeyNotFound",
    "EntityAPIKeyOrSecretInvalid",
    "EconomyServiceUnavailable",
    "EconomyServiceInternalError",
    "QueryRateLimitExceeded",
    "EntityAPIKeyCreationDisabledForEntity",
    "ForbiddenByEntityPolicy",
    "UpdateInventoryRateLimitExceeded",
    "StudioCreationRateLimited",
    "StudioCreationInProgress",
    "DuplicateStudioName",
    "StudioNotFound",
    "StudioDeleted",
    "StudioDeactivated",
    "StudioActivated",
    "TitleCreationRateLimited",
    "TitleCreationInProgress",
    "DuplicateTitleName",
    "TitleActivationRateLimited",
    "TitleActivationInProgress",
    "TitleDeactivated",
    "TitleActivated",
    "CloudScriptAzureFunctionsExecutionTimeLimitExceeded",
    "CloudScriptAzureFunctionsArgumentSizeExceeded",
    "CloudScriptAzureFunctionsReturnSizeExceeded",
    "CloudScriptAzureFunctionsHTTPRequestError",
    "VirtualCurrencyBetaGetError",
    "VirtualCurrencyBetaCreateError",
    "VirtualCurrencyBetaInitialDepositSaveError",
    "VirtualCurrencyBetaSaveError",
    "VirtualCurrencyBetaDeleteError",
    "VirtualCurrencyBetaRestoreError",
    "VirtualCurrencyBetaSaveConflict",
    "VirtualCurrencyBetaUpdateError",
    "InsightsManagementDatabaseNotFound",
    "InsightsManagementOperationNotFound",
    "InsightsManagementErrorPendingOperationExists",
    "InsightsManagementSetPerformanceLevelInvalidParameter",
    "InsightsManagementSetStorageRetentionInvalidParameter",
    "InsightsManagementGetStorageUsageInvalidParameter",
    "InsightsManagementGetOperationStatusInvalidParameter",
    "DuplicatePurchaseTransactionId",
    "EvaluationModePlayerCountExceeded",
    "GetPlayersInSegmentRateLimitExceeded",
    "CloudScriptFunctionNameSizeExceeded",
    "InsightsManagementTitleInEvaluationMode",
    "CloudScriptAzureFunctionsQueueRequestError",
    "EvaluationModeTitleCountExceeded",
    "InsightsManagementTitleNotInFlight",
    "LimitNotFound",
    "LimitNotAvailableViaAPI",
    "InsightsManagementSetStorageRetentionBelowMinimum",
    "InsightsManagementSetStorageRetentionAboveMaximum",
    "AppleNotEnabledForTitle",
    "InsightsManagementNewActiveEventExportLimitInvalid",
    "InsightsManagementSetPerformanceRateLimited",
    "PartyRequestsThrottledFromRateLimiter",
    "XboxServiceTooManyRequests",
    "NintendoSwitchNotEnabledForTitle",
    "RequestMultiplayerServersThrottledFromRateLimiter",
    "TitleDataOverrideNotFound",
    "DuplicateKeys",
    "WasNotCreatedWithCloudRoot",
    "LegacyMultiplayerServersDeprecated",
    "VirtualCurrencyCurrentlyUnavailable",
    "SteamUserNotFound",
    "ElasticSearchOperationFailed",
    "MatchmakingEntityInvalid",
    "MatchmakingPlayerAttributesInvalid",
    "MatchmakingQueueNotFound",
    "MatchmakingMatchNotFound",
    "MatchmakingTicketNotFound",
    "MatchmakingAlreadyJoinedTicket",
    "MatchmakingTicketAlreadyCompleted",
    "MatchmakingQueueConfigInvalid",
    "MatchmakingMemberProfileInvalid",
    "NintendoSwitchDeviceIdNotLinked",
    "MatchmakingNotEnabled",
    "MatchmakingPlayerAttributesTooLarge",
    "MatchmakingNumberOfPlayersInTicketTooLarge",
    "MatchmakingAttributeInvalid",
    "MatchmakingPlayerHasNotJoinedTicket",
    "MatchmakingRateLimitExceeded",
    "MatchmakingTicketMembershipLimitExceeded",
    "MatchmakingUnauthorized",
    "MatchmakingQueueLimitExceeded",
    "MatchmakingRequestTypeMismatch",
    "MatchmakingBadRequest",
    "TitleConfigNotFound",
    "TitleConfigUpdateConflict",
    "TitleConfigSerializationError",
    "CatalogApiNotImplemented",
    "CatalogEntityInvalid",
    "CatalogTitleIdMissing",
    "CatalogPlayerIdMissing",
    "CatalogClientIdentityInvalid",
    "CatalogOneOrMoreFilesInvalid",
    "CatalogItemMetadataInvalid",
    "CatalogItemIdInvalid",
    "CatalogSearchParameterInvalid",
    "CatalogFeatureDisabled",
    "CatalogConfigInvalid",
    "CatalogItemTypeInvalid",
    "CatalogBadRequest",
    "CatalogTooManyRequests",
    "ExportInvalidStatusUpdate",
    "ExportInvalidPrefix",
    "ExportBlobContainerDoesNotExist",
    "ExportNotFound",
    "ExportCouldNotUpdate",
    "ExportInvalidStorageType",
    "ExportAmazonBucketDoesNotExist",
    "ExportInvalidBlobStorage",
    "ExportKustoException",
    "ExportKustoConnectionFailed",
    "ExportUnknownError",
    "ExportCantEditPendingExport",
    "ExportLimitExports",
    "ExportLimitEvents",
    "ExportInvalidPartitionStatusModification",
    "ExportCouldNotCreate",
    "ExportNoBackingDatabaseFound",
    "ExportCouldNotDelete",
    "ExportCannotDetermineEventQuery",
    "ExportInvalidQuerySchemaModification",
    "ExportQuerySchemaMissingRequiredColumns",
    "ExportCannotParseQuery",
    "ExportControlCommandsNotAllowed",
    "ExportQueryMissingTableReference",
    "ExplorerBasicInvalidQueryName",
    "ExplorerBasicInvalidQueryDescription",
    "ExplorerBasicInvalidQueryConditions",
    "ExplorerBasicInvalidQueryStartDate",
    "ExplorerBasicInvalidQueryEndDate",
    "ExplorerBasicInvalidQueryGroupBy",
    "ExplorerBasicInvalidQueryAggregateType",
    "ExplorerBasicInvalidQueryAggregateProperty",
    "ExplorerBasicLoadQueriesError",
    "ExplorerBasicLoadQueryError",
    "ExplorerBasicCreateQueryError",
    "ExplorerBasicDeleteQueryError",
    "ExplorerBasicUpdateQueryError",
    "ExplorerBasicSavedQueriesLimit",
    "ExplorerBasicSavedQueryNotFound",
    "TitleNotEnabledForParty",
    "PartyVersionNotFound",
    "MultiplayerServerBuildReferencedByMatchmakingQueue",
    "ExperimentationExperimentStopped",
    "ExperimentationExperimentRunning",
    "ExperimentationExperimentNotFound",
    "ExperimentationExperimentNeverStarted",
    "ExperimentationExperimentDeleted",
    "ExperimentationClientTimeout",
    "ExperimentationInvalidVariantConfiguration",
    "ExperimentationInvalidVariableConfiguration",
    "ExperimentInvalidId",
    "ExperimentationNoScorecard",
    "ExperimentationTreatmentAssignmentFailed",
    "ExperimentationTreatmentAssignmentDisabled",
    "ExperimentationInvalidDuration",
    "ExperimentationMaxExperimentsReached",
    "ExperimentationExperimentSchedulingInProgress",
    "ExperimentationInvalidEndDate",
    "ExperimentationInvalidStartDate",
    "ExperimentationMaxDurationExceeded",
    "ExperimentationExclusionGroupNotFound",
    "ExperimentationExclusionGroupInsufficientCapacity",
    "ExperimentationExclusionGroupCannotDelete",
    "ExperimentationExclusionGroupInvalidTrafficAllocation",
    "ExperimentationExclusionGroupInvalidName",
    "MaxActionDepthExceeded",
    "TitleNotOnUpdatedPricingPlan",
    "SegmentManagementTitleNotInFlight",
    "SegmentManagementNoExpressionTree",
    "SegmentManagementTriggerActionCountOverLimit",
    "SegmentManagementSegmentCountOverLimit",
    "SegmentManagementInvalidSegmentId",
    "SegmentManagementInvalidInput",
    "SegmentManagementInvalidSegmentName",
    "DeleteSegmentRateLimitExceeded",
    "CreateSegmentRateLimitExceeded",
    "UpdateSegmentRateLimitExceeded",
    "GetSegmentsRateLimitExceeded",
    "SnapshotNotFound",
    "InventoryApiNotImplemented"
  ]
}