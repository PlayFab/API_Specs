{
  "name": "Client",
  "url": "/Client",
  "description": "APIs which provide the full range of PlayFab features available to the client - authentication, account and data management, inventory, friends, matchmaking, reporting, and platform-specific functionality",
  "datatypes": {
    "AcceptTradeRequest": {
      "name": "AcceptTradeRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "OfferingPlayerId",
          "description": "Player who opened trade.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "TradeId",
          "description": "Trade identifier.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "AcceptedInventoryInstanceIds",
          "description": "Items from the accepting player's inventory in exchange for the offered items in the trade. In the case of a gift, this will be null.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "AcceptTradeResponse": {
      "name": "AcceptTradeResponse",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Trade",
          "jsontype": "Object",
          "actualtype": "TradeInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "AddFriendRequest": {
      "name": "AddFriendRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "FriendPlayFabId",
          "description": "PlayFab identifier of the user to attempt to add to the local user's friend list.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendUsername",
          "description": "PlayFab username of the user to attempt to add to the local user's friend list.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendEmail",
          "description": "Email address of the user to attempt to add to the local user's friend list.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendTitleDisplayName",
          "description": "Title-specific display name of the user to attempt to add to the local user's friend list.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "AddFriendResult": {
      "name": "AddFriendResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Created",
          "description": "True if the friend request was processed successfully.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "AddSharedGroupMembersRequest": {
      "name": "AddSharedGroupMembersRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SharedGroupId",
          "description": "Unique identifier for the shared group.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PlayFabIds",
          "description": "An array of unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "AddSharedGroupMembersResult": {
      "name": "AddSharedGroupMembersResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "AddUsernamePasswordRequest": {
      "name": "AddUsernamePasswordRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Username",
          "description": "PlayFab username for the account (3-20 characters)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Email",
          "description": "User email address attached to their account",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Password",
          "description": "Password for the PlayFab account (6-30 characters)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "AddUsernamePasswordResult": {
      "name": "AddUsernamePasswordResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Username",
          "description": "PlayFab unique user name.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "AddUserVirtualCurrencyRequest": {
      "name": "AddUserVirtualCurrencyRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "VirtualCurrency",
          "description": "Name of the virtual currency which is to be incremented.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Amount",
          "description": "Amount to be added to the user balance of the specified virtual currency.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "AndroidDevicePushNotificationRegistrationRequest": {
      "name": "AndroidDevicePushNotificationRegistrationRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "DeviceToken",
          "description": "Registration ID provided by the Google Cloud Messaging service when the title registered to receive push notifications (see the GCM documentation, here: http://developer.android.com/google/gcm/client.html).",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "SendPushNotificationConfirmation",
          "description": "If true, send a test push message immediately after sucessful registration. Defaults to false.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "ConfirmationMessege",
          "description": "Message to display when confirming push notification.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "AndroidDevicePushNotificationRegistrationResult": {
      "name": "AndroidDevicePushNotificationRegistrationResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "AttributeInstallRequest": {
      "name": "AttributeInstallRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Idfa",
          "description": "The IdentifierForAdvertisers for iOS Devices.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Android_Id",
          "description": "The Android Id for this Android device.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "AttributeInstallResult": {
      "name": "AttributeInstallResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "CancelTradeRequest": {
      "name": "CancelTradeRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "TradeId",
          "description": "Trade identifier.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "CancelTradeResponse": {
      "name": "CancelTradeResponse",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Trade",
          "jsontype": "Object",
          "actualtype": "TradeInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CartItem": {
      "name": "CartItem",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "ItemId",
          "description": "Unique identifier for the catalog item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemClass",
          "description": "Class name to which catalog item belongs.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemInstanceId",
          "description": "Unique instance identifier for this catalog item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "Display name for the catalog item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Description",
          "description": "Description of the catalog item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyPrices",
          "description": "Cost of the catalog item for each applicable virtual currency.",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "RealCurrencyPrices",
          "description": "Cost of the catalog item for each applicable real world currency.",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "VCAmount",
          "description": "Amount of each applicable virtual currency which will be received as a result of purchasing this catalog item.",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "CatalogItem": {
      "name": "CatalogItem",
      "classNameSpace": "PlayFab.DataModel",
      "assembly": "DataModel",
      "description": "A purchasable item from the item catalog",
      "sortKey": "ItemId",
      "properties": [
        {
          "name": "ItemId",
          "description": "unique identifier for this item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemClass",
          "description": "class to which the item belongs",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "catalog version for this item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "text name for the item, to show in-game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Description",
          "description": "text description of item, to show in-game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyPrices",
          "description": "price of this item in virtual currencies and \"RM\" (the base Real Money purchase price, in USD pennies)",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "RealCurrencyPrices",
          "description": "override prices for this item for specific currencies",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "Tags",
          "description": "list of item tags",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomData",
          "description": "game specific custom data",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Consumable",
          "description": "defines the consumable properties (number of uses, timeout) for the item",
          "jsontype": "Object",
          "actualtype": "CatalogItemConsumableInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Container",
          "description": "defines the container properties for the item - what items it contains, including random drop tables and virtual currencies, and what item (if any) is required to open it via the UnlockContainerItem API",
          "jsontype": "Object",
          "actualtype": "CatalogItemContainerInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Bundle",
          "description": "defines the bundle properties for the item - bundles are items which contain other items, including random drop tables and virtual currencies",
          "jsontype": "Object",
          "actualtype": "CatalogItemBundleInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "CanBecomeCharacter",
          "description": "if true, then an item instance of this type can be used to grant a character to a user.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "IsStackable",
          "description": "if true, then only one item instance of this type will exist and its remaininguses will be incremented instead. RemainingUses will cap out at Int32.Max (2,147,483,647). All subsequent increases will be discarded",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "IsTradable",
          "description": "if true, then an item instance of this type can be traded between players using the trading APIs",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "ItemImageUrl",
          "description": "URL to the item image. For Facebook purchase to display the image on the item purchase page, this must be set to an HTTP URL.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CatalogItemBundleInfo": {
      "name": "CatalogItemBundleInfo",
      "classNameSpace": "PlayFab.DataModel",
      "assembly": "DataModel",
      "properties": [
        {
          "name": "BundledItems",
          "description": "unique ItemId values for all items which will be added to the player inventory when the bundle is added",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundledResultTables",
          "description": "unique TableId values for all RandomResultTable objects which are part of the bundle (random tables will be resolved and add the relevant items to the player inventory when the bundle is added)",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundledVirtualCurrencies",
          "description": "virtual currency types and balances which will be added to the player inventory when the bundle is added",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "CatalogItemConsumableInfo": {
      "name": "CatalogItemConsumableInfo",
      "classNameSpace": "PlayFab.DataModel",
      "assembly": "DataModel",
      "properties": [
        {
          "name": "UsageCount",
          "description": "number of times this object can be used, after which it will be removed from the player inventory",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "UsagePeriod",
          "description": "duration in seconds for how long the item will remain in the player inventory - once elapsed, the item will be removed",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "UsagePeriodGroup",
          "description": "all inventory item instances in the player inventory sharing a non-null UsagePeriodGroup have their UsagePeriod values added together, and share the result - when that period has elapsed, all the items in the group will be removed",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CatalogItemContainerInfo": {
      "name": "CatalogItemContainerInfo",
      "classNameSpace": "PlayFab.DataModel",
      "assembly": "DataModel",
      "description": "Containers are inventory items that can hold other items defined in the catalog, as well as virtual currency, which is added to the player inventory when the container is unlocked, using the UnlockContainerItem API. The items can be anything defined in the catalog, as well as RandomResultTable objects which will be resolved when the container is unlocked. Containers and their keys should be defined as Consumable (having a limited number of uses) in their catalog defintiions, unless the intent is for the player to be able to re-use them infinitely.",
      "properties": [
        {
          "name": "KeyItemId",
          "description": "ItemId for the catalog item used to unlock the container, if any (if not specified, a call to UnlockContainerItem will open the container, adding the contents to the player inventory and currency balances)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemContents",
          "description": "unique ItemId values for all items which will be added to the player inventory, once the container has been unlocked",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ResultTableContents",
          "description": "unique TableId values for all RandomResultTable objects which are part of the container (once unlocked, random tables will be resolved and add the relevant items to the player inventory)",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyContents",
          "description": "virtual currency types and balances which will be added to the player inventory when the container is unlocked",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "CharacterLeaderboardEntry": {
      "name": "CharacterLeaderboardEntry",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user for this leaderboard entry.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterId",
          "description": "PlayFab unique identifier of the character that belongs to the user for this leaderboard entry.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterName",
          "description": "Title-specific display name of the character for this leaderboard entry.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "Title-specific display name of the user for this leaderboard entry.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterType",
          "description": "Name of the character class for this entry.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "StatValue",
          "description": "Specific value of the user's statistic.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "Position",
          "description": "User's overall position in the leaderboard.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "CharacterResult": {
      "name": "CharacterResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CharacterId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterName",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterType",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ConfirmPurchaseRequest": {
      "name": "ConfirmPurchaseRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "OrderId",
          "description": "Purchase order identifier returned from StartPurchase.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "ConfirmPurchaseResult": {
      "name": "ConfirmPurchaseResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "OrderId",
          "description": "Purchase order identifier.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchaseDate",
          "description": "Date and time of the purchase.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Items",
          "description": "Array of items purchased.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "ConsumeItemRequest": {
      "name": "ConsumeItemRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "ItemInstanceId",
          "description": "Unique instance identifier of the item to be consumed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ConsumeCount",
          "description": "Number of uses to consume from the item.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ConsumeItemResult": {
      "name": "ConsumeItemResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "ItemInstanceId",
          "description": "Unique instance identifier of the item with uses consumed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "RemainingUses",
          "description": "Number of uses remaining on the item.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "ConsumePSNEntitlementsRequest": {
      "name": "ConsumePSNEntitlementsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "Which catalog to match granted entitlements against. If null, defaults to title default catalog",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServiceLabel",
          "description": "Id of the PSN service label to consume entitlements from",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "ConsumePSNEntitlementsResult": {
      "name": "ConsumePSNEntitlementsResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "ItemsGranted",
          "description": "Array of items granted to the player as a result of consuming entitlements.",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CreateSharedGroupRequest": {
      "name": "CreateSharedGroupRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SharedGroupId",
          "description": "Unique identifier for the shared group (a random identifier will be assigned, if one is not specified).",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CreateSharedGroupResult": {
      "name": "CreateSharedGroupResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SharedGroupId",
          "description": "Unique identifier for the shared group.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "Currency": {
      "name": "Currency",
      "classNameSpace": "Utility",
      "assembly": "Utility",
      "isenum": true,
      "enumvalues": [
        {
          "name": "AED"
        },
        {
          "name": "AFN"
        },
        {
          "name": "ALL"
        },
        {
          "name": "AMD"
        },
        {
          "name": "ANG"
        },
        {
          "name": "AOA"
        },
        {
          "name": "ARS"
        },
        {
          "name": "AUD"
        },
        {
          "name": "AWG"
        },
        {
          "name": "AZN"
        },
        {
          "name": "BAM"
        },
        {
          "name": "BBD"
        },
        {
          "name": "BDT"
        },
        {
          "name": "BGN"
        },
        {
          "name": "BHD"
        },
        {
          "name": "BIF"
        },
        {
          "name": "BMD"
        },
        {
          "name": "BND"
        },
        {
          "name": "BOB"
        },
        {
          "name": "BRL"
        },
        {
          "name": "BSD"
        },
        {
          "name": "BTN"
        },
        {
          "name": "BWP"
        },
        {
          "name": "BYR"
        },
        {
          "name": "BZD"
        },
        {
          "name": "CAD"
        },
        {
          "name": "CDF"
        },
        {
          "name": "CHF"
        },
        {
          "name": "CLP"
        },
        {
          "name": "CNY"
        },
        {
          "name": "COP"
        },
        {
          "name": "CRC"
        },
        {
          "name": "CUC"
        },
        {
          "name": "CUP"
        },
        {
          "name": "CVE"
        },
        {
          "name": "CZK"
        },
        {
          "name": "DJF"
        },
        {
          "name": "DKK"
        },
        {
          "name": "DOP"
        },
        {
          "name": "DZD"
        },
        {
          "name": "EGP"
        },
        {
          "name": "ERN"
        },
        {
          "name": "ETB"
        },
        {
          "name": "EUR"
        },
        {
          "name": "FJD"
        },
        {
          "name": "FKP"
        },
        {
          "name": "GBP"
        },
        {
          "name": "GEL"
        },
        {
          "name": "GGP"
        },
        {
          "name": "GHS"
        },
        {
          "name": "GIP"
        },
        {
          "name": "GMD"
        },
        {
          "name": "GNF"
        },
        {
          "name": "GTQ"
        },
        {
          "name": "GYD"
        },
        {
          "name": "HKD"
        },
        {
          "name": "HNL"
        },
        {
          "name": "HRK"
        },
        {
          "name": "HTG"
        },
        {
          "name": "HUF"
        },
        {
          "name": "IDR"
        },
        {
          "name": "ILS"
        },
        {
          "name": "IMP"
        },
        {
          "name": "INR"
        },
        {
          "name": "IQD"
        },
        {
          "name": "IRR"
        },
        {
          "name": "ISK"
        },
        {
          "name": "JEP"
        },
        {
          "name": "JMD"
        },
        {
          "name": "JOD"
        },
        {
          "name": "JPY"
        },
        {
          "name": "KES"
        },
        {
          "name": "KGS"
        },
        {
          "name": "KHR"
        },
        {
          "name": "KMF"
        },
        {
          "name": "KPW"
        },
        {
          "name": "KRW"
        },
        {
          "name": "KWD"
        },
        {
          "name": "KYD"
        },
        {
          "name": "KZT"
        },
        {
          "name": "LAK"
        },
        {
          "name": "LBP"
        },
        {
          "name": "LKR"
        },
        {
          "name": "LRD"
        },
        {
          "name": "LSL"
        },
        {
          "name": "LYD"
        },
        {
          "name": "MAD"
        },
        {
          "name": "MDL"
        },
        {
          "name": "MGA"
        },
        {
          "name": "MKD"
        },
        {
          "name": "MMK"
        },
        {
          "name": "MNT"
        },
        {
          "name": "MOP"
        },
        {
          "name": "MRO"
        },
        {
          "name": "MUR"
        },
        {
          "name": "MVR"
        },
        {
          "name": "MWK"
        },
        {
          "name": "MXN"
        },
        {
          "name": "MYR"
        },
        {
          "name": "MZN"
        },
        {
          "name": "NAD"
        },
        {
          "name": "NGN"
        },
        {
          "name": "NIO"
        },
        {
          "name": "NOK"
        },
        {
          "name": "NPR"
        },
        {
          "name": "NZD"
        },
        {
          "name": "OMR"
        },
        {
          "name": "PAB"
        },
        {
          "name": "PEN"
        },
        {
          "name": "PGK"
        },
        {
          "name": "PHP"
        },
        {
          "name": "PKR"
        },
        {
          "name": "PLN"
        },
        {
          "name": "PYG"
        },
        {
          "name": "QAR"
        },
        {
          "name": "RON"
        },
        {
          "name": "RSD"
        },
        {
          "name": "RUB"
        },
        {
          "name": "RWF"
        },
        {
          "name": "SAR"
        },
        {
          "name": "SBD"
        },
        {
          "name": "SCR"
        },
        {
          "name": "SDG"
        },
        {
          "name": "SEK"
        },
        {
          "name": "SGD"
        },
        {
          "name": "SHP"
        },
        {
          "name": "SLL"
        },
        {
          "name": "SOS"
        },
        {
          "name": "SPL"
        },
        {
          "name": "SRD"
        },
        {
          "name": "STD"
        },
        {
          "name": "SVC"
        },
        {
          "name": "SYP"
        },
        {
          "name": "SZL"
        },
        {
          "name": "THB"
        },
        {
          "name": "TJS"
        },
        {
          "name": "TMT"
        },
        {
          "name": "TND"
        },
        {
          "name": "TOP"
        },
        {
          "name": "TRY"
        },
        {
          "name": "TTD"
        },
        {
          "name": "TVD"
        },
        {
          "name": "TWD"
        },
        {
          "name": "TZS"
        },
        {
          "name": "UAH"
        },
        {
          "name": "UGX"
        },
        {
          "name": "USD"
        },
        {
          "name": "UYU"
        },
        {
          "name": "UZS"
        },
        {
          "name": "VEF"
        },
        {
          "name": "VND"
        },
        {
          "name": "VUV"
        },
        {
          "name": "WST"
        },
        {
          "name": "XAF"
        },
        {
          "name": "XCD"
        },
        {
          "name": "XDR"
        },
        {
          "name": "XOF"
        },
        {
          "name": "XPF"
        },
        {
          "name": "YER"
        },
        {
          "name": "ZAR"
        },
        {
          "name": "ZMW"
        },
        {
          "name": "ZWD"
        }
      ]
    },
    "CurrentGamesRequest": {
      "name": "CurrentGamesRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameAcquisition",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Region",
          "description": "region to check for game instances",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "BuildVersion",
          "description": "version of build to match against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GameMode",
          "description": "game mode to look for (optional)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "StatisticName",
          "description": "statistic name to find statistic-based matches (optional)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CurrentGamesResult": {
      "name": "CurrentGamesResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameAcquisition",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Games",
          "description": "array of games found",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "GameInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PlayerCount",
          "description": "total number of players across all servers",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "GameCount",
          "description": "number of games running",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "EmptyResult": {
      "name": "EmptyResult",
      "classNameSpace": "System.Web.Mvc",
      "assembly": "System.Web.Mvc",
      "properties": []
    },
    "FacebookPlayFabIdPair": {
      "name": "FacebookPlayFabIdPair",
      "classNameSpace": "PlayFab.WebAPIModels",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "FacebookId",
          "description": "Unique Facebook identifier for a user.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab identifier for a user, or null if no PlayFab account is linked to the Facebook identifier.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "FriendInfo": {
      "name": "FriendInfo",
      "classNameSpace": "PlayFab.WebAPIModels",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "FriendPlayFabId",
          "description": "PlayFab unique identifier for this friend.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Username",
          "description": "PlayFab unique username for this friend.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TitleDisplayName",
          "description": "Title-specific display name for this friend.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Tags",
          "description": "Tags which have been associated with this friend.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CurrentMatchmakerLobbyId",
          "description": "Unique lobby identifier of the Game Server Instance to which this player is currently connected.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FacebookInfo",
          "description": "Available Facebook information (if the user and PlayFab friend are also connected in Facebook).",
          "jsontype": "Object",
          "actualtype": "UserFacebookInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SteamInfo",
          "description": "Available Steam information (if the user and PlayFab friend are also connected in Steam).",
          "jsontype": "Object",
          "actualtype": "UserSteamInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "GameCenterInfo",
          "description": "Available Game Center information (if the user and PlayFab friend are also connected in Game Center).",
          "jsontype": "Object",
          "actualtype": "UserGameCenterInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GameCenterPlayFabIdPair": {
      "name": "GameCenterPlayFabIdPair",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "GameCenterId",
          "description": "Unique Game Center identifier for a user.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab identifier for a user, or null if no PlayFab account is linked to the Game Center identifier.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GameInfo": {
      "name": "GameInfo",
      "classNameSpace": "PlayFab.WebAPIModels.GameAcquisition",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Region",
          "description": "region to which this server is associated",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "LobbyID",
          "description": "unique lobby identifier for this game server",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BuildVersion",
          "description": "build version this server is running",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GameMode",
          "description": "game mode this server is running",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "StatisticName",
          "description": "stastic used to match this game in player statistic matchmaking",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MaxPlayers",
          "description": "maximum players this server can support",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "PlayerUserIds",
          "description": "array of strings of current player names on this server (note that these are PlayFab usernames, as opposed to title display names)",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "RunTime",
          "description": "duration in seconds this server has been running",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "GameServerState",
          "description": "game specific string denoting server configuration",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GameServerRegionsRequest": {
      "name": "GameServerRegionsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameAcquisition",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "BuildVersion",
          "description": "version of game server for which stats are being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "TitleId",
          "description": "Unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GameServerRegionsResult": {
      "name": "GameServerRegionsResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameAcquisition",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Regions",
          "description": "array of regions found matching the request parameters",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "RegionInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetAccountInfoRequest": {
      "name": "GetAccountInfoRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab identifier of the user whose info is being requested. Optional, defaults to the authenticated user if no other lookup identifier set.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Username",
          "description": "PlayFab Username for the account to find (if no PlayFabId is specified).",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Email",
          "description": "User email address for the account to find (if no Username is specified).",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TitleDisplayName",
          "description": "Title-specific username for the account to find (if no Email is set).",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetAccountInfoResult": {
      "name": "GetAccountInfoResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "AccountInfo",
          "description": "Account information for the local user.",
          "jsontype": "Object",
          "actualtype": "UserAccountInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetCatalogItemsRequest": {
      "name": "GetCatalogItemsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "Which catalog is being requested.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetCatalogItemsResult": {
      "name": "GetCatalogItemsResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Catalog",
          "description": "Array of inventory objects.",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetCharacterDataRequest": {
      "name": "GetCharacterDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab identifier of the user to load data for. Optional, defaults to yourself if not set.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Keys",
          "description": "Specific keys to search for in the custom user data.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "IfChangedFromDataVersion",
          "description": "The version that currently exists according to the caller. The call will return the data for all of the keys if the version in the system is greater than this.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "GetCharacterDataResult": {
      "name": "GetCharacterDataResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Data",
          "description": "User specific data for this title.",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "UserDataRecord",
          "isclass": true,
          "optional": true
        },
        {
          "name": "DataVersion",
          "description": "Indicates the current version of the data that has been set. This is incremented with every set call for that type of data (read-only, internal, etc). This version can be provided in Get calls to find updated data.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        }
      ]
    },
    "GetCharacterInventoryRequest": {
      "name": "GetCharacterInventoryRequest",
      "classNameSpace": "PlayFab.WebAPIModels.Inventory",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "Used to limit results to only those from a specific catalog version.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetCharacterInventoryResult": {
      "name": "GetCharacterInventoryResult",
      "classNameSpace": "PlayFab.WebAPIModels.Inventory",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose character inventory is being returned.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterId",
          "description": "Unique identifier of the character for this inventory.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Inventory",
          "description": "Array of inventory items belonging to the character.",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "Array of virtual currency balance(s) belonging to the character.",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "VirtualCurrencyRechargeTimes",
          "description": "Array of remaining times and timestamps for virtual currencies.",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "VirtualCurrencyRechargeTime",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetCharacterLeaderboardRequest": {
      "name": "GetCharacterLeaderboardRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CharacterType",
          "description": "Optional character type on which to filter the leaderboard entries.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "StatisticName",
          "description": "Unique identifier for the title-specific statistic for the leaderboard.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "StartPosition",
          "description": "First entry in the leaderboard to be retrieved.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "MaxResultsCount",
          "description": "Maximum number of entries to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "GetCharacterLeaderboardResult": {
      "name": "GetCharacterLeaderboardResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Leaderboard",
          "description": "Ordered list of leaderboard entries.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CharacterLeaderboardEntry",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetCloudScriptUrlRequest": {
      "name": "GetCloudScriptUrlRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Version",
          "description": "Cloud Script Version to use. Defaults to 1.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Testing",
          "description": "Specifies whether the URL returned should be the one for the most recently uploaded Revision of the Cloud Script (true), or the Revision most recently set to live (false). Defaults to false.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "GetCloudScriptUrlResult": {
      "name": "GetCloudScriptUrlResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Url",
          "description": "URL of the Cloud Script logic server.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetContentDownloadUrlRequest": {
      "name": "GetContentDownloadUrlRequest",
      "classNameSpace": "PlayFab.WebAPIModels.Content",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Key",
          "description": "Key of the content item to fetch, usually formatted as a path, e.g. images/a.png",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "HttpMethod",
          "description": "HTTP method to fetch item - GET or HEAD. Use HEAD when only fetching metadata. Default is GET.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ThruCDN",
          "description": "True if download through CDN. CDN provides better download bandwidth and time. However, if you want latest, non-cached version of the content, set this to false. Default is true.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "GetContentDownloadUrlResult": {
      "name": "GetContentDownloadUrlResult",
      "classNameSpace": "PlayFab.WebAPIModels.Content",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "URL",
          "description": "URL for downloading content via HTTP GET or HEAD method. The URL will expire in 1 hour.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetFriendLeaderboardAroundCurrentUserRequest": {
      "name": "GetFriendLeaderboardAroundCurrentUserRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "StatisticName",
          "description": "Statistic used to rank players for this leaderboard.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "MaxResultsCount",
          "description": "Maximum number of entries to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "IncludeSteamFriends",
          "description": "Indicates whether Steam service friends should be included in the response. Default is true.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "IncludeFacebookFriends",
          "description": "Indicates whether Facebook friends should be included in the response. Default is true.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "GetFriendLeaderboardAroundCurrentUserResult": {
      "name": "GetFriendLeaderboardAroundCurrentUserResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Leaderboard",
          "description": "Ordered listing of users and their positions in the requested leaderboard.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PlayerLeaderboardEntry",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetFriendLeaderboardRequest": {
      "name": "GetFriendLeaderboardRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "StatisticName",
          "description": "Statistic used to rank friends for this leaderboard.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "StartPosition",
          "description": "Position in the leaderboard to start this listing (defaults to the first entry).",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "MaxResultsCount",
          "description": "Maximum number of entries to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "IncludeSteamFriends",
          "description": "Indicates whether Steam service friends should be included in the response. Default is true.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "IncludeFacebookFriends",
          "description": "Indicates whether Facebook friends should be included in the response. Default is true.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "GetFriendsListRequest": {
      "name": "GetFriendsListRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "IncludeSteamFriends",
          "description": "Indicates whether Steam service friends should be included in the response. Default is true.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "IncludeFacebookFriends",
          "description": "Indicates whether Facebook friends should be included in the response. Default is true.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "GetFriendsListResult": {
      "name": "GetFriendsListResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Friends",
          "description": "Array of friends found.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "FriendInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetLeaderboardAroundCharacterRequest": {
      "name": "GetLeaderboardAroundCharacterRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "StatisticName",
          "description": "Unique identifier for the title-specific statistic for the leaderboard.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CharacterType",
          "description": "Optional character type on which to filter the leaderboard entries.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MaxResultsCount",
          "description": "Maximum number of entries to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "GetLeaderboardAroundCharacterResult": {
      "name": "GetLeaderboardAroundCharacterResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Leaderboard",
          "description": "Ordered list of leaderboard entries.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CharacterLeaderboardEntry",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetLeaderboardAroundCurrentUserRequest": {
      "name": "GetLeaderboardAroundCurrentUserRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "StatisticName",
          "description": "Statistic used to rank players for this leaderboard.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "MaxResultsCount",
          "description": "Maximum number of entries to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "GetLeaderboardAroundCurrentUserResult": {
      "name": "GetLeaderboardAroundCurrentUserResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Leaderboard",
          "description": "Ordered listing of users and their positions in the requested leaderboard.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PlayerLeaderboardEntry",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetLeaderboardForUsersCharactersRequest": {
      "name": "GetLeaderboardForUsersCharactersRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "StatisticName",
          "description": "Unique identifier for the title-specific statistic for the leaderboard.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "MaxResultsCount",
          "description": "Maximum number of entries to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "GetLeaderboardForUsersCharactersResult": {
      "name": "GetLeaderboardForUsersCharactersResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Leaderboard",
          "description": "Ordered list of leaderboard entries.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CharacterLeaderboardEntry",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetLeaderboardRequest": {
      "name": "GetLeaderboardRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "StatisticName",
          "description": "Statistic used to rank players for this leaderboard.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "StartPosition",
          "description": "Position in the leaderboard to start this listing (defaults to the first entry).",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "MaxResultsCount",
          "description": "Maximum number of entries to retrieve.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "GetLeaderboardResult": {
      "name": "GetLeaderboardResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Leaderboard",
          "description": "Ordered listing of users and their positions in the requested leaderboard.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PlayerLeaderboardEntry",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetPhotonAuthenticationTokenRequest": {
      "name": "GetPhotonAuthenticationTokenRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PhotonApplicationId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetPhotonAuthenticationTokenResult": {
      "name": "GetPhotonAuthenticationTokenResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PhotonCustomAuthenticationToken",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetPlayerStatisticsRequest": {
      "name": "GetPlayerStatisticsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "StatisticNames",
          "description": "statistics to return",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetPlayerStatisticsResult": {
      "name": "GetPlayerStatisticsResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Statistics",
          "description": "User statistics for the requested user.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "StatisticValue",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetPlayerTradesRequest": {
      "name": "GetPlayerTradesRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "StatusFilter",
          "description": "Returns only trades with the given status. If null, returns all trades.",
          "jsontype": "String",
          "actualtype": "TradeStatus",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "GetPlayerTradesResponse": {
      "name": "GetPlayerTradesResponse",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "OpenedTrades",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "TradeInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "AcceptedTrades",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "TradeInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetPlayFabIDsFromFacebookIDsRequest": {
      "name": "GetPlayFabIDsFromFacebookIDsRequest",
      "classNameSpace": "PlayFab.WebAPIModels",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "FacebookIDs",
          "description": "Array of unique Facebook identifiers for which the title needs to get PlayFab identifiers.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetPlayFabIDsFromFacebookIDsResult": {
      "name": "GetPlayFabIDsFromFacebookIDsResult",
      "classNameSpace": "PlayFab.WebAPIModels",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Data",
          "description": "Mapping of Facebook identifiers to PlayFab identifiers.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "FacebookPlayFabIdPair",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetPlayFabIDsFromGameCenterIDsRequest": {
      "name": "GetPlayFabIDsFromGameCenterIDsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "GameCenterIDs",
          "description": "Array of unique Game Center identifiers (the Player Identifier) for which the title needs to get PlayFab identifiers.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetPlayFabIDsFromGameCenterIDsResult": {
      "name": "GetPlayFabIDsFromGameCenterIDsResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Data",
          "description": "Mapping of Game Center identifiers to PlayFab identifiers.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "GameCenterPlayFabIdPair",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetPlayFabIDsFromGoogleIDsRequest": {
      "name": "GetPlayFabIDsFromGoogleIDsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "GoogleIDs",
          "description": "Array of unique Google identifiers (Google+ user IDs) for which the title needs to get PlayFab identifiers.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetPlayFabIDsFromGoogleIDsResult": {
      "name": "GetPlayFabIDsFromGoogleIDsResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Data",
          "description": "Mapping of Google identifiers to PlayFab identifiers.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "GooglePlayFabIdPair",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetPlayFabIDsFromPSNAccountIDsRequest": {
      "name": "GetPlayFabIDsFromPSNAccountIDsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PSNAccountIDs",
          "description": "Array of unique PlayStation Network identifiers for which the title needs to get PlayFab identifiers.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "IssuerId",
          "description": "Id of the PSN issuer environment. If null, defaults to 256 (production)",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "GetPlayFabIDsFromPSNAccountIDsResult": {
      "name": "GetPlayFabIDsFromPSNAccountIDsResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Data",
          "description": "Mapping of PlayStation Network identifiers to PlayFab identifiers.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PSNAccountPlayFabIdPair",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetPlayFabIDsFromSteamIDsRequest": {
      "name": "GetPlayFabIDsFromSteamIDsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SteamIDs",
          "description": "Array of unique Steam identifiers (Steam profile IDs) for which the title needs to get PlayFab identifiers.",
          "collection": "array",
          "jsontype": "Number",
          "actualtype": "uint64",
          "optional": false
        }
      ]
    },
    "GetPlayFabIDsFromSteamIDsResult": {
      "name": "GetPlayFabIDsFromSteamIDsResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Data",
          "description": "Mapping of Steam identifiers to PlayFab identifiers.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "SteamPlayFabIdPair",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetPublisherDataRequest": {
      "name": "GetPublisherDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.PublisherData",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Keys",
          "description": " array of keys to get back data from the Publisher data blob, set by the admin tools",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetPublisherDataResult": {
      "name": "GetPublisherDataResult",
      "classNameSpace": "PlayFab.WebAPIModels.PublisherData",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Data",
          "description": "a dictionary object of key / value pairs",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetPurchaseRequest": {
      "name": "GetPurchaseRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "OrderId",
          "description": "Purchase order identifier.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetPurchaseResult": {
      "name": "GetPurchaseResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "OrderId",
          "description": "Purchase order identifier.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PaymentProvider",
          "description": "Payment provider used for transaction (If not VC)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TransactionId",
          "description": "Provider transaction ID (If not VC)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TransactionStatus",
          "description": "PlayFab transaction status",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchaseDate",
          "description": "Date and time of the purchase.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Items",
          "description": "Array of items purchased.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetSharedGroupDataRequest": {
      "name": "GetSharedGroupDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SharedGroupId",
          "description": "Unique identifier for the shared group.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Keys",
          "description": "Specific keys to retrieve from the shared group (if not specified, all keys will be returned, while an empty array indicates that no keys should be returned).",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GetMembers",
          "description": "If true, return the list of all members of the shared group.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "GetSharedGroupDataResult": {
      "name": "GetSharedGroupDataResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Data",
          "description": "Data for the requested keys.",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "SharedGroupDataRecord",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Members",
          "description": "List of PlayFabId identifiers for the members of this group, if requested.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetStoreItemsRequest": {
      "name": "GetStoreItemsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "StoreId",
          "description": "Unqiue identifier for the store which is being requested.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "Catalog version for the requested store items. If null, defaults to most recent catalog.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetStoreItemsResult": {
      "name": "GetStoreItemsResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Store",
          "description": "Array of store items.",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "StoreItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetTitleDataRequest": {
      "name": "GetTitleDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.TitleData",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Keys",
          "description": "Specific keys to search for in the title data (leave null to get all keys)",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetTitleDataResult": {
      "name": "GetTitleDataResult",
      "classNameSpace": "PlayFab.WebAPIModels.TitleData",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Data",
          "description": "a dictionary object of key / value pairs",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetTitleNewsRequest": {
      "name": "GetTitleNewsRequest",
      "classNameSpace": "PlayFab.WebAPIModels",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Count",
          "description": "Limits the results to the last n entries. Defaults to 10 if not set.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "GetTitleNewsResult": {
      "name": "GetTitleNewsResult",
      "classNameSpace": "PlayFab.WebAPIModels",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "News",
          "description": "Array of news items.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "TitleNewsItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetTradeStatusRequest": {
      "name": "GetTradeStatusRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "OfferingPlayerId",
          "description": "Player who opened trade.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "TradeId",
          "description": "Trade identifier as returned by OpenTradeOffer.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetTradeStatusResponse": {
      "name": "GetTradeStatusResponse",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Trade",
          "jsontype": "Object",
          "actualtype": "TradeInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetUserCombinedInfoRequest": {
      "name": "GetUserCombinedInfoRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab identifier of the user whose info is being requested. Optional, defaults to the authenticated user if no other lookup identifier set.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Username",
          "description": "PlayFab Username for the account to find (if no PlayFabId is specified).",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Email",
          "description": "User email address for the account to find (if no Username is specified).",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TitleDisplayName",
          "description": "Title-specific username for the account to find (if no Email is set).",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GetAccountInfo",
          "description": "If set to false, account info will not be returned. Defaults to true.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "GetInventory",
          "description": "If set to false, inventory will not be returned. Defaults to true. Inventory will never be returned for users other than yourself.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "GetVirtualCurrency",
          "description": "If set to false, virtual currency balances will not be returned. Defaults to true. Currency balances will never be returned for users other than yourself.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "GetUserData",
          "description": "If set to false, custom user data will not be returned. Defaults to true.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "UserDataKeys",
          "description": "User custom data keys to return. If set to null, all keys will be returned. For users other than yourself, only public data will be returned.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GetReadOnlyData",
          "description": "If set to false, read-only user data will not be returned. Defaults to true.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "ReadOnlyDataKeys",
          "description": "User read-only custom data keys to return. If set to null, all keys will be returned. For users other than yourself, only public data will be returned.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetUserCombinedInfoResult": {
      "name": "GetUserCombinedInfoResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab identifier of the owner of the combined info.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "AccountInfo",
          "description": "Account information for the user.",
          "jsontype": "Object",
          "actualtype": "UserAccountInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Inventory",
          "description": "Array of inventory items in the user's current inventory.",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "Array of virtual currency balance(s) belonging to the user.",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "VirtualCurrencyRechargeTimes",
          "description": "Array of remaining times and timestamps for virtual currencies.",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "VirtualCurrencyRechargeTime",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Data",
          "description": "User specific custom data.",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "UserDataRecord",
          "isclass": true,
          "optional": true
        },
        {
          "name": "DataVersion",
          "description": "The version of the UserData that was returned.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "ReadOnlyData",
          "description": "User specific read-only data.",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "UserDataRecord",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ReadOnlyDataVersion",
          "description": "The version of the Read-Only UserData that was returned.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        }
      ]
    },
    "GetUserDataRequest": {
      "name": "GetUserDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Keys",
          "description": "Specific keys to search for in the custom data. Leave null to get all keys.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab identifier of the user to load data for. Optional, defaults to yourself if not set.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "IfChangedFromDataVersion",
          "description": "The version that currently exists according to the caller. The call will return the data for all of the keys if the version in the system is greater than this.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "GetUserDataResult": {
      "name": "GetUserDataResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Data",
          "description": "User specific data for this title.",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "UserDataRecord",
          "isclass": true,
          "optional": true
        },
        {
          "name": "DataVersion",
          "description": "Indicates the current version of the data that has been set. This is incremented with every set call for that type of data (read-only, internal, etc). This version can be provided in Get calls to find updated data.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        }
      ]
    },
    "GetUserInventoryRequest": {
      "name": "GetUserInventoryRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "GetUserInventoryResult": {
      "name": "GetUserInventoryResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Inventory",
          "description": "Array of inventory items in the user's current inventory.",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "Array of virtual currency balance(s) belonging to the user.",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "VirtualCurrencyRechargeTimes",
          "description": "Array of remaining times and timestamps for virtual currencies.",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "VirtualCurrencyRechargeTime",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetUserStatisticsRequest": {
      "name": "GetUserStatisticsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "GetUserStatisticsResult": {
      "name": "GetUserStatisticsResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "UserStatistics",
          "description": "User statistics for the active title.",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "GooglePlayFabIdPair": {
      "name": "GooglePlayFabIdPair",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "GoogleId",
          "description": "Unique Google identifier for a user.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab identifier for a user, or null if no PlayFab account is linked to the Google identifier.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GrantCharacterToUserRequest": {
      "name": "GrantCharacterToUserRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "Catalog version from which items are to be granted.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "Catalog item identifier of the item in the user's inventory that corresponds to the character in the catalog to be created.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CharacterName",
          "description": "Non-unique display name of the character being granted.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GrantCharacterToUserResult": {
      "name": "GrantCharacterToUserResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CharacterId",
          "description": "Unique identifier tagged to this character.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterType",
          "description": "Type of character that was created.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Result",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "ItemInstance": {
      "name": "ItemInstance",
      "classNameSpace": "PlayFab.WebAPIModels.Inventory",
      "assembly": "WebAPIModels",
      "description": "A unique instance of an item in a user's inventory",
      "sortKey": "ItemInstanceId",
      "properties": [
        {
          "name": "ItemId",
          "description": "Unique identifier for the inventory item, as defined in the catalog.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemInstanceId",
          "description": "Unique item identifier for this specific instance of the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemClass",
          "description": "Class name for the inventory item, as defined in the catalog.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchaseDate",
          "description": "Timestamp for when this instance was purchased.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Expiration",
          "description": "Timestamp for when this instance will expire.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "RemainingUses",
          "description": "Total number of remaining uses, if this is a consumable item.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "UsesIncrementedBy",
          "description": "The number of uses that were added or removed to this item in this call.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Annotation",
          "description": "Game specific comment associated with this instance when it was added to the user inventory.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "Catalog version for the inventory item, when this instance was created.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundleParent",
          "description": "Unique identifier for the parent inventory item, as defined in the catalog, for object which were added from a bundle or container.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UnitCurrency",
          "description": "Currency type for the cost of the catalog item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UnitPrice",
          "description": "Cost of the catalog item in the given currency.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "BundleContents",
          "description": "Array of unique items that were awarded when this catalog item was purchased.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomData",
          "description": "A set of custom key-value pairs on the inventory item.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ItemPuchaseRequest": {
      "name": "ItemPuchaseRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "ItemId",
          "description": "Unique ItemId of the item to purchase.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Quantity",
          "description": "How many of this item to purchase.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "Annotation",
          "description": "Title-specific text concerning this purchase.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UpgradeFromItems",
          "description": "Items to be upgraded as a result of this purchase (upgraded items are hidden, as they are \"replaced\" by the new items).",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LinkAndroidDeviceIDRequest": {
      "name": "LinkAndroidDeviceIDRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "AndroidDeviceId",
          "description": "Android device identifier for the user's device.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "OS",
          "description": "Specific Operating System version for the user's device.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "AndroidDevice",
          "description": "Specific model of the user's device.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LinkAndroidDeviceIDResult": {
      "name": "LinkAndroidDeviceIDResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "LinkCustomIDRequest": {
      "name": "LinkCustomIDRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CustomId",
          "description": "Custom unique identifier for the user, generated by the title.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "LinkCustomIDResult": {
      "name": "LinkCustomIDResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "LinkFacebookAccountRequest": {
      "name": "LinkFacebookAccountRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "AccessToken",
          "description": "Unique identifier from Facebook for the user.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ForceLink",
          "description": "If this Facebook account is already linked to a Playfab account, this will unlink the old account before linking the new one. Be careful when using this call, as it may orphan the old account. Defaults to false.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "LinkFacebookAccountResult": {
      "name": "LinkFacebookAccountResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "LinkGameCenterAccountRequest": {
      "name": "LinkGameCenterAccountRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "GameCenterId",
          "description": "Game Center identifier for the player account to be linked.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "LinkGameCenterAccountResult": {
      "name": "LinkGameCenterAccountResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "LinkGoogleAccountRequest": {
      "name": "LinkGoogleAccountRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "AccessToken",
          "description": "Unique token from Google Play for the user.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "LinkGoogleAccountResult": {
      "name": "LinkGoogleAccountResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "LinkIOSDeviceIDRequest": {
      "name": "LinkIOSDeviceIDRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "DeviceId",
          "description": "Vendor-specific iOS identifier for the user's device.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "OS",
          "description": "Specific Operating System version for the user's device.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DeviceModel",
          "description": "Specific model of the user's device.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LinkIOSDeviceIDResult": {
      "name": "LinkIOSDeviceIDResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "LinkKongregateAccountRequest": {
      "name": "LinkKongregateAccountRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "KongregateId",
          "description": "Numeric user ID assigned by Kongregate",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "AuthTicket",
          "description": "Valid session auth ticket issued by Kongregate",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "LinkKongregateAccountResult": {
      "name": "LinkKongregateAccountResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "LinkPSNAccountRequest": {
      "name": "LinkPSNAccountRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "AuthCode",
          "description": "Authentication code provided by the PlayStation Network.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "RedirectUri",
          "description": "Redirect URI supplied to PSN when requesting an auth code",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "IssuerId",
          "description": "Id of the PSN issuer environment. If null, defaults to 256 (production)",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "LinkPSNAccountResult": {
      "name": "LinkPSNAccountResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "LinkSteamAccountRequest": {
      "name": "LinkSteamAccountRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SteamTicket",
          "description": "Authentication token for the user, returned as a byte array from Steam, and converted to a string (for example, the byte 0x08 should become \"08\").",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "LinkSteamAccountResult": {
      "name": "LinkSteamAccountResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "LinkXboxAccountRequest": {
      "name": "LinkXboxAccountRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "XboxToken",
          "description": "Token provided by the Xbox Live SDK/XDK method GetTokenAndSignatureAsync(\"POST\", \"https://playfabapi.com\", \"\").",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "LinkXboxAccountResult": {
      "name": "LinkXboxAccountResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "ListUsersCharactersRequest": {
      "name": "ListUsersCharactersRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ListUsersCharactersResult": {
      "name": "ListUsersCharactersResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Characters",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CharacterResult",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "LogEventRequest": {
      "name": "LogEventRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Timestamp",
          "description": "Optional timestamp for this event. If null, the a timestamp is auto-assigned to the event on the server.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "EventName",
          "description": "A unique event name which will be used as the table name in the Redshift database. The name will be made lower case, and cannot not contain spaces. The use of underscores is recommended, for readability. Events also cannot match reserved terms. The PlayFab reserved terms are 'log_in' and 'purchase', 'create' and 'request', while the Redshift reserved terms can be found here: http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Body",
          "description": "Contains all the data for this event. Event Values can be strings, booleans or numerics (float, double, integer, long) and must be consistent on a per-event basis (if the Value for Key 'A' in Event 'Foo' is an integer the first time it is sent, it must be an integer in all subsequent 'Foo' events). As with event names, Keys must also not use reserved words (see above). Finally, the size of the Body for an event must be less than 32KB (UTF-8 format).",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "object",
          "optional": true
        },
        {
          "name": "ProfileSetEvent",
          "description": "Flag to set event Body as profile details in the Redshift database as well as a standard event.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "LogEventResult": {
      "name": "LogEventResult",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "LoginResult": {
      "name": "LoginResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SessionTicket",
          "description": "Unique token authorizing the user and game at the server level, for the current session.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PlayFabId",
          "description": "Player's unique PlayFabId.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "NewlyCreated",
          "description": "True if the account was newly created on this login.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "SettingsForUser",
          "description": "Settings specific to this user.",
          "jsontype": "Object",
          "actualtype": "UserSettings",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "LoginWithAndroidDeviceIDRequest": {
      "name": "LoginWithAndroidDeviceIDRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "TitleId",
          "description": "Unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "AndroidDeviceId",
          "description": "Android device identifier for the user's device.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "OS",
          "description": "Specific Operating System version for the user's device.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "AndroidDevice",
          "description": "Specific model of the user's device.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CreateAccount",
          "description": "Automatically create a PlayFab account if one is not currently linked to this Android device.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "LoginWithCustomIDRequest": {
      "name": "LoginWithCustomIDRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "TitleId",
          "description": "Unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CustomId",
          "description": "Custom unique identifier for the user, generated by the title.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CreateAccount",
          "description": "Automatically create a PlayFab account if one is not currently linked to this Custom ID.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "LoginWithEmailAddressRequest": {
      "name": "LoginWithEmailAddressRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "TitleId",
          "description": "Unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Email",
          "description": "Email address for the account.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Password",
          "description": "Password for the PlayFab account (6-30 characters)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "LoginWithFacebookRequest": {
      "name": "LoginWithFacebookRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "TitleId",
          "description": "Unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "AccessToken",
          "description": "Unique identifier from Facebook for the user.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CreateAccount",
          "description": "Automatically create a PlayFab account if one is not currently linked to this Facebook account.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "LoginWithGameCenterRequest": {
      "name": "LoginWithGameCenterRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "TitleId",
          "description": "Unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PlayerId",
          "description": "Unique Game Center player id.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CreateAccount",
          "description": "Automatically create a PlayFab account if one is not currently linked to this Game Center id.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "LoginWithGoogleAccountRequest": {
      "name": "LoginWithGoogleAccountRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "TitleId",
          "description": "Unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "AccessToken",
          "description": "Unique token from Google Play for the user.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CreateAccount",
          "description": "Automatically create a PlayFab account if one is not currently linked to this Google account.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LoginWithIOSDeviceIDRequest": {
      "name": "LoginWithIOSDeviceIDRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "TitleId",
          "description": "Unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "DeviceId",
          "description": "Vendor-specific iOS identifier for the user's device.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "OS",
          "description": "Specific Operating System version for the user's device.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DeviceModel",
          "description": "Specific model of the user's device.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CreateAccount",
          "description": "Automatically create a PlayFab account if one is not currently linked to this iOS device.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "LoginWithKongregateRequest": {
      "name": "LoginWithKongregateRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "TitleId",
          "description": "Unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "KongregateId",
          "description": "Unique identifier from Kongregate for the user.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "AuthTicket",
          "description": "Token issued by Kongregate's client API for the user.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CreateAccount",
          "description": "Automatically create a PlayFab account if one is not currently linked to this Kongregate account.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "LoginWithPlayFabRequest": {
      "name": "LoginWithPlayFabRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "TitleId",
          "description": "Unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Username",
          "description": "PlayFab username for the account.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Password",
          "description": "Password for the PlayFab account (6-30 characters)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "LoginWithPSNRequest": {
      "name": "LoginWithPSNRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "TitleId",
          "description": "Unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "AuthCode",
          "description": "Auth code provided by the PSN OAuth provider.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "RedirectUri",
          "description": "Redirect URI supplied to PSN when requesting an auth code",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "IssuerId",
          "description": "Id of the PSN issuer environment. If null, defaults to 256 (production)",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "CreateAccount",
          "description": "Automatically create a PlayFab account if one is not currently linked to this PSN account.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "LoginWithSteamRequest": {
      "name": "LoginWithSteamRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "TitleId",
          "description": "Unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "SteamTicket",
          "description": "Authentication token for the user, returned as a byte array from Steam, and converted to a string (for example, the byte 0x08 should become \"08\").",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CreateAccount",
          "description": "Automatically create a PlayFab account if one is not currently linked to this Steam account.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "LoginWithXboxRequest": {
      "name": "LoginWithXboxRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "TitleId",
          "description": "Unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "XboxToken",
          "description": "Token provided by the Xbox Live SDK/XDK method GetTokenAndSignatureAsync(\"POST\", \"https://playfabapi.com\", \"\").",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CreateAccount",
          "description": "Automatically create a PlayFab account if one is not currently linked to this Xbox Live account.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "MatchmakeRequest": {
      "name": "MatchmakeRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameAcquisition",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "BuildVersion",
          "description": "build version to match against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Region",
          "description": "region to match make against",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "GameMode",
          "description": "game mode to match make against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "LobbyId",
          "description": "lobby identifier to match make against (used to select a specific server)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "StatisticName",
          "description": "player statistic to use in finding a match. May be null for no stat-based matching",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterId",
          "description": "character to use for stats based matching. Leave null to use account stats",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "EnableQueue",
          "description": "[deprecated]",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "MatchmakeResult": {
      "name": "MatchmakeResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameAcquisition",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "LobbyID",
          "description": "unique lobby identifier of the server matched",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerHostname",
          "description": "IP address of the server",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerPort",
          "description": "port number to use for non-http communications with the server",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Ticket",
          "description": "server authorization ticket (used by RedeemCoupon to validate user insertion into the game)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Expires",
          "description": "timestamp for when the server will expire, if applicable",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PollWaitTimeMS",
          "description": "time in milliseconds the application is configured to wait on matchmaking results",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Status",
          "description": "result of match making process",
          "jsontype": "String",
          "actualtype": "MatchmakeStatus",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "MatchmakeStatus": {
      "name": "MatchmakeStatus",
      "classNameSpace": "PlayFab.WebAPIModels.GameAcquisition",
      "assembly": "WebAPIModels",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Complete"
        },
        {
          "name": "Waiting"
        },
        {
          "name": "GameNotFound"
        }
      ]
    },
    "ModifyUserVirtualCurrencyResult": {
      "name": "ModifyUserVirtualCurrencyResult",
      "classNameSpace": "PlayFab.WebAPIModels.AdminServerShared",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "User currency was subtracted from.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "Name of the virtual currency which was modified.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BalanceChange",
          "description": "Amount added or subtracted from the user's virtual currency. Maximum VC balance is Int32 (2,147,483,647). Any increase over this value will be discarded.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "Balance",
          "description": "Balance of the virtual currency after modification.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "OpenTradeRequest": {
      "name": "OpenTradeRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "OfferedInventoryInstanceIds",
          "description": "Player inventory items offered for trade. If not set, the trade is effectively a gift request",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "RequestedCatalogItemIds",
          "description": "Catalog items accepted for the trade. If not set, the trade is effectively a gift.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "AllowedPlayerIds",
          "description": "Players who are allowed to accept the trade. If null, the trade may be accepted by any player.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "OpenTradeResponse": {
      "name": "OpenTradeResponse",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Trade",
          "jsontype": "Object",
          "actualtype": "TradeInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "PayForPurchaseRequest": {
      "name": "PayForPurchaseRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "OrderId",
          "description": "Purchase order identifier returned from StartPurchase.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ProviderName",
          "description": "Payment provider to use to fund the purchase.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Currency",
          "description": "Currency to use to fund the purchase.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ProviderTransactionId",
          "description": "Payment provider transaction identifier. Required for Facebook Payments.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "PayForPurchaseResult": {
      "name": "PayForPurchaseResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "OrderId",
          "description": "Purchase order identifier.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Status",
          "description": "Status of the transaction.",
          "jsontype": "String",
          "actualtype": "TransactionStatus",
          "isenum": true,
          "optional": true
        },
        {
          "name": "VCAmount",
          "description": "Virtual currency cost of the transaction.",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "PurchaseCurrency",
          "description": "Real world currency for the transaction.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchasePrice",
          "description": "Real world cost of the transaction.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "CreditApplied",
          "description": "Local credit applied to the transaction (provider specific).",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "ProviderData",
          "description": "Provider used for the transaction.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchaseConfirmationPageURL",
          "description": "URL to the purchase provider page that details the purchase.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "Current virtual currency totals for the user.",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "PaymentOption": {
      "name": "PaymentOption",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Currency",
          "description": "Specific currency to use to fund the purchase.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ProviderName",
          "description": "Name of the purchase provider for this option.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Price",
          "description": "Amount of the specified currency needed for the purchase.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "StoreCredit",
          "description": "Amount of existing credit the user has with the provider.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        }
      ]
    },
    "PlayerLeaderboardEntry": {
      "name": "PlayerLeaderboardEntry",
      "classNameSpace": "PlayFab.WebAPIModels.GameServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user for this leaderboard entry.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "Title-specific display name of the user for this leaderboard entry.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "StatValue",
          "description": "Specific value of the user's statistic.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "Position",
          "description": "User's overall position in the leaderboard.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "PSNAccountPlayFabIdPair": {
      "name": "PSNAccountPlayFabIdPair",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PSNAccountId",
          "description": "Unique PlayStation Network identifier for a user.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab identifier for a user, or null if no PlayFab account is linked to the PlayStation Network identifier.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "PurchaseItemRequest": {
      "name": "PurchaseItemRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "ItemId",
          "description": "Unique identifier of the item to purchase.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "VirtualCurrency",
          "description": "Virtual currency to use to purchase the item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Price",
          "description": "Price the client expects to pay for the item (in case a new catalog or store was uploaded, with new prices).",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "Catalog version for the items to be purchased (defaults to most recent version.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "StoreId",
          "description": "Store to buy this item through. If not set, prices default to those in the catalog.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "PurchaseItemResult": {
      "name": "PurchaseItemResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Items",
          "description": "Details for the items purchased.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "RedeemCouponRequest": {
      "name": "RedeemCouponRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CouponCode",
          "description": "Generated coupon code to redeem.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "Catalog version of the coupon.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RedeemCouponResult": {
      "name": "RedeemCouponResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "GrantedItems",
          "description": "Items granted to the player as a result of redeeming the coupon.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "RefreshPSNAuthTokenRequest": {
      "name": "RefreshPSNAuthTokenRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "AuthCode",
          "description": "Auth code returned by PSN OAuth system.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "RedirectUri",
          "description": "Redirect URI supplied to PSN when requesting an auth code",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "IssuerId",
          "description": "Id of the PSN issuer environment. If null, defaults to 256 (production)",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "Region": {
      "name": "Region",
      "classNameSpace": "PlayFab.DataModel",
      "assembly": "DataModel",
      "isenum": true,
      "enumvalues": [
        {
          "name": "USCentral"
        },
        {
          "name": "USEast"
        },
        {
          "name": "EUWest"
        },
        {
          "name": "Singapore"
        },
        {
          "name": "Japan"
        },
        {
          "name": "Brazil"
        },
        {
          "name": "Australia"
        }
      ]
    },
    "RegionInfo": {
      "name": "RegionInfo",
      "classNameSpace": "PlayFab.DataModel",
      "assembly": "DataModel",
      "properties": [
        {
          "name": "Region",
          "description": "unique identifier for the region",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Name",
          "description": "name of the region",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Available",
          "description": "indicates whether the server specified is available in this region",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "PingUrl",
          "description": "url to ping to get roundtrip time",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RegisterForIOSPushNotificationRequest": {
      "name": "RegisterForIOSPushNotificationRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "DeviceToken",
          "description": "Unique token generated by the Apple Push Notification service when the title registered to receive push notifications.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "SendPushNotificationConfirmation",
          "description": "If true, send a test push message immediately after sucessful registration. Defaults to false.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "ConfirmationMessage",
          "description": "Message to display when confirming push notification.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RegisterForIOSPushNotificationResult": {
      "name": "RegisterForIOSPushNotificationResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "RegisterPlayFabUserRequest": {
      "name": "RegisterPlayFabUserRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "TitleId",
          "description": "Unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Username",
          "description": "PlayFab username for the account (3-20 characters)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Email",
          "description": "User email address attached to their account",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Password",
          "description": "Password for the PlayFab account (6-30 characters)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "RequireBothUsernameAndEmail",
          "description": "An optional parameter that specifies whether both the username and email parameters are required. If true, both parameters are required; if false, the user must supply either the username or email parameter. The default value is true.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "An optional parameter for setting the display name for this title.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Origination",
          "description": "[Deprecated - The Origination of a user is determined by the API call used to create the account. In the case of RegisterPlayFabUser, it will be Organic.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RegisterPlayFabUserResult": {
      "name": "RegisterPlayFabUserResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier for this newly created account.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SessionTicket",
          "description": "Unique token identifying the user and game at the server level, for the current session.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Username",
          "description": "PlayFab unique user name.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SettingsForUser",
          "description": "Settings specific to this user.",
          "jsontype": "Object",
          "actualtype": "UserSettings",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "RemoveFriendRequest": {
      "name": "RemoveFriendRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "FriendPlayFabId",
          "description": "PlayFab identifier of the friend account which is to be removed.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "RemoveFriendResult": {
      "name": "RemoveFriendResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "RemoveSharedGroupMembersRequest": {
      "name": "RemoveSharedGroupMembersRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SharedGroupId",
          "description": "Unique identifier for the shared group.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PlayFabIds",
          "description": "An array of unique PlayFab assigned ID of the user on whom the operation will be performed.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "RemoveSharedGroupMembersResult": {
      "name": "RemoveSharedGroupMembersResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "ReportPlayerClientRequest": {
      "name": "ReportPlayerClientRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "ReporteeId",
          "description": "Unique PlayFab identifier of the reported player.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Comment",
          "description": "Optional additional comment by reporting player.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ReportPlayerClientResult": {
      "name": "ReportPlayerClientResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Updated",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "SubmissionsRemaining",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "RestoreIOSPurchasesRequest": {
      "name": "RestoreIOSPurchasesRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "ReceiptData",
          "description": "Base64 encoded receipt data, passed back by the App Store as a result of a successful purchase.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "RestoreIOSPurchasesResult": {
      "name": "RestoreIOSPurchasesResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "RunCloudScriptRequest": {
      "name": "RunCloudScriptRequest",
      "classNameSpace": "PlayFab.WebAPIModels.LogicServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "ActionId",
          "description": "server action to trigger",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Params",
          "description": "parameters to pass into the action (If you use this, don't use ParamsEncoded)",
          "jsontype": "Object",
          "actualtype": "object",
          "optional": true
        },
        {
          "name": "ParamsEncoded",
          "description": "json-encoded parameters to pass into the action (If you use this, don't use Params)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RunCloudScriptResult": {
      "name": "RunCloudScriptResult",
      "classNameSpace": "PlayFab.WebAPIModels.LogicServer",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "ActionId",
          "description": "id of Cloud Script run",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Version",
          "description": "version of Cloud Script run",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "Revision",
          "description": "revision of Cloud Script run",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "Results",
          "description": "return values from the server action as a dynamic object",
          "jsontype": "Object",
          "actualtype": "object",
          "optional": true
        },
        {
          "name": "ResultsEncoded",
          "description": "return values from the server action as a JSON encoded string",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ActionLog",
          "description": "any log statements generated during the run of this action",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExecutionTime",
          "description": "time this script took to run, in seconds",
          "jsontype": "Number",
          "actualtype": "double",
          "optional": false
        }
      ]
    },
    "SendAccountRecoveryEmailRequest": {
      "name": "SendAccountRecoveryEmailRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Email",
          "description": "User email address attached to their account",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "TitleId",
          "description": "Unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "SendAccountRecoveryEmailResult": {
      "name": "SendAccountRecoveryEmailResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "SetFriendTagsRequest": {
      "name": "SetFriendTagsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "FriendPlayFabId",
          "description": "PlayFab identifier of the friend account to which the tag(s) should be applied.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Tags",
          "description": "Array of tags to set on the friend account.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "SetFriendTagsResult": {
      "name": "SetFriendTagsResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "SharedGroupDataRecord": {
      "name": "SharedGroupDataRecord",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Value",
          "description": "Data stored for the specified group data key.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "LastUpdatedBy",
          "description": "Unique PlayFab identifier of the user to last update this value.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "LastUpdated",
          "description": "Timestamp for when this data was last updated.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Permission",
          "description": "Indicates whether this data can be read by all users (public) or only members of the group (private).",
          "jsontype": "String",
          "actualtype": "UserDataPermission",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "StartGameRequest": {
      "name": "StartGameRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameAcquisition",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "BuildVersion",
          "description": "version information for the build of the game server which is to be started",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Region",
          "description": "the region to associate this server with for match filtering",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": false
        },
        {
          "name": "GameMode",
          "description": "the title-defined game mode this server is to be running (defaults to 0 if there is only one mode)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "StatisticName",
          "description": "player statistic for others to use in finding this game. May be null for no stat-based matching",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterId",
          "description": "character to use for stats based matching. Leave null to use account stats",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomCommandLineData",
          "description": "custom command line argument when starting game server process",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "StartGameResult": {
      "name": "StartGameResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameAcquisition",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "LobbyID",
          "description": "unique identifier for the lobby of the server started",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerHostname",
          "description": "server IP address",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerPort",
          "description": "port on the server to be used for communication",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Ticket",
          "description": "unique identifier for the server",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Expires",
          "description": "timestamp for when the server should expire, if applicable",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Password",
          "description": "password required to log into the server",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "StartPurchaseRequest": {
      "name": "StartPurchaseRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "Catalog version for the items to be purchased. Defaults to most recent catalog.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "StoreId",
          "description": "Store through which to purchase items. If not set, prices will be pulled from the catalog itself.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Items",
          "description": "Array of items to purchase.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemPuchaseRequest",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "StartPurchaseResult": {
      "name": "StartPurchaseResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "OrderId",
          "description": "Purchase order identifier.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Contents",
          "description": "Cart items to be purchased.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CartItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PaymentOptions",
          "description": "Available methods by which the user can pay.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PaymentOption",
          "isclass": true,
          "optional": true
        },
        {
          "name": "VirtualCurrencyBalances",
          "description": "Current virtual currency totals for the user.",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "StatisticUpdate": {
      "name": "StatisticUpdate",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "StatisticName",
          "description": "unique name of the statistic",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Version",
          "description": "for updates to an existing statistic value for a player, the version of the statistic when it was loaded. Null when setting the statistic value for the first time.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Value",
          "description": "statistic value for the player",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "StatisticValue": {
      "name": "StatisticValue",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "StatisticName",
          "description": "unique name of the statistic",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Value",
          "description": "statistic value for the player",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "Version",
          "description": "for updates to an existing statistic value for a player, the version of the statistic when it was loaded",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "SteamPlayFabIdPair": {
      "name": "SteamPlayFabIdPair",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SteamId",
          "description": "Unique Steam identifier for a user.",
          "jsontype": "Number",
          "actualtype": "uint64",
          "optional": false
        },
        {
          "name": "PlayFabId",
          "description": "Unique PlayFab identifier for a user, or null if no PlayFab account is linked to the Steam identifier.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "StoreItem": {
      "name": "StoreItem",
      "classNameSpace": "PlayFab.DataModel",
      "assembly": "DataModel",
      "description": "A store entry that list a catalog item at a particular price",
      "sortKey": "ItemId",
      "properties": [
        {
          "name": "ItemId",
          "description": "unique identifier of the item as it exists in the catalog - note that this must exactly match the ItemId from the catalog",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "VirtualCurrencyPrices",
          "description": "price of this item in virtual currencies and \"RM\" (the base Real Money purchase price, in USD pennies)",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "RealCurrencyPrices",
          "description": "override prices for this item for specific currencies",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "SubtractUserVirtualCurrencyRequest": {
      "name": "SubtractUserVirtualCurrencyRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "VirtualCurrency",
          "description": "Name of the virtual currency which is to be decremented.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Amount",
          "description": "Amount to be subtracted from the user balance of the specified virtual currency.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "TitleActivationStatus": {
      "name": "TitleActivationStatus",
      "classNameSpace": "PlayFab.DataModel",
      "assembly": "DataModel",
      "isenum": true,
      "enumvalues": [
        {
          "name": "None"
        },
        {
          "name": "ActivatedTitleKey"
        },
        {
          "name": "PendingSteam"
        },
        {
          "name": "ActivatedSteam"
        },
        {
          "name": "RevokedSteam"
        }
      ]
    },
    "TitleNewsItem": {
      "name": "TitleNewsItem",
      "classNameSpace": "PlayFab.WebAPIModels",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Timestamp",
          "description": "Date and time when the news items was posted.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "NewsId",
          "description": "Unique identifier of news item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Title",
          "description": "Title of the news item.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Body",
          "description": "News item text.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "TradeInfo": {
      "name": "TradeInfo",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Status",
          "jsontype": "String",
          "actualtype": "TradeStatus",
          "isenum": true,
          "optional": true
        },
        {
          "name": "TradeId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OfferingPlayerId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OfferedInventoryInstanceIds",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OfferedCatalogItemIds",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "RequestedCatalogItemIds",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "AllowedPlayerIds",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "AcceptedPlayerId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "AcceptedInventoryInstanceIds",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OpenedAt",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "FilledAt",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "CancelledAt",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "InvalidatedAt",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        }
      ]
    },
    "TradeStatus": {
      "name": "TradeStatus",
      "classNameSpace": "PlayFab.DataModel",
      "assembly": "DataModel",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Invalid"
        },
        {
          "name": "Opening"
        },
        {
          "name": "Open"
        },
        {
          "name": "Accepting"
        },
        {
          "name": "Accepted"
        },
        {
          "name": "Filled"
        },
        {
          "name": "Cancelled"
        }
      ]
    },
    "TransactionStatus": {
      "name": "TransactionStatus",
      "classNameSpace": "PlayFab.DataModel.Payments",
      "assembly": "DataModel",
      "isenum": true,
      "enumvalues": [
        {
          "name": "CreateCart"
        },
        {
          "name": "Init"
        },
        {
          "name": "Approved"
        },
        {
          "name": "Succeeded"
        },
        {
          "name": "FailedByProvider"
        },
        {
          "name": "DisputePending"
        },
        {
          "name": "RefundPending"
        },
        {
          "name": "Refunded"
        },
        {
          "name": "RefundFailed"
        },
        {
          "name": "ChargedBack"
        },
        {
          "name": "FailedByUber"
        },
        {
          "name": "FailedByPlayFab"
        },
        {
          "name": "Revoked"
        },
        {
          "name": "TradePending"
        },
        {
          "name": "Traded"
        },
        {
          "name": "Upgraded"
        },
        {
          "name": "StackPending"
        },
        {
          "name": "Stacked"
        },
        {
          "name": "Other"
        },
        {
          "name": "Failed"
        }
      ]
    },
    "UnlinkAndroidDeviceIDRequest": {
      "name": "UnlinkAndroidDeviceIDRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "AndroidDeviceId",
          "description": "Android device identifier for the user's device. If not specified, the most recently signed in Android Device ID will be used.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UnlinkAndroidDeviceIDResult": {
      "name": "UnlinkAndroidDeviceIDResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UnlinkCustomIDRequest": {
      "name": "UnlinkCustomIDRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CustomId",
          "description": "Custom unique identifier for the user, generated by the title. If not specified, the most recently signed in Custom ID will be used.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UnlinkCustomIDResult": {
      "name": "UnlinkCustomIDResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UnlinkFacebookAccountRequest": {
      "name": "UnlinkFacebookAccountRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UnlinkFacebookAccountResult": {
      "name": "UnlinkFacebookAccountResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UnlinkGameCenterAccountRequest": {
      "name": "UnlinkGameCenterAccountRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UnlinkGameCenterAccountResult": {
      "name": "UnlinkGameCenterAccountResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UnlinkGoogleAccountRequest": {
      "name": "UnlinkGoogleAccountRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UnlinkGoogleAccountResult": {
      "name": "UnlinkGoogleAccountResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UnlinkIOSDeviceIDRequest": {
      "name": "UnlinkIOSDeviceIDRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "DeviceId",
          "description": "Vendor-specific iOS identifier for the user's device. If not specified, the most recently signed in iOS Device ID will be used.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UnlinkIOSDeviceIDResult": {
      "name": "UnlinkIOSDeviceIDResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UnlinkKongregateAccountRequest": {
      "name": "UnlinkKongregateAccountRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UnlinkKongregateAccountResult": {
      "name": "UnlinkKongregateAccountResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UnlinkPSNAccountRequest": {
      "name": "UnlinkPSNAccountRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UnlinkPSNAccountResult": {
      "name": "UnlinkPSNAccountResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UnlinkSteamAccountRequest": {
      "name": "UnlinkSteamAccountRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UnlinkSteamAccountResult": {
      "name": "UnlinkSteamAccountResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UnlinkXboxAccountRequest": {
      "name": "UnlinkXboxAccountRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "XboxToken",
          "description": "Token provided by the Xbox Live SDK/XDK method GetTokenAndSignatureAsync(\"POST\", \"https://playfabapi.com\", \"\").",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "UnlinkXboxAccountResult": {
      "name": "UnlinkXboxAccountResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UnlockContainerItemRequest": {
      "name": "UnlockContainerItemRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "ContainerItemId",
          "description": "Category ItemId of the container type to unlock.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "Catalog version of the container.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UnlockContainerItemResult": {
      "name": "UnlockContainerItemResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "UnlockedItemInstanceId",
          "description": "Unique instance identifier of the container unlocked.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "UnlockedWithItemInstanceId",
          "description": "Unique instance identifier of the key used to unlock the container, if applicable.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GrantedItems",
          "description": "Items granted to the player as a result of unlocking the container.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "Virtual currency granted to the player as a result of unlocking the container.",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "UpdateCharacterDataRequest": {
      "name": "UpdateCharacterDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "CharacterId",
          "description": "Unique PlayFab assigned ID for a specific character owned by a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Data",
          "description": "Key-value pairs to be written to the custom data. Note that keys are trimmed of whitespace, are limited in size, and may not begin with a '!' character.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "KeysToRemove",
          "description": "Optional list of Data-keys to remove from UserData.  Some SDKs cannot insert null-values into Data due to language constraints.  Use this to delete the keys directly.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Permission",
          "description": "Permission to be applied to all user data keys written in this request. Defaults to \"private\" if not set.",
          "jsontype": "String",
          "actualtype": "UserDataPermission",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UpdateCharacterDataResult": {
      "name": "UpdateCharacterDataResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "DataVersion",
          "description": "Indicates the current version of the data that has been set. This is incremented with every set call for that type of data (read-only, internal, etc). This version can be provided in Get calls to find updated data.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        }
      ]
    },
    "UpdatePlayerStatisticsRequest": {
      "name": "UpdatePlayerStatisticsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Statistics",
          "description": "Statistics to be updated with the provided values",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "StatisticUpdate",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UpdatePlayerStatisticsResult": {
      "name": "UpdatePlayerStatisticsResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UpdateSharedGroupDataRequest": {
      "name": "UpdateSharedGroupDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SharedGroupId",
          "description": "Unique identifier for the shared group.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Data",
          "description": "Key-value pairs to be written to the custom data. Note that keys are trimmed of whitespace, are limited in size, and may not begin with a '!' character.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "KeysToRemove",
          "description": "Optional list of Data-keys to remove from UserData.  Some SDKs cannot insert null-values into Data due to language constraints.  Use this to delete the keys directly.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Permission",
          "description": "Permission to be applied to all user data keys in this request.",
          "jsontype": "String",
          "actualtype": "UserDataPermission",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UpdateSharedGroupDataResult": {
      "name": "UpdateSharedGroupDataResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UpdateUserDataRequest": {
      "name": "UpdateUserDataRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Data",
          "description": "Key-value pairs to be written to the custom data. Note that keys are trimmed of whitespace, are limited in size, and may not begin with a '!' character.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "KeysToRemove",
          "description": "Optional list of Data-keys to remove from UserData.  Some SDKs cannot insert null-values into Data due to language constraints.  Use this to delete the keys directly.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Permission",
          "description": "Permission to be applied to all user data keys written in this request. Defaults to \"private\" if not set.",
          "jsontype": "String",
          "actualtype": "UserDataPermission",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UpdateUserDataResult": {
      "name": "UpdateUserDataResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "DataVersion",
          "description": "Indicates the current version of the data that has been set. This is incremented with every set call for that type of data (read-only, internal, etc). This version can be provided in Get calls to find updated data.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        }
      ]
    },
    "UpdateUserStatisticsRequest": {
      "name": "UpdateUserStatisticsRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "UserStatistics",
          "description": "Statistics to be updated with the provided values.",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "UpdateUserStatisticsResult": {
      "name": "UpdateUserStatisticsResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "UpdateUserTitleDisplayNameRequest": {
      "name": "UpdateUserTitleDisplayNameRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "DisplayName",
          "description": "New title display name for the user - must be between 3 and 25 characters.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "UpdateUserTitleDisplayNameResult": {
      "name": "UpdateUserTitleDisplayNameResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "DisplayName",
          "description": "Current title display name for the user (this will be the original display name if the rename attempt failed).",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserAccountInfo": {
      "name": "UserAccountInfo",
      "classNameSpace": "PlayFab.WebAPIModels.UserInfo",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "unique identifier for the user account",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Created",
          "description": "timestamp indicating when the user account was created",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Username",
          "description": "user account name in the PlayFab service",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TitleInfo",
          "description": "title-specific information for the user account",
          "jsontype": "Object",
          "actualtype": "UserTitleInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PrivateInfo",
          "description": "personal information for the user which is considered more sensitive",
          "jsontype": "Object",
          "actualtype": "UserPrivateAccountInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "FacebookInfo",
          "description": "user Facebook information, if a Facebook account has been linked",
          "jsontype": "Object",
          "actualtype": "UserFacebookInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SteamInfo",
          "description": "user Steam information, if a Steam account has been linked",
          "jsontype": "Object",
          "actualtype": "UserSteamInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "GameCenterInfo",
          "description": "user Gamecenter information, if a Gamecenter account has been linked",
          "jsontype": "Object",
          "actualtype": "UserGameCenterInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UserDataPermission": {
      "name": "UserDataPermission",
      "classNameSpace": "PlayFab.DataModel",
      "assembly": "DataModel",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Private"
        },
        {
          "name": "Public"
        }
      ]
    },
    "UserDataRecord": {
      "name": "UserDataRecord",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Value",
          "description": "Data stored for the specified user data key.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "LastUpdated",
          "description": "Timestamp for when this data was last updated.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Permission",
          "description": "Indicates whether this data can be read by all users (public) or only the user (private).",
          "jsontype": "String",
          "actualtype": "UserDataPermission",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UserFacebookInfo": {
      "name": "UserFacebookInfo",
      "classNameSpace": "PlayFab.WebAPIModels.UserInfo",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "FacebookId",
          "description": "Facebook identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FullName",
          "description": "Facebook full name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserGameCenterInfo": {
      "name": "UserGameCenterInfo",
      "classNameSpace": "PlayFab.WebAPIModels.UserInfo",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "GameCenterId",
          "description": "Gamecenter identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserOrigination": {
      "name": "UserOrigination",
      "classNameSpace": "PlayFab.DataModel",
      "assembly": "DataModel",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Organic"
        },
        {
          "name": "Steam"
        },
        {
          "name": "Google"
        },
        {
          "name": "Amazon"
        },
        {
          "name": "Facebook"
        },
        {
          "name": "Kongregate"
        },
        {
          "name": "GamersFirst"
        },
        {
          "name": "Unknown"
        },
        {
          "name": "IOS"
        },
        {
          "name": "LoadTest"
        },
        {
          "name": "Android"
        },
        {
          "name": "PSN"
        },
        {
          "name": "GameCenter"
        },
        {
          "name": "CustomId"
        },
        {
          "name": "XboxLive"
        }
      ]
    },
    "UserPrivateAccountInfo": {
      "name": "UserPrivateAccountInfo",
      "classNameSpace": "PlayFab.WebAPIModels.UserInfo",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "Email",
          "description": "user email address",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserSettings": {
      "name": "UserSettings",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "NeedsAttribution",
          "description": "Boolean for whether this player is eligible for ad tracking.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "UserSteamInfo": {
      "name": "UserSteamInfo",
      "classNameSpace": "PlayFab.WebAPIModels.UserInfo",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SteamId",
          "description": "Steam identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SteamCountry",
          "description": "the country in which the player resides, from Steam data",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SteamCurrency",
          "description": "currency type set in the user Steam account",
          "jsontype": "String",
          "actualtype": "Currency",
          "isenum": true,
          "optional": true
        },
        {
          "name": "SteamActivationStatus",
          "description": "what stage of game ownership the user is listed as being in, from Steam",
          "jsontype": "String",
          "actualtype": "TitleActivationStatus",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UserTitleInfo": {
      "name": "UserTitleInfo",
      "classNameSpace": "PlayFab.WebAPIModels.UserInfo",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "DisplayName",
          "description": "name of the user, as it is displayed in-game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Origination",
          "description": "source by which the user first joined the game, if known",
          "jsontype": "String",
          "actualtype": "UserOrigination",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Created",
          "description": "timestamp indicating when the user was first associated with this game (this can differ significantly from when the user first registered with PlayFab)",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "LastLogin",
          "description": "timestamp for the last user login for this title",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "FirstLogin",
          "description": "timestamp indicating when the user first signed into this game (this can differ from the Created timestamp, as other events, such as issuing a beta key to the user, can associate the title to the user)",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "isBanned",
          "description": "boolean indicating whether or not the user is currently banned for a title",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "ValidateAmazonReceiptRequest": {
      "name": "ValidateAmazonReceiptRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "ReceiptId",
          "description": "ReceiptId returned by the Amazon App Store in-app purchase API",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "UserId",
          "description": "AmazonId of the user making the purchase as returned by the Amazon App Store in-app purchase API",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "Catalog version to use when granting receipt item. If null, defaults to primary catalog.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CurrencyCode",
          "description": "Currency used for the purchase.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PurchasePrice",
          "description": "Amount of the stated currency paid for the object.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "ValidateAmazonReceiptResult": {
      "name": "ValidateAmazonReceiptResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "ValidateGooglePlayPurchaseRequest": {
      "name": "ValidateGooglePlayPurchaseRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "ReceiptJson",
          "description": "Original JSON string returned by the Google Play IAB API.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Signature",
          "description": "Signature returned by the Google Play IAB API.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CurrencyCode",
          "description": "Currency used for the purchase.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchasePrice",
          "description": "Amount of the stated currency paid for the object.",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "ValidateGooglePlayPurchaseResult": {
      "name": "ValidateGooglePlayPurchaseResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "ValidateIOSReceiptRequest": {
      "name": "ValidateIOSReceiptRequest",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "ReceiptData",
          "description": "Base64 encoded receipt data, passed back by the App Store as a result of a successful purchase.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CurrencyCode",
          "description": "Currency used for the purchase.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PurchasePrice",
          "description": "Amount of the stated currency paid for the object.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "ValidateIOSReceiptResult": {
      "name": "ValidateIOSReceiptResult",
      "classNameSpace": "PlayFab.WebAPIModels.GameClient",
      "assembly": "WebAPIModels",
      "properties": []
    },
    "VirtualCurrencyRechargeTime": {
      "name": "VirtualCurrencyRechargeTime",
      "classNameSpace": "PlayFab.WebAPIModels.Inventory",
      "assembly": "WebAPIModels",
      "properties": [
        {
          "name": "SecondsToRecharge",
          "description": "Time remaining (in seconds) before the next recharge increment of the virtual currency.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "RechargeTime",
          "description": "Server timestamp in UTC indicating the next time the virtual currency will be incremented.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "RechargeMax",
          "description": "Maximum value to which the regenerating currency will automatically increment. Note that it can exceed this value through use of the AddUserVirtualCurrency API call. However, it will not regenerate automatically until it has fallen below this value.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    }
  },
  "calls": [
    {
      "name": "GetPhotonAuthenticationToken",
      "summary": "Gets a Photon custom authentication token that can be used to securely join the player into a Photon room. See https://api.playfab.com/docs/using-photon-with-playfab/ for more details.",
      "subgroup": "Authentication",
      "titleTiers": null,
      "url": "/Client/GetPhotonAuthenticationToken",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetPhotonAuthenticationTokenRequest",
      "requestExample": "{\r\n  \"PhotonApplicationId\": \"acaa26f3-fcdb-4af4-8c76-3a3d4dd3066f\"\r\n}",
      "result": "GetPhotonAuthenticationTokenResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PhotonCustomAuthenticationToken\": \"rod88fits4gqmgor7umopsbabguj441h3oe8u3gbzxf6rktibv\"\r\n  }\r\n}",
      "errors": [
        "InvalidParams",
        "PhotonApplicationNotFound",
        "PhotonNotEnabledForTitle"
      ]
    },
    {
      "name": "LoginWithAndroidDeviceID",
      "summary": "Signs the user in using the Android device identifier, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "On Android devices, the recommendation is to use the Settings.Secure.ANDROID_ID as the AndroidDeviceId, as described in this blog post (http://android-developers.blogspot.com/2011/03/identifying-app-installations.html). More information on this identifier can be found in the Android documentation (http://developer.android.com/reference/android/provider/Settings.Secure.html). If this is the first time a user has signed in with the Android device and CreateAccount is set to true, a new PlayFab account will be created and linked to the Android device ID. In this case, no email or username will be associated with the PlayFab account. Otherwise, if no PlayFab account is linked to the Android device, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "titleTiers": null,
      "url": "/Client/LoginWithAndroidDeviceID",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithAndroidDeviceIDRequest",
      "requestExample": "{\r\n  \"TitleId\": \"1\",\r\n  \"AndroidDeviceId\": \"526f79204261747479\",\r\n  \"OS\": \"5.0\",\r\n  \"AndroidDevice\": \"Nexus 6\",\r\n  \"CreateAccount\": false\r\n}",
      "result": "LoginResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"SessionTicket\": \"4D2----8D11F4249A80000-7C64AB0A9F1D8D1A.CD803BF233CE76CC\",\r\n    \"PlayFabId\": \"10931252888739651331\",\r\n    \"NewlyCreated\": false\r\n  }\r\n}",
      "seeAlso": [
        "LinkAndroidDeviceID",
        "UnlinkAndroidDeviceID",
        "LoginWithIOSDeviceID"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "AccountNotFound",
        "AccountBanned"
      ]
    },
    {
      "name": "LoginWithCustomID",
      "summary": "Signs the user in using a custom unique identifier generated by the title, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "It is highly recommended that developers ensure that it is extremely unlikely that a customer could generate an ID which is already in use by another customer. If this is the first time a user has signed in with the Custom ID and CreateAccount is set to true, a new PlayFab account will be created and linked to the Custom ID. In this case, no email or username will be associated with the PlayFab account. Otherwise, if no PlayFab account is linked to the Custom ID, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "titleTiers": null,
      "url": "/Client/LoginWithCustomID",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithCustomIDRequest",
      "requestExample": "{\r\n  \"TitleId\": \"1\",\r\n  \"CustomId\": \"67AB-5397-CC54-EA31\",\r\n  \"CreateAccount\": false\r\n}",
      "result": "LoginResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"SessionTicket\": \"4D2----8D11F4249A80000-7C64AB0A9F1D8D1A.CD803BF233CE76CC\",\r\n    \"PlayFabId\": \"10931252888739651331\",\r\n    \"NewlyCreated\": false\r\n  }\r\n}",
      "seeAlso": [
        "LinkCustomID",
        "UnlinkCustomID"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "AccountNotFound",
        "AccountBanned"
      ]
    },
    {
      "name": "LoginWithEmailAddress",
      "summary": "Signs the user into the PlayFab account, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "Emai address and password lengths are provided for information purposes. The server will validate that data passed in conforms to the field definition and report errors appropriately. It is recommended that developers not perform this validation locally, so that future updates do not require client updates.",
      "subgroup": "Authentication",
      "titleTiers": null,
      "url": "/Client/LoginWithEmailAddress",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithEmailAddressRequest",
      "requestExample": "{\r\n  \"TitleId\": \"1\",\r\n  \"Email\": \"theuser@domain.com\",\r\n  \"Password\": \"thepassword\"\r\n}",
      "result": "LoginResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"SessionTicket\": \"4D2----8D11F4249A80000-7C64AB0A9F1D8D1A.CD803BF233CE76CC\",\r\n    \"PlayFabId\": \"10931252888739651331\",\r\n    \"NewlyCreated\": false\r\n  }\r\n}",
      "seeAlso": [
        "RegisterPlayFabUser",
        "LoginWithPlayFab"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "AccountNotFound",
        "AccountBanned",
        "InvalidEmailOrPassword"
      ]
    },
    {
      "name": "LoginWithFacebook",
      "summary": "Signs the user in using a Facebook access token, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "Facebook sign-in is accomplished using the Facebook User Access Token. More information on the Token can be found in the Facebook developer documentation (https://developers.facebook.com/docs/facebook-login/access-tokens/). In Unity, for example, the Token is available as AccessToken in the Facebook SDK ScriptableObject FB. If this is the first time a user has signed in with the Facebook account and CreateAccount is set to true, a new PlayFab account will be created and linked to the provided account's Facebook ID. In this case, no email or username will be associated with the PlayFab account. Otherwise, if no PlayFab account is linked to the Facebook account, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "titleTiers": null,
      "url": "/Client/LoginWithFacebook",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithFacebookRequest",
      "requestExample": "{\r\n  \"TitleId\": \"1\",\r\n  \"AccessToken\": \"FaceAccessTokenID\",\r\n  \"CreateAccount\": false\r\n}",
      "result": "LoginResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"SessionTicket\": \"4D2----8D11F4249A80000-7C64AB0A9F1D8D1A.CD803BF233CE76CC\",\r\n    \"PlayFabId\": \"10931252888739651331\",\r\n    \"NewlyCreated\": false\r\n  }\r\n}",
      "seeAlso": [
        "LinkFacebookAccount",
        "UnlinkFacebookAccount"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "InvalidFacebookToken",
        "AccountNotFound",
        "AccountBanned",
        "FacebookAPIError"
      ]
    },
    {
      "name": "LoginWithGameCenter",
      "summary": "Signs the user in using an iOS Game Center player identifier, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "The Game Center player identifier (https://developer.apple.com/library/ios/documentation/Accounts/Reference/ACAccountClassRef/index.html#//apple_ref/occ/instp/ACAccount/identifier) is a generated string which is stored on the local device. As with device identifiers, care must be taken to never expose a player's Game Center identifier to end users, as that could result in a user's account being compromised. If this is the first time a user has signed in with Game Center and CreateAccount is set to true, a new PlayFab account will be created and linked to the Game Center identifier. In this case, no email or username will be associated with the PlayFab account. Otherwise, if no PlayFab account is linked to the Game Center account, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "titleTiers": null,
      "url": "/Client/LoginWithGameCenter",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithGameCenterRequest",
      "requestExample": "{\r\n  \"TitleId\": \"1000\",\r\n  \"PlayerId\": \"pachycephalosaurus01\",\r\n  \"CreateAccount\": false\r\n}",
      "result": "LoginResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"SessionTicket\": \"4D2----8D11F4249A80000-7C64AB0A9F1D8D1A.CD803BF233CE76CC\",\r\n    \"PlayFabId\": \"10931252888739651331\",\r\n    \"NewlyCreated\": false\r\n  }\r\n}",
      "seeAlso": [
        "LoginWithIOSDeviceID"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "AccountNotFound",
        "AccountBanned"
      ]
    },
    {
      "name": "LoginWithGoogleAccount",
      "summary": "Signs the user in using a Google account access token, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "Google sign-in is accomplished with the Google OAuth 2.0 Access Token. More information on the Token can be  found in the Google developer documentation (https://developers.google.com/accounts/docs/OAuth2) and in the Quick Start sample applications (https://developers.google.com/+/quickstart/). If this is the first time a user has signed in with the Google account and CreateAccount is set to true, a new PlayFab account will be created and linked to the Google account. In this case, no email or username will be associated with the PlayFab account. Otherwise, if no PlayFab account is linked to the Google account, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "titleTiers": null,
      "url": "/Client/LoginWithGoogleAccount",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithGoogleAccountRequest",
      "requestExample": "{\r\n  \"TitleId\": \"1\",\r\n  \"AccessToken\": \"BInn23arRiCepodeRQ\",\r\n  \"CreateAccount\": false\r\n}",
      "result": "LoginResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"SessionTicket\": \"4D2----8D11F4249A80000-7C64AB0A9F1D8D1A.CD803BF233CE76CC\",\r\n    \"PlayFabId\": \"10931252888739651331\",\r\n    \"NewlyCreated\": false\r\n  }\r\n}",
      "errors": [
        "InvalidParams",
        "InvalidGoogleToken",
        "AccountBanned"
      ]
    },
    {
      "name": "LoginWithIOSDeviceID",
      "summary": "Signs the user in using the vendor-specific iOS device identifier, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "On iOS devices, the identifierForVendor  (https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDevice_Class/index.html#//apple_ref/occ/instp/UIDevice/identifierForVendor) must be used as the DeviceId, as the UIDevice uniqueIdentifier has been deprecated as of iOS 5, and use of the advertisingIdentifier for this purpose will result in failure of Apple's certification process. If this is the first time a user has signed in with the iOS device and CreateAccount is set to true, a new PlayFab account will be created and linked to the vendor-specific iOS device ID. In this case, no email or username will be associated with the PlayFab account. Otherwise, if no PlayFab account is linked to the iOS device, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "titleTiers": null,
      "url": "/Client/LoginWithIOSDeviceID",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithIOSDeviceIDRequest",
      "requestExample": "{\r\n  \"TitleId\": \"1000\",\r\n  \"DeviceId\": \"29848d9bh8900a0b003\",\r\n  \"OS\": \"7.11\",\r\n  \"DeviceModel\": \"Iphone 5s\",\r\n  \"CreateAccount\": false\r\n}",
      "result": "LoginResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"SessionTicket\": \"4D2----8D11F4249A80000-7C64AB0A9F1D8D1A.CD803BF233CE76CC\",\r\n    \"PlayFabId\": \"10931252888739651331\",\r\n    \"NewlyCreated\": false\r\n  }\r\n}",
      "seeAlso": [
        "LinkIOSDeviceID",
        "UnlinkIOSDeviceID"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "AccountNotFound",
        "AccountBanned",
        "InvalidPublisherId"
      ]
    },
    {
      "name": "LoginWithKongregate",
      "summary": "Signs the user in using a Kongregate player account.",
      "requestDetails": "More details regarding Kongregate and their game authentication system can be found at  http://developers.kongregate.com/docs/virtual-goods/authentication. Developers must provide the Kongregate user ID and auth token that are generated using the Kongregate client library. PlayFab will combine these identifiers with the title's unique Kongregate app ID to log the player into the Kongregate system. If CreateAccount is set to true and there is not already a user matched to this Kongregate ID, then PlayFab will create a new account for this user and link the ID. In this case, no email or username will be associated with the PlayFab account. If there is already a different PlayFab user linked with this account, then an error will be returned.",
      "subgroup": "Authentication",
      "titleTiers": null,
      "url": "/Client/LoginWithKongregate",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithKongregateRequest",
      "requestExample": "{\r\n  \"TitleId\": \"123\",\r\n  \"KongregateId\": \"457332\",\r\n  \"AuthTicket\": \"SomeKongregateTokenHere\",\r\n  \"CreateAccount\": false\r\n}",
      "result": "LoginResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"SessionTicket\": \"4D2----8D11F4249A80000-7C64AB0A9F1D8D1A.CD803BF233CE76CC\",\r\n    \"PlayFabId\": \"10931252888739651331\",\r\n    \"NewlyCreated\": false\r\n  }\r\n}",
      "seeAlso": [
        "LinkKongregate",
        "UnlinkKongregate"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "AccountNotFound",
        "AccountBanned",
        "InvalidKongregateToken",
        "FeatureNotConfiguredForTitle"
      ]
    },
    {
      "name": "LoginWithPlayFab",
      "summary": "Signs the user into the PlayFab account, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "Username and password lengths are provided for information purposes. The server will validate that data passed in conforms to the field definition and report errors appropriately. It is recommended that developers not perform this validation locally, so that future updates to the username or password do not require client updates.",
      "subgroup": "Authentication",
      "titleTiers": null,
      "url": "/Client/LoginWithPlayFab",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithPlayFabRequest",
      "requestExample": "{\r\n  \"TitleId\": \"1\",\r\n  \"Username\": \"theuser\",\r\n  \"Password\": \"thepassword\"\r\n}",
      "result": "LoginResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"SessionTicket\": \"4D2----8D11F4249A80000-7C64AB0A9F1D8D1A.CD803BF233CE76CC\",\r\n    \"PlayFabId\": \"10931252888739651331\",\r\n    \"NewlyCreated\": false\r\n  }\r\n}",
      "seeAlso": [
        "RegisterPlayFabUser",
        "LoginWithEmailAddress"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "AccountNotFound",
        "AccountBanned",
        "InvalidUsernameOrPassword"
      ]
    },
    {
      "name": "LoginWithPSN",
      "summary": "Signs the user in using a PlayStation Network authentication code, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "If this is the first time a user has signed in with the PlayStation Network account and CreateAccount is set to true, a new PlayFab account will be created and linked to the PSN account. In this case, no email or username will be associated with the PlayFab account. Otherwise, if no PlayFab account is linked to the PSN account, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "titleTiers": null,
      "url": "/Client/LoginWithPSN",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithPSNRequest",
      "requestExample": "{\r\n  \"TitleId\": \"1\",\r\n  \"AuthCode\": \"LKJ6D896D\",\r\n  \"RedirectUri\": \"orbis://games\",\r\n  \"CreateAccount\": false\r\n}",
      "result": "LoginResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"SessionTicket\": \"4D2----8D11F4249A80000-7C64AB0A9F1D8D1A.CD803BF233CE76CC\",\r\n    \"PlayFabId\": \"10931252888739651331\",\r\n    \"NewlyCreated\": false\r\n  }\r\n}",
      "seeAlso": [
        "LinkPSNAccount",
        "UnlinkPSNAccount"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "InvalidPublisherId",
        "AccountNotFound",
        "AccountBanned",
        "InvalidPSNIssuerId",
        "PSNInaccessible",
        "InvalidPSNAuthCode"
      ]
    },
    {
      "name": "LoginWithSteam",
      "summary": "Signs the user in using a Steam authentication ticket, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "Steam sign-in is accomplished with the Steam Session Ticket. More information on the Ticket can be found in the Steamworks SDK, here: https://partner.steamgames.com/documentation/auth (requires sign-in). NOTE: For Steam authentication to work, the title must be configured with the Steam Application ID and Publisher Key in the PlayFab Game Manager (under Properties). Information on creating a Publisher Key (referred to as the Secret Key in PlayFab) for your title can be found here: https://partner.steamgames.com/documentation/webapi#publisherkey. If this is the first time a user has signed in with the Steam account and CreateAccount is set to true, a new PlayFab account will be created and linked to the provided account's Steam ID. In this case, no email or username will be associated with the PlayFab account. Otherwise, if no PlayFab account is linked to the Steam account, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "titleTiers": null,
      "url": "/Client/LoginWithSteam",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithSteamRequest",
      "requestExample": "{\r\n  \"TitleId\": \"1\",\r\n  \"SteamTicket\": \"steamTicketID\",\r\n  \"CreateAccount\": false\r\n}",
      "result": "LoginResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"SessionTicket\": \"4D2----8D11F4249A80000-7C64AB0A9F1D8D1A.CD803BF233CE76CC\",\r\n    \"PlayFabId\": \"10931252888739651331\",\r\n    \"NewlyCreated\": false\r\n  }\r\n}",
      "seeAlso": [
        "LinkSteamAccount",
        "UnlinkSteamAccount"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "InvalidSteamTicket",
        "AccountNotFound",
        "AccountBanned"
      ]
    },
    {
      "name": "LoginWithXbox",
      "summary": "Signs the user in using a Xbox Live Token, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "If this is the first time a user has signed in with the Xbox Live account and CreateAccount is set to true, a new PlayFab account will be created and linked to the Xbox Live account. In this case, no email or username will be associated with the PlayFab account. Otherwise, if no PlayFab account is linked to the Xbox Live account, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "titleTiers": null,
      "url": "/Client/LoginWithXbox",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithXboxRequest",
      "requestExample": "{\r\n  \"TitleId\": \"1\",\r\n  \"XboxToken\": \"XBL3.0 x=1981989841;akljdlkafdknad\",\r\n  \"CreateAccount\": false\r\n}",
      "result": "LoginResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"SessionTicket\": \"4D2----8D11F4249A80000-7C64AB0A9F1D8D1A.CD803BF233CE76CC\",\r\n    \"PlayFabId\": \"10931252888739651331\",\r\n    \"NewlyCreated\": false\r\n  }\r\n}",
      "seeAlso": [
        "LinkXboxAccount",
        "UnlinkXboxAccount"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "InvalidPublisherId",
        "AccountNotFound",
        "AccountBanned",
        "InvalidXboxLiveToken"
      ]
    },
    {
      "name": "RegisterPlayFabUser",
      "summary": "Registers a new Playfab user account, returning a session identifier that can subsequently be used for API calls which require an authenticated user. You must supply either a username or an email address.",
      "resultDetails": "Each account must have a unique email address in the PlayFab service. Once created, the account may be associated with additional accounts (Steam, Facebook, Game Center, etc.), allowing for added social network lists and achievements systems.",
      "subgroup": "Authentication",
      "titleTiers": null,
      "url": "/Client/RegisterPlayFabUser",
      "auth": "None",
      "method": "POST",
      "request": "RegisterPlayFabUserRequest",
      "requestExample": "{\r\n  \"TitleId\": \"1\",\r\n  \"Username\": \"theuser\",\r\n  \"Email\": \"me@here.com\",\r\n  \"Password\": \"thepassword\"\r\n}",
      "result": "RegisterPlayFabUserResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"10931252888739651331\",\r\n    \"SessionTicket\": \"4D2----8D11F4249A80000-7C64AB0A9F1D8D1A.CD803BF233CE76CC\",\r\n    \"Username\": \"username\"\r\n  }\r\n}",
      "seeAlso": [
        "LoginWithPlayFab",
        "LoginWithEmailAddress"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "EmailAddressNotAvailable",
        "InvalidEmailAddress",
        "UsernameNotAvailable",
        "InvalidUsername",
        "InvalidPassword"
      ]
    },
    {
      "name": "AddUsernamePassword",
      "summary": "Adds playfab username/password auth to an existing semi-anonymous account created via a 3rd party auth method.",
      "resultDetails": "Each account must have a unique email address in the PlayFab service. Once created, the account may be associated with additional accounts (Steam, Facebook, Game Center, etc.), allowing for added social network lists and achievements systems.",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/AddUsernamePassword",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "AddUsernamePasswordRequest",
      "requestExample": "{\r\n  \"Username\": \"theuser\",\r\n  \"Email\": \"me@here.com\",\r\n  \"Password\": \"thepassword\"\r\n}",
      "result": "AddUsernamePasswordResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Username\": \"username\"\r\n  }\r\n}",
      "seeAlso": [
        "LoginWithPlayFab",
        "LoginWithEmailAddress"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "EmailAddressNotAvailable",
        "InvalidEmailAddress",
        "UsernameNotAvailable",
        "InvalidUsername",
        "InvalidPassword"
      ]
    },
    {
      "name": "GetAccountInfo",
      "summary": "Retrieves the user's PlayFab account details",
      "resultDetails": "This API retrieves details regarding the user in the PlayFab service. Note that data returned may contain Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for the user, the recommendation is to not store this data locally. The user account returned will be based on the identifier provided in priority order: PlayFabId, Username, Email, then TitleDisplayName. If no identifier is specified, the currently signed in user's information will be returned.",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/GetAccountInfo",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetAccountInfoRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"10931252888739651331\"\r\n}",
      "result": "GetAccountInfoResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"AccountInfo\": {\r\n      \"PlayFabId\": \"10931252888739651331\",\r\n      \"Created\": \"2013-04-07T09:04:28Z\",\r\n      \"Username\": \"accountname\",\r\n      \"TitleInfo\": {\r\n        \"Origination\": \"IOS\",\r\n        \"Created\": \"2014-01-08T11:03:18Z\",\r\n        \"LastLogin\": \"2014-04-07T09:04:28Z\",\r\n        \"FirstLogin\": \"2014-01-08T11:03:18Z\"\r\n      },\r\n      \"FacebookInfo\": {\r\n        \"FacebookId\": \"23525445454\"\r\n      },\r\n      \"SteamInfo\": {\r\n        \"SteamCountry\": \"US\",\r\n        \"SteamCurrency\": \"USD\"\r\n      },\r\n      \"GameCenterInfo\": {\r\n        \"GameCenterId\": \"someone\"\r\n      }\r\n    }\r\n  }\r\n}",
      "errors": [
        "AccountNotFound"
      ]
    },
    {
      "name": "GetPlayFabIDsFromFacebookIDs",
      "summary": "Retrieves the unique PlayFab identifiers for the given set of Facebook identifiers.",
      "resultDetails": "For Facebook identifiers which have not been linked to PlayFab accounts, null will be returned.",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/GetPlayFabIDsFromFacebookIDs",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetPlayFabIDsFromFacebookIDsRequest",
      "requestExample": "{\r\n  \"FacebookIDs\": [\r\n    \"857498576495\",\r\n    \"759374651209\"\r\n  ]\r\n}",
      "result": "GetPlayFabIDsFromFacebookIDsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Data\": [\r\n      {\r\n        \"FacebookId\": \"857498576495\",\r\n        \"PlayFabId\": \"5a446c83645201\"\r\n      },\r\n      {\r\n        \"FacebookId\": \"759374651209\",\r\n        \"PlayFabId\": \"6345cd25a6c7cc\"\r\n      }\r\n    ]\r\n  }\r\n}",
      "errors": [
        "AccountNotFound"
      ]
    },
    {
      "name": "GetPlayFabIDsFromGameCenterIDs",
      "summary": "Retrieves the unique PlayFab identifiers for the given set of Game Center identifiers (referenced in the Game Center Programming Guide as the Player Identifier).",
      "resultDetails": "For Game Center identifiers which have not been linked to PlayFab accounts, null will be returned.",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/GetPlayFabIDsFromGameCenterIDs",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetPlayFabIDsFromGameCenterIDsRequest",
      "requestExample": "{\r\n  \"GameCenterIDs\": [\r\n    \"857498576495\",\r\n    \"759374651209\"\r\n  ]\r\n}",
      "result": "GetPlayFabIDsFromGameCenterIDsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Data\": [\r\n      {\r\n        \"GameCenterId\": \"857498576495\",\r\n        \"PlayFabId\": \"5a446c83645201\"\r\n      },\r\n      {\r\n        \"GameCenterId\": \"759374651209\",\r\n        \"PlayFabId\": \"6345cd25a6c7cc\"\r\n      }\r\n    ]\r\n  }\r\n}",
      "errors": [
        "AccountNotFound"
      ]
    },
    {
      "name": "GetPlayFabIDsFromGoogleIDs",
      "summary": "Retrieves the unique PlayFab identifiers for the given set of Google identifiers. The Google identifiers are the IDs for the user accounts, available as \"id\" in the Google+ People API calls.",
      "resultDetails": "For Google identifiers which have not been linked to PlayFab accounts, null will be returned.",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/GetPlayFabIDsFromGoogleIDs",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetPlayFabIDsFromGoogleIDsRequest",
      "requestExample": "{\r\n  \"GoogleIDs\": [\r\n    \"857498576495\",\r\n    \"759374651209\"\r\n  ]\r\n}",
      "result": "GetPlayFabIDsFromGoogleIDsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Data\": [\r\n      {\r\n        \"GoogleId\": \"857498576495\",\r\n        \"PlayFabId\": \"5a446c83645201\"\r\n      },\r\n      {\r\n        \"GoogleId\": \"759374651209\",\r\n        \"PlayFabId\": \"6345cd25a6c7cc\"\r\n      }\r\n    ]\r\n  }\r\n}",
      "errors": [
        "AccountNotFound"
      ]
    },
    {
      "name": "GetPlayFabIDsFromPSNAccountIDs",
      "summary": "Retrieves the unique PlayFab identifiers for the given set of PlayStation Network identifiers.",
      "resultDetails": "For PlayStation Network identifiers which have not been linked to PlayFab accounts, null will be returned.",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/GetPlayFabIDsFromPSNAccountIDs",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetPlayFabIDsFromPSNAccountIDsRequest",
      "requestExample": "{\r\n  \"PSNAccountIDs\": [\r\n    \"857498576495\",\r\n    \"759374651209\"\r\n  ]\r\n}",
      "result": "GetPlayFabIDsFromPSNAccountIDsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Data\": [\r\n      {\r\n        \"PSNAccountId\": \"857498576495\",\r\n        \"PlayFabId\": \"5a446c83645201\"\r\n      },\r\n      {\r\n        \"PSNAccountId\": \"759374651209\",\r\n        \"PlayFabId\": \"6345cd25a6c7cc\"\r\n      }\r\n    ]\r\n  }\r\n}",
      "errors": [
        "AccountNotFound"
      ]
    },
    {
      "name": "GetPlayFabIDsFromSteamIDs",
      "summary": "Retrieves the unique PlayFab identifiers for the given set of Steam identifiers. The Steam identifiers  are the profile IDs for the user accounts, available as SteamId in the Steamworks Community API calls.",
      "resultDetails": "For Steam identifiers which have not been linked to PlayFab accounts, null will be returned.",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/GetPlayFabIDsFromSteamIDs",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetPlayFabIDsFromSteamIDsRequest",
      "requestExample": "{\r\n  \"SteamIDs\": [\r\n    857498576495,\r\n    759374651209\r\n  ]\r\n}",
      "result": "GetPlayFabIDsFromSteamIDsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Data\": [\r\n      {\r\n        \"SteamId\": 857498576495,\r\n        \"PlayFabId\": \"5a446c83645201\"\r\n      },\r\n      {\r\n        \"SteamId\": 759374651209,\r\n        \"PlayFabId\": \"6345cd25a6c7cc\"\r\n      }\r\n    ]\r\n  }\r\n}",
      "errors": [
        "AccountNotFound"
      ]
    },
    {
      "name": "GetUserCombinedInfo",
      "summary": "Retrieves all requested data for a user in one unified request. By default, this API returns all  data for the locally signed-in user. The input parameters may be used to limit the data retrieved to any subset of the available data, as well as retrieve the available data for a different user. Note that certain data, including inventory, virtual currency balances, and personally identifying information, may only be retrieved for the locally signed-in user. In the example below, a request is made for the account details, virtual currency balances, and specified user data for the locally signed-in user.",
      "resultDetails": "This API retrieves details regarding the user in the PlayFab service. Note that data returned for the locally signed-in user may contain Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for the user, the recommendation is to not store this data locally.",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/GetUserCombinedInfo",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserCombinedInfoRequest",
      "requestExample": "{\r\n  \"GetInventory\": false,\r\n  \"UserDataKeys\": [\r\n    \"preferences\",\r\n    \"progress\"\r\n  ],\r\n  \"GetReadOnlyData\": false\r\n}",
      "result": "GetUserCombinedInfoResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"10931252888739651331\",\r\n    \"AccountInfo\": {\r\n      \"PlayFabId\": \"10931252888739651331\",\r\n      \"Created\": \"2013-04-07T09:04:28Z\",\r\n      \"Username\": \"accountname\",\r\n      \"TitleInfo\": {\r\n        \"Origination\": \"IOS\",\r\n        \"Created\": \"2014-01-08T11:03:18Z\",\r\n        \"LastLogin\": \"2014-04-07T09:04:28Z\",\r\n        \"FirstLogin\": \"2014-01-08T11:03:18Z\"\r\n      },\r\n      \"FacebookInfo\": {\r\n        \"FacebookId\": \"23525445454\"\r\n      },\r\n      \"SteamInfo\": {\r\n        \"SteamCountry\": \"US\",\r\n        \"SteamCurrency\": \"USD\"\r\n      },\r\n      \"GameCenterInfo\": {\r\n        \"GameCenterId\": \"someone\"\r\n      }\r\n    },\r\n    \"VirtualCurrency\": {\r\n      \"GC\": 15\r\n    },\r\n    \"VirtualCurrencyRechargeTimes\": {\r\n      \"GC\": {\r\n        \"SecondsToRecharge\": 3600,\r\n        \"RechargeTime\": \"2014-01-01T12:00:00Z\",\r\n        \"RechargeMax\": 50\r\n      }\r\n    },\r\n    \"Data\": {\r\n      \"preferences\": {\r\n        \"Value\": \"alpha\",\r\n        \"LastUpdated\": \"2014-08-20T12:30:45Z\",\r\n        \"Permission\": \"Public\"\r\n      },\r\n      \"progress\": {\r\n        \"Value\": \"level_twenty\",\r\n        \"LastUpdated\": \"2014-09-01T10:12:30Z\",\r\n        \"Permission\": \"Private\"\r\n      }\r\n    },\r\n    \"DataVersion\": 12,\r\n    \"ReadOnlyDataVersion\": 0\r\n  }\r\n}",
      "errors": [
        "AccountNotFound"
      ]
    },
    {
      "name": "LinkAndroidDeviceID",
      "summary": "Links the Android device identifier to the user's PlayFab account",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/LinkAndroidDeviceID",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkAndroidDeviceIDRequest",
      "requestExample": "{\r\n  \"AndroidDeviceId\": \"526f79204261747479\",\r\n  \"OS\": \"5.0\",\r\n  \"AndroidDevice\": \"Nexus 6\"\r\n}",
      "result": "LinkAndroidDeviceIDResult",
      "resultExample": "",
      "seeAlso": [
        "LoginWithAndroidDeviceID",
        "UnlinkAndroidDeviceID"
      ],
      "errors": [
        "InvalidParams",
        "LinkedDeviceAlreadyClaimed",
        "DeviceAlreadyLinked"
      ]
    },
    {
      "name": "LinkCustomID",
      "summary": "Links the custom identifier, generated by the title, to the user's PlayFab account",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/LinkCustomID",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkCustomIDRequest",
      "requestExample": "{\r\n  \"CustomId\": \"67AB-5397-CC54-EA31\"\r\n}",
      "result": "LinkCustomIDResult",
      "resultExample": "",
      "seeAlso": [
        "LoginWithCustomID",
        "UnlinkCustomID"
      ],
      "errors": [
        "InvalidParams",
        "LinkedIdentifierAlreadyClaimed"
      ]
    },
    {
      "name": "LinkFacebookAccount",
      "summary": "Links the Facebook account associated with the provided Facebook access token to the user's PlayFab account",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/LinkFacebookAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkFacebookAccountRequest",
      "requestExample": "{\r\n  \"AccessToken\": \"FaceAccessTokenID\"\r\n}",
      "result": "LinkFacebookAccountResult",
      "resultExample": "",
      "seeAlso": [
        "UnlinkFacebookAccount",
        "LoginWithFacebook"
      ],
      "errors": [
        "InvalidParams",
        "InvalidFacebookToken",
        "LinkedAccountAlreadyClaimed",
        "AccountAlreadyLinked"
      ]
    },
    {
      "name": "LinkGameCenterAccount",
      "summary": "Links the Game Center account associated with the provided Game Center ID to the user's PlayFab account",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/LinkGameCenterAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkGameCenterAccountRequest",
      "requestExample": "{\r\n  \"GameCenterId\": \"2998h2998f0b000d0993\"\r\n}",
      "result": "LinkGameCenterAccountResult",
      "resultExample": "",
      "seeAlso": [
        "UnlinkGameCenterAccount"
      ],
      "errors": [
        "InvalidParams",
        "LinkedAccountAlreadyClaimed",
        "AccountAlreadyLinked"
      ]
    },
    {
      "name": "LinkGoogleAccount",
      "summary": "Links the currently signed-in user account to the Google account specified by the Google account access token",
      "requestDetails": "Google sign-in is accomplished with the Google OAuth 2.0 Access Token. More information on the Token can be  found in the Google developer documentation (https://developers.google.com/accounts/docs/OAuth2) and in the Quick Start sample applications (https://developers.google.com/+/quickstart/).",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/LinkGoogleAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkGoogleAccountRequest",
      "requestExample": "{\r\n  \"AccessToken\": \"BInn23arRiCepodeRQ\"\r\n}",
      "result": "LinkGoogleAccountResult",
      "resultExample": "",
      "seeAlso": [
        "UnlinkGoogleAccount",
        "LoginWithGoogleAccount"
      ],
      "errors": [
        "InvalidParams",
        "InvalidGoogleToken",
        "AccountBanned",
        "LinkedAccountAlreadyClaimed",
        "AccountAlreadyLinked"
      ]
    },
    {
      "name": "LinkIOSDeviceID",
      "summary": "Links the vendor-specific iOS device identifier to the user's PlayFab account",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/LinkIOSDeviceID",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkIOSDeviceIDRequest",
      "requestExample": "{\r\n  \"DeviceId\": \"29848d9bh8900a0b003\",\r\n  \"OS\": \"7.11\",\r\n  \"DeviceModel\": \"Iphone 5s\"\r\n}",
      "result": "LinkIOSDeviceIDResult",
      "resultExample": "",
      "seeAlso": [
        "LoginWithIOSDeviceID",
        "UnlinkIOSDeviceID"
      ],
      "errors": [
        "InvalidParams",
        "LinkedDeviceAlreadyClaimed",
        "DeviceAlreadyLinked"
      ]
    },
    {
      "name": "LinkKongregate",
      "summary": "Links the Kongregate identifier to the user's PlayFab account",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/LinkKongregate",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkKongregateAccountRequest",
      "requestExample": "{\r\n  \"KongregateId\": \"457332\",\r\n  \"AuthTicket\": \"{123-456-78931212}\"\r\n}",
      "result": "LinkKongregateAccountResult",
      "resultExample": "",
      "seeAlso": [
        "LoginWithKongregate",
        "UnlinkKongregate"
      ],
      "errors": [
        "InvalidParams",
        "AccountAlreadyLinked",
        "InvalidKongregateToken",
        "FeatureNotConfiguredForTitle"
      ]
    },
    {
      "name": "LinkPSNAccount",
      "summary": "Links the PlayStation Network account associated with the provided access code to the user's PlayFab account",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/LinkPSNAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkPSNAccountRequest",
      "requestExample": "{\r\n  \"AuthCode\": \"LKJDG7DDE\",\r\n  \"RedirectUri\": \"orbis://games\"\r\n}",
      "result": "LinkPSNAccountResult",
      "resultExample": "",
      "seeAlso": [
        "UnlinkPSNAccount",
        "LoginWithPSN"
      ],
      "errors": [
        "InvalidParams",
        "InvalidPSNAuthCode",
        "InvalidPublisherId",
        "LinkedAccountAlreadyClaimed",
        "AccountAlreadyLinked",
        "InvalidPSNIssuerId",
        "PSNInaccessible",
        "InvalidPSNAuthCode"
      ]
    },
    {
      "name": "LinkSteamAccount",
      "summary": "Links the Steam account associated with the provided Steam authentication ticket to the user's PlayFab account",
      "requestDetails": "Steam authentication is accomplished with the Steam Session Ticket. More information on the Ticket can be found in the Steamworks SDK, here: https://partner.steamgames.com/documentation/auth (requires sign-in). NOTE: For Steam authentication to work, the title must be configured with the Steam Application ID and Publisher Key in the PlayFab Game Manager (under Properties). Information on creating a Publisher Key (referred to as the Secret Key in PlayFab) for your title can be found here: https://partner.steamgames.com/documentation/webapi#publisherkey.",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/LinkSteamAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkSteamAccountRequest",
      "requestExample": "{\r\n  \"SteamTicket\": \"steamTicketID\"\r\n}",
      "result": "LinkSteamAccountResult",
      "resultExample": "",
      "seeAlso": [
        "UnlinkSteamAccount",
        "LoginWithSteam"
      ],
      "errors": [
        "InvalidParams",
        "InvalidSteamTicket",
        "LinkedAccountAlreadyClaimed",
        "AccountAlreadyLinked"
      ]
    },
    {
      "name": "LinkXboxAccount",
      "summary": "Links the Xbox Live account associated with the provided access code to the user's PlayFab account",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/LinkXboxAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkXboxAccountRequest",
      "requestExample": "{\r\n  \"XboxToken\": \"XBL3.0 x=1981989841;akljdlkafdknad\"\r\n}",
      "result": "LinkXboxAccountResult",
      "resultExample": "",
      "seeAlso": [
        "UnlinkXboxAccount",
        "LoginWithXbox"
      ],
      "errors": [
        "InvalidParams",
        "InvalidXboxLiveToken",
        "InvalidPublisherId",
        "LinkedAccountAlreadyClaimed",
        "AccountAlreadyLinked"
      ]
    },
    {
      "name": "SendAccountRecoveryEmail",
      "summary": "Forces an email to be sent to the registered email address for the user's account, with a link allowing the user to change the password",
      "requestDetails": "If the account in question is a \"temporary\" account (for example, one that was created via a call to LoginFromIOSDeviceID), thisfunction will have no effect. Only PlayFab accounts which have valid email addresses will be able to receive a password reset email using this API.",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/SendAccountRecoveryEmail",
      "auth": "None",
      "method": "POST",
      "request": "SendAccountRecoveryEmailRequest",
      "requestExample": "{\r\n  \"Email\": \"Me@here.com\",\r\n  \"TitleId\": \"1000\"\r\n}",
      "result": "SendAccountRecoveryEmailResult",
      "resultExample": "",
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "UnlinkAndroidDeviceID",
      "summary": "Unlinks the related Android device identifier from the user's PlayFab account",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/UnlinkAndroidDeviceID",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlinkAndroidDeviceIDRequest",
      "requestExample": "{\r\n  \"AndroidDeviceId\": \"526f79204261747479\"\r\n}",
      "result": "UnlinkAndroidDeviceIDResult",
      "resultExample": "",
      "seeAlso": [
        "LoginWithAndroidDeviceID",
        "LinkAndroidDeviceID"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UnlinkCustomID",
      "summary": "Unlinks the related custom identifier from the user's PlayFab account",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/UnlinkCustomID",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlinkCustomIDRequest",
      "requestExample": "{\r\n  \"CustomId\": \"67AB-5397-CC54-EA31\"\r\n}",
      "result": "UnlinkCustomIDResult",
      "resultExample": "",
      "seeAlso": [
        "LoginWithCustomID",
        "LinkCustomID"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UnlinkFacebookAccount",
      "summary": "Unlinks the related Facebook account from the user's PlayFab account",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/UnlinkFacebookAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlinkFacebookAccountRequest",
      "requestExample": "{}",
      "result": "UnlinkFacebookAccountResult",
      "resultExample": "",
      "seeAlso": [
        "LinkFacebookAccount"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UnlinkGameCenterAccount",
      "summary": "Unlinks the related Game Center account from the user's PlayFab account",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/UnlinkGameCenterAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlinkGameCenterAccountRequest",
      "requestExample": "{}",
      "result": "UnlinkGameCenterAccountResult",
      "resultExample": "",
      "seeAlso": [
        "LinkGameCenterAccount"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UnlinkGoogleAccount",
      "summary": "Unlinks the related Google account from the user's PlayFab account",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/UnlinkGoogleAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlinkGoogleAccountRequest",
      "requestExample": "{}",
      "result": "UnlinkGoogleAccountResult",
      "resultExample": "",
      "seeAlso": [
        "LinkGoogleAccount",
        "LoginWithGoogleAccount"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UnlinkIOSDeviceID",
      "summary": "Unlinks the related iOS device identifier from the user's PlayFab account",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/UnlinkIOSDeviceID",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlinkIOSDeviceIDRequest",
      "requestExample": "{\r\n  \"DeviceId\": \"29848d9bh8900a0b003\"\r\n}",
      "result": "UnlinkIOSDeviceIDResult",
      "resultExample": "",
      "seeAlso": [
        "LoginWithIOSDeviceID",
        "LinkIOSDeviceID"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UnlinkKongregate",
      "summary": "Unlinks the related Kongregate identifier from the user's PlayFab account",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/UnlinkKongregate",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlinkKongregateAccountRequest",
      "requestExample": "",
      "result": "UnlinkKongregateAccountResult",
      "resultExample": "",
      "seeAlso": [
        "LoginWithKongregate",
        "LinkKongregate"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UnlinkPSNAccount",
      "summary": "Unlinks the related PSN account from the user's PlayFab account",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/UnlinkPSNAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlinkPSNAccountRequest",
      "requestExample": "{}",
      "result": "UnlinkPSNAccountResult",
      "resultExample": "",
      "seeAlso": [
        "LinkPSNAccount"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UnlinkSteamAccount",
      "summary": "Unlinks the related Steam account from the user's PlayFab account",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/UnlinkSteamAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlinkSteamAccountRequest",
      "requestExample": "{}",
      "result": "UnlinkSteamAccountResult",
      "resultExample": "",
      "seeAlso": [
        "LinkSteamAccount"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UnlinkXboxAccount",
      "summary": "Unlinks the related Xbox Live account from the user's PlayFab account",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/UnlinkXboxAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlinkXboxAccountRequest",
      "requestExample": "{\r\n  \"XboxToken\": \"XBL3.0 x=1981989841;akljdlkafdknad\"\r\n}",
      "result": "UnlinkXboxAccountResult",
      "resultExample": "",
      "seeAlso": [
        "LinkXboxAccount"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked",
        "InvalidXboxLiveToken"
      ]
    },
    {
      "name": "UpdateUserTitleDisplayName",
      "summary": "Updates the title specific display name for the user",
      "requestDetails": "In addition to the PlayFab username, titles can make use of a DisplayName which is also a unique identifier, but specific to the title. This allows for unique names which more closely match the theme or genre of a title, for example.",
      "subgroup": "Account Management",
      "titleTiers": null,
      "url": "/Client/UpdateUserTitleDisplayName",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UpdateUserTitleDisplayNameRequest",
      "requestExample": "{\r\n  \"DisplayName\": \"User Title Name\"\r\n}",
      "result": "UpdateUserTitleDisplayNameResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"DisplayName\": \"User Title Name\"\r\n  }\r\n}",
      "errors": [
        "InvalidParams",
        "UsernameNotAvailable",
        "InsufficientFunds"
      ]
    },
    {
      "name": "GetFriendLeaderboard",
      "summary": "Retrieves a list of ranked friends of the current player for the given statistic, starting from the indicated point in the leaderboard",
      "resultDetails": "Note that the Position of the user in the results is for the overall leaderboard. If Facebook friends are included, make sure the access token from previous LoginWithFacebook call is still valid and not expired.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Client/GetFriendLeaderboard",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetFriendLeaderboardRequest",
      "requestExample": "{\r\n  \"StatisticName\": \"Kills\",\r\n  \"StartPosition\": 1258,\r\n  \"MaxResultsCount\": 20,\r\n  \"IncludeSteamFriends\": false\r\n}",
      "result": "GetLeaderboardResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Leaderboard\": [\r\n      {\r\n        \"PlayFabId\": \"10931252888739651331\",\r\n        \"DisplayName\": \"username\",\r\n        \"StatValue\": 12,\r\n        \"Position\": 0\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "GetLeaderboardAroundCurrentUser",
        "GetUserStatistics"
      ],
      "errors": [
        "InvalidParams",
        "FacebookAPIError"
      ]
    },
    {
      "name": "GetFriendLeaderboardAroundCurrentUser",
      "summary": "Retrieves a list of ranked friends of the current player for the given statistic, centered on the currently signed-in user",
      "resultDetails": "Note that the Position of the user in the results is for the overall leaderboard. If Facebook friends are included, make sure the access token from previous LoginWithFacebook call is still valid and not expired.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Client/GetFriendLeaderboardAroundCurrentUser",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetFriendLeaderboardAroundCurrentUserRequest",
      "requestExample": "{\r\n  \"StatisticName\": \"Kills\",\r\n  \"MaxResultsCount\": 20\r\n}",
      "result": "GetFriendLeaderboardAroundCurrentUserResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Leaderboard\": [\r\n      {\r\n        \"PlayFabId\": \"10931252888739651331\",\r\n        \"DisplayName\": \"username\",\r\n        \"StatValue\": 12,\r\n        \"Position\": 0\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "GetLeaderboardAroundCurrentUser",
        "GetUserStatistics"
      ],
      "errors": [
        "InvalidParams",
        "FacebookAPIError"
      ]
    },
    {
      "name": "GetLeaderboard",
      "summary": "Retrieves a list of ranked users for the given statistic, starting from the indicated point in the leaderboard",
      "resultDetails": "Note that the Position of the user in the results is for the overall leaderboard.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Client/GetLeaderboard",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetLeaderboardRequest",
      "requestExample": "{\r\n  \"StatisticName\": \"Kills\",\r\n  \"StartPosition\": 0,\r\n  \"MaxResultsCount\": 20\r\n}",
      "result": "GetLeaderboardResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Leaderboard\": [\r\n      {\r\n        \"PlayFabId\": \"10931252888739651331\",\r\n        \"DisplayName\": \"username\",\r\n        \"StatValue\": 12,\r\n        \"Position\": 0\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "GetLeaderboardAroundCurrentUser",
        "GetUserStatistics"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetLeaderboardAroundCurrentUser",
      "summary": "Retrieves a list of ranked users for the given statistic, centered on the currently signed-in user",
      "resultDetails": "Note that the Position of the user in the results is for the overall leaderboard.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Client/GetLeaderboardAroundCurrentUser",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetLeaderboardAroundCurrentUserRequest",
      "requestExample": "{\r\n  \"StatisticName\": \"Kills\",\r\n  \"MaxResultsCount\": 20\r\n}",
      "result": "GetLeaderboardAroundCurrentUserResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Leaderboard\": [\r\n      {\r\n        \"PlayFabId\": \"10931252888739651331\",\r\n        \"DisplayName\": \"username\",\r\n        \"StatValue\": 12,\r\n        \"Position\": 0\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "GetLeaderboard",
        "GetUserStatistics"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserData",
      "summary": "Retrieves the title-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. Every time the data is updated via any source, the version counter is incremented. If the Version parameter is provided, then this call will only return data if the current version on the system is greater than the value provided. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Client/GetUserData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserDataRequest",
      "requestExample": "{\r\n  \"Keys\": [\r\n    \"preferences\",\r\n    \"progress\"\r\n  ]\r\n}",
      "result": "GetUserDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Data\": {\r\n      \"preferences\": {\r\n        \"Value\": \"alpha\",\r\n        \"LastUpdated\": \"2014-08-20T12:30:45Z\",\r\n        \"Permission\": \"Public\"\r\n      },\r\n      \"progress\": {\r\n        \"Value\": \"level_twenty\",\r\n        \"LastUpdated\": \"2014-09-01T10:12:30Z\",\r\n        \"Permission\": \"Private\"\r\n      }\r\n    },\r\n    \"DataVersion\": 0\r\n  }\r\n}",
      "seeAlso": [
        "UpdateUserData",
        "GetUserReadOnlyData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserPublisherData",
      "summary": "Retrieves the publisher-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Client/GetUserPublisherData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserDataRequest",
      "requestExample": "{\r\n  \"Keys\": [\r\n    \"preferences\",\r\n    \"progress\"\r\n  ]\r\n}",
      "result": "GetUserDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Data\": {\r\n      \"preferences\": {\r\n        \"Value\": \"alpha\",\r\n        \"LastUpdated\": \"2014-08-20T12:30:45Z\",\r\n        \"Permission\": \"Public\"\r\n      },\r\n      \"progress\": {\r\n        \"Value\": \"level_twenty\",\r\n        \"LastUpdated\": \"2014-09-01T10:12:30Z\",\r\n        \"Permission\": \"Private\"\r\n      }\r\n    },\r\n    \"DataVersion\": 0\r\n  }\r\n}",
      "seeAlso": [
        "UpdateUserPublisherData",
        "GetUserPublisherReadOnlyData"
      ],
      "errors": [
        "InvalidParams",
        "PublisherNotSet"
      ]
    },
    {
      "name": "GetUserPublisherReadOnlyData",
      "summary": "Retrieves the publisher-specific custom data for the user which can only be read by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Client/GetUserPublisherReadOnlyData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserDataRequest",
      "requestExample": "{\r\n  \"Keys\": [\r\n    \"preferences\",\r\n    \"progress\"\r\n  ]\r\n}",
      "result": "GetUserDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Data\": {\r\n      \"preferences\": {\r\n        \"Value\": \"alpha\",\r\n        \"LastUpdated\": \"2014-08-20T12:30:45Z\",\r\n        \"Permission\": \"Public\"\r\n      },\r\n      \"progress\": {\r\n        \"Value\": \"level_twenty\",\r\n        \"LastUpdated\": \"2014-09-01T10:12:30Z\",\r\n        \"Permission\": \"Private\"\r\n      }\r\n    },\r\n    \"DataVersion\": 0\r\n  }\r\n}",
      "seeAlso": [
        "GetUserPublisherData",
        "UpdateUserPublisherData"
      ],
      "errors": [
        "InvalidParams",
        "PublisherNotSet"
      ]
    },
    {
      "name": "GetUserReadOnlyData",
      "summary": "Retrieves the title-specific custom data for the user which can only be read by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. Every time the data is updated via any source, the version counter is incremented. If the Version parameter is provided, then this call will only return data if the current version on the system is greater than the value provided. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Client/GetUserReadOnlyData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserDataRequest",
      "requestExample": "{\r\n  \"Keys\": [\r\n    \"preferences\",\r\n    \"progress\"\r\n  ]\r\n}",
      "result": "GetUserDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Data\": {\r\n      \"preferences\": {\r\n        \"Value\": \"alpha\",\r\n        \"LastUpdated\": \"2014-08-20T12:30:45Z\",\r\n        \"Permission\": \"Public\"\r\n      },\r\n      \"progress\": {\r\n        \"Value\": \"level_twenty\",\r\n        \"LastUpdated\": \"2014-09-01T10:12:30Z\",\r\n        \"Permission\": \"Private\"\r\n      }\r\n    },\r\n    \"DataVersion\": 0\r\n  }\r\n}",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserStatistics",
      "summary": "Retrieves the details of all title-specific statistics for the user",
      "resultDetails": "User statistics are numeric values which may only be updated by a server operation, in order to minimize the opportunity for unauthorized changes. In addition to being available for use by the title, the statistics are used for all leaderboard operations in PlayFab.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Client/GetUserStatistics",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserStatisticsRequest",
      "requestExample": "{}",
      "result": "GetUserStatisticsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"UserStatistics\": {\r\n      \"Headshots\": 18,\r\n      \"Kills\": 47\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "GetLeaderboard",
        "GetLeaderboardAroundCurrentUser"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateUserData",
      "summary": "Creates and updates the title-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "This function performs an additive update of the arbitrary strings containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. New keys will be added, with the given values. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Client/UpdateUserData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UpdateUserDataRequest",
      "requestExample": "{\r\n  \"Data\": {\r\n    \"Class\": \"Fighter\",\r\n    \"Gender\": \"Female\",\r\n    \"Icon\": \"Guard 3\",\r\n    \"Theme\": \"Colorful\"\r\n  },\r\n  \"Permission\": \"Public\"\r\n}",
      "result": "UpdateUserDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"DataVersion\": 3\r\n  }\r\n}",
      "seeAlso": [
        "GetUserData",
        "GetUserReadOnlyData"
      ],
      "errors": [
        "InvalidParams",
        "KeyLengthExceeded",
        "DataLengthExceeded",
        "DeleteKeyConflict"
      ]
    },
    {
      "name": "UpdateUserPublisherData",
      "summary": "Creates and updates the publisher-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "This function performs an additive update of the arbitrary strings containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. New keys will be added, with the given values. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Client/UpdateUserPublisherData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UpdateUserDataRequest",
      "requestExample": "{\r\n  \"Data\": {\r\n    \"Class\": \"Fighter\",\r\n    \"Gender\": \"Female\",\r\n    \"Icon\": \"Guard 3\",\r\n    \"Theme\": \"Colorful\"\r\n  },\r\n  \"Permission\": \"Public\"\r\n}",
      "result": "UpdateUserDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"DataVersion\": 3\r\n  }\r\n}",
      "seeAlso": [
        "GetUserPublisherData",
        "GetUserPublisherReadOnlyData"
      ],
      "errors": [
        "InvalidParams",
        "PublisherNotSet",
        "KeyLengthExceeded",
        "DataLengthExceeded",
        "DeleteKeyConflict"
      ]
    },
    {
      "name": "UpdateUserStatistics",
      "summary": "Updates the values of the specified title-specific statistics for the user",
      "requestDetails": "This operation is additive. Statistics not currently defined will be added, while those already defined will be updated with the given values. All other user statistics will remain unchanged. This API must be enabled for use as an option in the game manager website. It is disabled by default.",
      "resultDetails": "User statistics are numeric values which may only be updated by a server operation, in order to minimize the opportunity for unauthorized changes. In addition to being available for use by the title, the statistics are used for all leaderboard operations in PlayFab.",
      "subgroup": "Player Data Management",
      "titleTiers": null,
      "url": "/Client/UpdateUserStatistics",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UpdateUserStatisticsRequest",
      "requestExample": "{\r\n  \"UserStatistics\": {\r\n    \"Headshots\": 18,\r\n    \"Kills\": 47\r\n  }\r\n}",
      "result": "UpdateUserStatisticsResult",
      "resultExample": "",
      "seeAlso": [
        "GetLeaderboard",
        "GetLeaderboardAroundCurrentUser",
        "GetUserStatistics"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound",
        "InvalidUserStatistics",
        "APINotEnabledForGameClientAccess"
      ]
    },
    {
      "name": "GetCatalogItems",
      "summary": "Retrieves the specified version of the title's catalog of virtual goods, including all defined properties",
      "resultDetails": "If CatalogVersion is not specified, only inventory items associated with the most recent version of the catalog will be returned.",
      "subgroup": "Title-Wide Data Management",
      "titleTiers": null,
      "url": "/Client/GetCatalogItems",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetCatalogItemsRequest",
      "requestExample": "{\r\n  \"CatalogVersion\": \"5\"\r\n}",
      "result": "GetCatalogItemsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Catalog\": [\r\n      {\r\n        \"ItemId\": \"shield_level_5\",\r\n        \"ItemClass\": \"shields\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Level 5 Shield\",\r\n        \"Description\": \"Strong defense against projectile attacks\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 199,\r\n          \"GV\": 25\r\n        },\r\n        \"RealCurrencyPrices\": {\r\n          \"GBP\": 149,\r\n          \"EUR\": 169\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"energy_boost_1\",\r\n        \"ItemClass\": \"boosts\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Energy Drink Six-Pack\",\r\n        \"Description\": \"Get a quick burst of energy whenever you need it\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 199,\r\n          \"GV\": 25\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"required_item_for_grant_a_1\",\r\n        \"ItemClass\": \"sets\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Grant Set Item 1\",\r\n        \"Description\": \"Item 1 from the set of items needed to get Granted Item A for free\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 249,\r\n          \"GV\": 1500\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"required_item_for_grant_a_2\",\r\n        \"ItemClass\": \"sets\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Grant Set Item 2\",\r\n        \"Description\": \"Item 2 from the set of items needed to get Granted Item A for free\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 249,\r\n          \"GV\": 1500\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"required_item_for_grant_a_3\",\r\n        \"ItemClass\": \"sets\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Grant Set Item 3\",\r\n        \"Description\": \"Item 3 from the set of items needed to get Granted Item A for free\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 249,\r\n          \"GV\": 1500\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"required_item_for_grant_a_4\",\r\n        \"ItemClass\": \"sets\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Grant Set Item 4\",\r\n        \"Description\": \"Item 4 from the set of items needed to get Granted Item A for free\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 249,\r\n          \"GV\": 1500\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"granted_item_a\",\r\n        \"ItemClass\": \"sets\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Granted Item A\",\r\n        \"Description\": \"Bonus item granted for free once the full set of 4 Grant Set items are collected\",\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"consumable_item_1\",\r\n        \"ItemClass\": \"Consumables\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Consumable Item 1\",\r\n        \"Description\": \"Item demonstrating usage-based consumables\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"GV\": 500\r\n        },\r\n        \"Consumable\": {\r\n          \"UsageCount\": 3\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"consumable_item_2\",\r\n        \"ItemClass\": \"Consumables\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Consumable Item 2\",\r\n        \"Description\": \"Item demonstrating time-based consumables\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"GV\": 750\r\n        },\r\n        \"Consumable\": {\r\n          \"UsagePeriod\": 3600,\r\n          \"UsagePeriodGroup\": \"usage_group_1\"\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"sub_bundle_item_1\",\r\n        \"ItemClass\": \"Bundles\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Bundled Item 1\",\r\n        \"Description\": \"Item which is added to the user inventory as part of a bundle\",\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"sub_bundle_item_2\",\r\n        \"ItemClass\": \"Bundles\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Bundled Item 2\",\r\n        \"Description\": \"Item which is added to the user inventory as part of a bundle\",\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"item_bundle_1\",\r\n        \"ItemClass\": \"Bundles\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Item bundle 1\",\r\n        \"Description\": \"Item which, when added to the user inventory, also adds other bundled items\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 599\r\n        },\r\n        \"Bundle\": {\r\n          \"BundledItems\": [\r\n            \"sub_bundle_item_1\",\r\n            \"sub_bundle_item_2\"\r\n          ],\r\n          \"BundledResultTables\": [\r\n            \"random_result_1\"\r\n          ],\r\n          \"BundledVirtualCurrencies\": {\r\n            \"GV\": 1000\r\n          }\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"key_item_1\",\r\n        \"ItemClass\": \"Containers\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Key Item 1\",\r\n        \"Description\": \"Key used to unlock Container 1\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 199\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"sub_container_item_1\",\r\n        \"ItemClass\": \"Containers\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Container Item 1\",\r\n        \"Description\": \"Item which is added to the user inventory as part of opening a container\",\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"sub_container_item_2\",\r\n        \"ItemClass\": \"Containers\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Container Item 2\",\r\n        \"Description\": \"Item which is added to the user inventory as part of opening a container\",\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"item_container_1\",\r\n        \"ItemClass\": \"Containers\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Item Container 1\",\r\n        \"Description\": \"Item which, when opened with Key Item 1, also adds the items it holds to the user inventory\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 499\r\n        },\r\n        \"Consumable\": {\r\n          \"UsageCount\": 1\r\n        },\r\n        \"Container\": {\r\n          \"KeyItemId\": \"key_item_1\",\r\n          \"ItemContents\": [\r\n            \"sub_container_item_1\",\r\n            \"sub_container_item_2\"\r\n          ],\r\n          \"ResultTableContents\": [\r\n            \"random_result_1\"\r\n          ],\r\n          \"VirtualCurrencyContents\": {\r\n            \"GV\": 1000\r\n          }\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"item_container_2\",\r\n        \"ItemClass\": \"Containers\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Item Container 2\",\r\n        \"Description\": \"Item which, when opened (no key needed), adds the items it holds to the user inventory\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 99\r\n        },\r\n        \"Consumable\": {\r\n          \"UsageCount\": 1\r\n        },\r\n        \"Container\": {\r\n          \"VirtualCurrencyContents\": {\r\n            \"GV\": 1000\r\n          }\r\n        },\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      },\r\n      {\r\n        \"ItemId\": \"starterpack_1\",\r\n        \"ItemClass\": \"starterpacks\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Super Starter Pack\",\r\n        \"Description\": \"Everything you need to get started fast track at the right price\",\r\n        \"CanBecomeCharacter\": false,\r\n        \"IsStackable\": false,\r\n        \"IsTradable\": false\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "GetUserInventory",
        "GetStoreItems"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetStoreItems",
      "summary": "Retrieves the set of items defined for the specified store, including all prices defined",
      "requestDetails": "A store contains an array of references to items defined in one or more catalog versions of the game, along with the prices for the item, in both real world and virtual currencies. These prices act as an override to any prices defined in the catalog. In this way, the base definitions of the items may be defined in the catalog, with all associated properties, while the pricing can be set for each store, as needed. This allows for subsets of goods to be defined for different purposes (in order to simplify showing some, but not all catalog items to users, based upon different characteristics), along with unique prices. Note that all prices defined in the catalog and store definitions for the item are considered valid, and that a compromised client can be made to send a request for an item based upon any of these definitions. If no price is specified in the store for an item, the price set in the catalog should be displayed to the user.",
      "subgroup": "Title-Wide Data Management",
      "titleTiers": null,
      "url": "/Client/GetStoreItems",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetStoreItemsRequest",
      "requestExample": "{\r\n  \"StoreId\": \"BonusStore\"\r\n}",
      "result": "GetStoreItemsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Store\": [\r\n      {\r\n        \"ItemId\": \"shield_level_5\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 199,\r\n          \"GV\": 25\r\n        }\r\n      },\r\n      {\r\n        \"ItemId\": \"energy_boost_1\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 199,\r\n          \"GV\": 25\r\n        }\r\n      },\r\n      {\r\n        \"ItemId\": \"gamecredits_500\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 199,\r\n          \"GV\": 25\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "GetCatalogItems"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetTitleData",
      "summary": "Retrieves the key-value store of custom title settings",
      "requestDetails": "This API is designed to return title specific values which can be read, but not written to, by the client. For example, a developer could choose to store values which modify the user experience, such as enemy spawn rates, weapon strengths, movement speeds, etc. This allows a developer to update the title without the need to create, test, and ship a new build. Note that there may up to a minute delay in between updating title data and this API call returning the newest value.",
      "subgroup": "Title-Wide Data Management",
      "titleTiers": null,
      "url": "/Client/GetTitleData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetTitleDataRequest",
      "requestExample": "{\r\n  \"Keys\": [\r\n    \"color\",\r\n    \"propertyA\"\r\n  ]\r\n}",
      "result": "GetTitleDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Data\": {\r\n      \"color\": \"blue\",\r\n      \"propertyA\": \"xyz123\"\r\n    }\r\n  }\r\n}",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetTitleNews",
      "summary": "Retrieves the title news feed, as configured in the developer portal",
      "subgroup": "Title-Wide Data Management",
      "titleTiers": null,
      "url": "/Client/GetTitleNews",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetTitleNewsRequest",
      "requestExample": "{\r\n  \"Count\": 25\r\n}",
      "result": "GetTitleNewsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"News\": [\r\n      {\r\n        \"Timestamp\": \"2014-04-06T00:00:00Z\",\r\n        \"Title\": \"News of the Day\",\r\n        \"Body\": \"<b>We have a new object to buy!</b>\"\r\n      }\r\n    ]\r\n  }\r\n}",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "AddUserVirtualCurrency",
      "summary": "Increments the user's balance of the specified virtual currency by the stated amount",
      "requestDetails": "This API must be enabled for use as an option in the game manager website. It is disabled by default.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Client/AddUserVirtualCurrency",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "AddUserVirtualCurrencyRequest",
      "requestExample": "{\r\n  \"VirtualCurrency\": \"GC\",\r\n  \"Amount\": 100\r\n}",
      "result": "ModifyUserVirtualCurrencyResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"B456AE0\",\r\n    \"VirtualCurrency\": \"GC\",\r\n    \"BalanceChange\": 10,\r\n    \"Balance\": 1500\r\n  }\r\n}",
      "seeAlso": [
        "SubtractUserVirtualCurrency"
      ],
      "errors": [
        "InvalidParams",
        "APINotEnabledForGameClientAccess"
      ]
    },
    {
      "name": "ConfirmPurchase",
      "summary": "Confirms with the payment provider that the purchase was approved (if applicable) and adjusts inventory and virtual currency balances as appropriate",
      "requestDetails": "The final step in the purchasing process, this API finalizes the purchase with the payment provider, where applicable, adding virtual goods to the player inventory (including random drop table resolution and recursive addition of bundled items) and adjusting virtual currency balances for funds used or added. Note that this is a pull operation, and should be polled regularly when a purchase is in progress.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Client/ConfirmPurchase",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ConfirmPurchaseRequest",
      "requestExample": "{\r\n  \"OrderId\": \"8853591446005860822\"\r\n}",
      "result": "ConfirmPurchaseResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"OrderId\": \"8853591446005860822\",\r\n    \"PurchaseDate\": \"2014-04-07T09:04:28Z\",\r\n    \"Items\": [\r\n      {\r\n        \"ItemId\": \"shield_level_5\",\r\n        \"ItemInstanceId\": \"40895075594\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Level 5 Shield\",\r\n        \"UnitCurrency\": \"GV\",\r\n        \"UnitPrice\": 25\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "StartPurchase",
        "PayForPurchase"
      ],
      "errors": [
        "InvalidParams",
        "FailedByPaymentProvider"
      ]
    },
    {
      "name": "ConsumeItem",
      "summary": "Consume uses of a consumable item. When all uses are consumed, it will be removed from the player's inventory.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Client/ConsumeItem",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ConsumeItemRequest",
      "requestExample": "{\r\n  \"ItemInstanceId\": \"94585729\",\r\n  \"ConsumeCount\": 1\r\n}",
      "result": "ConsumeItemResult",
      "resultExample": "",
      "errors": [
        "InvalidParams",
        "NoRemainingUses",
        "ItemNotFound"
      ]
    },
    {
      "name": "GetCharacterInventory",
      "summary": "Retrieves the specified character's current inventory of virtual goods",
      "requestDetails": "All items currently in the character inventory will be returned, irrespective of how they were acquired (via purchasing, grants, coupons, etc.). Items that are expired, fully consumed, or are no longer valid are not considered to be in the user's current inventory, and so will not be not included. Also returns their virtual currency balances.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Client/GetCharacterInventory",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetCharacterInventoryRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"204883457\",\r\n  \"CharacterId\": \"9890723423\",\r\n  \"CatalogVersion\": \"5\"\r\n}",
      "result": "GetCharacterInventoryResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"204883457\",\r\n    \"CharacterId\": \"9890723423\",\r\n    \"Inventory\": [\r\n      {\r\n        \"ItemId\": \"shield_level_5\",\r\n        \"ItemInstanceId\": \"9879843\",\r\n        \"ItemClass\": \"shields\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"UnitPrice\": 0\r\n      },\r\n      {\r\n        \"ItemId\": \"energy_boost_1\",\r\n        \"ItemInstanceId\": \"3854637\",\r\n        \"ItemClass\": \"boosts\",\r\n        \"RemainingUses\": 4,\r\n        \"CatalogVersion\": \"5\",\r\n        \"UnitPrice\": 0\r\n      }\r\n    ],\r\n    \"VirtualCurrency\": {\r\n      \"GC\": 15\r\n    },\r\n    \"VirtualCurrencyRechargeTimes\": {\r\n      \"GC\": {\r\n        \"SecondsToRecharge\": 3600,\r\n        \"RechargeTime\": \"2014-01-01T12:00:00Z\",\r\n        \"RechargeMax\": 50\r\n      }\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "GetUserInventory"
      ],
      "errors": [
        "InvalidParams",
        "CharacterNotFound"
      ]
    },
    {
      "name": "GetPurchase",
      "summary": "Retrieves a completed purchase along with its current PlayFab status.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Client/GetPurchase",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetPurchaseRequest",
      "requestExample": "{\r\n  \"OrderId\": \"8853591446005860822\"\r\n}",
      "result": "GetPurchaseResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PurchaseDate\": \"0001-01-01T00:00:00Z\"\r\n  }\r\n}",
      "seeAlso": [
        "StartPurchase"
      ],
      "errors": [
        "InvalidParams",
        "PurchaseDoesNotExist"
      ]
    },
    {
      "name": "GetUserInventory",
      "summary": "Retrieves the user's current inventory of virtual goods",
      "resultDetails": "All items currently in the user inventory will be returned, irrespective of how they were acquired (via purchasing, grants, coupons, etc.). Items that are expired, fully consumed, or are no longer valid are not considered to be in the user's current inventory, and so will not be not included.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Client/GetUserInventory",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserInventoryRequest",
      "requestExample": "{}",
      "result": "GetUserInventoryResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Inventory\": [\r\n      {\r\n        \"ItemId\": \"shield_level_5\",\r\n        \"ItemInstanceId\": \"9879843\",\r\n        \"ItemClass\": \"shields\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"UnitPrice\": 0\r\n      },\r\n      {\r\n        \"ItemId\": \"energy_boost_1\",\r\n        \"ItemInstanceId\": \"3854637\",\r\n        \"ItemClass\": \"boosts\",\r\n        \"RemainingUses\": 4,\r\n        \"CatalogVersion\": \"5\",\r\n        \"UnitPrice\": 0\r\n      }\r\n    ],\r\n    \"VirtualCurrency\": {\r\n      \"GC\": 15\r\n    },\r\n    \"VirtualCurrencyRechargeTimes\": {\r\n      \"GC\": {\r\n        \"SecondsToRecharge\": 3600,\r\n        \"RechargeTime\": \"2014-01-01T12:00:00Z\",\r\n        \"RechargeMax\": 50\r\n      }\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "GetCatalogItems"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "PayForPurchase",
      "summary": "Selects a payment option for purchase order created via StartPurchase",
      "requestDetails": "This is the second step in the purchasing process, initiating the purchase transaction with the payment provider (if applicable). For payment provider scenarios, the title should next present the user with the payment provider'sinterface for payment. Once the player has completed the payment with the provider, the title should call ConfirmPurchase tofinalize the process and add the appropriate items to the player inventory.",
      "resultDetails": "For web-based payment providers, this operation returns the URL to which the user should be directed inorder to approve the purchase. Items added to the user inventory as a result of this operation will be marked as unconfirmed.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Client/PayForPurchase",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "PayForPurchaseRequest",
      "requestExample": "{\r\n  \"OrderId\": \"8853591446005860822\",\r\n  \"ProviderName\": \"PayPal\",\r\n  \"Currency\": \"RM\"\r\n}",
      "result": "PayForPurchaseResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"OrderId\": \"8853591446005860822\",\r\n    \"Status\": \"Init\",\r\n    \"PurchaseCurrency\": \"RM\",\r\n    \"PurchasePrice\": 199,\r\n    \"CreditApplied\": 0\r\n  }\r\n}",
      "seeAlso": [
        "StartPurchase",
        "ConfirmPurchase"
      ],
      "errors": [
        "InvalidParams",
        "InvalidPaymentProvider",
        "FailedByPaymentProvider",
        "PurchaseInitializationFailure"
      ]
    },
    {
      "name": "PurchaseItem",
      "summary": "Buys a single item with virtual currency. You must specify both the virtual currency to use to purchase, as well as what the client believes the price to be. This lets the server fail the purchase if the price has changed.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Client/PurchaseItem",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "PurchaseItemRequest",
      "requestExample": "{\r\n  \"ItemId\": \"shield_level_5\",\r\n  \"VirtualCurrency\": \"GV\",\r\n  \"Price\": 25\r\n}",
      "result": "PurchaseItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Items\": [\r\n      {\r\n        \"ItemId\": \"shield_level_5\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"DisplayName\": \"Level 5 Shield\",\r\n        \"UnitCurrency\": \"GV\",\r\n        \"UnitPrice\": 25\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "StartPurchase"
      ],
      "errors": [
        "InvalidParams",
        "ItemNotFound",
        "WrongVirtualCurrency",
        "WrongPrice",
        "InsufficientFunds",
        "CharacterNotFound"
      ]
    },
    {
      "name": "RedeemCoupon",
      "summary": "Adds the virtual goods associated with the coupon to the user's inventory. Coupons can be generated  via the Promotions->Coupons tab in the PlayFab Game Manager. See this post for more information on coupons:  https://playfab.com/blog/using-stores-and-coupons-game-manager/",
      "requestDetails": "Coupon codes can be created for any item, or set of items, in the catalog for the title. This operation causes the coupon to be consumed, and the specific items to be awarded to the user. Attempting to re-use an already consumed code, or a code which has not yet been created in the service, will result in an error.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Client/RedeemCoupon",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RedeemCouponRequest",
      "requestExample": "{\r\n  \"CouponCode\": \"123-1234-123\",\r\n  \"CatalogVersion\": \"5\"\r\n}",
      "result": "RedeemCouponResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"GrantedItems\": [\r\n      {\r\n        \"ItemId\": \"shield_level_5\",\r\n        \"ItemInstanceId\": \"Unique Item ID\",\r\n        \"ItemClass\": \"shields\",\r\n        \"PurchaseDate\": \"2014-03-07T00:00:00Z\",\r\n        \"Expiration\": \"2015-10-01T00:00:00Z\",\r\n        \"RemainingUses\": 10,\r\n        \"Annotation\": \"No Annotation\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"BundleParent\": \"crate block 1\",\r\n        \"UnitPrice\": 0\r\n      }\r\n    ]\r\n  }\r\n}",
      "errors": [
        "InvalidParams",
        "CouponCodeNotFound"
      ]
    },
    {
      "name": "ReportPlayer",
      "summary": "Submit a report for another player (due to bad bahavior, etc.), so that customer service representatives for the title can take action concerning potentially toxic players.",
      "resultDetails": "Players are currently limited to five reports per day. Attempts by a single user account to submit reports beyond five will result in Updated being returned as false.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Client/ReportPlayer",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ReportPlayerClientRequest",
      "requestExample": "{\r\n  \"ReporteeId\": \"1a46086aed40f142\",\r\n  \"Comment\": \"cheating\"\r\n}",
      "result": "ReportPlayerClientResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Updated\": true,\r\n    \"SubmissionsRemaining\": 2\r\n  }\r\n}",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "StartPurchase",
      "summary": "Creates an order for a list of items from the title catalog",
      "requestDetails": "This is the first step in the purchasing process. For security purposes, once the order (or \"cart\") has been created, additional inventory objects may no longer be added. In addition, inventory objects will be locked to the current prices, regardless of any subsequent changes at the catalog level which may occur during the next two steps.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Client/StartPurchase",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "StartPurchaseRequest",
      "requestExample": "{\r\n  \"CatalogVersion\": \"0\",\r\n  \"StoreId\": \"BonusStore\",\r\n  \"Items\": [\r\n    {\r\n      \"ItemId\": \"something\",\r\n      \"Quantity\": 1,\r\n      \"Annotation\": \"totally buying something\"\r\n    }\r\n  ]\r\n}",
      "result": "StartPurchaseResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"OrderId\": \"8853591446005860822\",\r\n    \"Contents\": [\r\n      {\r\n        \"ItemId\": \"shield_level_5\",\r\n        \"ItemClass\": \"shields\",\r\n        \"DisplayName\": \"Level 5 Shield\",\r\n        \"VirtualCurrencyPrices\": {\r\n          \"RM\": 199,\r\n          \"GV\": 25\r\n        },\r\n        \"RealCurrencyPrices\": {\r\n          \"GBP\": 149,\r\n          \"EUR\": 169\r\n        }\r\n      }\r\n    ],\r\n    \"PaymentOptions\": [\r\n      {\r\n        \"Currency\": \"RM\",\r\n        \"ProviderName\": \"Steam\",\r\n        \"Price\": 199,\r\n        \"StoreCredit\": 0\r\n      },\r\n      {\r\n        \"Currency\": \"RM\",\r\n        \"ProviderName\": \"Amazon\",\r\n        \"Price\": 199,\r\n        \"StoreCredit\": 0\r\n      },\r\n      {\r\n        \"Currency\": \"RM\",\r\n        \"ProviderName\": \"Paypal\",\r\n        \"Price\": 199,\r\n        \"StoreCredit\": 0\r\n      },\r\n      {\r\n        \"Currency\": \"GV\",\r\n        \"ProviderName\": \"TitleA90A\",\r\n        \"Price\": 25,\r\n        \"StoreCredit\": 0\r\n      }\r\n    ],\r\n    \"VirtualCurrencyBalances\": {\r\n      \"GV\": 25\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "PayForPurchase",
        "ConfirmPurchase"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "SubtractUserVirtualCurrency",
      "summary": "Decrements the user's balance of the specified virtual currency by the stated amount",
      "requestDetails": "This API must be enabled for use as an option in the game manager website. It is disabled by default.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Client/SubtractUserVirtualCurrency",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "SubtractUserVirtualCurrencyRequest",
      "requestExample": "{\r\n  \"VirtualCurrency\": \"GC\",\r\n  \"Amount\": 100\r\n}",
      "result": "ModifyUserVirtualCurrencyResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"PlayFabId\": \"B456AE0\",\r\n    \"VirtualCurrency\": \"GC\",\r\n    \"BalanceChange\": 10,\r\n    \"Balance\": 1500\r\n  }\r\n}",
      "seeAlso": [
        "AddUserVirtualCurrency"
      ],
      "errors": [
        "InvalidParams",
        "APINotEnabledForGameClientAccess"
      ]
    },
    {
      "name": "UnlockContainerItem",
      "summary": "Unlocks a container item in the user's inventory and consumes a key item of the type indicated by the container item",
      "requestDetails": "Container items and their associated unlocking items (\"crates\" and \"keys\") are paired inventory objects which provide developers with a secure way to have an object which requires another object to activate, without providing the client with the opportunity to use replay attacks, packet blocking, or similar techniques to gain the objects in the container illegitimately. If an optional character ID is provided, this call will look into just that character's inventory for the crate + key. Items will then be granted to that character upon unlock.",
      "resultDetails": "As a result of this operation, the inventory objects defined as belonging to the container will be added to the user's inventory, including random drop table resolution and recursive addition of bundled items.",
      "subgroup": "Player Item Management",
      "titleTiers": null,
      "url": "/Client/UnlockContainerItem",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlockContainerItemRequest",
      "requestExample": "{\r\n  \"ContainerItemId\": \"crate block 1\",\r\n  \"CatalogVersion\": \"5\"\r\n}",
      "result": "UnlockContainerItemResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"UnlockedItemInstanceId\": \"0394760938094\",\r\n    \"GrantedItems\": [\r\n      {\r\n        \"ItemId\": \"shield_level_5\",\r\n        \"ItemInstanceId\": \"Unique Item ID\",\r\n        \"ItemClass\": \"shields\",\r\n        \"PurchaseDate\": \"2014-03-07T00:00:00Z\",\r\n        \"Expiration\": \"2015-10-01T00:00:00Z\",\r\n        \"RemainingUses\": 10,\r\n        \"Annotation\": \"No Annotation\",\r\n        \"CatalogVersion\": \"5\",\r\n        \"BundleParent\": \"crate block 1\",\r\n        \"UnitPrice\": 0\r\n      }\r\n    ]\r\n  }\r\n}",
      "errors": [
        "InvalidParams",
        "InvalidContainerItem",
        "ContainerNotOwned",
        "KeyNotOwned",
        "InvalidItemIdInTable"
      ]
    },
    {
      "name": "AddFriend",
      "summary": "Adds the PlayFab user, based upon a match against a supplied unique identifier, to the friend list of the local user. At least one of FriendPlayFabId,FriendUsername,FriendEmail, or FriendTitleDisplayName should be initialized.",
      "subgroup": "Friend List Management",
      "titleTiers": null,
      "url": "/Client/AddFriend",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "AddFriendRequest",
      "requestExample": "{\r\n  \"FriendPlayFabId\": \"29837799\"\r\n}",
      "result": "AddFriendResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Created\": true\r\n  }\r\n}",
      "seeAlso": [
        "GetFriendsList",
        "SetFriendTags"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound",
        "UsersAlreadyFriends"
      ]
    },
    {
      "name": "GetFriendsList",
      "summary": "Retrieves the current friend list for the local user, constrained to users who have PlayFab accounts. Friends from linked accounts (Facebook, Steam) are also included. You may optionally exclude some linked services' friends.",
      "resultDetails": "If any additional services are queried for the user's friends, those friends who also have a PlayFab account registered for the title will be returned in the results. For Facebook, user has to have logged into the title's Facebook app recently, and only friends who also plays this game will be included.",
      "subgroup": "Friend List Management",
      "titleTiers": null,
      "url": "/Client/GetFriendsList",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetFriendsListRequest",
      "requestExample": "{\r\n  \"IncludeSteamFriends\": true\r\n}",
      "result": "GetFriendsListResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Friends\": [\r\n      {\r\n        \"FriendPlayFabId\": \"93798903892789754w\",\r\n        \"Username\": \"accountName\",\r\n        \"TitleDisplayName\": \"Davros01\",\r\n        \"Tags\": [\r\n          \"single blue eye\",\r\n          \"genius with robotics\"\r\n        ],\r\n        \"CurrentMatchmakerLobbyId\": \"2073\"\r\n      },\r\n      {\r\n        \"FriendPlayFabId\": \"334907923945f\",\r\n        \"Username\": \"accountName\",\r\n        \"TitleDisplayName\": \"CyberLeader1\",\r\n        \"Tags\": [\r\n          \"allergic to gold\",\r\n          \"upgradeable\"\r\n        ],\r\n        \"CurrentMatchmakerLobbyId\": \"2073\"\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "AddFriend",
        "RemoveFriend"
      ],
      "errors": [
        "InvalidParams",
        "InvalidPublisherId",
        "FacebookAPIError"
      ]
    },
    {
      "name": "RemoveFriend",
      "summary": "Removes a specified user from the friend list of the local user",
      "subgroup": "Friend List Management",
      "titleTiers": null,
      "url": "/Client/RemoveFriend",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RemoveFriendRequest",
      "requestExample": "{\r\n  \"FriendPlayFabId\": \"29837799\"\r\n}",
      "result": "RemoveFriendResult",
      "resultExample": "",
      "seeAlso": [
        "AddFriend",
        "SetFriendTags"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "SetFriendTags",
      "summary": "Updates the tag list for a specified user in the friend list of the local user",
      "requestDetails": "This operation is not additive. It will completely replace the tag list for the specified user.",
      "subgroup": "Friend List Management",
      "titleTiers": null,
      "url": "/Client/SetFriendTags",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "SetFriendTagsRequest",
      "requestExample": "{\r\n  \"FriendPlayFabId\": \"29837799\",\r\n  \"Tags\": [\r\n    \"great sniper\",\r\n    \"sucks at melee\"\r\n  ]\r\n}",
      "result": "SetFriendTagsResult",
      "resultExample": "",
      "seeAlso": [
        "AddFriend",
        "RemoveFriend"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "RegisterForIOSPushNotification",
      "summary": "Registers the iOS device to receive push notifications",
      "requestDetails": "More information can be found on configuring your game for the Apple Push Notification service in the  Apple documentation, here:  https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html#//apple_ref/doc/uid/TP40008194-CH100-SW9.  The steps to configure and send Push Notifications is described in the PlayFab forums, here:  https://support.playfab.com/discussions/topics/1000041035.",
      "subgroup": "IOS-Specific APIs",
      "titleTiers": null,
      "url": "/Client/RegisterForIOSPushNotification",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RegisterForIOSPushNotificationRequest",
      "requestExample": "{\r\n  \"DeviceToken\": \"39872f98eb882brn8hg3889\",\r\n  \"SendPushNotificationConfirmation\": true,\r\n  \"ConfirmationMessage\": \"Welcome to PlayFab\"\r\n}",
      "result": "RegisterForIOSPushNotificationResult",
      "resultExample": "",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "RestoreIOSPurchases",
      "summary": "Restores all in-app purchases based on the given refresh receipt.",
      "requestDetails": "Iterates through every purchase in the receipt and restores the items if they still exist in the catalog and can be validated. ",
      "resultDetails": "Once verified, the valid items will be restored into the user's inventory.",
      "subgroup": "IOS-Specific APIs",
      "titleTiers": null,
      "url": "/Client/RestoreIOSPurchases",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RestoreIOSPurchasesRequest",
      "requestExample": "{\r\n  \"ReceiptData\": \"F00000000000000000000\"\r\n}",
      "result": "RestoreIOSPurchasesResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "errors": [
        "InvalidParams",
        "InvalidReceipt",
        "ReceiptAlreadyUsed",
        "ReceiptDoesNotContainInAppItems",
        "ReceiptContainsMultipleInAppItems",
        "InvalidBundleID",
        "InvalidVirtualCurrency",
        "DownstreamServiceUnavailable",
        "NoMatchingCatalogItemForReceipt",
        "InvalidCurrencyCode"
      ]
    },
    {
      "name": "ValidateIOSReceipt",
      "summary": "Validates with the Apple store that the receipt for an iOS in-app purchase is valid and that it matches the purchased catalog item",
      "requestDetails": "The CurrencyCode and PurchasePrice must match the price which was set up for the item in the Apple store. In addition, The ItemId of the inventory in the PlayFab Catalog must match the Product ID as it was set up in the Apple store. This enables the PlayFab service to securely validate that the purchase is for the correct item, in order to prevent uses from passing valid receipts as being for more expensive items (passing a receipt for a 99-cent purchase as being for a $19.99 purchase, for example).",
      "resultDetails": "Once verified, the catalog item matching the iTunes item name will be added to the user's inventory.",
      "subgroup": "IOS-Specific APIs",
      "titleTiers": null,
      "url": "/Client/ValidateIOSReceipt",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ValidateIOSReceiptRequest",
      "requestExample": "{\r\n  \"ReceiptData\": \"MTExMTExMTExMTENCjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMg0KMzMzMzMzMzMzMzMzMzMzMzMNCjQ0NDQ0NDQ0NDQ0NDQNCjU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NQ0KNjY2NjY2NjY2NjY2Ng0KNzc3Nzc3Nzc3Nzc3NzcNCjg4DQo5OTk5OTk5OTk5OTkNCjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA0KMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTENCjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjINCjMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMw0KNDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0DQo1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1DQo2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2Ng0KNzc3Nzc3Nzc3NzcNCjg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4DQo5DQpBcHBsZSBJbmMuIFdvcmxkd2lkZSBEZXZlbG9wZXIgUmVsYXRpb25zIENlcnRpZmljYXRpb24gQXV0aG9yaXR5IChub3QgcmVhbGx5IC0gZmFrZSBQbGF5RmFiIGV4YW1wbGUsIGJ1dCBjb25ncmF0cyBvbiB0aGlua2luZyB0byBkZWNvZGUgdGhpcyEpDQowMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwDQoxMTExMTExMTExMQ0KMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyDQozMzMzMzMzMzMzMzMzMzMzMw0KNDQ0NDQ0NDQ0NDQ0NA0KNTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1DQo2NjY2NjY2NjY2NjY2DQo3Nzc3Nzc3Nzc3Nzc3Nw0KODgNCjk5OTk5OTk5OTk5OQ0KMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwDQoxMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMQ0KMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMg0KMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzDQo0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQNCjU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTUNCjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2DQo3Nzc3Nzc3Nzc3Nw0KODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODgNCjkNCkFwcGxlIEluYy4gV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgKG5vdCByZWFsbHkgLSBmYWtlIFBsYXlGYWIgZXhhbXBsZSwgYnV0IGNvbmdyYXRzIG9uIHRoaW5raW5nIHRvIGRlY29kZSB0aGlzISkNCjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDANCjExMTExMTExMTExDQoyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjINCjMzMzMzMzMzMzMzMzMzMzMzDQo0NDQ0NDQ0NDQ0NDQ0DQo1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTUNCjY2NjY2NjY2NjY2NjYNCjc3Nzc3Nzc3Nzc3Nzc3DQo4OA0KOTk5OTk5OTk5OTk5DQowMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDANCjExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExDQoyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyDQozMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMNCjQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NA0KNTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NQ0KNjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjYNCjc3Nzc3Nzc3Nzc3DQo4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4OA0KOQ0KQXBwbGUgSW5jLiBXb3JsZHdpZGUgRGV2ZWxvcGVyIFJlbGF0aW9ucyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAobm90IHJlYWxseSAtIGZha2UgUGxheUZhYiBleGFtcGxlLCBidXQgY29uZ3JhdHMgb24gdGhpbmtpbmcgdG8gZGVjb2RlIHRoaXMhKQ0KMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA0KMTExMTExMTExMTENCjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMg0KMzMzMzMzMzMzMzMzMzMzMzMNCjQ0NDQ0NDQ0NDQ0NDQNCjU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NQ0KNjY2NjY2NjY2NjY2Ng0KNzc3Nzc3Nzc3Nzc3NzcNCjg4DQo5OTk5OTk5OTk5OTkNCjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA0KMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTENCjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjINCjMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMw0KNDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0DQo1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1DQo2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2Ng0KNzc3Nzc3Nzc3NzcNCjg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4DQo5DQpBcHBsZSBJbmMuIFdvcmxkd2lkZSBEZXZlbG9wZXIgUmVsYXRpb25zIENlcnRpZmljYXRpb24gQXV0aG9yaXR5IChub3QgcmVhbGx5IC0gZmFrZSBQbGF5RmFiIGV4YW1wbGUsIGJ1dCBjb25ncmF0cyBvbiB0aGlua2luZyB0byBkZWNvZGUgdGhpcyEpDQowMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw\",\r\n  \"CurrencyCode\": \"GBP\",\r\n  \"PurchasePrice\": 199\r\n}",
      "result": "ValidateIOSReceiptResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "errors": [
        "InvalidParams",
        "InvalidReceipt",
        "ReceiptAlreadyUsed",
        "ReceiptDoesNotContainInAppItems",
        "ReceiptContainsMultipleInAppItems",
        "InvalidBundleID",
        "InvalidVirtualCurrency",
        "DownstreamServiceUnavailable",
        "NoMatchingCatalogItemForReceipt",
        "InvalidCurrencyCode"
      ]
    },
    {
      "name": "GetCurrentGames",
      "summary": "Get details about all current running game servers matching the given parameters.",
      "subgroup": "Matchmaking APIs",
      "titleTiers": null,
      "url": "/Client/GetCurrentGames",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "CurrentGamesRequest",
      "requestExample": "{\r\n  \"Region\": \"USCentral\",\r\n  \"BuildVersion\": \"5.0.1\"\r\n}",
      "result": "CurrentGamesResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Games\": [\r\n      {\r\n        \"Region\": \"USCentral\",\r\n        \"LobbyID\": \"Lobby 32\",\r\n        \"BuildVersion\": \"5.01\",\r\n        \"GameMode\": \"0\",\r\n        \"MaxPlayers\": 26,\r\n        \"PlayerUserIds\": [\r\n          \"70CE3CC42DD4D363\",\r\n          \"17978105374C103C\"\r\n        ],\r\n        \"RunTime\": 400,\r\n        \"GameServerState\": \"Running\"\r\n      }\r\n    ],\r\n    \"PlayerCount\": 95,\r\n    \"GameCount\": 19\r\n  }\r\n}",
      "seeAlso": [
        "Matchmake",
        "StartGame",
        "GetGameServerRegions",
        "AddServerBuild",
        "RemoveServerBuild"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetGameServerRegions",
      "summary": " Get details about the regions hosting game servers matching the given parameters.",
      "subgroup": "Matchmaking APIs",
      "titleTiers": null,
      "url": "/Client/GetGameServerRegions",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GameServerRegionsRequest",
      "requestExample": "{\r\n  \"BuildVersion\": \"5.0.1\",\r\n  \"TitleId\": \"2074\"\r\n}",
      "result": "GameServerRegionsResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Regions\": [\r\n      {\r\n        \"Region\": \"USCentral\",\r\n        \"Name\": \"USCentral\",\r\n        \"Available\": true,\r\n        \"PingUrl\": \"10.31.58.95\"\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "Matchmake",
        "StartGame",
        "GetCurrentGames",
        "AddServerBuild",
        "RemoveServerBuild"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "Matchmake",
      "summary": "Attempts to locate a game session matching the given parameters. Note that parameters specified in the search are required (they are not weighting factors). If a slot is found in a server instance matching the parameters, the slot will be assigned to that player, removing it from the availabe set. In that case, the information on the game session will be returned, otherwise the Status returned will be GameNotFound. Note that EnableQueue is deprecated at this time.",
      "subgroup": "Matchmaking APIs",
      "titleTiers": null,
      "url": "/Client/Matchmake",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "MatchmakeRequest",
      "requestExample": "{\r\n  \"BuildVersion\": \"5.01\",\r\n  \"Region\": \"USCentral\",\r\n  \"GameMode\": \"0\",\r\n  \"LobbyId\": \"Lobby 32\"\r\n}",
      "result": "MatchmakeResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"LobbyID\": \"Lobby 32\",\r\n    \"ServerHostname\": \"192.168.0.1\",\r\n    \"ServerPort\": 7777,\r\n    \"Ticket\": \"e98yf289f248902f4904f0924f9pj\",\r\n    \"Status\": \"Waiting\"\r\n  }\r\n}",
      "seeAlso": [
        "StartGame",
        "GetGameServerRegions",
        "GetCurrentGames",
        "AddServerBuild",
        "RemoveServerBuild"
      ],
      "errors": [
        "InvalidParams",
        "GameModeNotFound"
      ]
    },
    {
      "name": "StartGame",
      "summary": "Start a new game server with a given configuration, add the current player and return the connection information.",
      "subgroup": "Matchmaking APIs",
      "titleTiers": null,
      "url": "/Client/StartGame",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "StartGameRequest",
      "requestExample": "{\r\n  \"BuildVersion\": \"5.01\",\r\n  \"Region\": \"EUWest\",\r\n  \"GameMode\": \"0\",\r\n  \"CustomCommandLineData\": \"custom_gameserver_commandline_parameter\"\r\n}",
      "result": "StartGameResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"LobbyID\": \"Lobby 32\",\r\n    \"ServerHostname\": \"103.29.85.12\",\r\n    \"ServerPort\": 2019,\r\n    \"Ticket\": \"7D2920DE87C1D3A7-76561198047385422-3-3-8D0252520DB76F9-E6D775474D744A16.XXX\",\r\n    \"Expires\": \"Never\",\r\n    \"Password\": \"\"\r\n  }\r\n}",
      "seeAlso": [
        "Matchmake",
        "GetGameServerRegions",
        "GetCurrentGames",
        "AddServerBuild",
        "RemoveServerBuild"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "AndroidDevicePushNotificationRegistration",
      "summary": "Registers the Android device to receive push notifications",
      "requestDetails": "More information can be found on configuring your game for the Google Cloud Messaging service in the Google developer documentation, here:  http://developer.android.com/google/gcm/client.html.  The steps to configure and send Push Notifications is described in the PlayFab forums, here:  https://support.playfab.com/discussions/topics/1000041035.",
      "subgroup": "Android-Specific APIs",
      "titleTiers": null,
      "url": "/Client/AndroidDevicePushNotificationRegistration",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "AndroidDevicePushNotificationRegistrationRequest",
      "requestExample": "{\r\n  \"DeviceToken\": \"59872d98fa632brn8hg3770\",\r\n  \"SendPushNotificationConfirmation\": true,\r\n  \"ConfirmationMessege\": \"Welcome to PlayFab!\"\r\n}",
      "result": "AndroidDevicePushNotificationRegistrationResult",
      "resultExample": "",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "ValidateGooglePlayPurchase",
      "summary": "Validates a Google Play purchase and gives the corresponding item to the player.",
      "requestDetails": "The packageName and productId are defined in the GooglePlay store. The productId must match the ItemId of the inventory item in the PlayFab catalog for the title. This enables the PlayFab service to securely validate that the purchase is for the correct item, in order to prevent uses from passing valid receipts as being for more expensive items (passing a receipt for a 99-cent purchase as being for a $19.99 purchase, for example). Each receipt may be validated only once to avoid granting the same item over and over from a single purchase.",
      "resultDetails": "Once verified, the catalog item (ItemId) matching the GooglePlay store item (productId) will be added to the user's inventory.",
      "subgroup": "Android-Specific APIs",
      "titleTiers": null,
      "url": "/Client/ValidateGooglePlayPurchase",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ValidateGooglePlayPurchaseRequest",
      "requestExample": "{\r\n  \"ReceiptJson\": \"{\\\"orderId\\\":\\\"12999763169054705758.1375794066587622\\\",\\\"packageName\\\":\\\"com.playfab.android.testbed\\\",\\\"productId\\\":\\\"com.playfab.android.permatest.consumable\\\",\\\"purchaseTime\\\":1410891177231,\\\"purchaseState\\\":0,\\\"purchaseToken\\\":\\\"eaflhokdkobkmomjadmoobgb.AO-J1OwoLkW2cqvBcPEgk6SfGceQpOHALMUFmJYeawa-GuDFtl3oKct-5D28t_KvNscFiJOFiWXIS74vJBYg-CGFJgyrdbxalKEMPzXZrg5nLomCME-jIVFAUrzcPah-_66KPImG5ftsMJKI9uzldqEF9OPcakUEmt-kWoXAsl_6-9HH0gBCwh4\\\"}\",\r\n  \"Signature\": \"ks12w0hHHpuit4xW3Fyoa5XX6TkxZ2KpEnBsLfpHHpeakYs2JgVtlLdgyLp/05Zp8oHAuKZyIAJTd2RIFXWMAUwDNUsI0JPBDMpr2oaL66Kuneg4VrGWJkJZTrvTyQoGpnTDdXfEME31iFKX6CrKHvWlAG9nwWxYatd58l83eevQ8CIrJhka/bC5ynw3j18OmFG7AcxymO37a4HkM8QjytvAYDJeOnDU9mooY7afcHIajtffdyAU9kzGWOqDByiU9IsRdkliwQoQYbuX/R5wQnMVZ+FGDDwO1mybx9B20rm7/WCBnWGy2NLsSAFI77iX8tUy/QebfBQhrVnRORi7bw==\",\r\n  \"CurrencyCode\": \"USD\",\r\n  \"PurchasePrice\": 199\r\n}",
      "result": "ValidateGooglePlayPurchaseResult",
      "resultExample": "",
      "errors": [
        "InvalidParams",
        "InvalidReceipt",
        "ReceiptAlreadyUsed",
        "ReceiptCancelled",
        "NoMatchingCatalogItemForReceipt"
      ]
    },
    {
      "name": "LogEvent",
      "summary": "Logs a custom analytics event",
      "requestDetails": "This API is designed to track analytics events. Events logged using this API will be stored in the title's Redshift database. Each unique eventName will create a distinct table within the database. Within that table, a column will be created for every unique key. Using a first-person shooter as an example, the title may need to track headshots as a distinct event. The sample request below demonstrates an example of this. In addition to the values sent, timestamps and User IDs are automatically added as 'ts' and 'user_id' to each table. The 'Headshot' table in this example would then have the schema: 'user_id'|'ts'|'victim'|'gun'|'x_coord'|'y_coord'|'z_coord'|'damage|aim_assist' and the row corresponding to this event would look like: 'EF987654ABAB012'|'2014-1-1 12:12:12'|'B76543AEAE65'|'big_bad_sniper'|10|20|1|1000|1.The PlayFab service automatically creates events for all login and purchase operations. This API is intended for game specific events only. Please note that event logging is not enabled for titles by default. If you need event logging enabled, please contact us at devrel@playfab.com for more information.",
      "subgroup": "Analytics",
      "titleTiers": null,
      "url": "/Client/LogEvent",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LogEventRequest",
      "requestExample": "{\r\n  \"EventName\": \"Headshot\",\r\n  \"Body\": {\r\n    \"victim\": \"B76543AEAE65\",\r\n    \"gun\": \"sniper_rifle\",\r\n    \"x_coord\": 10,\r\n    \"y_coord\": 20,\r\n    \"z_coord\": 1,\r\n    \"damage\": 1000,\r\n    \"aim_assist\": false\r\n  },\r\n  \"ProfileSetEvent\": false\r\n}",
      "result": "LogEventResult",
      "resultExample": "",
      "errors": [
        "BodyTooLarge",
        "ReservedWordInBody",
        "ReservedEventName",
        "InvalidRequest",
        "InvalidTypeInBody"
      ]
    },
    {
      "name": "AddSharedGroupMembers",
      "summary": "Adds users to the set of those able to update both the shared data, as well as the set of users in the group. Only users in the group can add new members.",
      "subgroup": "Shared Group Data",
      "titleTiers": null,
      "url": "/Client/AddSharedGroupMembers",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "AddSharedGroupMembersRequest",
      "requestExample": "{\r\n  \"SharedGroupId\": \"Clan Data\",\r\n  \"PlayFabIds\": [\r\n    \"D984A64B832\",\r\n    \"F74A523E1562\"\r\n  ]\r\n}",
      "result": "AddSharedGroupMembersResult",
      "resultExample": "",
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "CreateSharedGroup",
      "summary": "Requests the creation of a shared group object, containing key/value pairs which may be updated by all members of the group. Upon creation, the current user will be the only member of the group.",
      "requestDetails": "If SharedGroupId is specified, the service will attempt to create a group with that identifier, and will return an error if it is already in use. If no SharedGroupId is specified, a random identifier will be assigned.",
      "subgroup": "Shared Group Data",
      "titleTiers": null,
      "url": "/Client/CreateSharedGroup",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "CreateSharedGroupRequest",
      "requestExample": "{\r\n  \"SharedGroupId\": \"Clan Data\"\r\n}",
      "result": "CreateSharedGroupResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"SharedGroupId\": \"Clan Data\"\r\n  }\r\n}",
      "errors": [
        "InvalidParams",
        "InvalidSharedGroupId"
      ]
    },
    {
      "name": "GetPublisherData",
      "summary": "Retrieves the key-value store of custom publisher settings",
      "requestDetails": "This API is designed to return publisher-specific values which can be read, but not written to, by the client. This data is shared across all titles assigned to a particular publisher, and can be used for cross-game coordination. Only titles assigned to a publisher can use this API.  For more information email devrel@playfab.com. Note that there may up to a minute delay in between updating title data and this API call returning the newest value.",
      "subgroup": "Shared Group Data",
      "titleTiers": null,
      "url": "/Client/GetPublisherData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetPublisherDataRequest",
      "requestExample": "{\r\n  \"Keys\": [\r\n    \"color\",\r\n    \"propertyA\"\r\n  ]\r\n}",
      "result": "GetPublisherDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Data\": {\r\n      \"color\": \"blue\",\r\n      \"propertyA\": \"xyz123\"\r\n    }\r\n  }\r\n}",
      "errors": [
        "InvalidParams",
        "PublisherNotSet"
      ]
    },
    {
      "name": "GetSharedGroupData",
      "summary": "Retrieves data stored in a shared group object, as well as the list of members in the group. Non-members of the group may use this to retrieve group data, including membership, but they will not receive data for keys marked as private.",
      "subgroup": "Shared Group Data",
      "titleTiers": null,
      "url": "/Client/GetSharedGroupData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetSharedGroupDataRequest",
      "requestExample": "{\r\n  \"SharedGroupId\": \"Clan Data\",\r\n  \"Keys\": [\r\n    \"ClanKills\",\r\n    \"LastClanUpdate\"\r\n  ],\r\n  \"GetMembers\": true\r\n}",
      "result": "GetSharedGroupDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Data\": {\r\n      \"ClanKills\": {\r\n        \"Value\": \"34\",\r\n        \"LastUpdatedBy\": \"D984A64B832\",\r\n        \"LastUpdated\": \"2015-01-03T17:44:21Z\",\r\n        \"Permission\": \"Public\"\r\n      },\r\n      \"LastClanUpdate\": {\r\n        \"Value\": \"2015-01-03T17:44:21Z\",\r\n        \"LastUpdatedBy\": \"D984A64B832\",\r\n        \"LastUpdated\": \"2015-01-03T17:44:21Z\",\r\n        \"Permission\": \"Private\"\r\n      }\r\n    },\r\n    \"Members\": [\r\n      \"D984A64B832\",\r\n      \"F74A523E1562\"\r\n    ]\r\n  }\r\n}",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "RemoveSharedGroupMembers",
      "summary": "Removes users from the set of those able to update the shared data and the set of users in the group. Only users in the group can remove members. If as a result of the call, zero users remain with access, the group and its associated data will be deleted.",
      "subgroup": "Shared Group Data",
      "titleTiers": null,
      "url": "/Client/RemoveSharedGroupMembers",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RemoveSharedGroupMembersRequest",
      "requestExample": "{\r\n  \"SharedGroupId\": \"Clan Data\",\r\n  \"PlayFabIds\": [\r\n    \"D984A64B832\",\r\n    \"F74A523E1562\"\r\n  ]\r\n}",
      "result": "RemoveSharedGroupMembersResult",
      "resultExample": "",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateSharedGroupData",
      "summary": "Adds, updates, and removes data keys for a shared group object. If the permission is set to Public, all fields updated or added in this call will be readable by users not in the group. By default, data permissions are set to Private. Regardless of the permission setting, only members of the group can update the data.",
      "requestDetails": "Note that in the case of multiple calls to write to the same shared group data keys, the last write received by the PlayFab service will determine the value available to subsequent read operations. For scenarios requiring coordination of data updates, it is recommended that titles make use of user data with read permission set to public, or a combination of user data and shared group data.",
      "subgroup": "Shared Group Data",
      "titleTiers": null,
      "url": "/Client/UpdateSharedGroupData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UpdateSharedGroupDataRequest",
      "requestExample": "{\r\n  \"SharedGroupId\": \"Clan Data\",\r\n  \"Data\": {\r\n    \"ClanKills\": \"34\",\r\n    \"LastClanUpdate\": \"2014-10-03T09:21:14Z\"\r\n  },\r\n  \"Permission\": \"Public\"\r\n}",
      "result": "UpdateSharedGroupDataResult",
      "resultExample": "",
      "errors": [
        "InvalidParams",
        "NotAuthorized",
        "KeyLengthExceeded",
        "DataLengthExceeded",
        "DeleteKeyConflict"
      ]
    },
    {
      "name": "ConsumePSNEntitlements",
      "summary": "Checks for any new consumable entitlements. If any are found, they are consumed and added as PlayFab items",
      "subgroup": "Sony-specific APIs",
      "titleTiers": null,
      "url": "/Client/ConsumePSNEntitlements",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ConsumePSNEntitlementsRequest",
      "requestExample": "{\r\n  \"ServiceLabel\": 1\r\n}",
      "result": "ConsumePSNEntitlementsResult",
      "resultExample": "",
      "errors": [
        "InvalidParams",
        "ExpiredAuthToken",
        "FailedToGetEntitlements",
        "PSNInaccessible"
      ]
    },
    {
      "name": "RefreshPSNAuthToken",
      "summary": "Uses the supplied OAuth code to refresh the internally cached player PSN auth token",
      "subgroup": "Sony-specific APIs",
      "titleTiers": null,
      "url": "/Client/RefreshPSNAuthToken",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RefreshPSNAuthTokenRequest",
      "requestExample": "{\r\n  \"AuthCode\": \"LKJDG7DDE\",\r\n  \"RedirectUri\": \"orbis://games\"\r\n}",
      "result": "EmptyResult",
      "resultExample": "",
      "errors": [
        "InvalidParams",
        "PSNInaccessible",
        "InvalidPSNAuthCode"
      ]
    },
    {
      "name": "GetCloudScriptUrl",
      "summary": "Retrieves the title-specific URL for Cloud Script servers. This must be queried once, prior  to making any calls to RunCloudScript.",
      "requestDetails": "Cloud Scripts in PlayFab have both Versions and Revisions. Each time a new script is  uploaded against a Version, this creates a new Revision. If Testing is set to true, the URL returned will be for the Cloud Script Revision which was most recently uploaded. If Testing is set to false, the URL returned will be for the  Cloud Script Revision which was most recently deployed to live.",
      "resultDetails": "The URL returned is the one which must be used by the title to call into a handler in  Cloud Script. PlayFab-supplied SDKs will automatically save the results of this call, for use with any calls to  RunCloudScript.",
      "subgroup": "Server-Side Cloud Script",
      "titleTiers": null,
      "url": "/Client/GetCloudScriptUrl",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetCloudScriptUrlRequest",
      "requestExample": "{\r\n  \"Version\": 1,\r\n  \"Testing\": false\r\n}",
      "result": "GetCloudScriptUrlResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Url\": \"https://1.playfablogic.com/0/prod\"\r\n  }\r\n}",
      "seeAlso": [
        "RunCloudScript"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "RunCloudScript",
      "summary": "Triggers a particular server action, passing the provided inputs to the hosted Cloud Script. An action in this context is a handler in the JavaScript. NOTE: Before calling this API, you must call GetCloudScriptUrl to be assigned a Cloud Script server URL. When using an official PlayFab SDK, this URL is stored internally in the SDK, but GetCloudScriptUrl must still be manually called.",
      "requestDetails": "Inputs to the Cloud Script may be specified either using Params, which is an object containing one or more parameters, or ParamsEncoded, which is a string containing the parameters encoded into JSON. Titles should only specify the parameters in one of these inputs - if both are specified, the ParamsEncoded will be used.",
      "resultDetails": "As part of the returned values, both Results and ResultsEncoded will be provided. As with Params and ParamsEncoded, these are respectively an object containing the returned values, and a string containing the returned values encoded into JSON. In addition, the Cloud Script may additionally generate a log, using log.info(), in order to provide additional debugging information.",
      "subgroup": "Server-Side Cloud Script",
      "titleTiers": null,
      "url": "/Client/RunCloudScript",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RunCloudScriptRequest",
      "requestExample": "{\r\n  \"ActionId\": \"onLevelComplete\",\r\n  \"ParamsEncoded\": \"{\\\"level\\\":1}\"\r\n}",
      "result": "RunCloudScriptResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"ActionId\": \"onLevelComplete\",\r\n    \"Version\": 1,\r\n    \"Revision\": 2,\r\n    \"Results\": {\r\n      \"rewards\": [\r\n        {\r\n          \"PlayFabId\": 1111111111111111,\r\n          \"ItemId\": \"TestItem1\",\r\n          \"Annotation\": \"Given by completing level 1\",\r\n          \"Result\": false\r\n        }\r\n      ],\r\n      \"totalXP\": 1001\r\n    },\r\n    \"ResultsEncoded\": \"{\\\"rewards\\\":[{\\\"PlayFabId\\\":\\\"1111111111111111\\\",\\\"ItemId\\\":\\\"TestItem1\\\",\\\"Annotation\\\":\\\"Given by completing level 1\\\",\\\"Result\\\":false}]}\",\r\n    \"ActionLog\": \"info: \",\r\n    \"ExecutionTime\": 0.0709738\r\n  }\r\n}",
      "serverType": "logic",
      "seeAlso": [
        "GetCloudScriptUrl"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetContentDownloadUrl",
      "summary": "This API retrieves a pre-signed URL for accessing a content file for the title. A subsequent  HTTP GET to the returned URL will attempt to download the content. A HEAD query to the returned URL will attempt to  retrieve the metadata of the content. Note that a successful result does not guarantee the existence of this content -  if it has not been uploaded, the query to retrieve the data will fail. See this post for more information:  https://support.playfab.com/support/discussions/topics/1000059929",
      "subgroup": "Content",
      "titleTiers": null,
      "url": "/Client/GetContentDownloadUrl",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetContentDownloadUrlRequest",
      "requestExample": "{\r\n  \"Key\": \"images/sword_icon.png\"\r\n}",
      "result": "GetContentDownloadUrlResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"URL\": \"https://...\"\r\n  }\r\n}",
      "seeAlso": [
        "GetContentDownloadUrl",
        "GetContentUploadUrl",
        "DeleteContent",
        "GetContentList"
      ]
    },
    {
      "name": "GetAllUsersCharacters",
      "summary": "Lists all of the characters that belong to a specific user.",
      "requestDetails": "Returns a list of every character that currently belongs to a user.",
      "subgroup": "Characters",
      "titleTiers": null,
      "url": "/Client/GetAllUsersCharacters",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ListUsersCharactersRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"98333765432\"\r\n}",
      "result": "ListUsersCharactersResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Characters\": [\r\n      {\r\n        \"CharacterId\": \"3345677\",\r\n        \"CharacterName\": \"CoolDude\",\r\n        \"CharacterType\": \"StrongWarrior\"\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "GetCharacterData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetCharacterLeaderboard",
      "summary": "Retrieves a list of ranked characters for the given statistic, starting from the indicated point in the leaderboard",
      "resultDetails": "Note that the Position of the character in the results is for the overall leaderboard.",
      "subgroup": "Characters",
      "titleTiers": null,
      "url": "/Client/GetCharacterLeaderboard",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetCharacterLeaderboardRequest",
      "requestExample": "{\r\n  \"CharacterType\": \"blue_warrior\",\r\n  \"StatisticName\": \"Kills\",\r\n  \"StartPosition\": 0,\r\n  \"MaxResultsCount\": 20\r\n}",
      "result": "GetCharacterLeaderboardResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Leaderboard\": [\r\n      {\r\n        \"PlayFabId\": \"10931252888739651331\",\r\n        \"CharacterId\": \"9874325\",\r\n        \"DisplayName\": \"username\",\r\n        \"CharacterType\": \"blue_warrior\",\r\n        \"StatValue\": 12,\r\n        \"Position\": 0\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "GetLeaderboardAroundCharacter",
        "GetCharacterStatistics",
        "UpdateCharacterStatistics"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetLeaderboardAroundCharacter",
      "summary": "Retrieves a list of ranked characters for the given statistic, centered on the currently signed-in user",
      "resultDetails": "Note that the Position of the user in the results is for the overall leaderboard.",
      "subgroup": "Characters",
      "titleTiers": null,
      "url": "/Client/GetLeaderboardAroundCharacter",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetLeaderboardAroundCharacterRequest",
      "requestExample": "{\r\n  \"StatisticName\": \"Kills\",\r\n  \"CharacterId\": \"987343220\",\r\n  \"MaxResultsCount\": 20\r\n}",
      "result": "GetLeaderboardAroundCharacterResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Leaderboard\": [\r\n      {\r\n        \"PlayFabId\": \"10931252888739651331\",\r\n        \"CharacterId\": \"987343220\",\r\n        \"CharacterName\": \"FighterDude\",\r\n        \"DisplayName\": \"username\",\r\n        \"CharacterType\": \"blue_warrior\",\r\n        \"StatValue\": 12,\r\n        \"Position\": 0\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "GetLeaderboard",
        "GetCharacterLeaderboard",
        "UpdateCharacterStatistics"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetLeaderboardForUserCharacters",
      "summary": "Retrieves a list of all of the user's characters for the given statistic.",
      "resultDetails": "Note that the Position of the user in the results is for the overall leaderboard.",
      "subgroup": "Characters",
      "titleTiers": null,
      "url": "/Client/GetLeaderboardForUserCharacters",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetLeaderboardForUsersCharactersRequest",
      "requestExample": "{\r\n  \"StatisticName\": \"Kills\",\r\n  \"MaxResultsCount\": 20\r\n}",
      "result": "GetLeaderboardForUsersCharactersResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Leaderboard\": [\r\n      {\r\n        \"PlayFabId\": \"10931252888739651331\",\r\n        \"CharacterId\": \"987343220\",\r\n        \"CharacterName\": \"FighterDude\",\r\n        \"DisplayName\": \"username\",\r\n        \"CharacterType\": \"blue_warrior\",\r\n        \"StatValue\": 12,\r\n        \"Position\": 0\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "GetLeaderboard",
        "GetCharacterLeaderboard",
        "GetLeaderboardAroundUser"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "GrantCharacterToUser",
      "summary": "Grants the specified character type to the user.",
      "requestDetails": "Grants a character to the user of the type specified by the item ID. The user must  already have an instance of this item in their inventory in order to allow character creation. This item can come from a purchase or grant, which must be done before calling to create the character.",
      "subgroup": "Characters",
      "titleTiers": null,
      "url": "/Client/GrantCharacterToUser",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GrantCharacterToUserRequest",
      "requestExample": "{\r\n  \"CatalogVersion\": \"2.2\",\r\n  \"ItemId\": \"Blue Warrior\",\r\n  \"CharacterName\": \"FighterDude\"\r\n}",
      "result": "GrantCharacterToUserResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"CharacterId\": \"98765432\",\r\n    \"CharacterType\": \"Blue Warrior\",\r\n    \"Result\": true\r\n  }\r\n}",
      "errors": [
        "InvalidParams",
        "ItemNotOwned",
        "InternalServerError",
        "InvalidItemProperties"
      ]
    },
    {
      "name": "GetCharacterData",
      "summary": "Retrieves the title-specific custom data for the character which is readable and writable by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full  set of custom character data will be returned.",
      "subgroup": "Character Data",
      "titleTiers": null,
      "url": "/Client/GetCharacterData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetCharacterDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"CharacterId\": \"98342357\",\r\n  \"Keys\": [\r\n    \"preferences\",\r\n    \"progress\"\r\n  ]\r\n}",
      "result": "GetCharacterDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"CharacterId\": \"1234436343\",\r\n    \"Data\": {\r\n      \"preferences\": {\r\n        \"Value\": \"alpha\",\r\n        \"LastUpdated\": \"2014-08-20T12:30:45Z\",\r\n        \"Permission\": \"Public\"\r\n      },\r\n      \"progress\": {\r\n        \"Value\": \"level_twenty\",\r\n        \"LastUpdated\": \"2014-09-01T10:12:30Z\",\r\n        \"Permission\": \"Private\"\r\n      }\r\n    },\r\n    \"DataVersion\": 12\r\n  }\r\n}",
      "seeAlso": [
        "GetUserData",
        "GetCharacterReadOnlyData",
        "UpdateCharacterData"
      ],
      "errors": [
        "InvalidParams",
        "CharacterNotFound",
        "UserisNotValid"
      ]
    },
    {
      "name": "GetCharacterReadOnlyData",
      "summary": "Retrieves the title-specific custom data for the character which can only be read by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full  set of custom character data will be returned.",
      "subgroup": "Character Data",
      "titleTiers": null,
      "url": "/Client/GetCharacterReadOnlyData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetCharacterDataRequest",
      "requestExample": "{\r\n  \"PlayFabId\": \"2039475\",\r\n  \"CharacterId\": \"98342357\",\r\n  \"Keys\": [\r\n    \"preferences\",\r\n    \"progress\"\r\n  ]\r\n}",
      "result": "GetCharacterDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"CharacterId\": \"1234436343\",\r\n    \"Data\": {\r\n      \"preferences\": {\r\n        \"Value\": \"alpha\",\r\n        \"LastUpdated\": \"2014-08-20T12:30:45Z\",\r\n        \"Permission\": \"Public\"\r\n      },\r\n      \"progress\": {\r\n        \"Value\": \"level_twenty\",\r\n        \"LastUpdated\": \"2014-09-01T10:12:30Z\",\r\n        \"Permission\": \"Private\"\r\n      }\r\n    },\r\n    \"DataVersion\": 12\r\n  }\r\n}",
      "seeAlso": [
        "GetUserData",
        "GetCharacterData",
        "UpdateCharacterData"
      ],
      "errors": [
        "InvalidParams",
        "CharacterNotFound",
        "UserisNotValid"
      ]
    },
    {
      "name": "UpdateCharacterData",
      "summary": "Creates and updates the title-specific custom data for the user's character which is readable  and writable by the client",
      "requestDetails": "This function performs an additive update of the arbitrary strings containing the custom data for the character. In updating the custom data object, keys which already  exist in the object will have their values overwritten, while keys with null values will be removed.  New keys will be added, with the given values. No other key-value pairs will be changed apart from  those specified in the call.",
      "subgroup": "Character Data",
      "titleTiers": null,
      "url": "/Client/UpdateCharacterData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UpdateCharacterDataRequest",
      "requestExample": "{\r\n  \"CharacterId\": \"98765456\",\r\n  \"Data\": {\r\n    \"Class\": \"Fighter\",\r\n    \"Gender\": \"Female\",\r\n    \"Icon\": \"Guard 3\",\r\n    \"Theme\": \"Colorful\"\r\n  },\r\n  \"Permission\": \"Public\"\r\n}",
      "result": "UpdateCharacterDataResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"DataVersion\": 5\r\n  }\r\n}",
      "seeAlso": [
        "GetUserData",
        "GetCharacterData",
        "GetCharacterReadOnlyData"
      ],
      "errors": [
        "InvalidParams",
        "CharacterNotFound",
        "AccountNotFound",
        "KeyLengthExceeded",
        "DataLengthExceeded",
        "DeleteKeyConflict"
      ]
    },
    {
      "name": "ValidateAmazonIAPReceipt",
      "summary": "Validates with Amazon that the receipt for an Amazon App Store in-app purchase is valid and that it matches the purchased catalog item",
      "resultDetails": "Once verified, the catalog item matching the Amazon item name will be added to the user's inventory.",
      "subgroup": "Amazon-Specific APIs",
      "titleTiers": null,
      "url": "/Client/ValidateAmazonIAPReceipt",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ValidateAmazonReceiptRequest",
      "requestExample": "{\r\n  \"ReceiptId\": \"q1YqVbJSyjH28DGPKChw9c0o8nd3vSstssQtzSkrzM8tCk43K6z0d_HOTcwwN8vxCrVV0lEqBmpJzs_VK8hJrExLTNLLTCzQK8_MSUnJTy8LSpcoWRnoKKUAFRmaGBtZmBqCCFMzpVoA\",\r\n  \"UserId\": \"l3HL7XppEMhrOGDgur9-ulvqomrSg6qyODKmah72lJU=\"\r\n}",
      "result": "ValidateAmazonReceiptResult",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {}\r\n}",
      "errors": [
        "InvalidParams",
        "InvalidReceipt",
        "InvalidTitleId",
        "ReceiptAlreadyUsed",
        "MissingAmazonSharedKey",
        "NoMatchingCatalogItemForReceipt"
      ]
    },
    {
      "name": "AcceptTrade",
      "summary": "Accepts an open trade. If the call is successful, the offered and accepted items will be swapped between the two players' inventories.",
      "subgroup": "Trading",
      "titleTiers": null,
      "url": "/Client/AcceptTrade",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "AcceptTradeRequest",
      "requestExample": "{\r\n  \"OfferingPlayerId\": \"CD803BF233CE76CC\",\r\n  \"TradeId\": \"D819CEC225EA9948C351\",\r\n  \"AcceptedInventoryInstanceIds\": [\r\n    \"95C1797ADDAC24DC0383\",\r\n    \"0F7793DF55CCEAF21B84\"\r\n  ]\r\n}",
      "result": "AcceptTradeResponse",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Trade\": {\r\n      \"Status\": \"Filled\",\r\n      \"TradeId\": \"D819CEC225EA9948C351\",\r\n      \"OfferingPlayerId\": \"CD803BF233CE76CC\",\r\n      \"OfferedInventoryInstanceIds\": [\r\n        \"1359447\",\r\n        \"635691\"\r\n      ],\r\n      \"OfferedCatalogItemIds\": [\r\n        \"gun_1\",\r\n        \"skin_3\"\r\n      ],\r\n      \"RequestedCatalogItemIds\": [\r\n        \"rare_hat_7\"\r\n      ],\r\n      \"AcceptedPlayerId\": \"461535E1EF4150A86889\",\r\n      \"AcceptedInventoryInstanceIds\": [\r\n        \"95C1797ADDAC24DC0383\",\r\n        \"0F7793DF55CCEAF21B84\"\r\n      ],\r\n      \"OpenedAt\": \"2015-04-07T09:04:28Z\",\r\n      \"FilledAt\": \"2015-04-07T09:20:53Z\"\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "OpenTrade",
        "GetTradeStatus",
        "CancelTrade",
        "GetPlayerTrades"
      ],
      "errors": [
        "InvalidParams",
        "TradeStatusNotValidForAccepting",
        "TradeAcceptedCatalogItemInvalid",
        "TradeAllowedUsersInvalid",
        "TradeInventoryItemDoesNotExist",
        "TradeInventoryItemInvalidStatus",
        "TradeInventoryItemIsConsumed",
        "TradeInventoryItemIsStackable",
        "TradeInventoryItemIsAssignedToCharacter",
        "TradeInventoryItemIsBundle",
        "TradeAcceptedItemsMismatch",
        "TradeAcceptingUserNotAllowed",
        "TradeCancelled",
        "TradeAlreadyFilled",
        "TradeInventoryItemExpired"
      ]
    },
    {
      "name": "CancelTrade",
      "summary": "Cancels an open trade.",
      "subgroup": "Trading",
      "titleTiers": null,
      "url": "/Client/CancelTrade",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "CancelTradeRequest",
      "requestExample": "{\r\n  \"TradeId\": \"D819CEC225EA9948C351\"\r\n}",
      "result": "CancelTradeResponse",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Trade\": {\r\n      \"Status\": \"Cancelled\",\r\n      \"TradeId\": \"D819CEC225EA9948C351\",\r\n      \"OfferingPlayerId\": \"CD803BF233CE76CC\",\r\n      \"OfferedInventoryInstanceIds\": [\r\n        \"1359447\",\r\n        \"635691\"\r\n      ],\r\n      \"RequestedCatalogItemIds\": [\r\n        \"rare_hat_7\"\r\n      ],\r\n      \"OpenedAt\": \"2015-04-07T09:04:28Z\",\r\n      \"CancelledAt\": \"2015-04-07T09:18:24Z\"\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "OpenTrade",
        "GetTradeStatus",
        "AcceptTrade",
        "GetPlayerTrades"
      ],
      "errors": [
        "InvalidParams",
        "TradeCancelled",
        "TradeAlreadyFilled"
      ]
    },
    {
      "name": "GetPlayerTrades",
      "summary": "Gets all trades the player has either opened or accepted, optionally filtered by trade status.",
      "subgroup": "Trading",
      "titleTiers": null,
      "url": "/Client/GetPlayerTrades",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetPlayerTradesRequest",
      "requestExample": "{\r\n  \"StatusFilter\": \"Filled\"\r\n}",
      "result": "GetPlayerTradesResponse",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"OpenedTrades\": [\r\n      {\r\n        \"Status\": \"Filled\",\r\n        \"TradeId\": \"D819CEC225EA9948C351\",\r\n        \"OfferingPlayerId\": \"CD803BF233CE76CC\",\r\n        \"OfferedInventoryInstanceIds\": [\r\n          \"1359447\",\r\n          \"635691\"\r\n        ],\r\n        \"OfferedCatalogItemIds\": [\r\n          \"gun_1\",\r\n          \"skin_3\"\r\n        ],\r\n        \"RequestedCatalogItemIds\": [\r\n          \"rare_hat_7\"\r\n        ],\r\n        \"AcceptedPlayerId\": \"461535E1EF4150A86889\",\r\n        \"AcceptedInventoryInstanceIds\": [\r\n          \"95C1797ADDAC24DC0383\",\r\n          \"0F7793DF55CCEAF21B84\"\r\n        ],\r\n        \"OpenedAt\": \"2015-04-07T09:04:28Z\",\r\n        \"FilledAt\": \"2015-04-07T09:20:53Z\"\r\n      }\r\n    ],\r\n    \"AcceptedTrades\": [\r\n      {\r\n        \"Status\": \"Filled\",\r\n        \"TradeId\": \"20BC5A5DCD966_D4935E795ABAE6\",\r\n        \"OfferingPlayerId\": \"20BC5A5DCD966\",\r\n        \"OfferedInventoryInstanceIds\": [\r\n          \"23BDCB\"\r\n        ],\r\n        \"OfferedCatalogItemIds\": [\r\n          \"boost_10\"\r\n        ],\r\n        \"RequestedCatalogItemIds\": [\r\n          \"gem_5\",\r\n          \"card_3\"\r\n        ],\r\n        \"AcceptedPlayerId\": \"CD803BF233CE76CC\",\r\n        \"AcceptedInventoryInstanceIds\": [\r\n          \"2DDD0187\",\r\n          \"35D2A00\"\r\n        ],\r\n        \"OpenedAt\": \"2015-05-01T11:45:19Z\",\r\n        \"FilledAt\": \"2015-05-01T15:07:34Z\"\r\n      }\r\n    ]\r\n  }\r\n}",
      "seeAlso": [
        "OpenTrade",
        "GetTradeStatus",
        "AcceptTrade",
        "CancelTrade"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetTradeStatus",
      "summary": "Gets the current status of an existing trade.",
      "subgroup": "Trading",
      "titleTiers": null,
      "url": "/Client/GetTradeStatus",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetTradeStatusRequest",
      "requestExample": "{\r\n  \"OfferingPlayerId\": \"CD803BF233CE76CC\",\r\n  \"TradeId\": \"D819CEC225EA9948C351\"\r\n}",
      "result": "GetTradeStatusResponse",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Trade\": {\r\n      \"Status\": \"Open\",\r\n      \"TradeId\": \"D819CEC225EA9948C351\",\r\n      \"OfferingPlayerId\": \"CD803BF233CE76CC\",\r\n      \"OfferedInventoryInstanceIds\": [\r\n        \"1359447\",\r\n        \"635691\"\r\n      ],\r\n      \"RequestedCatalogItemIds\": [\r\n        \"rare_hat_7\"\r\n      ],\r\n      \"OpenedAt\": \"2015-04-07T09:04:28Z\"\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "OpenTrade",
        "AcceptTrade",
        "CancelTrade",
        "GetPlayerTrades"
      ],
      "errors": [
        "InvalidParams",
        "TradeDoesNotExist"
      ]
    },
    {
      "name": "OpenTrade",
      "summary": "Opens a new outstanding trade.",
      "subgroup": "Trading",
      "titleTiers": null,
      "url": "/Client/OpenTrade",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "OpenTradeRequest",
      "requestExample": "{\r\n  \"OfferedInventoryInstanceIds\": [\r\n    \"1359447\",\r\n    \"635691\"\r\n  ],\r\n  \"RequestedCatalogItemIds\": [\r\n    \"rare_hat_7\"\r\n  ]\r\n}",
      "result": "OpenTradeResponse",
      "resultExample": "{\r\n  \"code\": 200,\r\n  \"status\": \"OK\",\r\n  \"data\": {\r\n    \"Trade\": {\r\n      \"Status\": \"Opening\",\r\n      \"TradeId\": \"D819CEC225EA9948C351\",\r\n      \"OfferingPlayerId\": \"CD803BF233CE76CC\",\r\n      \"OfferedInventoryInstanceIds\": [\r\n        \"1359447\",\r\n        \"635691\"\r\n      ],\r\n      \"RequestedCatalogItemIds\": [\r\n        \"rare_hat_7\"\r\n      ],\r\n      \"OpenedAt\": \"2015-04-07T09:04:28Z\"\r\n    }\r\n  }\r\n}",
      "seeAlso": [
        "GetTradeStatus",
        "AcceptTrade",
        "CancelTrade",
        "GetPlayerTrades"
      ],
      "errors": [
        "InvalidParams",
        "TradeAcceptedCatalogItemInvalid",
        "TradeAllowedUsersInvalid",
        "TradeInventoryItemDoesNotExist",
        "TradeInventoryItemInvalidStatus",
        "TradeInventoryItemIsConsumed",
        "TradeInventoryItemIsStackable",
        "TradeInventoryItemIsAssignedToCharacter",
        "TradeInventoryItemIsBundle",
        "TradeInventoryItemExpired"
      ]
    },
    {
      "name": "AttributeInstall",
      "summary": "Attributes an install for advertisment.",
      "requestDetails": "If you have an ad attribution partner enabled, this will post an install to thier service  to track the devices. It uses the given device id to match based on clicks on ads.",
      "subgroup": "Advertising",
      "titleTiers": null,
      "url": "/Client/AttributeInstall",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "AttributeInstallRequest",
      "requestExample": "{\r\n  \"Idfa\": \"11098810\"\r\n}",
      "result": "AttributeInstallResult",
      "resultExample": "",
      "errors": [
        "NoPartnerEnabled",
        "InvalidParams"
      ]
    }
  ],
  "subgroups": [
    {
      "name": "Authentication",
      "methods": [
        "GetPhotonAuthenticationToken",
        "LoginWithAndroidDeviceID",
        "LoginWithCustomID",
        "LoginWithEmailAddress",
        "LoginWithFacebook",
        "LoginWithGameCenter",
        "LoginWithGoogleAccount",
        "LoginWithIOSDeviceID",
        "LoginWithKongregate",
        "LoginWithPlayFab",
        "LoginWithPSN",
        "LoginWithSteam",
        "LoginWithXbox",
        "RegisterPlayFabUser"
      ]
    },
    {
      "name": "Account Management",
      "methods": [
        "AddUsernamePassword",
        "GetAccountInfo",
        "GetPlayFabIDsFromFacebookIDs",
        "GetPlayFabIDsFromGameCenterIDs",
        "GetPlayFabIDsFromGoogleIDs",
        "GetPlayFabIDsFromPSNAccountIDs",
        "GetPlayFabIDsFromSteamIDs",
        "GetUserCombinedInfo",
        "LinkAndroidDeviceID",
        "LinkCustomID",
        "LinkFacebookAccount",
        "LinkGameCenterAccount",
        "LinkGoogleAccount",
        "LinkIOSDeviceID",
        "LinkKongregate",
        "LinkPSNAccount",
        "LinkSteamAccount",
        "LinkXboxAccount",
        "SendAccountRecoveryEmail",
        "UnlinkAndroidDeviceID",
        "UnlinkCustomID",
        "UnlinkFacebookAccount",
        "UnlinkGameCenterAccount",
        "UnlinkGoogleAccount",
        "UnlinkIOSDeviceID",
        "UnlinkKongregate",
        "UnlinkPSNAccount",
        "UnlinkSteamAccount",
        "UnlinkXboxAccount",
        "UpdateUserTitleDisplayName"
      ]
    },
    {
      "name": "Player Data Management",
      "methods": [
        "GetFriendLeaderboard",
        "GetFriendLeaderboardAroundCurrentUser",
        "GetLeaderboard",
        "GetLeaderboardAroundCurrentUser",
        "GetUserData",
        "GetUserPublisherData",
        "GetUserPublisherReadOnlyData",
        "GetUserReadOnlyData",
        "GetUserStatistics",
        "UpdateUserData",
        "UpdateUserPublisherData",
        "UpdateUserStatistics"
      ]
    },
    {
      "name": "Title-Wide Data Management",
      "methods": [
        "GetCatalogItems",
        "GetStoreItems",
        "GetTitleData",
        "GetTitleNews"
      ]
    },
    {
      "name": "Player Item Management",
      "methods": [
        "AddUserVirtualCurrency",
        "ConfirmPurchase",
        "ConsumeItem",
        "GetCharacterInventory",
        "GetPurchase",
        "GetUserInventory",
        "PayForPurchase",
        "PurchaseItem",
        "RedeemCoupon",
        "ReportPlayer",
        "StartPurchase",
        "SubtractUserVirtualCurrency",
        "UnlockContainerItem"
      ]
    },
    {
      "name": "Friend List Management",
      "methods": [
        "AddFriend",
        "GetFriendsList",
        "RemoveFriend",
        "SetFriendTags"
      ]
    },
    {
      "name": "IOS-Specific APIs",
      "methods": [
        "RegisterForIOSPushNotification",
        "RestoreIOSPurchases",
        "ValidateIOSReceipt"
      ]
    },
    {
      "name": "Matchmaking APIs",
      "methods": [
        "GetCurrentGames",
        "GetGameServerRegions",
        "Matchmake",
        "StartGame"
      ]
    },
    {
      "name": "Android-Specific APIs",
      "methods": [
        "AndroidDevicePushNotificationRegistration",
        "ValidateGooglePlayPurchase"
      ]
    },
    {
      "name": "Analytics",
      "methods": [
        "LogEvent"
      ]
    },
    {
      "name": "Shared Group Data",
      "methods": [
        "AddSharedGroupMembers",
        "CreateSharedGroup",
        "GetPublisherData",
        "GetSharedGroupData",
        "RemoveSharedGroupMembers",
        "UpdateSharedGroupData"
      ]
    },
    {
      "name": "Sony-specific APIs",
      "methods": [
        "ConsumePSNEntitlements",
        "RefreshPSNAuthToken"
      ]
    },
    {
      "name": "Server-Side Cloud Script",
      "methods": [
        "GetCloudScriptUrl",
        "RunCloudScript"
      ]
    },
    {
      "name": "Content",
      "methods": [
        "GetContentDownloadUrl"
      ]
    },
    {
      "name": "Characters",
      "methods": [
        "GetAllUsersCharacters",
        "GetCharacterLeaderboard",
        "GetLeaderboardAroundCharacter",
        "GetLeaderboardForUserCharacters",
        "GrantCharacterToUser"
      ]
    },
    {
      "name": "Character Data",
      "methods": [
        "GetCharacterData",
        "GetCharacterReadOnlyData",
        "UpdateCharacterData"
      ]
    },
    {
      "name": "Amazon-Specific APIs",
      "methods": [
        "ValidateAmazonIAPReceipt"
      ]
    },
    {
      "name": "Trading",
      "methods": [
        "AcceptTrade",
        "CancelTrade",
        "GetPlayerTrades",
        "GetTradeStatus",
        "OpenTrade"
      ]
    },
    {
      "name": "Advertising",
      "methods": [
        "AttributeInstall"
      ]
    }
  ],
  "errors": {
    "Success": {
      "id": 0,
      "name": "Success"
    },
    "InvalidParams": {
      "id": 1000,
      "name": "InvalidParams"
    },
    "AccountNotFound": {
      "id": 1001,
      "name": "AccountNotFound"
    },
    "AccountBanned": {
      "id": 1002,
      "name": "AccountBanned"
    },
    "InvalidUsernameOrPassword": {
      "id": 1003,
      "name": "InvalidUsernameOrPassword"
    },
    "InvalidTitleId": {
      "id": 1004,
      "name": "InvalidTitleId"
    },
    "InvalidEmailAddress": {
      "id": 1005,
      "name": "InvalidEmailAddress"
    },
    "EmailAddressNotAvailable": {
      "id": 1006,
      "name": "EmailAddressNotAvailable"
    },
    "InvalidUsername": {
      "id": 1007,
      "name": "InvalidUsername"
    },
    "InvalidPassword": {
      "id": 1008,
      "name": "InvalidPassword"
    },
    "UsernameNotAvailable": {
      "id": 1009,
      "name": "UsernameNotAvailable"
    },
    "InvalidSteamTicket": {
      "id": 1010,
      "name": "InvalidSteamTicket"
    },
    "AccountAlreadyLinked": {
      "id": 1011,
      "name": "AccountAlreadyLinked"
    },
    "LinkedAccountAlreadyClaimed": {
      "id": 1012,
      "name": "LinkedAccountAlreadyClaimed"
    },
    "InvalidFacebookToken": {
      "id": 1013,
      "name": "InvalidFacebookToken"
    },
    "AccountNotLinked": {
      "id": 1014,
      "name": "AccountNotLinked"
    },
    "FailedByPaymentProvider": {
      "id": 1015,
      "name": "FailedByPaymentProvider"
    },
    "CouponCodeNotFound": {
      "id": 1016,
      "name": "CouponCodeNotFound"
    },
    "InvalidContainerItem": {
      "id": 1017,
      "name": "InvalidContainerItem"
    },
    "ContainerNotOwned": {
      "id": 1018,
      "name": "ContainerNotOwned"
    },
    "KeyNotOwned": {
      "id": 1019,
      "name": "KeyNotOwned"
    },
    "InvalidItemIdInTable": {
      "id": 1020,
      "name": "InvalidItemIdInTable"
    },
    "InvalidReceipt": {
      "id": 1021,
      "name": "InvalidReceipt"
    },
    "ReceiptAlreadyUsed": {
      "id": 1022,
      "name": "ReceiptAlreadyUsed"
    },
    "ReceiptCancelled": {
      "id": 1023,
      "name": "ReceiptCancelled"
    },
    "GameNotFound": {
      "id": 1024,
      "name": "GameNotFound"
    },
    "GameModeNotFound": {
      "id": 1025,
      "name": "GameModeNotFound"
    },
    "InvalidGoogleToken": {
      "id": 1026,
      "name": "InvalidGoogleToken"
    },
    "UserIsNotPartOfDeveloper": {
      "id": 1027,
      "name": "UserIsNotPartOfDeveloper"
    },
    "InvalidTitleForDeveloper": {
      "id": 1028,
      "name": "InvalidTitleForDeveloper"
    },
    "TitleNameConflicts": {
      "id": 1029,
      "name": "TitleNameConflicts"
    },
    "UserisNotValid": {
      "id": 1030,
      "name": "UserisNotValid"
    },
    "ValueAlreadyExists": {
      "id": 1031,
      "name": "ValueAlreadyExists"
    },
    "BuildNotFound": {
      "id": 1032,
      "name": "BuildNotFound"
    },
    "PlayerNotInGame": {
      "id": 1033,
      "name": "PlayerNotInGame"
    },
    "InvalidTicket": {
      "id": 1034,
      "name": "InvalidTicket"
    },
    "InvalidDeveloper": {
      "id": 1035,
      "name": "InvalidDeveloper"
    },
    "InvalidOrderInfo": {
      "id": 1036,
      "name": "InvalidOrderInfo"
    },
    "RegistrationIncomplete": {
      "id": 1037,
      "name": "RegistrationIncomplete"
    },
    "InvalidPlatform": {
      "id": 1038,
      "name": "InvalidPlatform"
    },
    "UnknownError": {
      "id": 1039,
      "name": "UnknownError"
    },
    "SteamApplicationNotOwned": {
      "id": 1040,
      "name": "SteamApplicationNotOwned"
    },
    "WrongSteamAccount": {
      "id": 1041,
      "name": "WrongSteamAccount"
    },
    "TitleNotActivated": {
      "id": 1042,
      "name": "TitleNotActivated"
    },
    "RegistrationSessionNotFound": {
      "id": 1043,
      "name": "RegistrationSessionNotFound"
    },
    "NoSuchMod": {
      "id": 1044,
      "name": "NoSuchMod"
    },
    "FileNotFound": {
      "id": 1045,
      "name": "FileNotFound"
    },
    "DuplicateEmail": {
      "id": 1046,
      "name": "DuplicateEmail"
    },
    "ItemNotFound": {
      "id": 1047,
      "name": "ItemNotFound"
    },
    "ItemNotOwned": {
      "id": 1048,
      "name": "ItemNotOwned"
    },
    "ItemNotRecycleable": {
      "id": 1049,
      "name": "ItemNotRecycleable"
    },
    "ItemNotAffordable": {
      "id": 1050,
      "name": "ItemNotAffordable"
    },
    "InvalidVirtualCurrency": {
      "id": 1051,
      "name": "InvalidVirtualCurrency"
    },
    "WrongVirtualCurrency": {
      "id": 1052,
      "name": "WrongVirtualCurrency"
    },
    "WrongPrice": {
      "id": 1053,
      "name": "WrongPrice"
    },
    "NonPositiveValue": {
      "id": 1054,
      "name": "NonPositiveValue"
    },
    "InvalidRegion": {
      "id": 1055,
      "name": "InvalidRegion"
    },
    "RegionAtCapacity": {
      "id": 1056,
      "name": "RegionAtCapacity"
    },
    "ServerFailedToStart": {
      "id": 1057,
      "name": "ServerFailedToStart"
    },
    "NameNotAvailable": {
      "id": 1058,
      "name": "NameNotAvailable"
    },
    "InsufficientFunds": {
      "id": 1059,
      "name": "InsufficientFunds"
    },
    "InvalidDeviceID": {
      "id": 1060,
      "name": "InvalidDeviceID"
    },
    "InvalidPushNotificationToken": {
      "id": 1061,
      "name": "InvalidPushNotificationToken"
    },
    "NoRemainingUses": {
      "id": 1062,
      "name": "NoRemainingUses"
    },
    "InvalidPaymentProvider": {
      "id": 1063,
      "name": "InvalidPaymentProvider"
    },
    "PurchaseInitializationFailure": {
      "id": 1064,
      "name": "PurchaseInitializationFailure"
    },
    "DuplicateUsername": {
      "id": 1065,
      "name": "DuplicateUsername"
    },
    "InvalidBuyerInfo": {
      "id": 1066,
      "name": "InvalidBuyerInfo"
    },
    "NoGameModeParamsSet": {
      "id": 1067,
      "name": "NoGameModeParamsSet"
    },
    "BodyTooLarge": {
      "id": 1068,
      "name": "BodyTooLarge"
    },
    "ReservedWordInBody": {
      "id": 1069,
      "name": "ReservedWordInBody"
    },
    "InvalidTypeInBody": {
      "id": 1070,
      "name": "InvalidTypeInBody"
    },
    "InvalidRequest": {
      "id": 1071,
      "name": "InvalidRequest"
    },
    "ReservedEventName": {
      "id": 1072,
      "name": "ReservedEventName"
    },
    "InvalidUserStatistics": {
      "id": 1073,
      "name": "InvalidUserStatistics"
    },
    "NotAuthenticated": {
      "id": 1074,
      "name": "NotAuthenticated"
    },
    "StreamAlreadyExists": {
      "id": 1075,
      "name": "StreamAlreadyExists"
    },
    "ErrorCreatingStream": {
      "id": 1076,
      "name": "ErrorCreatingStream"
    },
    "StreamNotFound": {
      "id": 1077,
      "name": "StreamNotFound"
    },
    "InvalidAccount": {
      "id": 1078,
      "name": "InvalidAccount"
    },
    "PurchaseDoesNotExist": {
      "id": 1080,
      "name": "PurchaseDoesNotExist"
    },
    "InvalidPurchaseTransactionStatus": {
      "id": 1081,
      "name": "InvalidPurchaseTransactionStatus"
    },
    "APINotEnabledForGameClientAccess": {
      "id": 1082,
      "name": "APINotEnabledForGameClientAccess"
    },
    "NoPushNotificationARNForTitle": {
      "id": 1083,
      "name": "NoPushNotificationARNForTitle"
    },
    "BuildAlreadyExists": {
      "id": 1084,
      "name": "BuildAlreadyExists"
    },
    "BuildPackageDoesNotExist": {
      "id": 1085,
      "name": "BuildPackageDoesNotExist"
    },
    "CustomAnalyticsEventsNotEnabledForTitle": {
      "id": 1087,
      "name": "CustomAnalyticsEventsNotEnabledForTitle"
    },
    "InvalidSharedGroupId": {
      "id": 1088,
      "name": "InvalidSharedGroupId"
    },
    "NotAuthorized": {
      "id": 1089,
      "name": "NotAuthorized"
    },
    "MissingTitleGoogleProperties": {
      "id": 1090,
      "name": "MissingTitleGoogleProperties"
    },
    "InvalidItemProperties": {
      "id": 1091,
      "name": "InvalidItemProperties"
    },
    "InvalidPSNAuthCode": {
      "id": 1092,
      "name": "InvalidPSNAuthCode"
    },
    "InvalidItemId": {
      "id": 1093,
      "name": "InvalidItemId"
    },
    "PushNotEnabledForAccount": {
      "id": 1094,
      "name": "PushNotEnabledForAccount"
    },
    "PushServiceError": {
      "id": 1095,
      "name": "PushServiceError"
    },
    "ReceiptDoesNotContainInAppItems": {
      "id": 1096,
      "name": "ReceiptDoesNotContainInAppItems"
    },
    "ReceiptContainsMultipleInAppItems": {
      "id": 1097,
      "name": "ReceiptContainsMultipleInAppItems"
    },
    "InvalidBundleID": {
      "id": 1098,
      "name": "InvalidBundleID"
    },
    "JavascriptException": {
      "id": 1099,
      "name": "JavascriptException"
    },
    "InvalidSessionTicket": {
      "id": 1100,
      "name": "InvalidSessionTicket"
    },
    "UnableToConnectToDatabase": {
      "id": 1101,
      "name": "UnableToConnectToDatabase"
    },
    "InternalServerError": {
      "id": 1110,
      "name": "InternalServerError"
    },
    "InvalidReportDate": {
      "id": 1111,
      "name": "InvalidReportDate"
    },
    "ReportNotAvailable": {
      "id": 1112,
      "name": "ReportNotAvailable"
    },
    "DatabaseThroughputExceeded": {
      "id": 1113,
      "name": "DatabaseThroughputExceeded"
    },
    "InvalidLobbyId": {
      "id": 1114,
      "name": "InvalidLobbyId"
    },
    "InvalidGameTicket": {
      "id": 1115,
      "name": "InvalidGameTicket"
    },
    "ExpiredGameTicket": {
      "id": 1116,
      "name": "ExpiredGameTicket"
    },
    "GameTicketDoesNotMatchLobby": {
      "id": 1117,
      "name": "GameTicketDoesNotMatchLobby"
    },
    "LinkedDeviceAlreadyClaimed": {
      "id": 1118,
      "name": "LinkedDeviceAlreadyClaimed"
    },
    "DeviceAlreadyLinked": {
      "id": 1119,
      "name": "DeviceAlreadyLinked"
    },
    "DeviceNotLinked": {
      "id": 1120,
      "name": "DeviceNotLinked"
    },
    "PartialFailure": {
      "id": 1121,
      "name": "PartialFailure"
    },
    "PublisherNotSet": {
      "id": 1122,
      "name": "PublisherNotSet"
    },
    "ServiceUnavailable": {
      "id": 1123,
      "name": "ServiceUnavailable"
    },
    "VersionNotFound": {
      "id": 1124,
      "name": "VersionNotFound"
    },
    "RevisionNotFound": {
      "id": 1125,
      "name": "RevisionNotFound"
    },
    "InvalidPublisherId": {
      "id": 1126,
      "name": "InvalidPublisherId"
    },
    "DownstreamServiceUnavailable": {
      "id": 1127,
      "name": "DownstreamServiceUnavailable"
    },
    "APINotIncludedInTitleUsageTier": {
      "id": 1128,
      "name": "APINotIncludedInTitleUsageTier"
    },
    "DAULimitExceeded": {
      "id": 1129,
      "name": "DAULimitExceeded"
    },
    "APIRequestLimitExceeded": {
      "id": 1130,
      "name": "APIRequestLimitExceeded"
    },
    "InvalidAPIEndpoint": {
      "id": 1131,
      "name": "InvalidAPIEndpoint"
    },
    "BuildNotAvailable": {
      "id": 1132,
      "name": "BuildNotAvailable"
    },
    "ConcurrentEditError": {
      "id": 1133,
      "name": "ConcurrentEditError"
    },
    "ContentNotFound": {
      "id": 1134,
      "name": "ContentNotFound"
    },
    "CharacterNotFound": {
      "id": 1135,
      "name": "CharacterNotFound"
    },
    "CloudScriptNotFound": {
      "id": 1136,
      "name": "CloudScriptNotFound"
    },
    "ContentQuotaExceeded": {
      "id": 1137,
      "name": "ContentQuotaExceeded"
    },
    "InvalidCharacterStatistics": {
      "id": 1138,
      "name": "InvalidCharacterStatistics"
    },
    "PhotonNotEnabledForTitle": {
      "id": 1139,
      "name": "PhotonNotEnabledForTitle"
    },
    "PhotonApplicationNotFound": {
      "id": 1140,
      "name": "PhotonApplicationNotFound"
    },
    "PhotonApplicationNotAssociatedWithTitle": {
      "id": 1141,
      "name": "PhotonApplicationNotAssociatedWithTitle"
    },
    "InvalidEmailOrPassword": {
      "id": 1142,
      "name": "InvalidEmailOrPassword"
    },
    "FacebookAPIError": {
      "id": 1143,
      "name": "FacebookAPIError"
    },
    "InvalidContentType": {
      "id": 1144,
      "name": "InvalidContentType"
    },
    "KeyLengthExceeded": {
      "id": 1145,
      "name": "KeyLengthExceeded"
    },
    "DataLengthExceeded": {
      "id": 1146,
      "name": "DataLengthExceeded"
    },
    "TooManyKeys": {
      "id": 1147,
      "name": "TooManyKeys"
    },
    "FreeTierCannotHaveVirtualCurrency": {
      "id": 1148,
      "name": "FreeTierCannotHaveVirtualCurrency"
    },
    "MissingAmazonSharedKey": {
      "id": 1149,
      "name": "MissingAmazonSharedKey"
    },
    "AmazonValidationError": {
      "id": 1150,
      "name": "AmazonValidationError"
    },
    "InvalidPSNIssuerId": {
      "id": 1151,
      "name": "InvalidPSNIssuerId"
    },
    "PSNInaccessible": {
      "id": 1152,
      "name": "PSNInaccessible"
    },
    "ExpiredAuthToken": {
      "id": 1153,
      "name": "ExpiredAuthToken"
    },
    "FailedToGetEntitlements": {
      "id": 1154,
      "name": "FailedToGetEntitlements"
    },
    "FailedToConsumeEntitlement": {
      "id": 1155,
      "name": "FailedToConsumeEntitlement"
    },
    "TradeAcceptingUserNotAllowed": {
      "id": 1156,
      "name": "TradeAcceptingUserNotAllowed"
    },
    "TradeInventoryItemIsAssignedToCharacter": {
      "id": 1157,
      "name": "TradeInventoryItemIsAssignedToCharacter"
    },
    "TradeInventoryItemIsBundle": {
      "id": 1158,
      "name": "TradeInventoryItemIsBundle"
    },
    "TradeStatusNotValidForCancelling": {
      "id": 1159,
      "name": "TradeStatusNotValidForCancelling"
    },
    "TradeStatusNotValidForAccepting": {
      "id": 1160,
      "name": "TradeStatusNotValidForAccepting"
    },
    "TradeDoesNotExist": {
      "id": 1161,
      "name": "TradeDoesNotExist"
    },
    "TradeCancelled": {
      "id": 1162,
      "name": "TradeCancelled"
    },
    "TradeAlreadyFilled": {
      "id": 1163,
      "name": "TradeAlreadyFilled"
    },
    "TradeWaitForStatusTimeout": {
      "id": 1164,
      "name": "TradeWaitForStatusTimeout"
    },
    "TradeInventoryItemExpired": {
      "id": 1165,
      "name": "TradeInventoryItemExpired"
    },
    "TradeMissingOfferedAndAcceptedItems": {
      "id": 1166,
      "name": "TradeMissingOfferedAndAcceptedItems"
    },
    "TradeAcceptedItemIsBundle": {
      "id": 1167,
      "name": "TradeAcceptedItemIsBundle"
    },
    "TradeAcceptedItemIsStackable": {
      "id": 1168,
      "name": "TradeAcceptedItemIsStackable"
    },
    "TradeInventoryItemInvalidStatus": {
      "id": 1169,
      "name": "TradeInventoryItemInvalidStatus"
    },
    "TradeAcceptedCatalogItemInvalid": {
      "id": 1170,
      "name": "TradeAcceptedCatalogItemInvalid"
    },
    "TradeAllowedUsersInvalid": {
      "id": 1171,
      "name": "TradeAllowedUsersInvalid"
    },
    "TradeInventoryItemDoesNotExist": {
      "id": 1172,
      "name": "TradeInventoryItemDoesNotExist"
    },
    "TradeInventoryItemIsConsumed": {
      "id": 1173,
      "name": "TradeInventoryItemIsConsumed"
    },
    "TradeInventoryItemIsStackable": {
      "id": 1174,
      "name": "TradeInventoryItemIsStackable"
    },
    "TradeAcceptedItemsMismatch": {
      "id": 1175,
      "name": "TradeAcceptedItemsMismatch"
    },
    "InvalidKongregateToken": {
      "id": 1176,
      "name": "InvalidKongregateToken"
    },
    "FeatureNotConfiguredForTitle": {
      "id": 1177,
      "name": "FeatureNotConfiguredForTitle"
    },
    "NoMatchingCatalogItemForReceipt": {
      "id": 1178,
      "name": "NoMatchingCatalogItemForReceipt"
    },
    "InvalidCurrencyCode": {
      "id": 1179,
      "name": "InvalidCurrencyCode"
    },
    "NoRealMoneyPriceForCatalogItem": {
      "id": 1180,
      "name": "NoRealMoneyPriceForCatalogItem"
    },
    "TradeInventoryItemIsNotTradable": {
      "id": 1181,
      "name": "TradeInventoryItemIsNotTradable"
    },
    "TradeAcceptedCatalogItemIsNotTradable": {
      "id": 1182,
      "name": "TradeAcceptedCatalogItemIsNotTradable"
    },
    "UsersAlreadyFriends": {
      "id": 1183,
      "name": "UsersAlreadyFriends"
    },
    "LinkedIdentifierAlreadyClaimed": {
      "id": 1184,
      "name": "LinkedIdentifierAlreadyClaimed"
    },
    "CustomIdNotLinked": {
      "id": 1185,
      "name": "CustomIdNotLinked"
    },
    "TotalDataSizeExceeded": {
      "id": 1186,
      "name": "TotalDataSizeExceeded"
    },
    "DeleteKeyConflict": {
      "id": 1187,
      "name": "DeleteKeyConflict"
    },
    "InvalidXboxLiveToken": {
      "id": 1188,
      "name": "InvalidXboxLiveToken"
    },
    "ExpiredXboxLiveToken": {
      "id": 1189,
      "name": "ExpiredXboxLiveToken"
    },
    "ResettableStatisticVersionRequired": {
      "id": 1190,
      "name": "ResettableStatisticVersionRequired"
    },
    "NotAuthorizedByTitle": {
      "id": 1191,
      "name": "NotAuthorizedByTitle"
    },
    "NoPartnerEnabled": {
      "id": 1192,
      "name": "NoPartnerEnabled"
    },
    "InvalidPartnerResponse": {
      "id": 1193,
      "name": "InvalidPartnerResponse"
    },
    "APINotEnabledForGameServerAccess": {
      "id": 1194,
      "name": "APINotEnabledForGameServerAccess"
    },
    "StatisticNotFound": {
      "id": 1195,
      "name": "StatisticNotFound"
    },
    "StatisticNameConflict": {
      "id": 1196,
      "name": "StatisticNameConflict"
    }
  },
  "errorList": [
    "Success",
    "InvalidParams",
    "AccountNotFound",
    "AccountBanned",
    "InvalidUsernameOrPassword",
    "InvalidTitleId",
    "InvalidEmailAddress",
    "EmailAddressNotAvailable",
    "InvalidUsername",
    "InvalidPassword",
    "UsernameNotAvailable",
    "InvalidSteamTicket",
    "AccountAlreadyLinked",
    "LinkedAccountAlreadyClaimed",
    "InvalidFacebookToken",
    "AccountNotLinked",
    "FailedByPaymentProvider",
    "CouponCodeNotFound",
    "InvalidContainerItem",
    "ContainerNotOwned",
    "KeyNotOwned",
    "InvalidItemIdInTable",
    "InvalidReceipt",
    "ReceiptAlreadyUsed",
    "ReceiptCancelled",
    "GameNotFound",
    "GameModeNotFound",
    "InvalidGoogleToken",
    "UserIsNotPartOfDeveloper",
    "InvalidTitleForDeveloper",
    "TitleNameConflicts",
    "UserisNotValid",
    "ValueAlreadyExists",
    "BuildNotFound",
    "PlayerNotInGame",
    "InvalidTicket",
    "InvalidDeveloper",
    "InvalidOrderInfo",
    "RegistrationIncomplete",
    "InvalidPlatform",
    "UnknownError",
    "SteamApplicationNotOwned",
    "WrongSteamAccount",
    "TitleNotActivated",
    "RegistrationSessionNotFound",
    "NoSuchMod",
    "FileNotFound",
    "DuplicateEmail",
    "ItemNotFound",
    "ItemNotOwned",
    "ItemNotRecycleable",
    "ItemNotAffordable",
    "InvalidVirtualCurrency",
    "WrongVirtualCurrency",
    "WrongPrice",
    "NonPositiveValue",
    "InvalidRegion",
    "RegionAtCapacity",
    "ServerFailedToStart",
    "NameNotAvailable",
    "InsufficientFunds",
    "InvalidDeviceID",
    "InvalidPushNotificationToken",
    "NoRemainingUses",
    "InvalidPaymentProvider",
    "PurchaseInitializationFailure",
    "DuplicateUsername",
    "InvalidBuyerInfo",
    "NoGameModeParamsSet",
    "BodyTooLarge",
    "ReservedWordInBody",
    "InvalidTypeInBody",
    "InvalidRequest",
    "ReservedEventName",
    "InvalidUserStatistics",
    "NotAuthenticated",
    "StreamAlreadyExists",
    "ErrorCreatingStream",
    "StreamNotFound",
    "InvalidAccount",
    "PurchaseDoesNotExist",
    "InvalidPurchaseTransactionStatus",
    "APINotEnabledForGameClientAccess",
    "NoPushNotificationARNForTitle",
    "BuildAlreadyExists",
    "BuildPackageDoesNotExist",
    "CustomAnalyticsEventsNotEnabledForTitle",
    "InvalidSharedGroupId",
    "NotAuthorized",
    "MissingTitleGoogleProperties",
    "InvalidItemProperties",
    "InvalidPSNAuthCode",
    "InvalidItemId",
    "PushNotEnabledForAccount",
    "PushServiceError",
    "ReceiptDoesNotContainInAppItems",
    "ReceiptContainsMultipleInAppItems",
    "InvalidBundleID",
    "JavascriptException",
    "InvalidSessionTicket",
    "UnableToConnectToDatabase",
    "InternalServerError",
    "InvalidReportDate",
    "ReportNotAvailable",
    "DatabaseThroughputExceeded",
    "InvalidLobbyId",
    "InvalidGameTicket",
    "ExpiredGameTicket",
    "GameTicketDoesNotMatchLobby",
    "LinkedDeviceAlreadyClaimed",
    "DeviceAlreadyLinked",
    "DeviceNotLinked",
    "PartialFailure",
    "PublisherNotSet",
    "ServiceUnavailable",
    "VersionNotFound",
    "RevisionNotFound",
    "InvalidPublisherId",
    "DownstreamServiceUnavailable",
    "APINotIncludedInTitleUsageTier",
    "DAULimitExceeded",
    "APIRequestLimitExceeded",
    "InvalidAPIEndpoint",
    "BuildNotAvailable",
    "ConcurrentEditError",
    "ContentNotFound",
    "CharacterNotFound",
    "CloudScriptNotFound",
    "ContentQuotaExceeded",
    "InvalidCharacterStatistics",
    "PhotonNotEnabledForTitle",
    "PhotonApplicationNotFound",
    "PhotonApplicationNotAssociatedWithTitle",
    "InvalidEmailOrPassword",
    "FacebookAPIError",
    "InvalidContentType",
    "KeyLengthExceeded",
    "DataLengthExceeded",
    "TooManyKeys",
    "FreeTierCannotHaveVirtualCurrency",
    "MissingAmazonSharedKey",
    "AmazonValidationError",
    "InvalidPSNIssuerId",
    "PSNInaccessible",
    "ExpiredAuthToken",
    "FailedToGetEntitlements",
    "FailedToConsumeEntitlement",
    "TradeAcceptingUserNotAllowed",
    "TradeInventoryItemIsAssignedToCharacter",
    "TradeInventoryItemIsBundle",
    "TradeStatusNotValidForCancelling",
    "TradeStatusNotValidForAccepting",
    "TradeDoesNotExist",
    "TradeCancelled",
    "TradeAlreadyFilled",
    "TradeWaitForStatusTimeout",
    "TradeInventoryItemExpired",
    "TradeMissingOfferedAndAcceptedItems",
    "TradeAcceptedItemIsBundle",
    "TradeAcceptedItemIsStackable",
    "TradeInventoryItemInvalidStatus",
    "TradeAcceptedCatalogItemInvalid",
    "TradeAllowedUsersInvalid",
    "TradeInventoryItemDoesNotExist",
    "TradeInventoryItemIsConsumed",
    "TradeInventoryItemIsStackable",
    "TradeAcceptedItemsMismatch",
    "InvalidKongregateToken",
    "FeatureNotConfiguredForTitle",
    "NoMatchingCatalogItemForReceipt",
    "InvalidCurrencyCode",
    "NoRealMoneyPriceForCatalogItem",
    "TradeInventoryItemIsNotTradable",
    "TradeAcceptedCatalogItemIsNotTradable",
    "UsersAlreadyFriends",
    "LinkedIdentifierAlreadyClaimed",
    "CustomIdNotLinked",
    "TotalDataSizeExceeded",
    "DeleteKeyConflict",
    "InvalidXboxLiveToken",
    "ExpiredXboxLiveToken",
    "ResettableStatisticVersionRequired",
    "NotAuthorizedByTitle",
    "NoPartnerEnabled",
    "InvalidPartnerResponse",
    "APINotEnabledForGameServerAccess",
    "StatisticNotFound",
    "StatisticNameConflict"
  ]
}