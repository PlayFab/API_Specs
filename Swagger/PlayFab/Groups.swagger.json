{
  "swagger": "2.0",
  "info": {
    "version": "180726",
    "title": "PlayFab Groups API",
    "description": "The Groups API is designed for any permanent or semi-permanent collections of Entities (Players, or non-players). If you want to make Guilds/Clans/Corporations/etc, then you should use Groups. Groups can also be used to make chatrooms, parties, or any other excuse you need to lump some Entites together in a persistent way.",
    "termsOfService": "https://playfab.com/terms/",
    "contact": {
      "url": "https://community.playfab.com/index.html"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://github.com/PlayFab/API_Specs/blob/master/LICENSE"
    }
  },
  "host": "titleId.playfabapi.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/Group/AcceptGroupApplication": {
      "post": {
        "operationId": "AcceptGroupApplication",
        "tags": [
          "Groups"
        ],
        "description": "Accepts an outstanding invitation to to join a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/AcceptGroupApplication"
        },
        "parameters": [
          {
            "$ref": "#/parameters/AcceptGroupApplicationRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Accepts an outstanding invitation to to join a group if the invited entity is not blocked by the group. Nothing is returned in the case of success.",
        "x-seeAlso": [
          "Group/ApplyToGroup",
          "Group/ListGroupApplications",
          "Group/RemoveGroupApplication"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/AcceptGroupInvitation": {
      "post": {
        "operationId": "AcceptGroupInvitation",
        "tags": [
          "Groups"
        ],
        "description": "Accepts an invitation to join a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/AcceptGroupInvitation"
        },
        "parameters": [
          {
            "$ref": "#/parameters/AcceptGroupInvitationRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Accepts an outstanding invitation to join the group if the invited entity is not blocked by the group. Only the invited entity or a parent in its chain (e.g. title) may accept the invitation on the invited entity's behalf. Nothing is returned in the case of success.",
        "x-seeAlso": [
          "Group/InviteToGroup",
          "Group/ListGroupInvitations",
          "Group/ListMembershipOpportunities",
          "Group/RemoveGroupInvitation"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/AddMembers": {
      "post": {
        "operationId": "AddMembers",
        "tags": [
          "Groups"
        ],
        "description": "Adds members to a group or role.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/AddMembers"
        },
        "parameters": [
          {
            "$ref": "#/parameters/AddMembersRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Adds members to a group or role. Existing members of the group will added to roles within the group, but if the user is not already a member of the group, only title claimants may add them to the group, and others must use the group application or invite system to add new members to a group. Returns nothing if successful.",
        "x-seeAlso": [
          "Group/ApplyToGroup",
          "Group/InviteToGroup",
          "Group/ListGroupMembers",
          "Group/RemoveMembers"
        ],
        "x-errors": [
          "InvalidParams",
          "NotAuthenticated",
          "NotAuthorized",
          "RoleDoesNotExist"
        ]
      }
    },
    "/Group/ApplyToGroup": {
      "post": {
        "operationId": "ApplyToGroup",
        "tags": [
          "Groups"
        ],
        "description": "Applies to join a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/ApplyToGroup"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApplyToGroupRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ApplyToGroupResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": {
                  "Group": {
                    "Id": "ABC1234ABC"
                  },
                  "Entity": {
                    "Key": {
                      "Id": "90901000",
                      "Type": "title_player_account",
                      "TypeString": "title_player_account"
                    },
                    "Lineage": {
                      "master_player_account": {
                        "Id": "800DED92",
                        "Type": "master_player_account",
                        "TypeString": "master_player_account"
                      }
                    }
                  },
                  "Expires": "2017-12-31T11:59:59"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Creates an application to join a group. Calling this while a group application already exists will return the same application instead of an error and will not refresh the time before the application expires. By default, if the entity has an invitation to join the group outstanding, this will accept the invitation to join the group instead and return an error indicating such, rather than creating a duplicate application to join that will need to be cleaned up later. Returns information about the application or an error indicating an invitation was accepted instead.",
        "x-seeAlso": [
          "Group/AcceptGroupApplication",
          "Group/ListGroupApplications",
          "Group/RemoveGroupApplication"
        ],
        "x-errors": [
          "EntityIsAlreadyMember",
          "InvalidParams",
          "NotAuthenticated",
          "NotAuthorized",
          "OutstandingInvitationAcceptedInstead"
        ]
      }
    },
    "/Group/BlockEntity": {
      "post": {
        "operationId": "BlockEntity",
        "tags": [
          "Groups"
        ],
        "description": "Blocks a list of entities from joining a group.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/BlockEntity"
        },
        "parameters": [
          {
            "$ref": "#/parameters/BlockEntityRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Blocks a list of entities from joining a group. Blocked entities may not create new applications to join, be invited to join, accept an invitation, or have an application accepted. Failure due to being blocked does not clean up existing applications or invitations to the group. No data is returned in the case of success.",
        "x-seeAlso": [
          "Group/ListGroupBlocks",
          "Group/UnblockEntity"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/ChangeMemberRole": {
      "post": {
        "operationId": "ChangeMemberRole",
        "tags": [
          "Groups"
        ],
        "description": "Changes the role membership of a list of entities from one role to another.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/ChangeMemberRole"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ChangeMemberRoleRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Changes the role membership of a list of entities from one role to another in in a single operation. The destination role must already exist. This is equivalent to adding the entities to the destination role and removing from the origin role. Returns nothing if successful.",
        "x-seeAlso": [
          "Group/AddMembers",
          "Group/CreateRole",
          "Group/RemoveMembers"
        ],
        "x-errors": [
          "InvalidParams",
          "NotAuthenticated",
          "NotAuthorized",
          "RoleDoesNotExist"
        ]
      }
    },
    "/Group/CreateGroup": {
      "post": {
        "operationId": "CreateGroup",
        "tags": [
          "Groups"
        ],
        "description": "Creates a new group.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/CreateGroup"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateGroupRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/CreateGroupResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": {
                  "GroupName": "Example Group",
                  "Group": {
                    "Id": "ABC1234ABC"
                  },
                  "MemberRoleId": "ABC123DEF",
                  "AdminRoleId": "ABC123456",
                  "Roles": {
                    "admins": "Administrators",
                    "members": "Members",
                    "awesomepeople": "Some Other Role"
                  },
                  "Created": "2017-12-31T11:59:59",
                  "ProfileVersion": 17
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Creates a new group, as well as administration and member roles, based off of a title's group template. Returns information about the group that was created.",
        "x-seeAlso": [
          "Group/AddMembers",
          "Group/ApplyToGroup",
          "Group/DeleteGroup",
          "Group/InviteToGroup",
          "Group/ListGroupMembers",
          "Group/RemoveMembers"
        ],
        "x-errors": [
          "GroupNameNotAvailable",
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Group/CreateRole": {
      "post": {
        "operationId": "CreateRole",
        "tags": [
          "Groups"
        ],
        "description": "Creates a new group role.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/CreateRole"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateGroupRoleRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/CreateGroupRoleResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": {
                  "RoleName": "Example Role",
                  "RoleId": "ABC123DEF",
                  "ProfileVersion": 17
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Creates a new role within an existing group, with no members. Both the role ID and role name must be unique within the group, but the name can be the same as the ID. The role ID is set at creation and cannot be changed. Returns information about the role that was created.",
        "x-seeAlso": [
          "Group/DeleteRole"
        ],
        "x-errors": [
          "DuplicateRoleId",
          "NotAuthenticated",
          "NotAuthorized",
          "RoleNameNotAvailable"
        ]
      }
    },
    "/Group/DeleteGroup": {
      "post": {
        "operationId": "DeleteGroup",
        "tags": [
          "Groups"
        ],
        "description": "Deletes a group and all roles, invitations, join requests, and blocks associated with it.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/DeleteGroup"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteGroupRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Deletes a group and all roles, invitations, join requests, and blocks associated with it. Permission to delete is only required the group itself to execute this action. The group and data cannot be cannot be recovered once removed, but any abuse reports about the group will remain. No data is returned in the case of success.",
        "x-seeAlso": [
          "Group/CreateGroup"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/DeleteRole": {
      "post": {
        "operationId": "DeleteRole",
        "tags": [
          "Groups"
        ],
        "description": "Deletes an existing role in a group.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/DeleteRole"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteRoleRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns information about the role",
        "x-seeAlso": [
          "Group/CreateRole"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "RoleDoesNotExist"
        ]
      }
    },
    "/Group/GetGroup": {
      "post": {
        "operationId": "GetGroup",
        "tags": [
          "Groups"
        ],
        "description": "Gets information about a group and its roles",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/GetGroup"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetGroupRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetGroupResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": {
                  "GroupName": "Example Group",
                  "Group": {
                    "Id": "ABC1234ABC"
                  },
                  "MemberRoleId": "ABC123DEF",
                  "AdminRoleId": "ABC123456",
                  "Roles": {
                    "admins": "Administrators",
                    "members": "Members",
                    "awesomepeople": "Some Other Role"
                  },
                  "Created": "2017-12-31T11:59:59",
                  "ProfileVersion": 17
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns the ID, name, role list and other non-membership related information about a group.",
        "x-seeAlso": [
          "Group/UpdateGroup"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/InviteToGroup": {
      "post": {
        "operationId": "InviteToGroup",
        "tags": [
          "Groups"
        ],
        "description": "Invites a player to join a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/InviteToGroup"
        },
        "parameters": [
          {
            "$ref": "#/parameters/InviteToGroupRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/InviteToGroupResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": {
                  "InvitedEntity": {
                    "Key": {
                      "Id": "90901000",
                      "Type": "title_player_account",
                      "TypeString": "title_player_account"
                    },
                    "Lineage": {
                      "master_player_account": {
                        "Id": "800DED92",
                        "Type": "master_player_account",
                        "TypeString": "master_player_account"
                      }
                    }
                  },
                  "Group": {
                    "Id": "ABC1234ABC"
                  },
                  "InvitedByEntity": {
                    "Key": {
                      "Id": "9023AFF3",
                      "Type": "title_player_account",
                      "TypeString": "title_player_account"
                    },
                    "Lineage": {
                      "master_player_account": {
                        "Id": "366AD424",
                        "Type": "master_player_account",
                        "TypeString": "master_player_account"
                      }
                    }
                  },
                  "RoleId": "awesomepeople",
                  "Expires": "2017-12-31T11:59:59"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Invites a player to join a group, if they are not blocked by the group. An optional role can be provided to automatically assign the player to the role if they accept the invitation. By default, if the entity has an application to the group outstanding, this will accept the application instead and return an error indicating such, rather than creating a duplicate invitation to join that will need to be cleaned up later. Returns information about the new invitation or an error indicating an existing application to join was accepted.",
        "x-seeAlso": [
          "Group/AcceptGroupInvitation",
          "Group/ListGroupInvitations",
          "Group/ListMembershipOpportunities",
          "Group/RemoveGroupInvitation"
        ],
        "x-errors": [
          "InvalidParams",
          "NotAuthenticated",
          "NotAuthorized",
          "OutstandingApplicationAcceptedInstead"
        ]
      }
    },
    "/Group/IsMember": {
      "post": {
        "operationId": "IsMember",
        "tags": [
          "Groups"
        ],
        "description": "Checks to see if an entity is a member of a group or role within the group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/IsMember"
        },
        "parameters": [
          {
            "$ref": "#/parameters/IsMemberRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/IsMemberResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": {
                  "IsMember": true
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Checks to see if an entity is a member of a group or role within the group. A result indicating if the entity is a member of the group is returned, or a permission error if the caller does not have permission to read the group's member list.",
        "x-seeAlso": [
          "Group/GetGroup"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/ListGroupApplications": {
      "post": {
        "operationId": "ListGroupApplications",
        "tags": [
          "Groups"
        ],
        "description": "Lists all outstanding requests to join a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/ListGroupApplications"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListGroupApplicationsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListGroupApplicationsResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": {
                  "Applications": [
                    {
                      "Group": {
                        "Id": "ABC1234ABC"
                      },
                      "Entity": {
                        "Key": {
                          "Id": "90901000",
                          "Type": "title_player_account",
                          "TypeString": "title_player_account"
                        },
                        "Lineage": {
                          "master_player_account": {
                            "Id": "800DED92",
                            "Type": "master_player_account",
                            "TypeString": "master_player_account"
                          }
                        }
                      },
                      "Expires": "2017-12-31T11:59:59"
                    },
                    {
                      "Group": {
                        "Id": "ABC1234ABC"
                      },
                      "Entity": {
                        "Key": {
                          "Id": "90901000",
                          "Type": "title_player_account",
                          "TypeString": "title_player_account"
                        },
                        "Lineage": {
                          "master_player_account": {
                            "Id": "800DED92",
                            "Type": "master_player_account",
                            "TypeString": "master_player_account"
                          }
                        }
                      },
                      "Expires": "2017-12-31T11:59:59"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Lists all outstanding requests to join a group. Returns a list of all requests to join, as well as when the request will expire. To get the group applications for a specific entity, use ListMembershipOpportunities.",
        "x-seeAlso": [
          "Group/AcceptGroupApplication",
          "Group/ApplyToGroup",
          "Group/RemoveGroupApplication"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/ListGroupBlocks": {
      "post": {
        "operationId": "ListGroupBlocks",
        "tags": [
          "Groups"
        ],
        "description": "Lists all entities blocked from joining a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/ListGroupBlocks"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListGroupBlocksRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListGroupBlocksResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": {
                  "BlockedEntities": [
                    {
                      "Entity": {
                        "Key": {
                          "Id": "90901000",
                          "Type": "title_player_account",
                          "TypeString": "title_player_account"
                        },
                        "Lineage": {
                          "master_player_account": {
                            "Id": "800DED92",
                            "Type": "master_player_account",
                            "TypeString": "master_player_account"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Lists all entities blocked from joining a group. A list of blocked entities is returned",
        "x-seeAlso": [
          "Group/BlockEntity",
          "Group/UnblockEntity"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/ListGroupInvitations": {
      "post": {
        "operationId": "ListGroupInvitations",
        "tags": [
          "Groups"
        ],
        "description": "Lists all outstanding invitations for a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/ListGroupInvitations"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListGroupInvitationsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListGroupInvitationsResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": {
                  "Invitations": [
                    {
                      "InvitedEntity": {
                        "Key": {
                          "Id": "90901000",
                          "Type": "title_player_account",
                          "TypeString": "title_player_account"
                        },
                        "Lineage": {
                          "master_player_account": {
                            "Id": "800DED92",
                            "Type": "master_player_account",
                            "TypeString": "master_player_account"
                          }
                        }
                      },
                      "Group": {
                        "Id": "ABC1234ABC"
                      },
                      "InvitedByEntity": {
                        "Key": {
                          "Id": "9023AFF3",
                          "Type": "title_player_account",
                          "TypeString": "title_player_account"
                        },
                        "Lineage": {
                          "master_player_account": {
                            "Id": "366AD424",
                            "Type": "master_player_account",
                            "TypeString": "master_player_account"
                          }
                        }
                      },
                      "RoleId": "awesomepeople",
                      "Expires": "2017-12-31T11:59:59"
                    },
                    {
                      "InvitedEntity": {
                        "Key": {
                          "Id": "90901000",
                          "Type": "title_player_account",
                          "TypeString": "title_player_account"
                        },
                        "Lineage": {
                          "master_player_account": {
                            "Id": "800DED92",
                            "Type": "master_player_account",
                            "TypeString": "master_player_account"
                          }
                        }
                      },
                      "Group": {
                        "Id": "ABC1234ABC"
                      },
                      "InvitedByEntity": {
                        "Key": {
                          "Id": "9023AFF3",
                          "Type": "title_player_account",
                          "TypeString": "title_player_account"
                        },
                        "Lineage": {
                          "master_player_account": {
                            "Id": "366AD424",
                            "Type": "master_player_account",
                            "TypeString": "master_player_account"
                          }
                        }
                      },
                      "RoleId": "members",
                      "Expires": "2017-12-31T11:59:59"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Lists all outstanding invitations for a group. Returns a list of entities that have been invited, as well as when the invitation will expire. To get the group invitations for a specific entity, use ListMembershipOpportunities.",
        "x-seeAlso": [
          "Group/AcceptGroupInvitation",
          "Group/InviteToGroup",
          "Group/ListMembershipOpportunities",
          "Group/RemoveGroupInvitation"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/ListGroupMembers": {
      "post": {
        "operationId": "ListGroupMembers",
        "tags": [
          "Groups"
        ],
        "description": "Lists all members for a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/ListGroupMembers"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListGroupMembersRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListGroupMembersResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Gets a list of members and the roles they belong to within the group. If the caller does not have permission to view the role, and the member is in no other role, the member is not displayed. Returns a list of entities that are members of the group.",
        "x-seeAlso": [
          "Group/ListMembership"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/ListMembership": {
      "post": {
        "operationId": "ListMembership",
        "tags": [
          "Groups"
        ],
        "description": "Lists all groups and roles for an entity",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/ListMembership"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListMembershipRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListMembershipResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": {
                  "Groups": [
                    {
                      "GroupName": "Example Group",
                      "Group": {
                        "Id": "ABC1234ABC"
                      },
                      "ProfileVersion": 17,
                      "Roles": [
                        {
                          "RoleName": "Example Role",
                          "RoleId": "ABC123DEF"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Lists the groups and roles that an entity is a part of, checking to see if group and role metadata and memberships should be visible to the caller. If the entity is not in any roles that are visible to the caller, the group is not returned in the results, even if the caller otherwise has permission to see that the entity is a member of that group.",
        "x-seeAlso": [
          "Group/ListGroupMembers",
          "Group/ListMembershipOpportunities"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/ListMembershipOpportunities": {
      "post": {
        "operationId": "ListMembershipOpportunities",
        "tags": [
          "Groups"
        ],
        "description": "Lists all outstanding invitations and group applications for an entity",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/ListMembershipOpportunities"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListMembershipOpportunitiesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListMembershipOpportunitiesResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": {
                  "Invitations": [
                    {
                      "InvitedEntity": {
                        "Key": {
                          "Id": "90901000",
                          "Type": "title_player_account",
                          "TypeString": "title_player_account"
                        },
                        "Lineage": {
                          "master_player_account": {
                            "Id": "800DED92",
                            "Type": "master_player_account",
                            "TypeString": "master_player_account"
                          }
                        }
                      },
                      "Group": {
                        "Id": "ABC1234ABC"
                      },
                      "InvitedByEntity": {
                        "Key": {
                          "Id": "9023AFF3",
                          "Type": "title_player_account",
                          "TypeString": "title_player_account"
                        },
                        "Lineage": {
                          "master_player_account": {
                            "Id": "366AD424",
                            "Type": "master_player_account",
                            "TypeString": "master_player_account"
                          }
                        }
                      },
                      "RoleId": "awesomepeople",
                      "Expires": "2017-12-31T11:59:59"
                    },
                    {
                      "InvitedEntity": {
                        "Key": {
                          "Id": "90901000",
                          "Type": "title_player_account",
                          "TypeString": "title_player_account"
                        },
                        "Lineage": {
                          "master_player_account": {
                            "Id": "800DED92",
                            "Type": "master_player_account",
                            "TypeString": "master_player_account"
                          }
                        }
                      },
                      "Group": {
                        "Id": "ABC1234ABC"
                      },
                      "InvitedByEntity": {
                        "Key": {
                          "Id": "9023AFF3",
                          "Type": "title_player_account",
                          "TypeString": "title_player_account"
                        },
                        "Lineage": {
                          "master_player_account": {
                            "Id": "366AD424",
                            "Type": "master_player_account",
                            "TypeString": "master_player_account"
                          }
                        }
                      },
                      "RoleId": "members",
                      "Expires": "2017-12-31T11:59:59"
                    }
                  ],
                  "Applications": [
                    {
                      "Group": {
                        "Id": "ABC1234ABC"
                      },
                      "Entity": {
                        "Key": {
                          "Id": "90901000",
                          "Type": "title_player_account",
                          "TypeString": "title_player_account"
                        },
                        "Lineage": {
                          "master_player_account": {
                            "Id": "800DED92",
                            "Type": "master_player_account",
                            "TypeString": "master_player_account"
                          }
                        }
                      },
                      "Expires": "2017-12-31T11:59:59"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Lists all outstanding group applications and invitations for an entity. Anyone may call this for any entity, but data will only be returned for the entity or a parent of that entity. To list invitations or applications for a group to check if a player is trying to join, use ListGroupInvitations and ListGroupApplications.",
        "x-seeAlso": [
          "Group/ListGroupApplications",
          "Group/ListGroupInvitations"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/RemoveGroupApplication": {
      "post": {
        "operationId": "RemoveGroupApplication",
        "tags": [
          "Groups"
        ],
        "description": "Removes an application to join a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/RemoveGroupApplication"
        },
        "parameters": [
          {
            "$ref": "#/parameters/RemoveGroupApplicationRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Removes an existing application to join the group. This is used for both rejection of an application as well as withdrawing an application. The applying entity or a parent in its chain (e.g. title) may withdraw the application, and any caller with appropriate access in the group may reject an application. No data is returned in the case of success.",
        "x-seeAlso": [
          "Group/AcceptGroupApplication",
          "Group/ApplyToGroup",
          "Group/ListGroupApplications"
        ],
        "x-errors": [
          "GroupApplicationNotFound",
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/RemoveGroupInvitation": {
      "post": {
        "operationId": "RemoveGroupInvitation",
        "tags": [
          "Groups"
        ],
        "description": "Removes an invitation join a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/RemoveGroupInvitation"
        },
        "parameters": [
          {
            "$ref": "#/parameters/RemoveGroupInvitationRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Removes an existing invitation to join the group. This is used for both rejection of an invitation as well as rescinding an invitation. The invited entity or a parent in its chain (e.g. title) may reject the invitation by calling this method, and any caller with appropriate access in the group may rescind an invitation. No data is returned in the case of success.",
        "x-seeAlso": [
          "Group/AcceptGroupInvitation",
          "Group/InviteToGroup",
          "Group/ListGroupInvitations",
          "Group/ListMembershipOpportunities"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/RemoveMembers": {
      "post": {
        "operationId": "RemoveMembers",
        "tags": [
          "Groups"
        ],
        "description": "Removes members from a group.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/RemoveMembers"
        },
        "parameters": [
          {
            "$ref": "#/parameters/RemoveMembersRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Removes members from a group. A member can always remove themselves from a group, regardless of permissions. Returns nothing if successful.",
        "x-seeAlso": [
          "Group/AddMembers",
          "Group/ListGroupMembers"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/UnblockEntity": {
      "post": {
        "operationId": "UnblockEntity",
        "tags": [
          "Groups"
        ],
        "description": "Unblocks a list of entities from joining a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/UnblockEntity"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UnblockEntityRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Unblocks a list of entities from joining a group. No data is returned in the case of success.",
        "x-seeAlso": [
          "Group/BlockEntity",
          "Group/ListGroupBlocks"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/UpdateGroup": {
      "post": {
        "operationId": "UpdateGroup",
        "tags": [
          "Groups"
        ],
        "description": "Updates non-membership data about a group.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/UpdateGroup"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UpdateGroupRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/UpdateGroupResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": {
                  "ProfileVersion": 18,
                  "SetResult": "Updated"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Updates data about a group, such as the name or default member role. Returns information about whether the update was successful. Only title claimants may modify the administration role for a group.",
        "x-seeAlso": [
          "Group/CreateGroup",
          "Group/DeleteGroup",
          "Group/GetGroup"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "RoleDoesNotExist"
        ]
      }
    },
    "/Group/UpdateRole": {
      "post": {
        "operationId": "UpdateRole",
        "tags": [
          "Groups"
        ],
        "description": "Updates metadata about a role.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/groups/method/UpdateRole"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UpdateGroupRoleRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/UpdateGroupRoleResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": {
                  "ProfileVersion": 18,
                  "SetResult": "Updated"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Updates the role name. Returns information about whether the update was successful.",
        "x-seeAlso": [
          "Group/CreateRole",
          "Group/DeleteRole"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "RoleDoesNotExist"
        ]
      }
    }
  },
  "definitions": {
    "ApiErrorWrapper": {
      "description": "The basic wrapper around every failed API result",
      "type": "object",
      "properties": {
        "code": {
          "description": "Numerical HTTP code",
          "type": "number",
          "x-actualtype": "int32"
        },
        "status": {
          "description": "String HTTP code",
          "type": "string"
        },
        "error": {
          "description": "Playfab error code",
          "type": "string"
        },
        "errorCode": {
          "description": "Numerical Playfab error code",
          "type": "number",
          "x-actualtype": "int32"
        },
        "errorMessage": {
          "description": "Description for the Playfab errorCode",
          "type": "string"
        },
        "errorDetails": {
          "description": "Detailed description of individual issues with the request object",
          "type": "object"
        }
      }
    },
    "AcceptGroupApplicationRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "Optional. Type of the entity to accept as. If specified, must be the same entity as the claimant or an entity that is a child of the claimant entity. Defaults to the claimant entity.",
          "type": "object",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Group",
        "Entity"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        },
        "Entity": {
          "Id": "90901000",
          "Type": "title_player_account",
          "TypeString": "title_player_account"
        }
      }
    },
    "AcceptGroupInvitationRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Group"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        }
      }
    },
    "AddMembersRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        },
        "Members": {
          "description": "List of entities to add to the group. Only entities of type title_player_account and character may be added to groups.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityKey"
          },
          "x-isclass": true
        },
        "RoleId": {
          "description": "Optional: The ID of the existing role to add the entities to. If this is not specified, the default member role for the group will be used. Role IDs must be between 1 and 64 characters long.",
          "type": "string"
        }
      },
      "required": [
        "Group",
        "Members"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        },
        "Members": [
          {
            "Id": "90901000",
            "Type": "title_player_account",
            "TypeString": "title_player_account"
          }
        ]
      }
    },
    "ApplyToGroupRequest": {
      "type": "object",
      "properties": {
        "AutoAcceptOutstandingInvite": {
          "description": "Optional, default true. Automatically accept an outstanding invitation if one exists instead of creating an application",
          "type": "boolean"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Group"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        }
      }
    },
    "ApplyToGroupResponse": {
      "description": "Describes an application to join a group",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityWithLineage",
          "description": "Type of entity that requested membership",
          "type": "object",
          "x-isclass": true
        },
        "Expires": {
          "description": "When the application to join will expire and be deleted",
          "type": "string"
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "ID of the group that the entity requesting membership to",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Expires"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        },
        "Entity": {
          "Key": {
            "Id": "90901000",
            "Type": "title_player_account",
            "TypeString": "title_player_account"
          },
          "Lineage": {
            "master_player_account": {
              "Id": "800DED92",
              "Type": "master_player_account",
              "TypeString": "master_player_account"
            }
          }
        },
        "Expires": "2017-12-31T11:59:59"
      }
    },
    "BlockEntityRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Group",
        "Entity"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        },
        "Entity": {
          "Id": "90901000",
          "Type": "title_player_account",
          "TypeString": "title_player_account"
        }
      }
    },
    "ChangeMemberRoleRequest": {
      "type": "object",
      "properties": {
        "DestinationRoleId": {
          "description": "The ID of the role that the entities will become a member of. This must be an existing role. Role IDs must be between 1 and 64 characters long.",
          "type": "string"
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        },
        "Members": {
          "description": "List of entities to move between roles in the group. All entities in this list must be members of the group and origin role.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityKey"
          },
          "x-isclass": true
        },
        "OriginRoleId": {
          "description": "The ID of the role that the entities currently are a member of. Role IDs must be between 1 and 64 characters long.",
          "type": "string"
        }
      },
      "required": [
        "Group",
        "OriginRoleId",
        "Members"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        },
        "OriginRoleId": "awesomepeople",
        "DestinationRoleId": "members",
        "Members": [
          {
            "Id": "90901000",
            "Type": "title_player_account",
            "TypeString": "title_player_account"
          }
        ]
      }
    },
    "CreateGroupRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "GroupName": {
          "description": "The name of the group. This is unique at the title level by default.",
          "type": "string"
        }
      },
      "required": [
        "GroupName"
      ],
      "example": {
        "GroupName": "Example Group"
      }
    },
    "CreateGroupResponse": {
      "type": "object",
      "properties": {
        "AdminRoleId": {
          "description": "The ID of the administrator role for the group.",
          "type": "string"
        },
        "Created": {
          "description": "The server date and time the group was created.",
          "type": "string"
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        },
        "GroupName": {
          "description": "The name of the group.",
          "type": "string"
        },
        "MemberRoleId": {
          "description": "The ID of the default member role for the group.",
          "type": "string"
        },
        "ProfileVersion": {
          "description": "The current version of the profile, can be used for concurrency control during updates.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Roles": {
          "description": "The list of roles and names that belong to the group.",
          "type": "object"
        }
      },
      "required": [
        "Group",
        "Created",
        "ProfileVersion"
      ],
      "example": {
        "GroupName": "Example Group",
        "Group": {
          "Id": "ABC1234ABC"
        },
        "MemberRoleId": "ABC123DEF",
        "AdminRoleId": "ABC123456",
        "Roles": {
          "admins": "Administrators",
          "members": "Members",
          "awesomepeople": "Some Other Role"
        },
        "Created": "2017-12-31T11:59:59",
        "ProfileVersion": 17
      }
    },
    "CreateGroupRoleRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        },
        "RoleId": {
          "description": "The ID of the role. This must be unique within the group and cannot be changed. Role IDs must be between 1 and 64 characters long.",
          "type": "string"
        },
        "RoleName": {
          "description": "The name of the role. This must be unique within the group and can be changed later. Role names must be between 1 and 100 characters long",
          "type": "string"
        }
      },
      "required": [
        "RoleId",
        "RoleName",
        "Group"
      ],
      "example": {
        "RoleId": "example",
        "RoleName": "Example Role",
        "Group": {
          "Id": "ABC1234ABC"
        }
      }
    },
    "CreateGroupRoleResponse": {
      "type": "object",
      "properties": {
        "ProfileVersion": {
          "description": "The current version of the group profile, can be used for concurrency control during updates.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "RoleId": {
          "description": "ID for the role",
          "type": "string"
        },
        "RoleName": {
          "description": "The name of the role",
          "type": "string"
        }
      },
      "required": [
        "ProfileVersion"
      ],
      "example": {
        "RoleName": "Example Role",
        "RoleId": "ABC123DEF",
        "ProfileVersion": 17
      }
    },
    "DeleteGroupRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "ID of the group or role to remove",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Group"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        }
      }
    },
    "DeleteRoleRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        },
        "RoleId": {
          "description": "The ID of the role to delete. Role IDs must be between 1 and 64 characters long.",
          "type": "string"
        }
      },
      "required": [
        "Group"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        },
        "RoleId": "ABC1234DEF"
      }
    },
    "EmptyResult": {
      "type": "object",
      "properties": {}
    },
    "EntityKey": {
      "description": "Entity identifier class that contains both the ID and type.",
      "type": "object",
      "properties": {
        "Id": {
          "description": "Entity profile ID.",
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/EntityTypes",
          "description": "Entity type. Optional to be used but one of EntityType or EntityTypeString must be set.",
          "type": "string",
          "x-isenum": true
        },
        "TypeString": {
          "description": "Entity type. Optional to be used but one of EntityType or EntityTypeString must be set.",
          "type": "string"
        }
      },
      "required": [
        "Id"
      ]
    },
    "EntityMemberRole": {
      "type": "object",
      "properties": {
        "Members": {
          "description": "The list of members in the role",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityWithLineage"
          },
          "x-isclass": true
        },
        "RoleId": {
          "description": "The ID of the role.",
          "type": "string"
        },
        "RoleName": {
          "description": "The name of the role",
          "type": "string"
        }
      }
    },
    "EntityTypes": {
      "type": "object",
      "enum": [
        "title",
        "master_player_account",
        "title_player_account",
        "character",
        "group",
        "service"
      ]
    },
    "EntityWithLineage": {
      "description": "Entity wrapper class that contains the entity key and the entities that make up the lineage of the entity.",
      "type": "object",
      "properties": {
        "Key": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity key for the specified entity",
          "type": "object",
          "x-isclass": true
        },
        "Lineage": {
          "$ref": "#/definitions/EntityKey",
          "description": "Dictionary of entity keys for related entities. Dictionary key is entity type.",
          "type": "object",
          "x-isclass": true
        }
      }
    },
    "GetGroupRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        },
        "GroupName": {
          "description": "The full name of the group",
          "type": "string"
        }
      },
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        }
      }
    },
    "GetGroupResponse": {
      "type": "object",
      "properties": {
        "AdminRoleId": {
          "description": "The ID of the administrator role for the group.",
          "type": "string"
        },
        "Created": {
          "description": "The server date and time the group was created.",
          "type": "string"
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        },
        "GroupName": {
          "description": "The name of the group.",
          "type": "string"
        },
        "MemberRoleId": {
          "description": "The ID of the default member role for the group.",
          "type": "string"
        },
        "ProfileVersion": {
          "description": "The current version of the profile, can be used for concurrency control during updates.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Roles": {
          "description": "The list of roles and names that belong to the group.",
          "type": "object"
        }
      },
      "required": [
        "Group",
        "Created",
        "ProfileVersion"
      ],
      "example": {
        "GroupName": "Example Group",
        "Group": {
          "Id": "ABC1234ABC"
        },
        "MemberRoleId": "ABC123DEF",
        "AdminRoleId": "ABC123456",
        "Roles": {
          "admins": "Administrators",
          "members": "Members",
          "awesomepeople": "Some Other Role"
        },
        "Created": "2017-12-31T11:59:59",
        "ProfileVersion": 17
      }
    },
    "GroupApplication": {
      "description": "Describes an application to join a group",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityWithLineage",
          "description": "Type of entity that requested membership",
          "type": "object",
          "x-isclass": true
        },
        "Expires": {
          "description": "When the application to join will expire and be deleted",
          "type": "string"
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "ID of the group that the entity requesting membership to",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Expires"
      ]
    },
    "GroupBlock": {
      "description": "Describes an entity that is blocked from joining a group.",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityWithLineage",
          "description": "The entity that is blocked",
          "type": "object",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "ID of the group that the entity is blocked from",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Group"
      ],
      "example": {
        "Entity": {
          "Key": {
            "Id": "90901000",
            "Type": "title_player_account",
            "TypeString": "title_player_account"
          },
          "Lineage": {
            "master_player_account": {
              "Id": "800DED92",
              "Type": "master_player_account",
              "TypeString": "master_player_account"
            }
          }
        },
        "Group": {
          "Id": "ABC1234ABC"
        }
      }
    },
    "GroupInvitation": {
      "description": "Describes an invitation to a group.",
      "type": "object",
      "properties": {
        "Expires": {
          "description": "When the invitation will expire and be deleted",
          "type": "string"
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The group that the entity invited to",
          "type": "object",
          "x-isclass": true
        },
        "InvitedByEntity": {
          "$ref": "#/definitions/EntityWithLineage",
          "description": "The entity that created the invitation",
          "type": "object",
          "x-isclass": true
        },
        "InvitedEntity": {
          "$ref": "#/definitions/EntityWithLineage",
          "description": "The entity that is invited",
          "type": "object",
          "x-isclass": true
        },
        "RoleId": {
          "description": "ID of the role in the group to assign the user to.",
          "type": "string"
        }
      },
      "required": [
        "Expires"
      ],
      "example": {
        "InvitedEntity": {
          "Key": {
            "Id": "90901000",
            "Type": "title_player_account",
            "TypeString": "title_player_account"
          },
          "Lineage": {
            "master_player_account": {
              "Id": "800DED92",
              "Type": "master_player_account",
              "TypeString": "master_player_account"
            }
          }
        },
        "Group": {
          "Id": "ABC1234ABC"
        },
        "InvitedByEntity": {
          "Key": {
            "Id": "9023AFF3",
            "Type": "title_player_account",
            "TypeString": "title_player_account"
          },
          "Lineage": {
            "master_player_account": {
              "Id": "366AD424",
              "Type": "master_player_account",
              "TypeString": "master_player_account"
            }
          }
        },
        "RoleId": "awesomepeople",
        "Expires": "2017-12-31T11:59:59"
      }
    },
    "GroupRole": {
      "description": "Describes a group role",
      "type": "object",
      "properties": {
        "RoleId": {
          "description": "ID for the role",
          "type": "string"
        },
        "RoleName": {
          "description": "The name of the role",
          "type": "string"
        }
      },
      "example": {
        "RoleName": "Example Role",
        "RoleId": "ABC123DEF"
      }
    },
    "GroupWithRoles": {
      "description": "Describes a group and the roles that it contains",
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "ID for the group",
          "type": "object",
          "x-isclass": true
        },
        "GroupName": {
          "description": "The name of the group",
          "type": "string"
        },
        "ProfileVersion": {
          "description": "The current version of the profile, can be used for concurrency control during updates.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Roles": {
          "description": "The list of roles within the group",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupRole"
          },
          "x-isclass": true
        }
      },
      "required": [
        "ProfileVersion"
      ]
    },
    "InviteToGroupRequest": {
      "type": "object",
      "properties": {
        "AutoAcceptOutstandingApplication": {
          "description": "Optional, default true. Automatically accept an application if one exists instead of creating an invitation",
          "type": "boolean"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        },
        "RoleId": {
          "description": "Optional. ID of an existing a role in the group to assign the user to. The group's default member role is used if this is not specified. Role IDs must be between 1 and 64 characters long.",
          "type": "string"
        }
      },
      "required": [
        "Group",
        "Entity"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        },
        "RoleId": "awesomepeople",
        "Entity": {
          "Id": "90901000",
          "Type": "title_player_account",
          "TypeString": "title_player_account"
        }
      }
    },
    "InviteToGroupResponse": {
      "description": "Describes an invitation to a group.",
      "type": "object",
      "properties": {
        "Expires": {
          "description": "When the invitation will expire and be deleted",
          "type": "string"
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The group that the entity invited to",
          "type": "object",
          "x-isclass": true
        },
        "InvitedByEntity": {
          "$ref": "#/definitions/EntityWithLineage",
          "description": "The entity that created the invitation",
          "type": "object",
          "x-isclass": true
        },
        "InvitedEntity": {
          "$ref": "#/definitions/EntityWithLineage",
          "description": "The entity that is invited",
          "type": "object",
          "x-isclass": true
        },
        "RoleId": {
          "description": "ID of the role in the group to assign the user to.",
          "type": "string"
        }
      },
      "required": [
        "Expires"
      ],
      "example": {
        "InvitedEntity": {
          "Key": {
            "Id": "90901000",
            "Type": "title_player_account",
            "TypeString": "title_player_account"
          },
          "Lineage": {
            "master_player_account": {
              "Id": "800DED92",
              "Type": "master_player_account",
              "TypeString": "master_player_account"
            }
          }
        },
        "Group": {
          "Id": "ABC1234ABC"
        },
        "InvitedByEntity": {
          "Key": {
            "Id": "9023AFF3",
            "Type": "title_player_account",
            "TypeString": "title_player_account"
          },
          "Lineage": {
            "master_player_account": {
              "Id": "366AD424",
              "Type": "master_player_account",
              "TypeString": "master_player_account"
            }
          }
        },
        "RoleId": "awesomepeople",
        "Expires": "2017-12-31T11:59:59"
      }
    },
    "IsMemberRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        },
        "RoleId": {
          "description": "Optional: ID of the role to check membership of. Defaults to any role (that is, check to see if the entity is a member of the group in any capacity) if not specified.",
          "type": "string"
        }
      },
      "required": [
        "Group",
        "Entity"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        },
        "RoleId": "ABC1234DEF",
        "Entity": {
          "Id": "90901000",
          "Type": "title_player_account",
          "TypeString": "title_player_account"
        }
      }
    },
    "IsMemberResponse": {
      "type": "object",
      "properties": {
        "IsMember": {
          "description": "A value indicating whether or not the entity is a member.",
          "type": "boolean"
        }
      },
      "required": [
        "IsMember"
      ],
      "example": {
        "IsMember": true
      }
    },
    "ListGroupApplicationsRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Group"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        }
      }
    },
    "ListGroupApplicationsResponse": {
      "type": "object",
      "properties": {
        "Applications": {
          "description": "The requested list of applications to the group.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupApplication"
          },
          "x-isclass": true
        }
      },
      "example": {
        "Applications": [
          {
            "Group": {
              "Id": "ABC1234ABC"
            },
            "Entity": {
              "Key": {
                "Id": "90901000",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "Lineage": {
                "master_player_account": {
                  "Id": "800DED92",
                  "Type": "master_player_account",
                  "TypeString": "master_player_account"
                }
              }
            },
            "Expires": "2017-12-31T11:59:59"
          },
          {
            "Group": {
              "Id": "ABC1234ABC"
            },
            "Entity": {
              "Key": {
                "Id": "90901000",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "Lineage": {
                "master_player_account": {
                  "Id": "800DED92",
                  "Type": "master_player_account",
                  "TypeString": "master_player_account"
                }
              }
            },
            "Expires": "2017-12-31T11:59:59"
          }
        ]
      }
    },
    "ListGroupBlocksRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Group"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        }
      }
    },
    "ListGroupBlocksResponse": {
      "type": "object",
      "properties": {
        "BlockedEntities": {
          "description": "The requested list blocked entities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupBlock"
          },
          "x-isclass": true
        }
      },
      "example": {
        "BlockedEntities": [
          {
            "Entity": {
              "Key": {
                "Id": "90901000",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "Lineage": {
                "master_player_account": {
                  "Id": "800DED92",
                  "Type": "master_player_account",
                  "TypeString": "master_player_account"
                }
              }
            }
          }
        ]
      }
    },
    "ListGroupInvitationsRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Group"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        }
      }
    },
    "ListGroupInvitationsResponse": {
      "type": "object",
      "properties": {
        "Invitations": {
          "description": "The requested list of group invitations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupInvitation"
          },
          "x-isclass": true
        }
      },
      "example": {
        "Invitations": [
          {
            "InvitedEntity": {
              "Key": {
                "Id": "90901000",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "Lineage": {
                "master_player_account": {
                  "Id": "800DED92",
                  "Type": "master_player_account",
                  "TypeString": "master_player_account"
                }
              }
            },
            "Group": {
              "Id": "ABC1234ABC"
            },
            "InvitedByEntity": {
              "Key": {
                "Id": "9023AFF3",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "Lineage": {
                "master_player_account": {
                  "Id": "366AD424",
                  "Type": "master_player_account",
                  "TypeString": "master_player_account"
                }
              }
            },
            "RoleId": "awesomepeople",
            "Expires": "2017-12-31T11:59:59"
          },
          {
            "InvitedEntity": {
              "Key": {
                "Id": "90901000",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "Lineage": {
                "master_player_account": {
                  "Id": "800DED92",
                  "Type": "master_player_account",
                  "TypeString": "master_player_account"
                }
              }
            },
            "Group": {
              "Id": "ABC1234ABC"
            },
            "InvitedByEntity": {
              "Key": {
                "Id": "9023AFF3",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "Lineage": {
                "master_player_account": {
                  "Id": "366AD424",
                  "Type": "master_player_account",
                  "TypeString": "master_player_account"
                }
              }
            },
            "RoleId": "members",
            "Expires": "2017-12-31T11:59:59"
          }
        ]
      }
    },
    "ListGroupMembersRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "ID of the group to list the members and roles for",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Group"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        }
      }
    },
    "ListGroupMembersResponse": {
      "type": "object",
      "properties": {
        "Members": {
          "description": "The requested list of roles and member entity IDs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityMemberRole"
          },
          "x-isclass": true
        }
      }
    },
    "ListMembershipOpportunitiesRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {}
    },
    "ListMembershipOpportunitiesResponse": {
      "type": "object",
      "properties": {
        "Applications": {
          "description": "The requested list of group applications.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupApplication"
          },
          "x-isclass": true
        },
        "Invitations": {
          "description": "The requested list of group invitations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupInvitation"
          },
          "x-isclass": true
        }
      },
      "example": {
        "Invitations": [
          {
            "InvitedEntity": {
              "Key": {
                "Id": "90901000",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "Lineage": {
                "master_player_account": {
                  "Id": "800DED92",
                  "Type": "master_player_account",
                  "TypeString": "master_player_account"
                }
              }
            },
            "Group": {
              "Id": "ABC1234ABC"
            },
            "InvitedByEntity": {
              "Key": {
                "Id": "9023AFF3",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "Lineage": {
                "master_player_account": {
                  "Id": "366AD424",
                  "Type": "master_player_account",
                  "TypeString": "master_player_account"
                }
              }
            },
            "RoleId": "awesomepeople",
            "Expires": "2017-12-31T11:59:59"
          },
          {
            "InvitedEntity": {
              "Key": {
                "Id": "90901000",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "Lineage": {
                "master_player_account": {
                  "Id": "800DED92",
                  "Type": "master_player_account",
                  "TypeString": "master_player_account"
                }
              }
            },
            "Group": {
              "Id": "ABC1234ABC"
            },
            "InvitedByEntity": {
              "Key": {
                "Id": "9023AFF3",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "Lineage": {
                "master_player_account": {
                  "Id": "366AD424",
                  "Type": "master_player_account",
                  "TypeString": "master_player_account"
                }
              }
            },
            "RoleId": "members",
            "Expires": "2017-12-31T11:59:59"
          }
        ],
        "Applications": [
          {
            "Group": {
              "Id": "ABC1234ABC"
            },
            "Entity": {
              "Key": {
                "Id": "90901000",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "Lineage": {
                "master_player_account": {
                  "Id": "800DED92",
                  "Type": "master_player_account",
                  "TypeString": "master_player_account"
                }
              }
            },
            "Expires": "2017-12-31T11:59:59"
          }
        ]
      }
    },
    "ListMembershipRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {}
    },
    "ListMembershipResponse": {
      "type": "object",
      "properties": {
        "Groups": {
          "description": "The list of groups",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupWithRoles"
          },
          "x-isclass": true
        }
      },
      "example": {
        "Groups": [
          {
            "GroupName": "Example Group",
            "Group": {
              "Id": "ABC1234ABC"
            },
            "ProfileVersion": 17,
            "Roles": [
              {
                "RoleName": "Example Role",
                "RoleId": "ABC123DEF"
              }
            ]
          }
        ]
      }
    },
    "OperationTypes": {
      "type": "object",
      "enum": [
        "Created",
        "Updated",
        "Deleted",
        "None"
      ]
    },
    "RemoveGroupApplicationRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Group",
        "Entity"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        },
        "Entity": {
          "Id": "90901000",
          "Type": "title_player_account",
          "TypeString": "title_player_account"
        }
      }
    },
    "RemoveGroupInvitationRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Group",
        "Entity"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        },
        "Entity": {
          "Id": "90901000",
          "Type": "title_player_account",
          "TypeString": "title_player_account"
        }
      }
    },
    "RemoveMembersRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        },
        "Members": {
          "description": "List of entities to remove",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityKey"
          },
          "x-isclass": true
        },
        "RoleId": {
          "description": "The ID of the role to remove the entities from.",
          "type": "string"
        }
      },
      "required": [
        "Group",
        "Members"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        },
        "RoleId": "ABC1234DEF",
        "Members": [
          {
            "Id": "90901000",
            "Type": "title_player_account",
            "TypeString": "title_player_account"
          }
        ]
      }
    },
    "UnblockEntityRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Group",
        "Entity"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        },
        "Entity": {
          "Id": "90901000",
          "Type": "title_player_account",
          "TypeString": "title_player_account"
        }
      }
    },
    "UpdateGroupRequest": {
      "type": "object",
      "properties": {
        "AdminRoleId": {
          "description": "Optional: the ID of an existing role to set as the new administrator role for the group",
          "type": "string"
        },
        "ExpectedProfileVersion": {
          "description": "Optional field used for concurrency control. By specifying the previously returned value of ProfileVersion from the GetGroup API, you can ensure that the group data update will only be performed if the group has not been updated by any other clients since the version you last loaded.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        },
        "GroupName": {
          "description": "Optional: the new name of the group",
          "type": "string"
        },
        "MemberRoleId": {
          "description": "Optional: the ID of an existing role to set as the new member role for the group",
          "type": "string"
        }
      },
      "required": [
        "Group"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        },
        "GroupName": "My New Group Name",
        "ExpectedProfileVersion": 17
      }
    },
    "UpdateGroupResponse": {
      "type": "object",
      "properties": {
        "OperationReason": {
          "description": "Optional reason to explain why the operation was the result that it was.",
          "type": "string"
        },
        "ProfileVersion": {
          "description": "New version of the group data.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SetResult": {
          "$ref": "#/definitions/OperationTypes",
          "description": "Indicates which operation was completed, either Created, Updated, Deleted or None.",
          "type": "string",
          "x-isenum": true
        }
      },
      "required": [
        "ProfileVersion"
      ],
      "example": {
        "ProfileVersion": 18,
        "SetResult": "Updated"
      }
    },
    "UpdateGroupRoleRequest": {
      "type": "object",
      "properties": {
        "ExpectedProfileVersion": {
          "description": "Optional field used for concurrency control. By specifying the previously returned value of ProfileVersion from the GetGroup API, you can ensure that the group data update will only be performed if the group has not been updated by any other clients since the version you last loaded.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "type": "object",
          "x-isclass": true
        },
        "RoleId": {
          "description": "ID of the role to update. Role IDs must be between 1 and 64 characters long.",
          "type": "string"
        },
        "RoleName": {
          "description": "The new name of the role",
          "type": "string"
        }
      },
      "required": [
        "Group",
        "RoleName"
      ],
      "example": {
        "Group": {
          "Id": "ABC1234ABC"
        },
        "RoleId": "ABC1234DEF",
        "RoleName": "My New Role Name",
        "ExpectedProfileVersion": 17
      }
    },
    "UpdateGroupRoleResponse": {
      "type": "object",
      "properties": {
        "OperationReason": {
          "description": "Optional reason to explain why the operation was the result that it was.",
          "type": "string"
        },
        "ProfileVersion": {
          "description": "New version of the role data.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SetResult": {
          "$ref": "#/definitions/OperationTypes",
          "description": "Indicates which operation was completed, either Created, Updated, Deleted or None.",
          "type": "string",
          "x-isenum": true
        }
      },
      "required": [
        "ProfileVersion"
      ],
      "example": {
        "ProfileVersion": 18,
        "SetResult": "Updated"
      }
    }
  },
  "parameters": {
    "AcceptGroupApplicationRequest": {
      "name": "AcceptGroupApplicationRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/AcceptGroupApplicationRequest"
      }
    },
    "AcceptGroupInvitationRequest": {
      "name": "AcceptGroupInvitationRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/AcceptGroupInvitationRequest"
      }
    },
    "AddMembersRequest": {
      "name": "AddMembersRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/AddMembersRequest"
      }
    },
    "ApplyToGroupRequest": {
      "name": "ApplyToGroupRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ApplyToGroupRequest"
      }
    },
    "BlockEntityRequest": {
      "name": "BlockEntityRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/BlockEntityRequest"
      }
    },
    "ChangeMemberRoleRequest": {
      "name": "ChangeMemberRoleRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ChangeMemberRoleRequest"
      }
    },
    "CreateGroupRequest": {
      "name": "CreateGroupRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateGroupRequest"
      }
    },
    "CreateGroupRoleRequest": {
      "name": "CreateGroupRoleRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateGroupRoleRequest"
      }
    },
    "DeleteGroupRequest": {
      "name": "DeleteGroupRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/DeleteGroupRequest"
      }
    },
    "DeleteRoleRequest": {
      "name": "DeleteRoleRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/DeleteRoleRequest"
      }
    },
    "GetGroupRequest": {
      "name": "GetGroupRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetGroupRequest"
      }
    },
    "InviteToGroupRequest": {
      "name": "InviteToGroupRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/InviteToGroupRequest"
      }
    },
    "IsMemberRequest": {
      "name": "IsMemberRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/IsMemberRequest"
      }
    },
    "ListGroupApplicationsRequest": {
      "name": "ListGroupApplicationsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListGroupApplicationsRequest"
      }
    },
    "ListGroupBlocksRequest": {
      "name": "ListGroupBlocksRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListGroupBlocksRequest"
      }
    },
    "ListGroupInvitationsRequest": {
      "name": "ListGroupInvitationsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListGroupInvitationsRequest"
      }
    },
    "ListGroupMembersRequest": {
      "name": "ListGroupMembersRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListGroupMembersRequest"
      }
    },
    "ListMembershipOpportunitiesRequest": {
      "name": "ListMembershipOpportunitiesRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListMembershipOpportunitiesRequest"
      }
    },
    "ListMembershipRequest": {
      "name": "ListMembershipRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListMembershipRequest"
      }
    },
    "RemoveGroupApplicationRequest": {
      "name": "RemoveGroupApplicationRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/RemoveGroupApplicationRequest"
      }
    },
    "RemoveGroupInvitationRequest": {
      "name": "RemoveGroupInvitationRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/RemoveGroupInvitationRequest"
      }
    },
    "RemoveMembersRequest": {
      "name": "RemoveMembersRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/RemoveMembersRequest"
      }
    },
    "UnblockEntityRequest": {
      "name": "UnblockEntityRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/UnblockEntityRequest"
      }
    },
    "UpdateGroupRequest": {
      "name": "UpdateGroupRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/UpdateGroupRequest"
      }
    },
    "UpdateGroupRoleRequest": {
      "name": "UpdateGroupRoleRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/UpdateGroupRoleRequest"
      }
    }
  },
  "responses": {
    "ApiErrorWrapper": {
      "description": "This is the outer-wrapper for all results with errors",
      "schema": {
        "$ref": "#/definitions/ApiErrorWrapper"
      }
    },
    "ApplyToGroupResponse": {
      "description": "Describes an application to join a group",
      "schema": {
        "$ref": "#/definitions/ApplyToGroupResponse"
      }
    },
    "CreateGroupResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateGroupResponse"
      }
    },
    "CreateGroupRoleResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateGroupRoleResponse"
      }
    },
    "EmptyResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/EmptyResult"
      }
    },
    "GetGroupResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetGroupResponse"
      }
    },
    "InviteToGroupResponse": {
      "description": "Describes an invitation to a group.",
      "schema": {
        "$ref": "#/definitions/InviteToGroupResponse"
      }
    },
    "IsMemberResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/IsMemberResponse"
      }
    },
    "ListGroupApplicationsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListGroupApplicationsResponse"
      }
    },
    "ListGroupBlocksResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListGroupBlocksResponse"
      }
    },
    "ListGroupInvitationsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListGroupInvitationsResponse"
      }
    },
    "ListGroupMembersResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListGroupMembersResponse"
      }
    },
    "ListMembershipOpportunitiesResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListMembershipOpportunitiesResponse"
      }
    },
    "ListMembershipResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListMembershipResponse"
      }
    },
    "UpdateGroupResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/UpdateGroupResponse"
      }
    },
    "UpdateGroupRoleResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/UpdateGroupRoleResponse"
      }
    }
  },
  "tags": [
    {
      "name": "Groups",
      "description": "https://api.playfab.com/documentation/Groups#Groups"
    }
  ],
  "securityDefinitions": {
    "None": {
      "type": "apiKey",
      "in": "header",
      "name": "None",
      "description": "This API requires no authentication headers (usually provides one to other calls)."
    },
    "SessionTicket": {
      "type": "apiKey",
      "in": "header",
      "name": "SessionTicket",
      "description": "This API requires a client session ticket, available from any Client Login function."
    },
    "SecretKey": {
      "type": "apiKey",
      "in": "header",
      "name": "SecretKey",
      "description": "This API requires a title secret key, available to title admins, from PlayFab Game Manager."
    },
    "EntityToken": {
      "type": "apiKey",
      "in": "header",
      "name": "EntityToken",
      "description": "This API requires an Entity Session Token, available from the Entity GetEntityToken method."
    }
  },
  "x-errors": {
    "Success": {
      "name": "Success"
    },
    "UnkownError": {
      "id": 500,
      "name": "UnkownError"
    },
    "InvalidParams": {
      "id": 1000,
      "name": "InvalidParams"
    },
    "AccountNotFound": {
      "id": 1001,
      "name": "AccountNotFound"
    },
    "AccountBanned": {
      "id": 1002,
      "name": "AccountBanned"
    },
    "InvalidUsernameOrPassword": {
      "id": 1003,
      "name": "InvalidUsernameOrPassword"
    },
    "InvalidTitleId": {
      "id": 1004,
      "name": "InvalidTitleId"
    },
    "InvalidEmailAddress": {
      "id": 1005,
      "name": "InvalidEmailAddress"
    },
    "EmailAddressNotAvailable": {
      "id": 1006,
      "name": "EmailAddressNotAvailable"
    },
    "InvalidUsername": {
      "id": 1007,
      "name": "InvalidUsername"
    },
    "InvalidPassword": {
      "id": 1008,
      "name": "InvalidPassword"
    },
    "UsernameNotAvailable": {
      "id": 1009,
      "name": "UsernameNotAvailable"
    },
    "InvalidSteamTicket": {
      "id": 1010,
      "name": "InvalidSteamTicket"
    },
    "AccountAlreadyLinked": {
      "id": 1011,
      "name": "AccountAlreadyLinked"
    },
    "LinkedAccountAlreadyClaimed": {
      "id": 1012,
      "name": "LinkedAccountAlreadyClaimed"
    },
    "InvalidFacebookToken": {
      "id": 1013,
      "name": "InvalidFacebookToken"
    },
    "AccountNotLinked": {
      "id": 1014,
      "name": "AccountNotLinked"
    },
    "FailedByPaymentProvider": {
      "id": 1015,
      "name": "FailedByPaymentProvider"
    },
    "CouponCodeNotFound": {
      "id": 1016,
      "name": "CouponCodeNotFound"
    },
    "InvalidContainerItem": {
      "id": 1017,
      "name": "InvalidContainerItem"
    },
    "ContainerNotOwned": {
      "id": 1018,
      "name": "ContainerNotOwned"
    },
    "KeyNotOwned": {
      "id": 1019,
      "name": "KeyNotOwned"
    },
    "InvalidItemIdInTable": {
      "id": 1020,
      "name": "InvalidItemIdInTable"
    },
    "InvalidReceipt": {
      "id": 1021,
      "name": "InvalidReceipt"
    },
    "ReceiptAlreadyUsed": {
      "id": 1022,
      "name": "ReceiptAlreadyUsed"
    },
    "ReceiptCancelled": {
      "id": 1023,
      "name": "ReceiptCancelled"
    },
    "GameNotFound": {
      "id": 1024,
      "name": "GameNotFound"
    },
    "GameModeNotFound": {
      "id": 1025,
      "name": "GameModeNotFound"
    },
    "InvalidGoogleToken": {
      "id": 1026,
      "name": "InvalidGoogleToken"
    },
    "UserIsNotPartOfDeveloper": {
      "id": 1027,
      "name": "UserIsNotPartOfDeveloper"
    },
    "InvalidTitleForDeveloper": {
      "id": 1028,
      "name": "InvalidTitleForDeveloper"
    },
    "TitleNameConflicts": {
      "id": 1029,
      "name": "TitleNameConflicts"
    },
    "UserisNotValid": {
      "id": 1030,
      "name": "UserisNotValid"
    },
    "ValueAlreadyExists": {
      "id": 1031,
      "name": "ValueAlreadyExists"
    },
    "BuildNotFound": {
      "id": 1032,
      "name": "BuildNotFound"
    },
    "PlayerNotInGame": {
      "id": 1033,
      "name": "PlayerNotInGame"
    },
    "InvalidTicket": {
      "id": 1034,
      "name": "InvalidTicket"
    },
    "InvalidDeveloper": {
      "id": 1035,
      "name": "InvalidDeveloper"
    },
    "InvalidOrderInfo": {
      "id": 1036,
      "name": "InvalidOrderInfo"
    },
    "RegistrationIncomplete": {
      "id": 1037,
      "name": "RegistrationIncomplete"
    },
    "InvalidPlatform": {
      "id": 1038,
      "name": "InvalidPlatform"
    },
    "UnknownError": {
      "id": 1039,
      "name": "UnknownError"
    },
    "SteamApplicationNotOwned": {
      "id": 1040,
      "name": "SteamApplicationNotOwned"
    },
    "WrongSteamAccount": {
      "id": 1041,
      "name": "WrongSteamAccount"
    },
    "TitleNotActivated": {
      "id": 1042,
      "name": "TitleNotActivated"
    },
    "RegistrationSessionNotFound": {
      "id": 1043,
      "name": "RegistrationSessionNotFound"
    },
    "NoSuchMod": {
      "id": 1044,
      "name": "NoSuchMod"
    },
    "FileNotFound": {
      "id": 1045,
      "name": "FileNotFound"
    },
    "DuplicateEmail": {
      "id": 1046,
      "name": "DuplicateEmail"
    },
    "ItemNotFound": {
      "id": 1047,
      "name": "ItemNotFound"
    },
    "ItemNotOwned": {
      "id": 1048,
      "name": "ItemNotOwned"
    },
    "ItemNotRecycleable": {
      "id": 1049,
      "name": "ItemNotRecycleable"
    },
    "ItemNotAffordable": {
      "id": 1050,
      "name": "ItemNotAffordable"
    },
    "InvalidVirtualCurrency": {
      "id": 1051,
      "name": "InvalidVirtualCurrency"
    },
    "WrongVirtualCurrency": {
      "id": 1052,
      "name": "WrongVirtualCurrency"
    },
    "WrongPrice": {
      "id": 1053,
      "name": "WrongPrice"
    },
    "NonPositiveValue": {
      "id": 1054,
      "name": "NonPositiveValue"
    },
    "InvalidRegion": {
      "id": 1055,
      "name": "InvalidRegion"
    },
    "RegionAtCapacity": {
      "id": 1056,
      "name": "RegionAtCapacity"
    },
    "ServerFailedToStart": {
      "id": 1057,
      "name": "ServerFailedToStart"
    },
    "NameNotAvailable": {
      "id": 1058,
      "name": "NameNotAvailable"
    },
    "InsufficientFunds": {
      "id": 1059,
      "name": "InsufficientFunds"
    },
    "InvalidDeviceID": {
      "id": 1060,
      "name": "InvalidDeviceID"
    },
    "InvalidPushNotificationToken": {
      "id": 1061,
      "name": "InvalidPushNotificationToken"
    },
    "NoRemainingUses": {
      "id": 1062,
      "name": "NoRemainingUses"
    },
    "InvalidPaymentProvider": {
      "id": 1063,
      "name": "InvalidPaymentProvider"
    },
    "PurchaseInitializationFailure": {
      "id": 1064,
      "name": "PurchaseInitializationFailure"
    },
    "DuplicateUsername": {
      "id": 1065,
      "name": "DuplicateUsername"
    },
    "InvalidBuyerInfo": {
      "id": 1066,
      "name": "InvalidBuyerInfo"
    },
    "NoGameModeParamsSet": {
      "id": 1067,
      "name": "NoGameModeParamsSet"
    },
    "BodyTooLarge": {
      "id": 1068,
      "name": "BodyTooLarge"
    },
    "ReservedWordInBody": {
      "id": 1069,
      "name": "ReservedWordInBody"
    },
    "InvalidTypeInBody": {
      "id": 1070,
      "name": "InvalidTypeInBody"
    },
    "InvalidRequest": {
      "id": 1071,
      "name": "InvalidRequest"
    },
    "ReservedEventName": {
      "id": 1072,
      "name": "ReservedEventName"
    },
    "InvalidUserStatistics": {
      "id": 1073,
      "name": "InvalidUserStatistics"
    },
    "NotAuthenticated": {
      "id": 1074,
      "name": "NotAuthenticated"
    },
    "StreamAlreadyExists": {
      "id": 1075,
      "name": "StreamAlreadyExists"
    },
    "ErrorCreatingStream": {
      "id": 1076,
      "name": "ErrorCreatingStream"
    },
    "StreamNotFound": {
      "id": 1077,
      "name": "StreamNotFound"
    },
    "InvalidAccount": {
      "id": 1078,
      "name": "InvalidAccount"
    },
    "PurchaseDoesNotExist": {
      "id": 1080,
      "name": "PurchaseDoesNotExist"
    },
    "InvalidPurchaseTransactionStatus": {
      "id": 1081,
      "name": "InvalidPurchaseTransactionStatus"
    },
    "APINotEnabledForGameClientAccess": {
      "id": 1082,
      "name": "APINotEnabledForGameClientAccess"
    },
    "NoPushNotificationARNForTitle": {
      "id": 1083,
      "name": "NoPushNotificationARNForTitle"
    },
    "BuildAlreadyExists": {
      "id": 1084,
      "name": "BuildAlreadyExists"
    },
    "BuildPackageDoesNotExist": {
      "id": 1085,
      "name": "BuildPackageDoesNotExist"
    },
    "CustomAnalyticsEventsNotEnabledForTitle": {
      "id": 1087,
      "name": "CustomAnalyticsEventsNotEnabledForTitle"
    },
    "InvalidSharedGroupId": {
      "id": 1088,
      "name": "InvalidSharedGroupId"
    },
    "NotAuthorized": {
      "id": 1089,
      "name": "NotAuthorized"
    },
    "MissingTitleGoogleProperties": {
      "id": 1090,
      "name": "MissingTitleGoogleProperties"
    },
    "InvalidItemProperties": {
      "id": 1091,
      "name": "InvalidItemProperties"
    },
    "InvalidPSNAuthCode": {
      "id": 1092,
      "name": "InvalidPSNAuthCode"
    },
    "InvalidItemId": {
      "id": 1093,
      "name": "InvalidItemId"
    },
    "PushNotEnabledForAccount": {
      "id": 1094,
      "name": "PushNotEnabledForAccount"
    },
    "PushServiceError": {
      "id": 1095,
      "name": "PushServiceError"
    },
    "ReceiptDoesNotContainInAppItems": {
      "id": 1096,
      "name": "ReceiptDoesNotContainInAppItems"
    },
    "ReceiptContainsMultipleInAppItems": {
      "id": 1097,
      "name": "ReceiptContainsMultipleInAppItems"
    },
    "InvalidBundleID": {
      "id": 1098,
      "name": "InvalidBundleID"
    },
    "JavascriptException": {
      "id": 1099,
      "name": "JavascriptException"
    },
    "InvalidSessionTicket": {
      "id": 1100,
      "name": "InvalidSessionTicket"
    },
    "UnableToConnectToDatabase": {
      "id": 1101,
      "name": "UnableToConnectToDatabase"
    },
    "InternalServerError": {
      "id": 1110,
      "name": "InternalServerError"
    },
    "InvalidReportDate": {
      "id": 1111,
      "name": "InvalidReportDate"
    },
    "ReportNotAvailable": {
      "id": 1112,
      "name": "ReportNotAvailable"
    },
    "DatabaseThroughputExceeded": {
      "id": 1113,
      "name": "DatabaseThroughputExceeded"
    },
    "InvalidGameTicket": {
      "id": 1115,
      "name": "InvalidGameTicket"
    },
    "ExpiredGameTicket": {
      "id": 1116,
      "name": "ExpiredGameTicket"
    },
    "GameTicketDoesNotMatchLobby": {
      "id": 1117,
      "name": "GameTicketDoesNotMatchLobby"
    },
    "LinkedDeviceAlreadyClaimed": {
      "id": 1118,
      "name": "LinkedDeviceAlreadyClaimed"
    },
    "DeviceAlreadyLinked": {
      "id": 1119,
      "name": "DeviceAlreadyLinked"
    },
    "DeviceNotLinked": {
      "id": 1120,
      "name": "DeviceNotLinked"
    },
    "PartialFailure": {
      "id": 1121,
      "name": "PartialFailure"
    },
    "PublisherNotSet": {
      "id": 1122,
      "name": "PublisherNotSet"
    },
    "ServiceUnavailable": {
      "id": 1123,
      "name": "ServiceUnavailable"
    },
    "VersionNotFound": {
      "id": 1124,
      "name": "VersionNotFound"
    },
    "RevisionNotFound": {
      "id": 1125,
      "name": "RevisionNotFound"
    },
    "InvalidPublisherId": {
      "id": 1126,
      "name": "InvalidPublisherId"
    },
    "DownstreamServiceUnavailable": {
      "id": 1127,
      "name": "DownstreamServiceUnavailable"
    },
    "APINotIncludedInTitleUsageTier": {
      "id": 1128,
      "name": "APINotIncludedInTitleUsageTier"
    },
    "DAULimitExceeded": {
      "id": 1129,
      "name": "DAULimitExceeded"
    },
    "APIRequestLimitExceeded": {
      "id": 1130,
      "name": "APIRequestLimitExceeded"
    },
    "InvalidAPIEndpoint": {
      "id": 1131,
      "name": "InvalidAPIEndpoint"
    },
    "BuildNotAvailable": {
      "id": 1132,
      "name": "BuildNotAvailable"
    },
    "ConcurrentEditError": {
      "id": 1133,
      "name": "ConcurrentEditError"
    },
    "ContentNotFound": {
      "id": 1134,
      "name": "ContentNotFound"
    },
    "CharacterNotFound": {
      "id": 1135,
      "name": "CharacterNotFound"
    },
    "CloudScriptNotFound": {
      "id": 1136,
      "name": "CloudScriptNotFound"
    },
    "ContentQuotaExceeded": {
      "id": 1137,
      "name": "ContentQuotaExceeded"
    },
    "InvalidCharacterStatistics": {
      "id": 1138,
      "name": "InvalidCharacterStatistics"
    },
    "PhotonNotEnabledForTitle": {
      "id": 1139,
      "name": "PhotonNotEnabledForTitle"
    },
    "PhotonApplicationNotFound": {
      "id": 1140,
      "name": "PhotonApplicationNotFound"
    },
    "PhotonApplicationNotAssociatedWithTitle": {
      "id": 1141,
      "name": "PhotonApplicationNotAssociatedWithTitle"
    },
    "InvalidEmailOrPassword": {
      "id": 1142,
      "name": "InvalidEmailOrPassword"
    },
    "FacebookAPIError": {
      "id": 1143,
      "name": "FacebookAPIError"
    },
    "InvalidContentType": {
      "id": 1144,
      "name": "InvalidContentType"
    },
    "KeyLengthExceeded": {
      "id": 1145,
      "name": "KeyLengthExceeded"
    },
    "DataLengthExceeded": {
      "id": 1146,
      "name": "DataLengthExceeded"
    },
    "TooManyKeys": {
      "id": 1147,
      "name": "TooManyKeys"
    },
    "FreeTierCannotHaveVirtualCurrency": {
      "id": 1148,
      "name": "FreeTierCannotHaveVirtualCurrency"
    },
    "MissingAmazonSharedKey": {
      "id": 1149,
      "name": "MissingAmazonSharedKey"
    },
    "AmazonValidationError": {
      "id": 1150,
      "name": "AmazonValidationError"
    },
    "InvalidPSNIssuerId": {
      "id": 1151,
      "name": "InvalidPSNIssuerId"
    },
    "PSNInaccessible": {
      "id": 1152,
      "name": "PSNInaccessible"
    },
    "ExpiredAuthToken": {
      "id": 1153,
      "name": "ExpiredAuthToken"
    },
    "FailedToGetEntitlements": {
      "id": 1154,
      "name": "FailedToGetEntitlements"
    },
    "FailedToConsumeEntitlement": {
      "id": 1155,
      "name": "FailedToConsumeEntitlement"
    },
    "TradeAcceptingUserNotAllowed": {
      "id": 1156,
      "name": "TradeAcceptingUserNotAllowed"
    },
    "TradeInventoryItemIsAssignedToCharacter": {
      "id": 1157,
      "name": "TradeInventoryItemIsAssignedToCharacter"
    },
    "TradeInventoryItemIsBundle": {
      "id": 1158,
      "name": "TradeInventoryItemIsBundle"
    },
    "TradeStatusNotValidForCancelling": {
      "id": 1159,
      "name": "TradeStatusNotValidForCancelling"
    },
    "TradeStatusNotValidForAccepting": {
      "id": 1160,
      "name": "TradeStatusNotValidForAccepting"
    },
    "TradeDoesNotExist": {
      "id": 1161,
      "name": "TradeDoesNotExist"
    },
    "TradeCancelled": {
      "id": 1162,
      "name": "TradeCancelled"
    },
    "TradeAlreadyFilled": {
      "id": 1163,
      "name": "TradeAlreadyFilled"
    },
    "TradeWaitForStatusTimeout": {
      "id": 1164,
      "name": "TradeWaitForStatusTimeout"
    },
    "TradeInventoryItemExpired": {
      "id": 1165,
      "name": "TradeInventoryItemExpired"
    },
    "TradeMissingOfferedAndAcceptedItems": {
      "id": 1166,
      "name": "TradeMissingOfferedAndAcceptedItems"
    },
    "TradeAcceptedItemIsBundle": {
      "id": 1167,
      "name": "TradeAcceptedItemIsBundle"
    },
    "TradeAcceptedItemIsStackable": {
      "id": 1168,
      "name": "TradeAcceptedItemIsStackable"
    },
    "TradeInventoryItemInvalidStatus": {
      "id": 1169,
      "name": "TradeInventoryItemInvalidStatus"
    },
    "TradeAcceptedCatalogItemInvalid": {
      "id": 1170,
      "name": "TradeAcceptedCatalogItemInvalid"
    },
    "TradeAllowedUsersInvalid": {
      "id": 1171,
      "name": "TradeAllowedUsersInvalid"
    },
    "TradeInventoryItemDoesNotExist": {
      "id": 1172,
      "name": "TradeInventoryItemDoesNotExist"
    },
    "TradeInventoryItemIsConsumed": {
      "id": 1173,
      "name": "TradeInventoryItemIsConsumed"
    },
    "TradeInventoryItemIsStackable": {
      "id": 1174,
      "name": "TradeInventoryItemIsStackable"
    },
    "TradeAcceptedItemsMismatch": {
      "id": 1175,
      "name": "TradeAcceptedItemsMismatch"
    },
    "InvalidKongregateToken": {
      "id": 1176,
      "name": "InvalidKongregateToken"
    },
    "FeatureNotConfiguredForTitle": {
      "id": 1177,
      "name": "FeatureNotConfiguredForTitle"
    },
    "NoMatchingCatalogItemForReceipt": {
      "id": 1178,
      "name": "NoMatchingCatalogItemForReceipt"
    },
    "InvalidCurrencyCode": {
      "id": 1179,
      "name": "InvalidCurrencyCode"
    },
    "NoRealMoneyPriceForCatalogItem": {
      "id": 1180,
      "name": "NoRealMoneyPriceForCatalogItem"
    },
    "TradeInventoryItemIsNotTradable": {
      "id": 1181,
      "name": "TradeInventoryItemIsNotTradable"
    },
    "TradeAcceptedCatalogItemIsNotTradable": {
      "id": 1182,
      "name": "TradeAcceptedCatalogItemIsNotTradable"
    },
    "UsersAlreadyFriends": {
      "id": 1183,
      "name": "UsersAlreadyFriends"
    },
    "LinkedIdentifierAlreadyClaimed": {
      "id": 1184,
      "name": "LinkedIdentifierAlreadyClaimed"
    },
    "CustomIdNotLinked": {
      "id": 1185,
      "name": "CustomIdNotLinked"
    },
    "TotalDataSizeExceeded": {
      "id": 1186,
      "name": "TotalDataSizeExceeded"
    },
    "DeleteKeyConflict": {
      "id": 1187,
      "name": "DeleteKeyConflict"
    },
    "InvalidXboxLiveToken": {
      "id": 1188,
      "name": "InvalidXboxLiveToken"
    },
    "ExpiredXboxLiveToken": {
      "id": 1189,
      "name": "ExpiredXboxLiveToken"
    },
    "ResettableStatisticVersionRequired": {
      "id": 1190,
      "name": "ResettableStatisticVersionRequired"
    },
    "NotAuthorizedByTitle": {
      "id": 1191,
      "name": "NotAuthorizedByTitle"
    },
    "NoPartnerEnabled": {
      "id": 1192,
      "name": "NoPartnerEnabled"
    },
    "InvalidPartnerResponse": {
      "id": 1193,
      "name": "InvalidPartnerResponse"
    },
    "APINotEnabledForGameServerAccess": {
      "id": 1194,
      "name": "APINotEnabledForGameServerAccess"
    },
    "StatisticNotFound": {
      "id": 1195,
      "name": "StatisticNotFound"
    },
    "StatisticNameConflict": {
      "id": 1196,
      "name": "StatisticNameConflict"
    },
    "StatisticVersionClosedForWrites": {
      "id": 1197,
      "name": "StatisticVersionClosedForWrites"
    },
    "StatisticVersionInvalid": {
      "id": 1198,
      "name": "StatisticVersionInvalid"
    },
    "APIClientRequestRateLimitExceeded": {
      "id": 1199,
      "name": "APIClientRequestRateLimitExceeded"
    },
    "InvalidJSONContent": {
      "id": 1200,
      "name": "InvalidJSONContent"
    },
    "InvalidDropTable": {
      "id": 1201,
      "name": "InvalidDropTable"
    },
    "StatisticVersionAlreadyIncrementedForScheduledInterval": {
      "id": 1202,
      "name": "StatisticVersionAlreadyIncrementedForScheduledInterval"
    },
    "StatisticCountLimitExceeded": {
      "id": 1203,
      "name": "StatisticCountLimitExceeded"
    },
    "StatisticVersionIncrementRateExceeded": {
      "id": 1204,
      "name": "StatisticVersionIncrementRateExceeded"
    },
    "ContainerKeyInvalid": {
      "id": 1205,
      "name": "ContainerKeyInvalid"
    },
    "CloudScriptExecutionTimeLimitExceeded": {
      "id": 1206,
      "name": "CloudScriptExecutionTimeLimitExceeded"
    },
    "NoWritePermissionsForEvent": {
      "id": 1207,
      "name": "NoWritePermissionsForEvent"
    },
    "CloudScriptFunctionArgumentSizeExceeded": {
      "id": 1208,
      "name": "CloudScriptFunctionArgumentSizeExceeded"
    },
    "CloudScriptAPIRequestCountExceeded": {
      "id": 1209,
      "name": "CloudScriptAPIRequestCountExceeded"
    },
    "CloudScriptAPIRequestError": {
      "id": 1210,
      "name": "CloudScriptAPIRequestError"
    },
    "CloudScriptHTTPRequestError": {
      "id": 1211,
      "name": "CloudScriptHTTPRequestError"
    },
    "InsufficientGuildRole": {
      "id": 1212,
      "name": "InsufficientGuildRole"
    },
    "GuildNotFound": {
      "id": 1213,
      "name": "GuildNotFound"
    },
    "OverLimit": {
      "id": 1214,
      "name": "OverLimit"
    },
    "EventNotFound": {
      "id": 1215,
      "name": "EventNotFound"
    },
    "InvalidEventField": {
      "id": 1216,
      "name": "InvalidEventField"
    },
    "InvalidEventName": {
      "id": 1217,
      "name": "InvalidEventName"
    },
    "CatalogNotConfigured": {
      "id": 1218,
      "name": "CatalogNotConfigured"
    },
    "OperationNotSupportedForPlatform": {
      "id": 1219,
      "name": "OperationNotSupportedForPlatform"
    },
    "SegmentNotFound": {
      "id": 1220,
      "name": "SegmentNotFound"
    },
    "StoreNotFound": {
      "id": 1221,
      "name": "StoreNotFound"
    },
    "InvalidStatisticName": {
      "id": 1222,
      "name": "InvalidStatisticName"
    },
    "TitleNotQualifiedForLimit": {
      "id": 1223,
      "name": "TitleNotQualifiedForLimit"
    },
    "InvalidServiceLimitLevel": {
      "id": 1224,
      "name": "InvalidServiceLimitLevel"
    },
    "ServiceLimitLevelInTransition": {
      "id": 1225,
      "name": "ServiceLimitLevelInTransition"
    },
    "CouponAlreadyRedeemed": {
      "id": 1226,
      "name": "CouponAlreadyRedeemed"
    },
    "GameServerBuildSizeLimitExceeded": {
      "id": 1227,
      "name": "GameServerBuildSizeLimitExceeded"
    },
    "GameServerBuildCountLimitExceeded": {
      "id": 1228,
      "name": "GameServerBuildCountLimitExceeded"
    },
    "VirtualCurrencyCountLimitExceeded": {
      "id": 1229,
      "name": "VirtualCurrencyCountLimitExceeded"
    },
    "VirtualCurrencyCodeExists": {
      "id": 1230,
      "name": "VirtualCurrencyCodeExists"
    },
    "TitleNewsItemCountLimitExceeded": {
      "id": 1231,
      "name": "TitleNewsItemCountLimitExceeded"
    },
    "InvalidTwitchToken": {
      "id": 1232,
      "name": "InvalidTwitchToken"
    },
    "TwitchResponseError": {
      "id": 1233,
      "name": "TwitchResponseError"
    },
    "ProfaneDisplayName": {
      "id": 1234,
      "name": "ProfaneDisplayName"
    },
    "UserAlreadyAdded": {
      "id": 1235,
      "name": "UserAlreadyAdded"
    },
    "InvalidVirtualCurrencyCode": {
      "id": 1236,
      "name": "InvalidVirtualCurrencyCode"
    },
    "VirtualCurrencyCannotBeDeleted": {
      "id": 1237,
      "name": "VirtualCurrencyCannotBeDeleted"
    },
    "IdentifierAlreadyClaimed": {
      "id": 1238,
      "name": "IdentifierAlreadyClaimed"
    },
    "IdentifierNotLinked": {
      "id": 1239,
      "name": "IdentifierNotLinked"
    },
    "InvalidContinuationToken": {
      "id": 1240,
      "name": "InvalidContinuationToken"
    },
    "ExpiredContinuationToken": {
      "id": 1241,
      "name": "ExpiredContinuationToken"
    },
    "InvalidSegment": {
      "id": 1242,
      "name": "InvalidSegment"
    },
    "InvalidSessionId": {
      "id": 1243,
      "name": "InvalidSessionId"
    },
    "SessionLogNotFound": {
      "id": 1244,
      "name": "SessionLogNotFound"
    },
    "InvalidSearchTerm": {
      "id": 1245,
      "name": "InvalidSearchTerm"
    },
    "TwoFactorAuthenticationTokenRequired": {
      "id": 1246,
      "name": "TwoFactorAuthenticationTokenRequired"
    },
    "GameServerHostCountLimitExceeded": {
      "id": 1247,
      "name": "GameServerHostCountLimitExceeded"
    },
    "PlayerTagCountLimitExceeded": {
      "id": 1248,
      "name": "PlayerTagCountLimitExceeded"
    },
    "RequestAlreadyRunning": {
      "id": 1249,
      "name": "RequestAlreadyRunning"
    },
    "ActionGroupNotFound": {
      "id": 1250,
      "name": "ActionGroupNotFound"
    },
    "MaximumSegmentBulkActionJobsRunning": {
      "id": 1251,
      "name": "MaximumSegmentBulkActionJobsRunning"
    },
    "NoActionsOnPlayersInSegmentJob": {
      "id": 1252,
      "name": "NoActionsOnPlayersInSegmentJob"
    },
    "DuplicateStatisticName": {
      "id": 1253,
      "name": "DuplicateStatisticName"
    },
    "ScheduledTaskNameConflict": {
      "id": 1254,
      "name": "ScheduledTaskNameConflict"
    },
    "ScheduledTaskCreateConflict": {
      "id": 1255,
      "name": "ScheduledTaskCreateConflict"
    },
    "InvalidScheduledTaskName": {
      "id": 1256,
      "name": "InvalidScheduledTaskName"
    },
    "InvalidTaskSchedule": {
      "id": 1257,
      "name": "InvalidTaskSchedule"
    },
    "SteamNotEnabledForTitle": {
      "id": 1258,
      "name": "SteamNotEnabledForTitle"
    },
    "LimitNotAnUpgradeOption": {
      "id": 1259,
      "name": "LimitNotAnUpgradeOption"
    },
    "NoSecretKeyEnabledForCloudScript": {
      "id": 1260,
      "name": "NoSecretKeyEnabledForCloudScript"
    },
    "TaskNotFound": {
      "id": 1261,
      "name": "TaskNotFound"
    },
    "TaskInstanceNotFound": {
      "id": 1262,
      "name": "TaskInstanceNotFound"
    },
    "InvalidIdentityProviderId": {
      "id": 1263,
      "name": "InvalidIdentityProviderId"
    },
    "MisconfiguredIdentityProvider": {
      "id": 1264,
      "name": "MisconfiguredIdentityProvider"
    },
    "InvalidScheduledTaskType": {
      "id": 1265,
      "name": "InvalidScheduledTaskType"
    },
    "BillingInformationRequired": {
      "id": 1266,
      "name": "BillingInformationRequired"
    },
    "LimitedEditionItemUnavailable": {
      "id": 1267,
      "name": "LimitedEditionItemUnavailable"
    },
    "InvalidAdPlacementAndReward": {
      "id": 1268,
      "name": "InvalidAdPlacementAndReward"
    },
    "AllAdPlacementViewsAlreadyConsumed": {
      "id": 1269,
      "name": "AllAdPlacementViewsAlreadyConsumed"
    },
    "GoogleOAuthNotConfiguredForTitle": {
      "id": 1270,
      "name": "GoogleOAuthNotConfiguredForTitle"
    },
    "GoogleOAuthError": {
      "id": 1271,
      "name": "GoogleOAuthError"
    },
    "UserNotFriend": {
      "id": 1272,
      "name": "UserNotFriend"
    },
    "InvalidSignature": {
      "id": 1273,
      "name": "InvalidSignature"
    },
    "InvalidPublicKey": {
      "id": 1274,
      "name": "InvalidPublicKey"
    },
    "GoogleOAuthNoIdTokenIncludedInResponse": {
      "id": 1275,
      "name": "GoogleOAuthNoIdTokenIncludedInResponse"
    },
    "StatisticUpdateInProgress": {
      "id": 1276,
      "name": "StatisticUpdateInProgress"
    },
    "LeaderboardVersionNotAvailable": {
      "id": 1277,
      "name": "LeaderboardVersionNotAvailable"
    },
    "StatisticAlreadyHasPrizeTable": {
      "id": 1279,
      "name": "StatisticAlreadyHasPrizeTable"
    },
    "PrizeTableHasOverlappingRanks": {
      "id": 1280,
      "name": "PrizeTableHasOverlappingRanks"
    },
    "PrizeTableHasMissingRanks": {
      "id": 1281,
      "name": "PrizeTableHasMissingRanks"
    },
    "PrizeTableRankStartsAtZero": {
      "id": 1282,
      "name": "PrizeTableRankStartsAtZero"
    },
    "InvalidStatistic": {
      "id": 1283,
      "name": "InvalidStatistic"
    },
    "ExpressionParseFailure": {
      "id": 1284,
      "name": "ExpressionParseFailure"
    },
    "ExpressionInvokeFailure": {
      "id": 1285,
      "name": "ExpressionInvokeFailure"
    },
    "ExpressionTooLong": {
      "id": 1286,
      "name": "ExpressionTooLong"
    },
    "DataUpdateRateExceeded": {
      "id": 1287,
      "name": "DataUpdateRateExceeded"
    },
    "RestrictedEmailDomain": {
      "id": 1288,
      "name": "RestrictedEmailDomain"
    },
    "EncryptionKeyDisabled": {
      "id": 1289,
      "name": "EncryptionKeyDisabled"
    },
    "EncryptionKeyMissing": {
      "id": 1290,
      "name": "EncryptionKeyMissing"
    },
    "EncryptionKeyBroken": {
      "id": 1291,
      "name": "EncryptionKeyBroken"
    },
    "NoSharedSecretKeyConfigured": {
      "id": 1292,
      "name": "NoSharedSecretKeyConfigured"
    },
    "SecretKeyNotFound": {
      "id": 1293,
      "name": "SecretKeyNotFound"
    },
    "PlayerSecretAlreadyConfigured": {
      "id": 1294,
      "name": "PlayerSecretAlreadyConfigured"
    },
    "APIRequestsDisabledForTitle": {
      "id": 1295,
      "name": "APIRequestsDisabledForTitle"
    },
    "InvalidSharedSecretKey": {
      "id": 1296,
      "name": "InvalidSharedSecretKey"
    },
    "PrizeTableHasNoRanks": {
      "id": 1297,
      "name": "PrizeTableHasNoRanks"
    },
    "ProfileDoesNotExist": {
      "id": 1298,
      "name": "ProfileDoesNotExist"
    },
    "ContentS3OriginBucketNotConfigured": {
      "id": 1299,
      "name": "ContentS3OriginBucketNotConfigured"
    },
    "InvalidEnvironmentForReceipt": {
      "id": 1300,
      "name": "InvalidEnvironmentForReceipt"
    },
    "EncryptedRequestNotAllowed": {
      "id": 1301,
      "name": "EncryptedRequestNotAllowed"
    },
    "SignedRequestNotAllowed": {
      "id": 1302,
      "name": "SignedRequestNotAllowed"
    },
    "RequestViewConstraintParamsNotAllowed": {
      "id": 1303,
      "name": "RequestViewConstraintParamsNotAllowed"
    },
    "BadPartnerConfiguration": {
      "id": 1304,
      "name": "BadPartnerConfiguration"
    },
    "XboxBPCertificateFailure": {
      "id": 1305,
      "name": "XboxBPCertificateFailure"
    },
    "XboxXASSExchangeFailure": {
      "id": 1306,
      "name": "XboxXASSExchangeFailure"
    },
    "InvalidEntityId": {
      "id": 1307,
      "name": "InvalidEntityId"
    },
    "StatisticValueAggregationOverflow": {
      "id": 1308,
      "name": "StatisticValueAggregationOverflow"
    },
    "EmailMessageFromAddressIsMissing": {
      "id": 1309,
      "name": "EmailMessageFromAddressIsMissing"
    },
    "EmailMessageToAddressIsMissing": {
      "id": 1310,
      "name": "EmailMessageToAddressIsMissing"
    },
    "SmtpServerAuthenticationError": {
      "id": 1311,
      "name": "SmtpServerAuthenticationError"
    },
    "SmtpServerLimitExceeded": {
      "id": 1312,
      "name": "SmtpServerLimitExceeded"
    },
    "SmtpServerInsufficientStorage": {
      "id": 1313,
      "name": "SmtpServerInsufficientStorage"
    },
    "SmtpServerCommunicationError": {
      "id": 1314,
      "name": "SmtpServerCommunicationError"
    },
    "SmtpServerGeneralFailure": {
      "id": 1315,
      "name": "SmtpServerGeneralFailure"
    },
    "EmailClientTimeout": {
      "id": 1316,
      "name": "EmailClientTimeout"
    },
    "EmailClientCanceledTask": {
      "id": 1317,
      "name": "EmailClientCanceledTask"
    },
    "EmailTemplateMissing": {
      "id": 1318,
      "name": "EmailTemplateMissing"
    },
    "InvalidHostForTitleId": {
      "id": 1319,
      "name": "InvalidHostForTitleId"
    },
    "EmailConfirmationTokenDoesNotExist": {
      "id": 1320,
      "name": "EmailConfirmationTokenDoesNotExist"
    },
    "EmailConfirmationTokenExpired": {
      "id": 1321,
      "name": "EmailConfirmationTokenExpired"
    },
    "AccountDeleted": {
      "id": 1322,
      "name": "AccountDeleted"
    },
    "PlayerSecretNotConfigured": {
      "id": 1323,
      "name": "PlayerSecretNotConfigured"
    },
    "InvalidSignatureTime": {
      "id": 1324,
      "name": "InvalidSignatureTime"
    },
    "NoContactEmailAddressFound": {
      "id": 1325,
      "name": "NoContactEmailAddressFound"
    },
    "InvalidAuthToken": {
      "id": 1326,
      "name": "InvalidAuthToken"
    },
    "AuthTokenDoesNotExist": {
      "id": 1327,
      "name": "AuthTokenDoesNotExist"
    },
    "AuthTokenExpired": {
      "id": 1328,
      "name": "AuthTokenExpired"
    },
    "AuthTokenAlreadyUsedToResetPassword": {
      "id": 1329,
      "name": "AuthTokenAlreadyUsedToResetPassword"
    },
    "MembershipNameTooLong": {
      "id": 1330,
      "name": "MembershipNameTooLong"
    },
    "MembershipNotFound": {
      "id": 1331,
      "name": "MembershipNotFound"
    },
    "GoogleServiceAccountInvalid": {
      "id": 1332,
      "name": "GoogleServiceAccountInvalid"
    },
    "GoogleServiceAccountParseFailure": {
      "id": 1333,
      "name": "GoogleServiceAccountParseFailure"
    },
    "EntityTokenMissing": {
      "id": 1334,
      "name": "EntityTokenMissing"
    },
    "EntityTokenInvalid": {
      "id": 1335,
      "name": "EntityTokenInvalid"
    },
    "EntityTokenExpired": {
      "id": 1336,
      "name": "EntityTokenExpired"
    },
    "EntityTokenRevoked": {
      "id": 1337,
      "name": "EntityTokenRevoked"
    },
    "InvalidProductForSubscription": {
      "id": 1338,
      "name": "InvalidProductForSubscription"
    },
    "XboxInaccessible": {
      "id": 1339,
      "name": "XboxInaccessible"
    },
    "SubscriptionAlreadyTaken": {
      "id": 1340,
      "name": "SubscriptionAlreadyTaken"
    },
    "SmtpAddonNotEnabled": {
      "id": 1341,
      "name": "SmtpAddonNotEnabled"
    },
    "APIConcurrentRequestLimitExceeded": {
      "id": 1342,
      "name": "APIConcurrentRequestLimitExceeded"
    },
    "XboxRejectedXSTSExchangeRequest": {
      "id": 1343,
      "name": "XboxRejectedXSTSExchangeRequest"
    },
    "VariableNotDefined": {
      "id": 1344,
      "name": "VariableNotDefined"
    },
    "TemplateVersionNotDefined": {
      "id": 1345,
      "name": "TemplateVersionNotDefined"
    },
    "FileTooLarge": {
      "id": 1346,
      "name": "FileTooLarge"
    },
    "TitleDeleted": {
      "id": 1347,
      "name": "TitleDeleted"
    },
    "TitleContainsUserAccounts": {
      "id": 1348,
      "name": "TitleContainsUserAccounts"
    },
    "TitleDeletionPlayerCleanupFailure": {
      "id": 1349,
      "name": "TitleDeletionPlayerCleanupFailure"
    },
    "EntityFileOperationPending": {
      "id": 1350,
      "name": "EntityFileOperationPending"
    },
    "NoEntityFileOperationPending": {
      "id": 1351,
      "name": "NoEntityFileOperationPending"
    },
    "EntityProfileVersionMismatch": {
      "id": 1352,
      "name": "EntityProfileVersionMismatch"
    },
    "TemplateVersionTooOld": {
      "id": 1353,
      "name": "TemplateVersionTooOld"
    },
    "MembershipDefinitionInUse": {
      "id": 1354,
      "name": "MembershipDefinitionInUse"
    },
    "PaymentPageNotConfigured": {
      "id": 1355,
      "name": "PaymentPageNotConfigured"
    },
    "FailedLoginAttemptRateLimitExceeded": {
      "id": 1356,
      "name": "FailedLoginAttemptRateLimitExceeded"
    },
    "EntityBlockedByGroup": {
      "id": 1357,
      "name": "EntityBlockedByGroup"
    },
    "RoleDoesNotExist": {
      "id": 1358,
      "name": "RoleDoesNotExist"
    },
    "EntityIsAlreadyMember": {
      "id": 1359,
      "name": "EntityIsAlreadyMember"
    },
    "DuplicateRoleId": {
      "id": 1360,
      "name": "DuplicateRoleId"
    },
    "GroupInvitationNotFound": {
      "id": 1361,
      "name": "GroupInvitationNotFound"
    },
    "GroupApplicationNotFound": {
      "id": 1362,
      "name": "GroupApplicationNotFound"
    },
    "OutstandingInvitationAcceptedInstead": {
      "id": 1363,
      "name": "OutstandingInvitationAcceptedInstead"
    },
    "OutstandingApplicationAcceptedInstead": {
      "id": 1364,
      "name": "OutstandingApplicationAcceptedInstead"
    },
    "RoleIsGroupDefaultMember": {
      "id": 1365,
      "name": "RoleIsGroupDefaultMember"
    },
    "RoleIsGroupAdmin": {
      "id": 1366,
      "name": "RoleIsGroupAdmin"
    },
    "RoleNameNotAvailable": {
      "id": 1367,
      "name": "RoleNameNotAvailable"
    },
    "GroupNameNotAvailable": {
      "id": 1368,
      "name": "GroupNameNotAvailable"
    },
    "EmailReportAlreadySent": {
      "id": 1369,
      "name": "EmailReportAlreadySent"
    },
    "EmailReportRecipientBlacklisted": {
      "id": 1370,
      "name": "EmailReportRecipientBlacklisted"
    },
    "EventNamespaceNotAllowed": {
      "id": 1371,
      "name": "EventNamespaceNotAllowed"
    },
    "EventEntityNotAllowed": {
      "id": 1372,
      "name": "EventEntityNotAllowed"
    },
    "InvalidEntityType": {
      "id": 1373,
      "name": "InvalidEntityType"
    },
    "NullTokenResultFromAad": {
      "id": 1374,
      "name": "NullTokenResultFromAad"
    },
    "InvalidTokenResultFromAad": {
      "id": 1375,
      "name": "InvalidTokenResultFromAad"
    },
    "NoValidCertificateForAad": {
      "id": 1376,
      "name": "NoValidCertificateForAad"
    },
    "InvalidCertificateForAad": {
      "id": 1377,
      "name": "InvalidCertificateForAad"
    },
    "DuplicateDropTableId": {
      "id": 1378,
      "name": "DuplicateDropTableId"
    },
    "GameServerOk": {
      "id": 1379,
      "name": "GameServerOk"
    },
    "GameServerAccepted": {
      "id": 1380,
      "name": "GameServerAccepted"
    },
    "GameServerNoContent": {
      "id": 1381,
      "name": "GameServerNoContent"
    },
    "GameServerBadRequest": {
      "id": 1382,
      "name": "GameServerBadRequest"
    },
    "GameServerUnauthorized": {
      "id": 1383,
      "name": "GameServerUnauthorized"
    },
    "GameServerForbidden": {
      "id": 1384,
      "name": "GameServerForbidden"
    },
    "GameServerNotFound": {
      "id": 1385,
      "name": "GameServerNotFound"
    },
    "GameServerConflict": {
      "id": 1386,
      "name": "GameServerConflict"
    },
    "GameServerInternalServerError": {
      "id": 1387,
      "name": "GameServerInternalServerError"
    },
    "GameServerServiceUnavailable": {
      "id": 1388,
      "name": "GameServerServiceUnavailable"
    },
    "ExplicitContentDetected": {
      "id": 1389,
      "name": "ExplicitContentDetected"
    },
    "PIIContentDetected": {
      "id": 1390,
      "name": "PIIContentDetected"
    },
    "InvalidScheduledTaskParameter": {
      "id": 1391,
      "name": "InvalidScheduledTaskParameter"
    },
    "PerEntityEventRateLimitExceeded": {
      "id": 1392,
      "name": "PerEntityEventRateLimitExceeded"
    },
    "MatchmakingEntityInvalid": {
      "id": 2001,
      "name": "MatchmakingEntityInvalid"
    },
    "MatchmakingPlayerAttributesInvalid": {
      "id": 2002,
      "name": "MatchmakingPlayerAttributesInvalid"
    },
    "MatchmakingCreateRequestMissing": {
      "id": 2003,
      "name": "MatchmakingCreateRequestMissing"
    },
    "MatchmakingCreateRequestCreatorMissing": {
      "id": 2004,
      "name": "MatchmakingCreateRequestCreatorMissing"
    },
    "MatchmakingCreateRequestCreatorIdMissing": {
      "id": 2005,
      "name": "MatchmakingCreateRequestCreatorIdMissing"
    },
    "MatchmakingCreateRequestUserListMissing": {
      "id": 2006,
      "name": "MatchmakingCreateRequestUserListMissing"
    },
    "MatchmakingCreateRequestGiveUpAfterInvalid": {
      "id": 2007,
      "name": "MatchmakingCreateRequestGiveUpAfterInvalid"
    },
    "MatchmakingTicketIdMissing": {
      "id": 2008,
      "name": "MatchmakingTicketIdMissing"
    },
    "MatchmakingMatchIdMissing": {
      "id": 2009,
      "name": "MatchmakingMatchIdMissing"
    },
    "MatchmakingMatchIdIdMissing": {
      "id": 2010,
      "name": "MatchmakingMatchIdIdMissing"
    },
    "MatchmakingHopperIdMissing": {
      "id": 2011,
      "name": "MatchmakingHopperIdMissing"
    },
    "MatchmakingTitleIdMissing": {
      "id": 2012,
      "name": "MatchmakingTitleIdMissing"
    },
    "MatchmakingTicketIdIdMissing": {
      "id": 2013,
      "name": "MatchmakingTicketIdIdMissing"
    },
    "MatchmakingPlayerIdMissing": {
      "id": 2014,
      "name": "MatchmakingPlayerIdMissing"
    },
    "MatchmakingJoinRequestUserMissing": {
      "id": 2015,
      "name": "MatchmakingJoinRequestUserMissing"
    },
    "MatchmakingHopperConfigNotFound": {
      "id": 2016,
      "name": "MatchmakingHopperConfigNotFound"
    },
    "MatchmakingMatchNotFound": {
      "id": 2017,
      "name": "MatchmakingMatchNotFound"
    },
    "MatchmakingTicketNotFound": {
      "id": 2018,
      "name": "MatchmakingTicketNotFound"
    },
    "MatchmakingCreateTicketServerIdentityInvalid": {
      "id": 2019,
      "name": "MatchmakingCreateTicketServerIdentityInvalid"
    },
    "MatchmakingCreateTicketClientIdentityInvalid": {
      "id": 2020,
      "name": "MatchmakingCreateTicketClientIdentityInvalid"
    },
    "MatchmakingGetTicketUserMismatch": {
      "id": 2021,
      "name": "MatchmakingGetTicketUserMismatch"
    },
    "MatchmakingJoinTicketServerIdentityInvalid": {
      "id": 2022,
      "name": "MatchmakingJoinTicketServerIdentityInvalid"
    },
    "MatchmakingJoinTicketUserIdentityMismatch": {
      "id": 2023,
      "name": "MatchmakingJoinTicketUserIdentityMismatch"
    },
    "MatchmakingCancelTicketServerIdentityInvalid": {
      "id": 2024,
      "name": "MatchmakingCancelTicketServerIdentityInvalid"
    },
    "MatchmakingCancelTicketUserIdentityMismatch": {
      "id": 2025,
      "name": "MatchmakingCancelTicketUserIdentityMismatch"
    },
    "MatchmakingGetMatchIdentityMismatch": {
      "id": 2026,
      "name": "MatchmakingGetMatchIdentityMismatch"
    },
    "MatchmakingPlayerIdentityMismatch": {
      "id": 2027,
      "name": "MatchmakingPlayerIdentityMismatch"
    },
    "MatchmakingAlreadyJoinedTicket": {
      "id": 2028,
      "name": "MatchmakingAlreadyJoinedTicket"
    },
    "MatchmakingTicketAlreadyCompleted": {
      "id": 2029,
      "name": "MatchmakingTicketAlreadyCompleted"
    },
    "MatchmakingHopperIdInvalid": {
      "id": 2030,
      "name": "MatchmakingHopperIdInvalid"
    },
    "MatchmakingHopperConfigInvalid": {
      "id": 2031,
      "name": "MatchmakingHopperConfigInvalid"
    },
    "MatchmakingMemberProfileInvalid": {
      "id": 2032,
      "name": "MatchmakingMemberProfileInvalid"
    },
    "WriteAttemptedDuringExport": {
      "id": 2033,
      "name": "WriteAttemptedDuringExport"
    }
  }
}