{
  "swagger": "2.0",
  "info": {
    "version": "190501",
    "title": "PlayFab Multiplayer API",
    "description": "API methods for managing multiplayer servers. API methods for managing parties.",
    "termsOfService": "https://playfab.com/terms/",
    "contact": {
      "url": "https://community.playfab.com/index.html"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://github.com/PlayFab/API_Specs/blob/master/LICENSE"
    }
  },
  "host": "titleId.playfabapi.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/Match/CancelAllMatchmakingTicketsForPlayer": {
      "post": {
        "operationId": "CancelAllMatchmakingTicketsForPlayer",
        "tags": [
          "Matchmaking"
        ],
        "description": "Cancel all active tickets the player is a member of in a given queue.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/CancelAllMatchmakingTicketsForPlayer"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CancelAllMatchmakingTicketsForPlayerRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CancelAllMatchmakingTicketsForPlayerResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Cancels all tickets of which the player is a member in a given queue that are not cancelled or matched. This API is useful if you lose track of what tickets the player is a member of (if the title crashes for instance) and want to \"reset\". The Entity field is optional if the caller is a player and defaults to that player. Players may not cancel tickets for other people. The Entity field is required if the caller is a server (authenticated as the title).",
        "x-ms-docs-errors": [
          "MatchmakingEntityInvalid",
          "MatchmakingQueueNotFound",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/CancelMatchmakingTicket": {
      "post": {
        "operationId": "CancelMatchmakingTicket",
        "tags": [
          "Matchmaking"
        ],
        "description": "Cancel a matchmaking ticket.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/CancelMatchmakingTicket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CancelMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CancelMatchmakingTicketResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Only servers and ticket members can cancel a ticket. The ticket can be in five different states when it is cancelled. 1: the ticket is waiting for members to join it, and it has not started matching. If the ticket is cancelled at this stage, it will never match. 2: the ticket is matching. If the ticket is cancelled, it will stop matching. 3: the ticket is matched. A matched ticket cannot be cancelled. 4: the ticket is already cancelled and nothing happens. 5: the ticket is waiting for a server. If the ticket is cancelled, server allocation will be stopped. A server may still be allocated due to a race condition, but that will not be reflected in the ticket. There may be race conditions between the ticket getting matched and the client making a cancellation request. The client must handle the possibility that the cancel request fails if a match is found before the cancellation request is processed. We do not allow resubmitting a cancelled ticket because players must consent to enter matchmaking again. Create a new ticket instead.",
        "x-ms-docs-errors": [
          "MatchmakingEntityInvalid",
          "MatchmakingPlayerHasNotJoinedTicket",
          "MatchmakingQueueNotFound",
          "MatchmakingTicketAlreadyCompleted",
          "MatchmakingTicketNotFound",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/CreateMatchmakingTicket": {
      "post": {
        "operationId": "CreateMatchmakingTicket",
        "tags": [
          "Matchmaking"
        ],
        "description": "Create a matchmaking ticket as a client.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/CreateMatchmakingTicket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateMatchmakingTicketResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The client specifies the creator's attributes and optionally a list of other users to match with.",
        "x-ms-docs-errors": [
          "MatchmakingAttributeInvalid",
          "MatchmakingEntityInvalid",
          "MatchmakingNumberOfPlayersInTicketTooLarge",
          "MatchmakingPlayerAttributesInvalid",
          "MatchmakingPlayerAttributesTooLarge",
          "MatchmakingQueueNotFound",
          "MatchmakingRateLimitExceeded",
          "MatchmakingTicketMembershipLimitExceeded",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/CreateServerMatchmakingTicket": {
      "post": {
        "operationId": "CreateServerMatchmakingTicket",
        "tags": [
          "Matchmaking"
        ],
        "description": "Create a matchmaking ticket as a server. The matchmaking service automatically starts matching the ticket against other matchmaking tickets.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/CreateServerMatchmakingTicket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateServerMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateMatchmakingTicketResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The server specifies all the members and their attributes.",
        "x-ms-docs-errors": [
          "MatchmakingAttributeInvalid",
          "MatchmakingEntityInvalid",
          "MatchmakingMemberProfileInvalid",
          "MatchmakingNumberOfPlayersInTicketTooLarge",
          "MatchmakingPlayerAttributesInvalid",
          "MatchmakingPlayerAttributesTooLarge",
          "MatchmakingQueueNotFound",
          "MatchmakingRateLimitExceeded",
          "MatchmakingTicketMembershipLimitExceeded",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/GetMatch": {
      "post": {
        "operationId": "GetMatch",
        "tags": [
          "Matchmaking"
        ],
        "description": "Get a match.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/GetMatch"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetMatchRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetMatchResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "When matchmaking has successfully matched together a collection of tickets, it produces a 'match' with an Id. The match contains all of the players that were matched together, and their team assigments. Only servers and ticket members can get the match.",
        "x-ms-docs-errors": [
          "MatchmakingEntityInvalid",
          "MatchmakingMatchNotFound",
          "MatchmakingQueueNotFound",
          "MatchmakingRateLimitExceeded",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/GetMatchmakingTicket": {
      "post": {
        "operationId": "GetMatchmakingTicket",
        "tags": [
          "Matchmaking"
        ],
        "description": "Get a matchmaking ticket by ticket Id.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/GetMatchmakingTicket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetMatchmakingTicketResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The ticket includes the invited players, their attributes if they have joined, the ticket status, the match Id when applicable, etc. Only servers, the ticket creator and the invited players can get the ticket.",
        "x-ms-docs-errors": [
          "MatchmakingEntityInvalid",
          "MatchmakingQueueNotFound",
          "MatchmakingRateLimitExceeded",
          "MatchmakingTicketNotFound",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/GetQueueStatistics": {
      "post": {
        "operationId": "GetQueueStatistics",
        "tags": [
          "Matchmaking"
        ],
        "description": "Get the statistics for a queue.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/GetQueueStatistics"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetQueueStatisticsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetQueueStatisticsResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns the matchmaking statistics for a queue. These include the number of players matching and the statistics related to the time to match statistics in seconds (average and percentiles). Statistics are refreshed once every 5 minutes. Servers can access all statistics no matter what the ClientStatisticsVisibility is configured to. Clients can access statistics according to the ClientStatisticsVisibility. Client requests are forbidden if all visibility fields are false.",
        "x-ms-docs-errors": [
          "MatchmakingEntityInvalid",
          "MatchmakingQueueNotFound",
          "MatchmakingRateLimitExceeded",
          "MatchmakingUnauthorized",
          "NotAuthorized"
        ]
      }
    },
    "/Match/JoinMatchmakingTicket": {
      "post": {
        "operationId": "JoinMatchmakingTicket",
        "tags": [
          "Matchmaking"
        ],
        "description": "Join a matchmaking ticket.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/JoinMatchmakingTicket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/JoinMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JoinMatchmakingTicketResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Add the player to a matchmaking ticket and specify all of its matchmaking attributes. Players can join a ticket if and only if their EntityKeys are already listed in the ticket's Members list. The matchmaking service automatically starts matching the ticket against other matchmaking tickets once all players have joined the ticket. It is not possible to join a ticket once it has started matching.",
        "x-ms-docs-errors": [
          "MatchmakingAlreadyJoinedTicket",
          "MatchmakingAttributeInvalid",
          "MatchmakingEntityInvalid",
          "MatchmakingMemberProfileInvalid",
          "MatchmakingPlayerAttributesInvalid",
          "MatchmakingPlayerAttributesTooLarge",
          "MatchmakingQueueNotFound",
          "MatchmakingRateLimitExceeded",
          "MatchmakingTicketAlreadyCompleted",
          "MatchmakingTicketMembershipLimitExceeded",
          "MatchmakingTicketNotFound",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/ListMatchmakingTicketsForPlayer": {
      "post": {
        "operationId": "ListMatchmakingTicketsForPlayer",
        "tags": [
          "Matchmaking"
        ],
        "description": "List all matchmaking ticket Ids the user is a member of.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/ListMatchmakingTicketsForPlayer"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListMatchmakingTicketsForPlayerRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListMatchmakingTicketsForPlayerResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "If the caller is a title, the EntityKey in the request is required. If the caller is a player, then it is optional. If it is provided it must match the caller's entity.",
        "x-ms-docs-errors": [
          "MatchmakingEntityInvalid",
          "MatchmakingQueueNotFound",
          "MatchmakingRateLimitExceeded",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/MultiplayerServer/CreateBuildWithCustomContainer": {
      "post": {
        "operationId": "CreateBuildWithCustomContainer",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Creates a multiplayer server build with a custom container.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/CreateBuildWithCustomContainer"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateBuildWithCustomContainerRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateBuildWithCustomContainerResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Creates a multiplayer server build with a custom container and returns information about the build creation request.",
        "x-seeAlso": [
          "MultiplayerServer/CreateBuildWithManagedContainer",
          "MultiplayerServer/DeleteBuild",
          "MultiplayerServer/GetBuild",
          "MultiplayerServer/ListBuildSummaries"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerUnauthorized"
        ]
      }
    },
    "/MultiplayerServer/CreateBuildWithManagedContainer": {
      "post": {
        "operationId": "CreateBuildWithManagedContainer",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Creates a multiplayer server build with a managed container.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/CreateBuildWithManagedContainer"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateBuildWithManagedContainerRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateBuildWithManagedContainerResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Creates a multiplayer server build with a managed container and returns information about the build creation request.",
        "x-seeAlso": [
          "MultiplayerServer/DeleteBuild",
          "MultiplayerServer/GetBuild",
          "MultiplayerServer/ListBuildSummaries"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerUnauthorized"
        ]
      }
    },
    "/MultiplayerServer/CreateRemoteUser": {
      "post": {
        "operationId": "CreateRemoteUser",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Creates a remote user to log on to a VM for a multiplayer server build.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/CreateRemoteUser"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateRemoteUserRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateRemoteUserResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Creates a remote user to log on to a VM for a multiplayer server build in a specific region. Returns user credential information necessary to log on.",
        "x-seeAlso": [
          "MultiplayerServer/DeleteRemoteUser",
          "MultiplayerServer/GetRemoteLoginEndpoint"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNoContent",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/DeleteAsset": {
      "post": {
        "operationId": "DeleteAsset",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Deletes a multiplayer server game asset for a title.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/DeleteAsset"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteAssetRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EmptyResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Deletes a multiplayer server game asset for a title.",
        "x-seeAlso": [
          "MultiplayerServer/GetAssetUploadUrl",
          "MultiplayerServer/ListAssetSummaries"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNoContent",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/DeleteBuild": {
      "post": {
        "operationId": "DeleteBuild",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Deletes a multiplayer server build.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/DeleteBuild"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteBuildRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EmptyResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Deletes a multiplayer server build.",
        "x-seeAlso": [
          "MultiplayerServer/CreateBuildWithManagedContainer",
          "MultiplayerServer/GetBuild",
          "MultiplayerServer/ListBuildSummaries"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized"
        ]
      }
    },
    "/MultiplayerServer/DeleteCertificate": {
      "post": {
        "operationId": "DeleteCertificate",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Deletes a multiplayer server game certificate.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/DeleteCertificate"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteCertificateRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EmptyResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Deletes a multiplayer server game certificate.",
        "x-seeAlso": [
          "MultiplayerServer/ListCertificateSummaries",
          "MultiplayerServer/UploadCertificate"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNoContent",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/DeleteRemoteUser": {
      "post": {
        "operationId": "DeleteRemoteUser",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Deletes a remote user to log on to a VM for a multiplayer server build.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/DeleteRemoteUser"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteRemoteUserRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EmptyResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Deletes a remote user to log on to a VM for a multiplayer server build in a specific region. Returns user credential information necessary to log on.",
        "x-seeAlso": [
          "MultiplayerServer/CreateRemoteUser",
          "MultiplayerServer/GetRemoteLoginEndpoint"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNoContent",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/EnableMultiplayerServersForTitle": {
      "post": {
        "operationId": "EnableMultiplayerServersForTitle",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Enables the multiplayer server feature for a title.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/EnableMultiplayerServersForTitle"
        },
        "parameters": [
          {
            "$ref": "#/parameters/EnableMultiplayerServersForTitleRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EnableMultiplayerServersForTitleResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Enables the multiplayer server feature for a title and returns the enabled status. The enabled status can be Initializing, Enabled, and Disabled. It can up to 20 minutes or more for the title to be enabled for the feature. On average, it can take up to 20 minutes for the title to be enabled for the feature.",
        "x-seeAlso": [
          "MultiplayerServer/GetTitleEnabledForMultiplayerServersStatus"
        ],
        "x-ms-docs-errors": [
          "CannotEnableMultiplayerServersForTitle",
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerUnauthorized"
        ]
      }
    },
    "/MultiplayerServer/GetAssetUploadUrl": {
      "post": {
        "operationId": "GetAssetUploadUrl",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Gets the URL to upload assets to.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/GetAssetUploadUrl"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetAssetUploadUrlRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetAssetUploadUrlResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Gets the URL to upload assets to.",
        "x-seeAlso": [
          "MultiplayerServer/ListAssetSummaries",
          "MultiplayerServer/ListCertificateSummaries",
          "MultiplayerServer/UploadCertificate"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNoContent",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/GetBuild": {
      "post": {
        "operationId": "GetBuild",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Gets a multiplayer server build.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/GetBuild"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetBuildRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetBuildResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns the details about a multiplayer server build.",
        "x-seeAlso": [
          "MultiplayerServer/CreateBuildWithManagedContainer",
          "MultiplayerServer/DeleteBuild",
          "MultiplayerServer/ListBuildSummaries"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerUnauthorized"
        ]
      }
    },
    "/MultiplayerServer/GetContainerRegistryCredentials": {
      "post": {
        "operationId": "GetContainerRegistryCredentials",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Gets the credentials to the container registry.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/GetContainerRegistryCredentials"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetContainerRegistryCredentialsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetContainerRegistryCredentialsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Gets credentials to the container registry where game developers can upload custom container images to before creating a new build.",
        "x-seeAlso": [
          "MultiplayerServer/CreateBuildWithCustomContainer",
          "MultiplayerServer/RolloverContainerRegistryCredentials"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNoContent",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/GetMultiplayerServerDetails": {
      "post": {
        "operationId": "GetMultiplayerServerDetails",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Gets multiplayer server session details for a build.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/GetMultiplayerServerDetails"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetMultiplayerServerDetailsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetMultiplayerServerDetailsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Gets multiplayer server session details for a build in a specific region.",
        "x-seeAlso": [
          "MultiplayerServer/RequestMultiplayerServer"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/GetRemoteLoginEndpoint": {
      "post": {
        "operationId": "GetRemoteLoginEndpoint",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Gets a remote login endpoint to a VM that is hosting a multiplayer server build.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/GetRemoteLoginEndpoint"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetRemoteLoginEndpointRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetRemoteLoginEndpointResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Gets a remote login endpoint to a VM that is hosting a multiplayer server build in a specific region.",
        "x-seeAlso": [
          "MultiplayerServer/CreateRemoteUser"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNoContent",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/GetTitleEnabledForMultiplayerServersStatus": {
      "post": {
        "operationId": "GetTitleEnabledForMultiplayerServersStatus",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Gets the status of whether a title is enabled for the multiplayer server feature.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/GetTitleEnabledForMultiplayerServersStatus"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetTitleEnabledForMultiplayerServersStatusRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetTitleEnabledForMultiplayerServersStatusResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Gets the status of whether a title is enabled for the multiplayer server feature. The enabled status can be Initializing, Enabled, and Disabled.",
        "x-seeAlso": [
          "MultiplayerServer/EnableMultiplayerServersForTitle"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerUnauthorized"
        ]
      }
    },
    "/MultiplayerServer/ListArchivedMultiplayerServers": {
      "post": {
        "operationId": "ListArchivedMultiplayerServers",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Lists archived multiplayer server sessions for a build.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/ListArchivedMultiplayerServers"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListMultiplayerServersRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListMultiplayerServersResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns a list of archived multiplayer servers for a build in a specific region.",
        "x-seeAlso": [
          "MultiplayerServer/RequestMultiplayerServer"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/ListAssetSummaries": {
      "post": {
        "operationId": "ListAssetSummaries",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Lists multiplayer server game assets for a title.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/ListAssetSummaries"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListAssetSummariesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListAssetSummariesResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns a list of multiplayer server game asset summaries for a title.",
        "x-seeAlso": [
          "MultiplayerServer/GetAssetUploadUrl",
          "MultiplayerServer/ListCertificateSummaries",
          "MultiplayerServer/UploadCertificate"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNoContent",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/ListBuildSummaries": {
      "post": {
        "operationId": "ListBuildSummaries",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Lists summarized details of all multiplayer server builds for a title.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/ListBuildSummaries"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListBuildSummariesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListBuildSummariesResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns a list of summarized details of all multiplayer server builds for a title.",
        "x-seeAlso": [
          "MultiplayerServer/CreateBuildWithManagedContainer",
          "MultiplayerServer/DeleteBuild",
          "MultiplayerServer/GetBuild"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerUnauthorized"
        ]
      }
    },
    "/MultiplayerServer/ListCertificateSummaries": {
      "post": {
        "operationId": "ListCertificateSummaries",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Lists multiplayer server game certificates for a title.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/ListCertificateSummaries"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListCertificateSummariesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListCertificateSummariesResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns a list of multiplayer server game certificates for a title.",
        "x-seeAlso": [
          "MultiplayerServer/DeleteCertificate",
          "MultiplayerServer/UploadCertificate"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNoContent",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/ListContainerImages": {
      "post": {
        "operationId": "ListContainerImages",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Lists custom container images for a title.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/ListContainerImages"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListContainerImagesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListContainerImagesResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns a list of the container images that have been uploaded to the container registry for a title.",
        "x-seeAlso": [
          "MultiplayerServer/GetContainerRegistryCredentials",
          "MultiplayerServer/ListContainerImageTags"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNoContent",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/ListContainerImageTags": {
      "post": {
        "operationId": "ListContainerImageTags",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Lists the tags for a custom container image.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/ListContainerImageTags"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListContainerImageTagsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListContainerImageTagsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns a list of the tags for a particular container image that exists in the container registry for a title.",
        "x-seeAlso": [
          "MultiplayerServer/ListContainerImages"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNoContent",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/ListMultiplayerServers": {
      "post": {
        "operationId": "ListMultiplayerServers",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Lists multiplayer server sessions for a build.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/ListMultiplayerServers"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListMultiplayerServersRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListMultiplayerServersResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns a list of multiplayer servers for a build in a specific region.",
        "x-seeAlso": [
          "MultiplayerServer/RequestMultiplayerServer"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/ListQosServers": {
      "post": {
        "operationId": "ListQosServers",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Lists quality of service servers.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/ListQosServers"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListQosServersRequest"
          }
        ],
        "security": [
          {
            "None": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListQosServersResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns a list of quality of service servers.",
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerUnauthorized"
        ]
      }
    },
    "/MultiplayerServer/ListVirtualMachineSummaries": {
      "post": {
        "operationId": "ListVirtualMachineSummaries",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Lists virtual machines for a title.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/ListVirtualMachineSummaries"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListVirtualMachineSummariesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListVirtualMachineSummariesResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns a list of virtual machines for a title.",
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/RequestMultiplayerServer": {
      "post": {
        "operationId": "RequestMultiplayerServer",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Request a multiplayer server session. Accepts tokens for title and if game client accesss is enabled, allows game client to request a server with player entity token.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/RequestMultiplayerServer"
        },
        "parameters": [
          {
            "$ref": "#/parameters/RequestMultiplayerServerRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RequestMultiplayerServerResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Requests a multiplayer server session from a particular build in any of the given preferred regions.",
        "x-seeAlso": [
          "MultiplayerServer/GetMultiplayerServerDetails"
        ],
        "x-ms-docs-errors": [
          "APINotEnabledForGameClientAccess",
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/RolloverContainerRegistryCredentials": {
      "post": {
        "operationId": "RolloverContainerRegistryCredentials",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Rolls over the credentials to the container registry.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/RolloverContainerRegistryCredentials"
        },
        "parameters": [
          {
            "$ref": "#/parameters/RolloverContainerRegistryCredentialsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RolloverContainerRegistryCredentialsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Gets new credentials to the container registry where game developers can upload custom container images to before creating a new build.",
        "x-seeAlso": [
          "MultiplayerServer/GetContainerRegistryCredentials"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNoContent",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/ShutdownMultiplayerServer": {
      "post": {
        "operationId": "ShutdownMultiplayerServer",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Shuts down a multiplayer server session.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/ShutdownMultiplayerServer"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ShutdownMultiplayerServerRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EmptyResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Executes the shutdown callback from the GSDK and terminates the multiplayer server session. The callback in the GSDK will allow for graceful shutdown with a 15 minute timeoutIf graceful shutdown has not been completed before 15 minutes have elapsed, the multiplayer server session will be forcefully terminated on it's own.",
        "x-seeAlso": [
          "MultiplayerServer/GetMultiplayerServerDetails",
          "MultiplayerServer/RequestMultiplayerServer"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNoContent",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized"
        ]
      }
    },
    "/MultiplayerServer/UpdateBuildRegions": {
      "post": {
        "operationId": "UpdateBuildRegions",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Updates a multiplayer server build's regions.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/UpdateBuildRegions"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UpdateBuildRegionsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EmptyResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Updates a multiplayer server build's regions.",
        "x-seeAlso": [
          "MultiplayerServer/DeleteBuild",
          "MultiplayerServer/GetBuild",
          "MultiplayerServer/ListBuildSummaries"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerUnauthorized"
        ]
      }
    },
    "/MultiplayerServer/UploadCertificate": {
      "post": {
        "operationId": "UploadCertificate",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Uploads a multiplayer server game certificate.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/UploadCertificate"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UploadCertificateRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EmptyResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Uploads a multiplayer server game certificate.",
        "x-seeAlso": [
          "MultiplayerServer/DeleteCertificate",
          "MultiplayerServer/ListCertificateSummaries"
        ],
        "x-ms-docs-errors": [
          "MultiplayerServerBadRequest",
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNoContent",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    }
  },
  "definitions": {
    "ApiErrorWrapper": {
      "description": "The basic wrapper around every failed API response",
      "type": "object",
      "properties": {
        "code": {
          "description": "Numerical HTTP code",
          "type": "number",
          "x-actualtype": "int32"
        },
        "status": {
          "description": "String HTTP code",
          "type": "string"
        },
        "error": {
          "description": "Playfab error code",
          "type": "string"
        },
        "errorCode": {
          "description": "Numerical Playfab error code",
          "type": "number",
          "x-actualtype": "int32"
        },
        "errorMessage": {
          "description": "Description for the Playfab errorCode",
          "type": "string"
        },
        "errorDetails": {
          "description": "Detailed description of individual issues with the request object",
          "type": "object"
        }
      }
    },
    "AssetReference": {
      "type": "object",
      "properties": {
        "FileName": {
          "description": "The asset's file name. This is a filename with the .zip, .tar, or .tar.gz extension.",
          "type": "string"
        },
        "MountPath": {
          "description": "The asset's mount path.",
          "type": "string"
        }
      }
    },
    "AssetReferenceParams": {
      "type": "object",
      "properties": {
        "FileName": {
          "description": "The asset's file name.",
          "type": "string"
        },
        "MountPath": {
          "description": "The asset's mount path.",
          "type": "string"
        }
      },
      "required": [
        "FileName",
        "MountPath"
      ]
    },
    "AssetSummary": {
      "type": "object",
      "properties": {
        "FileName": {
          "description": "The asset's file name. This is a filename with the .zip, .tar, or .tar.gz extension.",
          "type": "string"
        },
        "Metadata": {
          "description": "The metadata associated with the asset.",
          "type": "object"
        }
      }
    },
    "AzureRegion": {
      "type": "object",
      "enum": [
        "AustraliaEast",
        "AustraliaSoutheast",
        "BrazilSouth",
        "CentralUs",
        "EastAsia",
        "EastUs",
        "EastUs2",
        "JapanEast",
        "JapanWest",
        "NorthCentralUs",
        "NorthEurope",
        "SouthCentralUs",
        "SoutheastAsia",
        "WestEurope",
        "WestUs",
        "ChinaEast2",
        "ChinaNorth2"
      ]
    },
    "AzureVmSize": {
      "type": "object",
      "enum": [
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_A1_v2",
        "Standard_A2_v2",
        "Standard_A4_v2",
        "Standard_A8_v2",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_F2s_v2",
        "Standard_F4s_v2",
        "Standard_F8s_v2",
        "Standard_F16s_v2",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4"
      ]
    },
    "BuildRegion": {
      "type": "object",
      "properties": {
        "CurrentServerStats": {
          "$ref": "#/definitions/CurrentServerStats",
          "description": "The current multiplayer server stats for the region.",
          "type": "object",
          "x-isclass": true
        },
        "MaxServers": {
          "description": "The maximum number of multiplayer servers for the region.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The build region.",
          "type": "string",
          "x-isenum": true
        },
        "StandbyServers": {
          "description": "The number of standby multiplayer servers for the region.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Status": {
          "description": "The status of multiplayer servers in the build region. Valid values are - Unknown, Initialized, Deploying, Deployed, Unhealthy.",
          "type": "string"
        }
      },
      "required": [
        "MaxServers",
        "StandbyServers"
      ]
    },
    "BuildRegionParams": {
      "type": "object",
      "properties": {
        "MaxServers": {
          "description": "The maximum number of multiplayer servers for the region.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The build region.",
          "type": "string",
          "x-isenum": true
        },
        "StandbyServers": {
          "description": "The number of standby multiplayer servers for the region.",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "Region",
        "MaxServers",
        "StandbyServers"
      ]
    },
    "BuildSummary": {
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID of the build.",
          "type": "string"
        },
        "BuildName": {
          "description": "The build name.",
          "type": "string"
        },
        "CreationTime": {
          "description": "The time the build was created in UTC.",
          "type": "string"
        },
        "Metadata": {
          "description": "The metadata of the build.",
          "type": "object"
        },
        "RegionConfigurations": {
          "description": "The configuration and status for each region in the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildRegion"
          },
          "x-isclass": true
        }
      }
    },
    "CancelAllMatchmakingTicketsForPlayerRequest": {
      "description": "Cancels all tickets of which the player is a member in a given queue that are not cancelled or matched. This API is useful if you lose track of what tickets the player is a member of (if the title crashes for instance) and want to \"reset\". The Entity field is optional if the caller is a player and defaults to that player. Players may not cancel tickets for other people. The Entity field is required if the caller is a server (authenticated as the title).",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity key of the player whose tickets should be canceled.",
          "type": "object",
          "x-isclass": true
        },
        "QueueName": {
          "description": "The name of the queue from which a player's tickets should be canceled.",
          "type": "string"
        }
      },
      "required": [
        "QueueName"
      ],
      "example": {
        "Entity": {
          "Id": "123123123",
          "Type": "title_player_acount",
          "TypeString": "title_player_acount"
        },
        "QueueName": "custom123"
      }
    },
    "CancelAllMatchmakingTicketsForPlayerResult": {
      "type": "object",
      "properties": {},
      "example": {}
    },
    "CancellationReason": {
      "type": "object",
      "enum": [
        "Requested",
        "Internal",
        "Timeout"
      ]
    },
    "CancelMatchmakingTicketRequest": {
      "description": "Only servers and ticket members can cancel a ticket. The ticket can be in five different states when it is cancelled. 1: the ticket is waiting for members to join it, and it has not started matching. If the ticket is cancelled at this stage, it will never match. 2: the ticket is matching. If the ticket is cancelled, it will stop matching. 3: the ticket is matched. A matched ticket cannot be cancelled. 4: the ticket is already cancelled and nothing happens. 5: the ticket is waiting for a server. If the ticket is cancelled, server allocation will be stopped. A server may still be allocated due to a race condition, but that will not be reflected in the ticket. There may be race conditions between the ticket getting matched and the client making a cancellation request. The client must handle the possibility that the cancel request fails if a match is found before the cancellation request is processed. We do not allow resubmitting a cancelled ticket because players must consent to enter matchmaking again. Create a new ticket instead.",
      "type": "object",
      "properties": {
        "QueueName": {
          "description": "The name of the queue the ticket is in.",
          "type": "string"
        },
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "TicketId",
        "QueueName"
      ],
      "example": {
        "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
        "QueueName": "custom123"
      }
    },
    "CancelMatchmakingTicketResult": {
      "type": "object",
      "properties": {},
      "example": {}
    },
    "Certificate": {
      "type": "object",
      "properties": {
        "Base64EncodedValue": {
          "description": "Base64 encoded string contents of the certificate.",
          "type": "string"
        },
        "Name": {
          "description": "A name for the certificate. This is used to reference certificates in build configurations.",
          "type": "string"
        },
        "Password": {
          "description": "If required for your PFX certificate, use this field to provide a password that will be used to install the certificate on the container.",
          "type": "string"
        }
      },
      "required": [
        "Name",
        "Base64EncodedValue"
      ]
    },
    "CertificateSummary": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name of the certificate.",
          "type": "string"
        },
        "Thumbprint": {
          "description": "The thumbprint for the certificate.",
          "type": "string"
        }
      }
    },
    "ConnectedPlayer": {
      "type": "object",
      "properties": {
        "PlayerId": {
          "description": "The player ID of the player connected to the multiplayer server.",
          "type": "string"
        }
      }
    },
    "ContainerFlavor": {
      "type": "object",
      "enum": [
        "ManagedWindowsServerCore",
        "CustomLinux",
        "ManagedWindowsServerCorePreview"
      ]
    },
    "ContainerImageReference": {
      "type": "object",
      "properties": {
        "ImageName": {
          "description": "The container image name.",
          "type": "string"
        },
        "Tag": {
          "description": "The container tag.",
          "type": "string"
        }
      },
      "required": [
        "ImageName"
      ]
    },
    "CreateBuildWithCustomContainerRequest": {
      "description": "Creates a multiplayer server build with a custom container and returns information about the build creation request.",
      "type": "object",
      "properties": {
        "BuildName": {
          "description": "The build name.",
          "type": "string"
        },
        "ContainerFlavor": {
          "$ref": "#/definitions/ContainerFlavor",
          "description": "The flavor of container to create a build from.",
          "type": "string",
          "x-isenum": true
        },
        "ContainerRepositoryName": {
          "description": "The name of the container repository.",
          "type": "string"
        },
        "ContainerRunCommand": {
          "description": "The container command to run when the multiplayer server has been allocated, including any arguments.",
          "type": "string"
        },
        "ContainerTag": {
          "description": "The tag for the container.",
          "type": "string"
        },
        "GameAssetReferences": {
          "description": "The list of game assets related to the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetReferenceParams"
          },
          "x-isclass": true
        },
        "GameCertificateReferences": {
          "description": "The game certificates for the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GameCertificateReferenceParams"
          },
          "x-isclass": true
        },
        "Metadata": {
          "description": "Metadata to tag the build. The keys are case insensitive. The build metadata is made available to the server through Game Server SDK (GSDK).",
          "type": "object"
        },
        "MultiplayerServerCountPerVm": {
          "description": "The number of multiplayer servers to host on a single VM.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Ports": {
          "description": "The ports to map the build on.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          },
          "x-isclass": true
        },
        "RegionConfigurations": {
          "description": "The region configurations for the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildRegionParams"
          },
          "x-isclass": true
        },
        "VmSize": {
          "$ref": "#/definitions/AzureVmSize",
          "description": "The VM size to create the build on.",
          "type": "string",
          "x-isenum": true
        }
      },
      "required": [
        "ContainerRepositoryName",
        "BuildName",
        "MultiplayerServerCountPerVm",
        "Ports",
        "RegionConfigurations"
      ],
      "example": {
        "ContainerRunCommand": "/data/Assets -startserver",
        "GameAssetReferences": [
          {
            "FileName": "gameserver.zip",
            "MountPath": "/data/Assets"
          }
        ],
        "ContainerRepositoryName": "ContainerRepositoryName",
        "ContainerTag": "ContainerTag",
        "ContainerFlavor": "CustomLinux",
        "BuildName": "GameBuildName",
        "Metadata": {
          "MetadataKey": "MetadataValue"
        },
        "VmSize": "Standard_D2_v2",
        "MultiplayerServerCountPerVm": 10,
        "Ports": [
          {
            "Name": "PortName",
            "Num": 1243
          }
        ],
        "RegionConfigurations": [
          {
            "Region": "EastUs",
            "MaxServers": 10,
            "StandbyServers": 5
          },
          {
            "Region": "WestUs",
            "MaxServers": 12,
            "StandbyServers": 8
          },
          {
            "Region": "NorthEurope",
            "MaxServers": 7,
            "StandbyServers": 3
          }
        ],
        "GameCertificateReferences": [
          {
            "Name": "CertName",
            "GsdkAlias": "CertGsdkAlias"
          }
        ]
      }
    },
    "CreateBuildWithCustomContainerResponse": {
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID. Must be unique for every build.",
          "type": "string"
        },
        "BuildName": {
          "description": "The build name.",
          "type": "string"
        },
        "ContainerFlavor": {
          "$ref": "#/definitions/ContainerFlavor",
          "description": "The flavor of container of the build.",
          "type": "string",
          "x-isenum": true
        },
        "ContainerRunCommand": {
          "description": "The container command to run when the multiplayer server has been allocated, including any arguments.",
          "type": "string"
        },
        "CreationTime": {
          "description": "The time the build was created in UTC.",
          "type": "string"
        },
        "CustomGameContainerImage": {
          "$ref": "#/definitions/ContainerImageReference",
          "description": "The custom game container image reference information.",
          "type": "object",
          "x-isclass": true
        },
        "GameAssetReferences": {
          "description": "The game assets for the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetReference"
          },
          "x-isclass": true
        },
        "GameCertificateReferences": {
          "description": "The game certificates for the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GameCertificateReference"
          },
          "x-isclass": true
        },
        "Metadata": {
          "description": "The metadata of the build.",
          "type": "object"
        },
        "MultiplayerServerCountPerVm": {
          "description": "The number of multiplayer servers to host on a single VM of the build.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Ports": {
          "description": "The ports the build is mapped on.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          },
          "x-isclass": true
        },
        "RegionConfigurations": {
          "description": "The region configuration for the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildRegion"
          },
          "x-isclass": true
        },
        "VmSize": {
          "$ref": "#/definitions/AzureVmSize",
          "description": "The VM size the build was created on.",
          "type": "string",
          "x-isenum": true
        }
      },
      "required": [
        "MultiplayerServerCountPerVm"
      ],
      "example": {
        "ContainerRunCommand": "/data/Assets -startserver",
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
        "BuildName": "GameBuildName",
        "CreationTime": "2014-04-07T09:04:28",
        "Metadata": {
          "MetadataKey": "MetadataValue"
        },
        "VmSize": "Standard_D2_v2",
        "ContainerFlavor": "CustomLinux",
        "Ports": [
          {
            "Name": "PortName",
            "Num": 1243
          }
        ],
        "RegionConfigurations": [
          {
            "Region": "EastUs",
            "Status": "Initialized",
            "MaxServers": 10,
            "StandbyServers": 5
          },
          {
            "Region": "WestUs",
            "Status": "Deployed",
            "MaxServers": 12,
            "StandbyServers": 8
          },
          {
            "Region": "NorthEurope",
            "Status": "Unhealthy",
            "MaxServers": 7,
            "StandbyServers": 3
          }
        ],
        "GameAssetReferences": [
          {
            "FileName": "gameserver.zip",
            "MountPath": "/data/Assets"
          }
        ],
        "GameCertificateReferences": [
          {
            "Name": "CertName",
            "GsdkAlias": "CertGsdkAlias"
          }
        ],
        "MultiplayerServerCountPerVm": 10
      }
    },
    "CreateBuildWithManagedContainerRequest": {
      "description": "Creates a multiplayer server build with a managed container and returns information about the build creation request.",
      "type": "object",
      "properties": {
        "BuildName": {
          "description": "The build name.",
          "type": "string"
        },
        "ContainerFlavor": {
          "$ref": "#/definitions/ContainerFlavor",
          "description": "The flavor of container to create a build from.",
          "type": "string",
          "x-isenum": true
        },
        "GameAssetReferences": {
          "description": "The list of game assets related to the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetReferenceParams"
          },
          "x-isclass": true
        },
        "GameCertificateReferences": {
          "description": "The game certificates for the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GameCertificateReferenceParams"
          },
          "x-isclass": true
        },
        "Metadata": {
          "description": "Metadata to tag the build. The keys are case insensitive. The build metadata is made available to the server through Game Server SDK (GSDK).",
          "type": "object"
        },
        "MultiplayerServerCountPerVm": {
          "description": "The number of multiplayer servers to host on a single VM.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Ports": {
          "description": "The ports to map the build on.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          },
          "x-isclass": true
        },
        "RegionConfigurations": {
          "description": "The region configurations for the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildRegionParams"
          },
          "x-isclass": true
        },
        "StartMultiplayerServerCommand": {
          "description": "The command to run when the multiplayer server is started, including any arguments.",
          "type": "string"
        },
        "VmSize": {
          "$ref": "#/definitions/AzureVmSize",
          "description": "The VM size to create the build on.",
          "type": "string",
          "x-isenum": true
        }
      },
      "required": [
        "StartMultiplayerServerCommand",
        "GameAssetReferences",
        "BuildName",
        "MultiplayerServerCountPerVm",
        "Ports",
        "RegionConfigurations"
      ],
      "example": {
        "StartMultiplayerServerCommand": "C:\\Assets\\gameserver.exe -startserver",
        "GameAssetReferences": [
          {
            "FileName": "gameserver.zip",
            "MountPath": "C:\\Asset\\"
          }
        ],
        "BuildName": "GameBuildName",
        "Metadata": {
          "MetadataKey": "MetadataValue"
        },
        "VmSize": "Standard_D2_v2",
        "MultiplayerServerCountPerVm": 10,
        "Ports": [
          {
            "Name": "PortName",
            "Num": 1243
          }
        ],
        "RegionConfigurations": [
          {
            "Region": "EastUs",
            "MaxServers": 10,
            "StandbyServers": 5
          },
          {
            "Region": "WestUs",
            "MaxServers": 12,
            "StandbyServers": 8
          },
          {
            "Region": "NorthEurope",
            "MaxServers": 7,
            "StandbyServers": 3
          }
        ],
        "GameCertificateReferences": [
          {
            "Name": "CertName",
            "GsdkAlias": "CertGsdkAlias"
          }
        ]
      }
    },
    "CreateBuildWithManagedContainerResponse": {
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID. Must be unique for every build.",
          "type": "string"
        },
        "BuildName": {
          "description": "The build name.",
          "type": "string"
        },
        "ContainerFlavor": {
          "$ref": "#/definitions/ContainerFlavor",
          "description": "The flavor of container of the build.",
          "type": "string",
          "x-isenum": true
        },
        "CreationTime": {
          "description": "The time the build was created in UTC.",
          "type": "string"
        },
        "GameAssetReferences": {
          "description": "The game assets for the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetReference"
          },
          "x-isclass": true
        },
        "GameCertificateReferences": {
          "description": "The game certificates for the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GameCertificateReference"
          },
          "x-isclass": true
        },
        "Metadata": {
          "description": "The metadata of the build.",
          "type": "object"
        },
        "MultiplayerServerCountPerVm": {
          "description": "The number of multiplayer servers to host on a single VM of the build.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Ports": {
          "description": "The ports the build is mapped on.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          },
          "x-isclass": true
        },
        "RegionConfigurations": {
          "description": "The region configuration for the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildRegion"
          },
          "x-isclass": true
        },
        "StartMultiplayerServerCommand": {
          "description": "The command to run when the multiplayer server has been allocated, including any arguments.",
          "type": "string"
        },
        "VmSize": {
          "$ref": "#/definitions/AzureVmSize",
          "description": "The VM size the build was created on.",
          "type": "string",
          "x-isenum": true
        }
      },
      "required": [
        "MultiplayerServerCountPerVm"
      ],
      "example": {
        "StartMultiplayerServerCommand": "C:\\Assets\\gameserver.exe -startserver",
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
        "BuildName": "GameBuildName",
        "CreationTime": "2014-04-07T09:04:28",
        "Metadata": {
          "MetadataKey": "MetadataValue"
        },
        "VmSize": "Standard_D2_v2",
        "Ports": [
          {
            "Name": "PortName",
            "Num": 1243
          }
        ],
        "RegionConfigurations": [
          {
            "Region": "EastUs",
            "Status": "Initializing",
            "MaxServers": 10,
            "StandbyServers": 5
          },
          {
            "Region": "WestUs",
            "Status": "Succeeded",
            "MaxServers": 12,
            "StandbyServers": 8
          },
          {
            "Region": "NorthEurope",
            "Status": "Unhealthy",
            "MaxServers": 7,
            "StandbyServers": 3
          }
        ],
        "GameAssetReferences": [
          {
            "FileName": "gameserver.zip",
            "MountPath": "C:\\Asset\\"
          }
        ],
        "GameCertificateReferences": [
          {
            "Name": "CertName",
            "GsdkAlias": "CertGsdkAlias"
          }
        ],
        "MultiplayerServerCountPerVm": 10
      }
    },
    "CreateMatchmakingTicketRequest": {
      "description": "The client specifies the creator's attributes and optionally a list of other users to match with.",
      "type": "object",
      "properties": {
        "Creator": {
          "$ref": "#/definitions/MatchmakingPlayer",
          "description": "The User who created this ticket.",
          "type": "object",
          "x-isclass": true
        },
        "GiveUpAfterSeconds": {
          "description": "How long to attempt matching this ticket in seconds.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "MembersToMatchWith": {
          "description": "A list of Entity Keys of other users to match with.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityKey"
          },
          "x-isclass": true
        },
        "QueueName": {
          "description": "The Id of a match queue.",
          "type": "string"
        }
      },
      "required": [
        "Creator",
        "GiveUpAfterSeconds",
        "QueueName"
      ],
      "example": {
        "Creator": {},
        "MembersToMatchWith": [],
        "GiveUpAfterSeconds": 100,
        "QueueName": "custom123"
      }
    },
    "CreateMatchmakingTicketResult": {
      "type": "object",
      "properties": {
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "TicketId"
      ],
      "example": {
        "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c"
      }
    },
    "CreateRemoteUserRequest": {
      "description": "Creates a remote user to log on to a VM for a multiplayer server build in a specific region. Returns user credential information necessary to log on.",
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID of to create the remote user for.",
          "type": "string"
        },
        "ExpirationTime": {
          "description": "The expiration time for the remote user created. Defaults to expiring in one day if not specified.",
          "type": "string"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region of virtual machine to create the remote user for.",
          "type": "string",
          "x-isenum": true
        },
        "Username": {
          "description": "The username to create the remote user with.",
          "type": "string"
        },
        "VmId": {
          "description": "The virtual machine ID the multiplayer server is located on.",
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "Region",
        "VmId",
        "Username"
      ],
      "example": {
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
        "Region": "SouthCentralUs",
        "VmId": "VmID1",
        "Username": "AUsername",
        "ExpirationTime": "2014-04-07T09:04:28"
      }
    },
    "CreateRemoteUserResponse": {
      "type": "object",
      "properties": {
        "ExpirationTime": {
          "description": "The expiration time for the remote user created.",
          "type": "string"
        },
        "Password": {
          "description": "The generated password for the remote user that was created.",
          "type": "string"
        },
        "Username": {
          "description": "The username for the remote user that was created.",
          "type": "string"
        }
      }
    },
    "CreateServerMatchmakingTicketRequest": {
      "description": "The server specifies all the members and their attributes.",
      "type": "object",
      "properties": {
        "GiveUpAfterSeconds": {
          "description": "How long to attempt matching this ticket in seconds.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Members": {
          "description": "The users who will be part of this ticket.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MatchmakingPlayer"
          },
          "x-isclass": true
        },
        "QueueName": {
          "description": "The Id of a match queue.",
          "type": "string"
        }
      },
      "required": [
        "Members",
        "GiveUpAfterSeconds",
        "QueueName"
      ],
      "example": {
        "Members": [
          null
        ],
        "GiveUpAfterSeconds": 100,
        "QueueName": "custom123"
      }
    },
    "CurrentServerStats": {
      "type": "object",
      "properties": {
        "Active": {
          "description": "The number of active multiplayer servers.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Propping": {
          "description": "The number of multiplayer servers still downloading game resources (such as assets).",
          "type": "number",
          "x-actualtype": "int32"
        },
        "StandingBy": {
          "description": "The number of standingby multiplayer servers.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Total": {
          "description": "The total number of multiplayer servers.",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "Active",
        "StandingBy",
        "Propping",
        "Total"
      ]
    },
    "DeleteAssetRequest": {
      "description": "Deletes a multiplayer server game asset for a title.",
      "type": "object",
      "properties": {
        "FileName": {
          "description": "The filename of the asset to delete.",
          "type": "string"
        }
      },
      "required": [
        "FileName"
      ],
      "example": {
        "FileName": "gameserver.zip"
      }
    },
    "DeleteBuildRequest": {
      "description": "Deletes a multiplayer server build.",
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID of the build to delete.",
          "type": "string"
        }
      },
      "required": [
        "BuildId"
      ],
      "example": {
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285"
      }
    },
    "DeleteCertificateRequest": {
      "description": "Deletes a multiplayer server game certificate.",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name of the certificate.",
          "type": "string"
        }
      },
      "required": [
        "Name"
      ],
      "example": {
        "Name": "GameCertificate1"
      }
    },
    "DeleteRemoteUserRequest": {
      "description": "Deletes a remote user to log on to a VM for a multiplayer server build in a specific region. Returns user credential information necessary to log on.",
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID of the multiplayer server where the remote user is to delete.",
          "type": "string"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region of the multiplayer server where the remote user is to delete.",
          "type": "string",
          "x-isenum": true
        },
        "Username": {
          "description": "The username of the remote user to delete.",
          "type": "string"
        },
        "VmId": {
          "description": "The virtual machine ID the multiplayer server is located on.",
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "Region",
        "VmId",
        "Username"
      ],
      "example": {
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
        "Region": "SouthCentralUs",
        "VmId": "VmID1",
        "Username": "AUsername"
      }
    },
    "EmptyResponse": {
      "type": "object",
      "properties": {}
    },
    "EnableMultiplayerServersForTitleRequest": {
      "description": "Enables the multiplayer server feature for a title and returns the enabled status. The enabled status can be Initializing, Enabled, and Disabled. It can up to 20 minutes or more for the title to be enabled for the feature. On average, it can take up to 20 minutes for the title to be enabled for the feature.",
      "type": "object",
      "properties": {},
      "example": {}
    },
    "EnableMultiplayerServersForTitleResponse": {
      "type": "object",
      "properties": {
        "Status": {
          "$ref": "#/definitions/TitleMultiplayerServerEnabledStatus",
          "description": "The enabled status for the multiplayer server features for the title.",
          "type": "string",
          "x-isenum": true
        }
      },
      "example": {}
    },
    "EntityKey": {
      "description": "Combined entity type and ID structure which uniquely identifies a single entity.",
      "type": "object",
      "properties": {
        "Id": {
          "description": "Unique ID of the entity.",
          "type": "string"
        },
        "Type": {
          "description": "Entity type. See https://api.playfab.com/docs/tutorials/entities/entitytypes",
          "type": "string"
        }
      },
      "required": [
        "Id"
      ]
    },
    "GameCertificateReference": {
      "type": "object",
      "properties": {
        "GsdkAlias": {
          "description": "An alias for the game certificate. The game server will reference this alias via GSDK config to retrieve the game certificate. This alias is used as an identifier in game server code to allow a new certificate with different Name field to be uploaded without the need to change any game server code to reference the new Name.",
          "type": "string"
        },
        "Name": {
          "description": "The name of the game certificate. This name should match the name of a certificate that was previously uploaded to this title.",
          "type": "string"
        }
      }
    },
    "GameCertificateReferenceParams": {
      "type": "object",
      "properties": {
        "GsdkAlias": {
          "description": "An alias for the game certificate. The game server will reference this alias via GSDK config to retrieve the game certificate. This alias is used as an identifier in game server code to allow a new certificate with different Name field to be uploaded without the need to change any game server code to reference the new Name.",
          "type": "string"
        },
        "Name": {
          "description": "The name of the game certificate. This name should match the name of a certificate that was previously uploaded to this title.",
          "type": "string"
        }
      },
      "required": [
        "Name",
        "GsdkAlias"
      ]
    },
    "GetAssetUploadUrlRequest": {
      "description": "Gets the URL to upload assets to.",
      "type": "object",
      "properties": {
        "FileName": {
          "description": "The asset's file name to get the upload URL for.",
          "type": "string"
        }
      },
      "required": [
        "FileName"
      ],
      "example": {
        "FileName": "gameserver.zip"
      }
    },
    "GetAssetUploadUrlResponse": {
      "type": "object",
      "properties": {
        "AssetUploadUrl": {
          "description": "The asset's upload URL.",
          "type": "string"
        },
        "FileName": {
          "description": "The asset's file name to get the upload URL for.",
          "type": "string"
        }
      },
      "example": {
        "FileName": "gameserver.zip",
        "AssetUploadUrl": "https://2mxyjirehzyc6.blob.core.windows.net/gameassets/gameserver.zip?sv=2015-04-05&ss=b&srt=sco&sp=rw&st=2018-08-21T20%3A27%3A47.5613204Z&se=2018-08-22T01%3A27%3A47.5613204Z&spr=https&sig=SJH%2B1rgFm6%2F6EkUWVPCI5pSR49W5EbZ4L51sDBlkAtE%3D&api-version=2017-07-29"
      }
    },
    "GetBuildRequest": {
      "description": "Returns the details about a multiplayer server build.",
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID of the build to get.",
          "type": "string"
        }
      },
      "required": [
        "BuildId"
      ],
      "example": {
        "BuildId": "53781fa8-006d-4e9c-b733-57433d579285"
      }
    },
    "GetBuildResponse": {
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID of the build.",
          "type": "string"
        },
        "BuildName": {
          "description": "The build name.",
          "type": "string"
        },
        "BuildStatus": {
          "description": "The current build status. Valid values are - Deploying, Deployed, DeletingRegion, Unhealthy.",
          "type": "string"
        },
        "ContainerFlavor": {
          "$ref": "#/definitions/ContainerFlavor",
          "description": "The flavor of container of he build.",
          "type": "string",
          "x-isenum": true
        },
        "ContainerRunCommand": {
          "description": "The container command to run when the multiplayer server has been allocated, including any arguments. This only applies to custom builds. If the build is a managed build, this field will be null.",
          "type": "string"
        },
        "CreationTime": {
          "description": "The time the build was created in UTC.",
          "type": "string"
        },
        "CustomGameContainerImage": {
          "$ref": "#/definitions/ContainerImageReference",
          "description": "The custom game container image for a custom build.",
          "type": "object",
          "x-isclass": true
        },
        "GameAssetReferences": {
          "description": "The game assets for the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetReference"
          },
          "x-isclass": true
        },
        "GameCertificateReferences": {
          "description": "The game certificates for the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GameCertificateReference"
          },
          "x-isclass": true
        },
        "Metadata": {
          "description": "Metadata of the build. The keys are case insensitive. The build metadata is made available to the server through Game Server SDK (GSDK).",
          "type": "object"
        },
        "MultiplayerServerCountPerVm": {
          "description": "The number of multiplayer servers to hosted on a single VM of the build.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Ports": {
          "description": "The ports the build is mapped on.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          },
          "x-isclass": true
        },
        "RegionConfigurations": {
          "description": "The region configuration for the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildRegion"
          },
          "x-isclass": true
        },
        "StartMultiplayerServerCommand": {
          "description": "The command to run when the multiplayer server has been allocated, including any arguments. This only applies to managed builds. If the build is a custom build, this field will be null.",
          "type": "string"
        },
        "VmSize": {
          "$ref": "#/definitions/AzureVmSize",
          "description": "The VM size the build was created on.",
          "type": "string",
          "x-isenum": true
        }
      },
      "required": [
        "MultiplayerServerCountPerVm"
      ],
      "example": {
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
        "BuildName": "GameBuildName",
        "BuildStatus": "Deployed",
        "CreationTime": "2014-04-07T09:04:28",
        "Metadata": {
          "MetadataKey": "MetadataValue"
        },
        "VmSize": "Standard_D2_v2",
        "Ports": [
          {
            "Name": "PortName",
            "Num": 1243
          }
        ],
        "RegionConfigurations": [
          {
            "Region": "EastUs",
            "Status": "Initializing",
            "MaxServers": 10,
            "StandbyServers": 5,
            "CurrentServerStats": {
              "Propping": 5,
              "Total": 5
            }
          },
          {
            "Region": "WestUs",
            "Status": "Succeeded",
            "MaxServers": 12,
            "StandbyServers": 8,
            "CurrentServerStats": {
              "Active": 1,
              "StandingBy": 7,
              "Propping": 1,
              "Total": 9
            }
          },
          {
            "Region": "NorthEurope",
            "Status": "Unhealthy",
            "MaxServers": 7,
            "StandbyServers": 3,
            "CurrentServerStats": {
              "Propping": 3,
              "Total": 3
            }
          }
        ],
        "GameAssetReferences": [
          {
            "FileName": "gameserver.zip",
            "MountPath": "C:\\Asset\\"
          }
        ],
        "GameCertificateReferences": [
          {
            "Name": "CertName",
            "GsdkAlias": "CertGsdkAlias"
          }
        ],
        "StartMultiplayerServerCommand": "C:\\Assets\\gameserver.exe -startserver",
        "MultiplayerServerCountPerVm": 1
      }
    },
    "GetContainerRegistryCredentialsRequest": {
      "description": "Gets credentials to the container registry where game developers can upload custom container images to before creating a new build.",
      "type": "object",
      "properties": {},
      "example": {}
    },
    "GetContainerRegistryCredentialsResponse": {
      "type": "object",
      "properties": {
        "DnsName": {
          "description": "The url of the container registry.",
          "type": "string"
        },
        "Password": {
          "description": "The password for accessing the container registry.",
          "type": "string"
        },
        "Username": {
          "description": "The username for accessing the container registry.",
          "type": "string"
        }
      },
      "example": {
        "DnsName": "registry.azurecr.io",
        "Username": "RegistryUser",
        "Password": "RegistryPassword"
      }
    },
    "GetMatchmakingTicketRequest": {
      "description": "The ticket includes the invited players, their attributes if they have joined, the ticket status, the match Id when applicable, etc. Only servers, the ticket creator and the invited players can get the ticket.",
      "type": "object",
      "properties": {
        "EscapeObject": {
          "description": "Determines whether the matchmaking attributes will be returned as an escaped JSON string or as an un-escaped JSON object.",
          "type": "boolean"
        },
        "QueueName": {
          "description": "The name of the queue to find a match for.",
          "type": "string"
        },
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "TicketId",
        "QueueName",
        "EscapeObject"
      ],
      "example": {
        "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
        "QueueName": "custom123"
      }
    },
    "GetMatchmakingTicketResult": {
      "type": "object",
      "properties": {
        "CancellationReason": {
          "$ref": "#/definitions/CancellationReason",
          "description": "The reason why the current ticket was canceled. This field is only set if the ticket is in canceled state.",
          "type": "string",
          "x-isenum": true
        },
        "Created": {
          "description": "The server date and time at which ticket was created.",
          "type": "string"
        },
        "Creator": {
          "$ref": "#/definitions/EntityKey",
          "description": "The Creator's entity key.",
          "type": "object",
          "x-isclass": true
        },
        "GiveUpAfterSeconds": {
          "description": "How long to attempt matching this ticket in seconds.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "MatchId": {
          "description": "The Id of a match.",
          "type": "string"
        },
        "Members": {
          "description": "A list of Users that have joined this ticket.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MatchmakingPlayer"
          },
          "x-isclass": true
        },
        "MembersToMatchWith": {
          "description": "A list of PlayFab Ids of Users to match with.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityKey"
          },
          "x-isclass": true
        },
        "QueueName": {
          "description": "The Id of a match queue.",
          "type": "string"
        },
        "Status": {
          "description": "The current ticket status. Possible values are: WaitingForPlayers, WaitingForMatch, WaitingForServer, Canceled and Matched.",
          "type": "string"
        },
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "TicketId",
        "QueueName",
        "Created",
        "Status",
        "GiveUpAfterSeconds",
        "Members",
        "Creator"
      ],
      "example": {
        "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
        "QueueName": "custom123",
        "MatchId": "4e0c5fd7-80e9-4744-b0ce-061a7f067ff5",
        "Created": "2016-08-23T12:33:14",
        "Status": "Matched",
        "GiveUpAfterSeconds": 100,
        "MembersToMatchWith": [
          {
            "Id": "456456456",
            "Type": "title_player_acount",
            "TypeString": "title_player_acount"
          }
        ],
        "Members": [],
        "Creator": {
          "Id": "123123123",
          "Type": "title_player_acount",
          "TypeString": "title_player_acount"
        }
      }
    },
    "GetMatchRequest": {
      "description": "When matchmaking has successfully matched together a collection of tickets, it produces a 'match' with an Id. The match contains all of the players that were matched together, and their team assigments. Only servers and ticket members can get the match.",
      "type": "object",
      "properties": {
        "EscapeObject": {
          "description": "Determines whether the matchmaking attributes will be returned as an escaped JSON string or as an un-escaped JSON object.",
          "type": "boolean"
        },
        "MatchId": {
          "description": "The Id of a match.",
          "type": "string"
        },
        "QueueName": {
          "description": "The name of the queue to join.",
          "type": "string"
        },
        "ReturnMemberAttributes": {
          "description": "Determines whether the matchmaking attributes for each user should be returned in the response for match request.",
          "type": "boolean"
        }
      },
      "required": [
        "MatchId",
        "QueueName",
        "EscapeObject",
        "ReturnMemberAttributes"
      ],
      "example": {
        "MatchId": "4e0c5fd7-80e9-4744-b0ce-061a7f067ff5",
        "QueueName": "custom123"
      }
    },
    "GetMatchResult": {
      "type": "object",
      "properties": {
        "MatchId": {
          "description": "The Id of a match.",
          "type": "string"
        },
        "Members": {
          "description": "A list of Users that are matched together, along with their team assignments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MatchmakingPlayerWithTeamAssignment"
          },
          "x-isclass": true
        },
        "RegionPreferences": {
          "description": "A list of regions that the match could be played in sorted by preference. This value is only set if the queue has a region selection rule.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ServerDetails": {
          "$ref": "#/definitions/ServerDetails",
          "description": "The details of the server that the match has been allocated to.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "MatchId",
        "Members"
      ],
      "example": {
        "MatchId": "4e0c5fd7-80e9-4744-b0ce-061a7f067ff5",
        "Members": [],
        "RegionPreferences": [
          "Region1",
          "Region2"
        ],
        "ServerDetails": {
          "IPV4Address": "10.250.24.54",
          "Ports": [
            {
              "Name": "PortName",
              "Num": 1243
            }
          ],
          "Region": "WestUS"
        }
      }
    },
    "GetMultiplayerServerDetailsRequest": {
      "description": "Gets multiplayer server session details for a build in a specific region.",
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID of the multiplayer server to get details for.",
          "type": "string"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region the multiplayer server is located in to get details for.",
          "type": "string",
          "x-isenum": true
        },
        "SessionId": {
          "description": "The title generated guid string session ID of the multiplayer server to get details for. This is to keep track of multiplayer server sessions.",
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "SessionId",
        "Region"
      ],
      "example": {
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
        "SessionId": "02bdef0e-e01e-4b29-8efe-ff9f47a06d8c",
        "Region": "SouthCentralUs"
      }
    },
    "GetMultiplayerServerDetailsResponse": {
      "type": "object",
      "properties": {
        "ConnectedPlayers": {
          "description": "The connected players in the multiplayer server.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectedPlayer"
          },
          "x-isclass": true
        },
        "FQDN": {
          "description": "The fully qualified domain name of the virtual machine that is hosting this multiplayer server.",
          "type": "string"
        },
        "IPV4Address": {
          "description": "The IPv4 address of the virtual machine that is hosting this multiplayer server.",
          "type": "string"
        },
        "LastStateTransitionTime": {
          "description": "The time (UTC) at which a change in the multiplayer server state was observed.",
          "type": "string"
        },
        "Ports": {
          "description": "The ports the multiplayer server uses.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          },
          "x-isclass": true
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region the multiplayer server is located in.",
          "type": "string",
          "x-isenum": true
        },
        "ServerId": {
          "description": "The string server ID of the multiplayer server generated by PlayFab.",
          "type": "string"
        },
        "SessionId": {
          "description": "The guid string session ID of the multiplayer server.",
          "type": "string"
        },
        "State": {
          "description": "The state of the multiplayer server.",
          "type": "string"
        },
        "VmId": {
          "description": "The virtual machine ID that the multiplayer server is located on.",
          "type": "string"
        }
      },
      "example": {
        "SessionId": "02bdef0e-e01e-4b29-8efe-ff9f47a06d8c",
        "ServerId": "AMultiplayerGameServer",
        "VmId": "VmID1",
        "IPV4Address": "10.250.24.54",
        "FQDN": "vmId1.azure.cloudapp.net",
        "Ports": [
          {
            "Name": "PortName",
            "Num": 1243
          }
        ],
        "Region": "SouthCentralUs",
        "State": "Active",
        "ConnectedPlayers": [
          {
            "PlayerId": "10931352888739351331"
          },
          {
            "PlayerId": "10271352123739051532"
          }
        ]
      }
    },
    "GetQueueStatisticsRequest": {
      "description": "Returns the matchmaking statistics for a queue. These include the number of players matching and the statistics related to the time to match statistics in seconds (average and percentiles). Statistics are refreshed once every 5 minutes. Servers can access all statistics no matter what the ClientStatisticsVisibility is configured to. Clients can access statistics according to the ClientStatisticsVisibility. Client requests are forbidden if all visibility fields are false.",
      "type": "object",
      "properties": {
        "QueueName": {
          "description": "The name of the queue.",
          "type": "string"
        }
      },
      "required": [
        "QueueName"
      ],
      "example": {
        "QueueName": "custom123"
      }
    },
    "GetQueueStatisticsResult": {
      "type": "object",
      "properties": {
        "NumberOfPlayersMatching": {
          "description": "The current number of players in the matchmaking queue, who are waiting to be matched.",
          "type": "number",
          "x-actualtype": "uint32"
        },
        "TimeToMatchStatisticsInSeconds": {
          "$ref": "#/definitions/Statistics",
          "description": "Statistics representing the time (in seconds) it takes for tickets to find a match.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "NumberOfPlayersMatching": 563,
        "TimeToMatchStatisticsInSeconds": {
          "Average": 2.2,
          "Percentile50": 2.1,
          "Percentile90": 2.21,
          "Percentile99": 3.0
        }
      }
    },
    "GetRemoteLoginEndpointRequest": {
      "description": "Gets a remote login endpoint to a VM that is hosting a multiplayer server build in a specific region.",
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID of the multiplayer server to get remote login information for.",
          "type": "string"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region of the multiplayer server to get remote login information for.",
          "type": "string",
          "x-isenum": true
        },
        "VmId": {
          "description": "The virtual machine ID the multiplayer server is located on.",
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "Region",
        "VmId"
      ],
      "example": {
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
        "Region": "SouthCentralUs",
        "VmId": "VmID1"
      }
    },
    "GetRemoteLoginEndpointResponse": {
      "type": "object",
      "properties": {
        "IPV4Address": {
          "description": "The remote login IPV4 address of multiplayer server.",
          "type": "string"
        },
        "Port": {
          "description": "The remote login port of multiplayer server.",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "Port"
      ],
      "example": {
        "IPV4Address": "10.250.24.54",
        "Port": 1234
      }
    },
    "GetTitleEnabledForMultiplayerServersStatusRequest": {
      "description": "Gets the status of whether a title is enabled for the multiplayer server feature. The enabled status can be Initializing, Enabled, and Disabled.",
      "type": "object",
      "properties": {},
      "example": {}
    },
    "GetTitleEnabledForMultiplayerServersStatusResponse": {
      "type": "object",
      "properties": {
        "Status": {
          "$ref": "#/definitions/TitleMultiplayerServerEnabledStatus",
          "description": "The enabled status for the multiplayer server features for the title.",
          "type": "string",
          "x-isenum": true
        }
      },
      "example": {
        "Status": "Disabled"
      }
    },
    "JoinMatchmakingTicketRequest": {
      "description": "Add the player to a matchmaking ticket and specify all of its matchmaking attributes. Players can join a ticket if and only if their EntityKeys are already listed in the ticket's Members list. The matchmaking service automatically starts matching the ticket against other matchmaking tickets once all players have joined the ticket. It is not possible to join a ticket once it has started matching.",
      "type": "object",
      "properties": {
        "Member": {
          "$ref": "#/definitions/MatchmakingPlayer",
          "description": "The User who wants to join the ticket. Their Id must be listed in PlayFabIdsToMatchWith.",
          "type": "object",
          "x-isclass": true
        },
        "QueueName": {
          "description": "The name of the queue to join.",
          "type": "string"
        },
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "TicketId",
        "QueueName",
        "Member"
      ],
      "example": {
        "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
        "QueueName": "custom123",
        "Member": {}
      }
    },
    "JoinMatchmakingTicketResult": {
      "type": "object",
      "properties": {},
      "example": {}
    },
    "ListAssetSummariesRequest": {
      "description": "Returns a list of multiplayer server game asset summaries for a title.",
      "type": "object",
      "properties": {
        "PageSize": {
          "description": "The page size for the request.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "description": "The skip token for the paged request.",
          "type": "string"
        }
      },
      "example": {
        "PageSize": 10
      }
    },
    "ListAssetSummariesResponse": {
      "type": "object",
      "properties": {
        "AssetSummaries": {
          "description": "The list of asset summaries.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetSummary"
          },
          "x-isclass": true
        },
        "PageSize": {
          "description": "The page size on the response.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "description": "The skip token for the paged response.",
          "type": "string"
        }
      },
      "required": [
        "PageSize"
      ],
      "example": {
        "AssetSummaries": [
          {
            "FileName": "gameserver.zip",
            "Metadata": {
              "MetadataKey": "MetaDataValue"
            }
          }
        ],
        "PageSize": 10
      }
    },
    "ListBuildSummariesRequest": {
      "description": "Returns a list of summarized details of all multiplayer server builds for a title.",
      "type": "object",
      "properties": {
        "PageSize": {
          "description": "The page size for the request.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "description": "The skip token for the paged request.",
          "type": "string"
        }
      },
      "example": {
        "PageSize": 10
      }
    },
    "ListBuildSummariesResponse": {
      "type": "object",
      "properties": {
        "BuildSummaries": {
          "description": "The list of build summaries for a title.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildSummary"
          },
          "x-isclass": true
        },
        "PageSize": {
          "description": "The page size on the response.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "description": "The skip token for the paged response.",
          "type": "string"
        }
      },
      "required": [
        "PageSize"
      ]
    },
    "ListCertificateSummariesRequest": {
      "description": "Returns a list of multiplayer server game certificates for a title.",
      "type": "object",
      "properties": {
        "PageSize": {
          "description": "The page size for the request.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "description": "The skip token for the paged request.",
          "type": "string"
        }
      },
      "example": {
        "PageSize": 10
      }
    },
    "ListCertificateSummariesResponse": {
      "type": "object",
      "properties": {
        "CertificateSummaries": {
          "description": "The list of game certificates.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateSummary"
          },
          "x-isclass": true
        },
        "PageSize": {
          "description": "The page size on the response.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "description": "The skip token for the paged response.",
          "type": "string"
        }
      },
      "required": [
        "PageSize"
      ],
      "example": {
        "CertificateSummaries": [
          {
            "Name": "GameCertificate1",
            "Thumbprint": "Thumbprint1"
          },
          {
            "Name": "GameCertificate2",
            "Thumbprint": "Thumbprint2"
          }
        ],
        "PageSize": 10
      }
    },
    "ListContainerImagesRequest": {
      "description": "Returns a list of the container images that have been uploaded to the container registry for a title.",
      "type": "object",
      "properties": {
        "PageSize": {
          "description": "The page size for the request.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "description": "The skip token for the paged request.",
          "type": "string"
        }
      },
      "example": {
        "PageSize": 10
      }
    },
    "ListContainerImagesResponse": {
      "type": "object",
      "properties": {
        "Images": {
          "description": "The list of container images.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "PageSize": {
          "description": "The page size on the response.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "description": "The skip token for the paged response.",
          "type": "string"
        }
      },
      "required": [
        "PageSize"
      ],
      "example": {
        "Images": [
          "ImageName1",
          "ImageName2"
        ],
        "PageSize": 10
      }
    },
    "ListContainerImageTagsRequest": {
      "description": "Returns a list of the tags for a particular container image that exists in the container registry for a title.",
      "type": "object",
      "properties": {
        "ImageName": {
          "description": "The container images we want to list tags for.",
          "type": "string"
        }
      },
      "example": {
        "ImageName": "imageName1"
      }
    },
    "ListContainerImageTagsResponse": {
      "type": "object",
      "properties": {
        "Tags": {
          "description": "The list of tags for a particular container image.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "Tags": [
          "ImageTag1",
          "ImageTag2"
        ]
      }
    },
    "ListMatchmakingTicketsForPlayerRequest": {
      "description": "If the caller is a title, the EntityKey in the request is required. If the caller is a player, then it is optional. If it is provided it must match the caller's entity.",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity key for which to find the ticket Ids.",
          "type": "object",
          "x-isclass": true
        },
        "QueueName": {
          "description": "The name of the queue to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "QueueName"
      ],
      "example": {
        "Entity": {
          "Id": "123123123",
          "Type": "title_player_acount",
          "TypeString": "title_player_acount"
        },
        "QueueName": "custom123"
      }
    },
    "ListMatchmakingTicketsForPlayerResult": {
      "type": "object",
      "properties": {
        "TicketIds": {
          "description": "The list of ticket Ids the user is a member of.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "TicketIds"
      ],
      "example": {
        "TicketIds": [
          "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
          "d7cf891d-1dea-4f32-9e7e-277c0a245064"
        ]
      }
    },
    "ListMultiplayerServersRequest": {
      "description": "Returns a list of multiplayer servers for a build in a specific region.",
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID of the multiplayer servers to list.",
          "type": "string"
        },
        "PageSize": {
          "description": "The page size for the request.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region the multiplayer servers to list.",
          "type": "string",
          "x-isenum": true
        },
        "SkipToken": {
          "description": "The skip token for the paged request.",
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "Region"
      ],
      "example": {
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
        "Region": "SouthCentralUs"
      }
    },
    "ListMultiplayerServersResponse": {
      "type": "object",
      "properties": {
        "MultiplayerServerSummaries": {
          "description": "The list of multiplayer server summary details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MultiplayerServerSummary"
          },
          "x-isclass": true
        },
        "PageSize": {
          "description": "The page size on the response.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "description": "The skip token for the paged response.",
          "type": "string"
        }
      },
      "required": [
        "PageSize"
      ],
      "example": {
        "MultiplayerServerSummaries": [
          {
            "ServerId": "AMultiplayerGameServer",
            "SessionId": "02bdef0e-e01e-4b29-8efe-ff9f47a06d8c",
            "VmId": "VmID1",
            "Region": "SouthCentralUs",
            "State": "Active",
            "ConnectedPlayers": [
              {
                "PlayerId": "10931352888739351331"
              },
              {
                "PlayerId": "10271352123739051532"
              }
            ]
          },
          {
            "ServerId": "SomeOtherMultiplayerGameServer",
            "SessionId": "82bdef0e-a21e-3b29-8efe-ff9e57a08c1d",
            "VmId": "VmID2",
            "Region": "SouthCentralUs",
            "State": "Terminated",
            "ConnectedPlayers": []
          }
        ]
      }
    },
    "ListQosServersRequest": {
      "description": "Returns a list of quality of service servers.",
      "type": "object",
      "properties": {},
      "example": {}
    },
    "ListQosServersResponse": {
      "type": "object",
      "properties": {
        "PageSize": {
          "description": "The page size on the response.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "QosServers": {
          "description": "The list of QoS servers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QosServer"
          },
          "x-isclass": true
        },
        "SkipToken": {
          "description": "The skip token for the paged response.",
          "type": "string"
        }
      },
      "required": [
        "PageSize"
      ],
      "example": {
        "QosServers": [
          {
            "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
            "Region": "WestUs"
          },
          {
            "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
            "Region": "SouthCentralUs"
          },
          {
            "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
            "Region": "EastUs"
          },
          {
            "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
            "Region": "NorthEurope"
          },
          {
            "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
            "Region": "WestEurope"
          }
        ],
        "PageSize": 10
      }
    },
    "ListVirtualMachineSummariesRequest": {
      "description": "Returns a list of virtual machines for a title.",
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID of the virtual machines to list.",
          "type": "string"
        },
        "PageSize": {
          "description": "The page size for the request.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region of the virtual machines to list.",
          "type": "string",
          "x-isenum": true
        },
        "SkipToken": {
          "description": "The skip token for the paged request.",
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "Region"
      ],
      "example": {
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
        "Region": "SouthCentralUs",
        "PageSize": 10
      }
    },
    "ListVirtualMachineSummariesResponse": {
      "type": "object",
      "properties": {
        "PageSize": {
          "description": "The page size on the response.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "description": "The skip token for the paged response.",
          "type": "string"
        },
        "VirtualMachines": {
          "description": "The list of virtual machine summaries.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualMachineSummary"
          },
          "x-isclass": true
        }
      },
      "required": [
        "PageSize"
      ],
      "example": {
        "VirtualMachines": [
          {
            "VmId": "VmID1",
            "State": "Running",
            "HealthStatus": "Healthy"
          },
          {
            "VmId": "VmID2",
            "State": "Propping",
            "HealthStatus": "Healthy"
          }
        ],
        "PageSize": 10
      }
    },
    "MatchmakingPlayer": {
      "description": "A user in a matchmaking ticket.",
      "type": "object",
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/MatchmakingPlayerAttributes",
          "description": "The user's attributes custom to the title.",
          "type": "object",
          "x-isclass": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity key of the matchmaking user.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Entity"
      ]
    },
    "MatchmakingPlayerAttributes": {
      "description": "The matchmaking attributes for a user.",
      "type": "object",
      "properties": {
        "DataObject": {
          "description": "A data object representing a user's attributes.",
          "type": "object"
        },
        "EscapedDataObject": {
          "description": "An escaped data object representing a user's attributes.",
          "type": "string"
        }
      }
    },
    "MatchmakingPlayerWithTeamAssignment": {
      "description": "A player in a created matchmaking match with a team assignment.",
      "type": "object",
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/MatchmakingPlayerAttributes",
          "description": "The user's attributes custom to the title. These attributes will be null unless the request has ReturnMemberAttributes flag set to true.",
          "type": "object",
          "x-isclass": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity key of the matchmaking user.",
          "type": "object",
          "x-isclass": true
        },
        "TeamId": {
          "description": "The Id of the team the User is assigned to.",
          "type": "string"
        }
      },
      "required": [
        "Entity"
      ]
    },
    "MultiplayerServerSummary": {
      "type": "object",
      "properties": {
        "ConnectedPlayers": {
          "description": "The connected players in the multiplayer server.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectedPlayer"
          },
          "x-isclass": true
        },
        "LastStateTransitionTime": {
          "description": "The time (UTC) at which a change in the multiplayer server state was observed.",
          "type": "string"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region the multiplayer server is located in.",
          "type": "string",
          "x-isenum": true
        },
        "ServerId": {
          "description": "The string server ID of the multiplayer server generated by PlayFab.",
          "type": "string"
        },
        "SessionId": {
          "description": "The title generated guid string session ID of the multiplayer server.",
          "type": "string"
        },
        "State": {
          "description": "The state of the multiplayer server.",
          "type": "string"
        },
        "VmId": {
          "description": "The virtual machine ID that the multiplayer server is located on.",
          "type": "string"
        }
      }
    },
    "Port": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name for the port.",
          "type": "string"
        },
        "Num": {
          "description": "The number for the port.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Protocol": {
          "$ref": "#/definitions/ProtocolType",
          "description": "The protocol for the port.",
          "type": "string",
          "x-isenum": true
        }
      },
      "required": [
        "Name",
        "Num",
        "Protocol"
      ]
    },
    "ProtocolType": {
      "type": "object",
      "enum": [
        "TCP",
        "UDP"
      ]
    },
    "QosServer": {
      "type": "object",
      "properties": {
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region the QoS server is located in.",
          "type": "string",
          "x-isenum": true
        },
        "ServerUrl": {
          "description": "The QoS server URL.",
          "type": "string"
        }
      }
    },
    "RequestMultiplayerServerRequest": {
      "description": "Requests a multiplayer server session from a particular build in any of the given preferred regions.",
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID of the multiplayer server to request.",
          "type": "string"
        },
        "InitialPlayers": {
          "description": "Initial list of players (potentially matchmade) allowed to connect to the game. This list is passed to the game server when requested (via GSDK) and can be used to validate players connecting to it.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "PreferredRegions": {
          "description": "The preferred regions to request a multiplayer server from. The Multiplayer Service will iterate through the regions in the specified order and allocate a server from the first one that has servers available.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AzureRegion"
          },
          "x-isenum": true
        },
        "SessionCookie": {
          "description": "Data encoded as a string that is passed to the game server when requested. This can be used to to communicate information such as game mode or map through the request flow.",
          "type": "string"
        },
        "SessionId": {
          "description": "A guid string session ID created track the multiplayer server session over its life.",
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "SessionId",
        "PreferredRegions"
      ],
      "example": {
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
        "SessionId": "02bdef0e-e01e-4b29-8efe-ff9f47a06d8c",
        "SessionCookie": "U2Vzc2lvbkNvb2tpZQ==",
        "InitialPlayers": [
          "gamer1",
          "gamer2"
        ],
        "PreferredRegions": [
          "SouthCentralUs",
          "WestUs"
        ]
      }
    },
    "RequestMultiplayerServerResponse": {
      "type": "object",
      "properties": {
        "ConnectedPlayers": {
          "description": "The connected players in the multiplayer server.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectedPlayer"
          },
          "x-isclass": true
        },
        "FQDN": {
          "description": "The fully qualified domain name of the virtual machine that is hosting this multiplayer server.",
          "type": "string"
        },
        "IPV4Address": {
          "description": "The IPv4 address of the virtual machine that is hosting this multiplayer server.",
          "type": "string"
        },
        "LastStateTransitionTime": {
          "description": "The time (UTC) at which a change in the multiplayer server state was observed.",
          "type": "string"
        },
        "Ports": {
          "description": "The ports the multiplayer server uses.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          },
          "x-isclass": true
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region the multiplayer server is located in.",
          "type": "string",
          "x-isenum": true
        },
        "ServerId": {
          "description": "The string server ID of the multiplayer server generated by PlayFab.",
          "type": "string"
        },
        "SessionId": {
          "description": "The guid string session ID of the multiplayer server.",
          "type": "string"
        },
        "State": {
          "description": "The state of the multiplayer server.",
          "type": "string"
        },
        "VmId": {
          "description": "The virtual machine ID that the multiplayer server is located on.",
          "type": "string"
        }
      },
      "example": {
        "SessionId": "02bdef0e-e01e-4b29-8efe-ff9f47a06d8c",
        "ServerId": "AMultiplayerGameServer",
        "VmId": "80c00b02-a559-4961-9b31-4a04b39e26a6",
        "IPV4Address": "10.250.24.54",
        "FQDN": "vm.azure.cloudapp.net",
        "Ports": [
          {
            "Name": "PortName",
            "Num": 1243
          }
        ],
        "Region": "SouthCentralUs",
        "State": "Active",
        "ConnectedPlayers": [
          {
            "PlayerId": "10931352888739351331"
          },
          {
            "PlayerId": "10271352123739051532"
          }
        ]
      }
    },
    "RolloverContainerRegistryCredentialsRequest": {
      "description": "Gets new credentials to the container registry where game developers can upload custom container images to before creating a new build.",
      "type": "object",
      "properties": {},
      "example": {}
    },
    "RolloverContainerRegistryCredentialsResponse": {
      "type": "object",
      "properties": {
        "DnsName": {
          "description": "The url of the container registry.",
          "type": "string"
        },
        "Password": {
          "description": "The password for accessing the container registry.",
          "type": "string"
        },
        "Username": {
          "description": "The username for accessing the container registry.",
          "type": "string"
        }
      },
      "example": {
        "DnsName": "registry.azurecr.io",
        "Username": "RegistryUser",
        "Password": "NewRegistryPassword"
      }
    },
    "ServerDetails": {
      "type": "object",
      "properties": {
        "IPV4Address": {
          "description": "The IPv4 address of the virtual machine that is hosting this multiplayer server.",
          "type": "string"
        },
        "Ports": {
          "description": "The ports the multiplayer server uses.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          },
          "x-isclass": true
        },
        "Region": {
          "description": "The server's region.",
          "type": "string"
        }
      },
      "example": {
        "IPV4Address": "10.250.24.54",
        "Ports": [
          {
            "Name": "PortName",
            "Num": 1243
          }
        ],
        "Region": "WestUS"
      }
    },
    "ShutdownMultiplayerServerRequest": {
      "description": "Executes the shutdown callback from the GSDK and terminates the multiplayer server session. The callback in the GSDK will allow for graceful shutdown with a 15 minute timeoutIf graceful shutdown has not been completed before 15 minutes have elapsed, the multiplayer server session will be forcefully terminated on it's own.",
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID of the multiplayer server to delete.",
          "type": "string"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region of the multiplayer server to shut down.",
          "type": "string",
          "x-isenum": true
        },
        "SessionId": {
          "description": "A guid string session ID of the multiplayer server to shut down.",
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "Region",
        "SessionId"
      ],
      "example": {
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
        "Region": "SouthCentralUs",
        "SessionId": "02bdef0e-e01e-4b29-8efe-ff9f47a06d8c"
      }
    },
    "Statistics": {
      "type": "object",
      "properties": {
        "Average": {
          "description": "The average.",
          "type": "number",
          "x-actualtype": "double"
        },
        "Percentile50": {
          "description": "The 50th percentile.",
          "type": "number",
          "x-actualtype": "double"
        },
        "Percentile90": {
          "description": "The 90th percentile.",
          "type": "number",
          "x-actualtype": "double"
        },
        "Percentile99": {
          "description": "The 99th percentile.",
          "type": "number",
          "x-actualtype": "double"
        }
      },
      "required": [
        "Average",
        "Percentile50",
        "Percentile90",
        "Percentile99"
      ]
    },
    "TitleMultiplayerServerEnabledStatus": {
      "type": "object",
      "enum": [
        "Initializing",
        "Enabled",
        "Disabled"
      ]
    },
    "UpdateBuildRegionsRequest": {
      "description": "Updates a multiplayer server build's regions.",
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string ID of the build we want to update regions for.",
          "type": "string"
        },
        "BuildRegions": {
          "description": "The updated region configuration that should be applied to the specified build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildRegionParams"
          },
          "x-isclass": true
        }
      },
      "required": [
        "BuildId",
        "BuildRegions"
      ],
      "example": {
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
        "BuildRegions": [
          {
            "Region": "EastUs",
            "MaxServers": 10,
            "StandbyServers": 5
          },
          {
            "Region": "WestUs",
            "MaxServers": 12,
            "StandbyServers": 8
          },
          {
            "Region": "NorthEurope",
            "MaxServers": 7,
            "StandbyServers": 3
          }
        ]
      }
    },
    "UploadCertificateRequest": {
      "description": "Uploads a multiplayer server game certificate.",
      "type": "object",
      "properties": {
        "GameCertificate": {
          "$ref": "#/definitions/Certificate",
          "description": "The game certificate to upload.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "GameCertificate"
      ],
      "example": {
        "GameCertificate": {
          "Name": "GameCertificate1",
          "Base64EncodedValue": "UGxheUZhYlJvY2tzISEhTGV0J3NtYWtlYWxvdG9mZ2FtZXMh",
          "Password": "PasswordForPFXCertificate"
        }
      }
    },
    "VirtualMachineSummary": {
      "type": "object",
      "properties": {
        "HealthStatus": {
          "description": "The virtual machine health status.",
          "type": "string"
        },
        "State": {
          "description": "The virtual machine state.",
          "type": "string"
        },
        "VmId": {
          "description": "The virtual machine ID.",
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "CancelAllMatchmakingTicketsForPlayerRequest": {
      "name": "CancelAllMatchmakingTicketsForPlayerRequest",
      "in": "body",
      "description": "Cancels all tickets of which the player is a member in a given queue that are not cancelled or matched. This API is useful if you lose track of what tickets the player is a member of (if the title crashes for instance) and want to \"reset\". The Entity field is optional if the caller is a player and defaults to that player. Players may not cancel tickets for other people. The Entity field is required if the caller is a server (authenticated as the title).",
      "schema": {
        "$ref": "#/definitions/CancelAllMatchmakingTicketsForPlayerRequest"
      }
    },
    "CancelMatchmakingTicketRequest": {
      "name": "CancelMatchmakingTicketRequest",
      "in": "body",
      "description": "Only servers and ticket members can cancel a ticket. The ticket can be in five different states when it is cancelled. 1: the ticket is waiting for members to join it, and it has not started matching. If the ticket is cancelled at this stage, it will never match. 2: the ticket is matching. If the ticket is cancelled, it will stop matching. 3: the ticket is matched. A matched ticket cannot be cancelled. 4: the ticket is already cancelled and nothing happens. 5: the ticket is waiting for a server. If the ticket is cancelled, server allocation will be stopped. A server may still be allocated due to a race condition, but that will not be reflected in the ticket. There may be race conditions between the ticket getting matched and the client making a cancellation request. The client must handle the possibility that the cancel request fails if a match is found before the cancellation request is processed. We do not allow resubmitting a cancelled ticket because players must consent to enter matchmaking again. Create a new ticket instead.",
      "schema": {
        "$ref": "#/definitions/CancelMatchmakingTicketRequest"
      }
    },
    "CreateBuildWithCustomContainerRequest": {
      "name": "CreateBuildWithCustomContainerRequest",
      "in": "body",
      "description": "Creates a multiplayer server build with a custom container and returns information about the build creation request.",
      "schema": {
        "$ref": "#/definitions/CreateBuildWithCustomContainerRequest"
      }
    },
    "CreateBuildWithManagedContainerRequest": {
      "name": "CreateBuildWithManagedContainerRequest",
      "in": "body",
      "description": "Creates a multiplayer server build with a managed container and returns information about the build creation request.",
      "schema": {
        "$ref": "#/definitions/CreateBuildWithManagedContainerRequest"
      }
    },
    "CreateMatchmakingTicketRequest": {
      "name": "CreateMatchmakingTicketRequest",
      "in": "body",
      "description": "The client specifies the creator's attributes and optionally a list of other users to match with.",
      "schema": {
        "$ref": "#/definitions/CreateMatchmakingTicketRequest"
      }
    },
    "CreateRemoteUserRequest": {
      "name": "CreateRemoteUserRequest",
      "in": "body",
      "description": "Creates a remote user to log on to a VM for a multiplayer server build in a specific region. Returns user credential information necessary to log on.",
      "schema": {
        "$ref": "#/definitions/CreateRemoteUserRequest"
      }
    },
    "CreateServerMatchmakingTicketRequest": {
      "name": "CreateServerMatchmakingTicketRequest",
      "in": "body",
      "description": "The server specifies all the members and their attributes.",
      "schema": {
        "$ref": "#/definitions/CreateServerMatchmakingTicketRequest"
      }
    },
    "DeleteAssetRequest": {
      "name": "DeleteAssetRequest",
      "in": "body",
      "description": "Deletes a multiplayer server game asset for a title.",
      "schema": {
        "$ref": "#/definitions/DeleteAssetRequest"
      }
    },
    "DeleteBuildRequest": {
      "name": "DeleteBuildRequest",
      "in": "body",
      "description": "Deletes a multiplayer server build.",
      "schema": {
        "$ref": "#/definitions/DeleteBuildRequest"
      }
    },
    "DeleteCertificateRequest": {
      "name": "DeleteCertificateRequest",
      "in": "body",
      "description": "Deletes a multiplayer server game certificate.",
      "schema": {
        "$ref": "#/definitions/DeleteCertificateRequest"
      }
    },
    "DeleteRemoteUserRequest": {
      "name": "DeleteRemoteUserRequest",
      "in": "body",
      "description": "Deletes a remote user to log on to a VM for a multiplayer server build in a specific region. Returns user credential information necessary to log on.",
      "schema": {
        "$ref": "#/definitions/DeleteRemoteUserRequest"
      }
    },
    "EnableMultiplayerServersForTitleRequest": {
      "name": "EnableMultiplayerServersForTitleRequest",
      "in": "body",
      "description": "Enables the multiplayer server feature for a title and returns the enabled status. The enabled status can be Initializing, Enabled, and Disabled. It can up to 20 minutes or more for the title to be enabled for the feature. On average, it can take up to 20 minutes for the title to be enabled for the feature.",
      "schema": {
        "$ref": "#/definitions/EnableMultiplayerServersForTitleRequest"
      }
    },
    "GetAssetUploadUrlRequest": {
      "name": "GetAssetUploadUrlRequest",
      "in": "body",
      "description": "Gets the URL to upload assets to.",
      "schema": {
        "$ref": "#/definitions/GetAssetUploadUrlRequest"
      }
    },
    "GetBuildRequest": {
      "name": "GetBuildRequest",
      "in": "body",
      "description": "Returns the details about a multiplayer server build.",
      "schema": {
        "$ref": "#/definitions/GetBuildRequest"
      }
    },
    "GetContainerRegistryCredentialsRequest": {
      "name": "GetContainerRegistryCredentialsRequest",
      "in": "body",
      "description": "Gets credentials to the container registry where game developers can upload custom container images to before creating a new build.",
      "schema": {
        "$ref": "#/definitions/GetContainerRegistryCredentialsRequest"
      }
    },
    "GetMatchmakingTicketRequest": {
      "name": "GetMatchmakingTicketRequest",
      "in": "body",
      "description": "The ticket includes the invited players, their attributes if they have joined, the ticket status, the match Id when applicable, etc. Only servers, the ticket creator and the invited players can get the ticket.",
      "schema": {
        "$ref": "#/definitions/GetMatchmakingTicketRequest"
      }
    },
    "GetMatchRequest": {
      "name": "GetMatchRequest",
      "in": "body",
      "description": "When matchmaking has successfully matched together a collection of tickets, it produces a 'match' with an Id. The match contains all of the players that were matched together, and their team assigments. Only servers and ticket members can get the match.",
      "schema": {
        "$ref": "#/definitions/GetMatchRequest"
      }
    },
    "GetMultiplayerServerDetailsRequest": {
      "name": "GetMultiplayerServerDetailsRequest",
      "in": "body",
      "description": "Gets multiplayer server session details for a build in a specific region.",
      "schema": {
        "$ref": "#/definitions/GetMultiplayerServerDetailsRequest"
      }
    },
    "GetQueueStatisticsRequest": {
      "name": "GetQueueStatisticsRequest",
      "in": "body",
      "description": "Returns the matchmaking statistics for a queue. These include the number of players matching and the statistics related to the time to match statistics in seconds (average and percentiles). Statistics are refreshed once every 5 minutes. Servers can access all statistics no matter what the ClientStatisticsVisibility is configured to. Clients can access statistics according to the ClientStatisticsVisibility. Client requests are forbidden if all visibility fields are false.",
      "schema": {
        "$ref": "#/definitions/GetQueueStatisticsRequest"
      }
    },
    "GetRemoteLoginEndpointRequest": {
      "name": "GetRemoteLoginEndpointRequest",
      "in": "body",
      "description": "Gets a remote login endpoint to a VM that is hosting a multiplayer server build in a specific region.",
      "schema": {
        "$ref": "#/definitions/GetRemoteLoginEndpointRequest"
      }
    },
    "GetTitleEnabledForMultiplayerServersStatusRequest": {
      "name": "GetTitleEnabledForMultiplayerServersStatusRequest",
      "in": "body",
      "description": "Gets the status of whether a title is enabled for the multiplayer server feature. The enabled status can be Initializing, Enabled, and Disabled.",
      "schema": {
        "$ref": "#/definitions/GetTitleEnabledForMultiplayerServersStatusRequest"
      }
    },
    "JoinMatchmakingTicketRequest": {
      "name": "JoinMatchmakingTicketRequest",
      "in": "body",
      "description": "Add the player to a matchmaking ticket and specify all of its matchmaking attributes. Players can join a ticket if and only if their EntityKeys are already listed in the ticket's Members list. The matchmaking service automatically starts matching the ticket against other matchmaking tickets once all players have joined the ticket. It is not possible to join a ticket once it has started matching.",
      "schema": {
        "$ref": "#/definitions/JoinMatchmakingTicketRequest"
      }
    },
    "ListAssetSummariesRequest": {
      "name": "ListAssetSummariesRequest",
      "in": "body",
      "description": "Returns a list of multiplayer server game asset summaries for a title.",
      "schema": {
        "$ref": "#/definitions/ListAssetSummariesRequest"
      }
    },
    "ListBuildSummariesRequest": {
      "name": "ListBuildSummariesRequest",
      "in": "body",
      "description": "Returns a list of summarized details of all multiplayer server builds for a title.",
      "schema": {
        "$ref": "#/definitions/ListBuildSummariesRequest"
      }
    },
    "ListCertificateSummariesRequest": {
      "name": "ListCertificateSummariesRequest",
      "in": "body",
      "description": "Returns a list of multiplayer server game certificates for a title.",
      "schema": {
        "$ref": "#/definitions/ListCertificateSummariesRequest"
      }
    },
    "ListContainerImagesRequest": {
      "name": "ListContainerImagesRequest",
      "in": "body",
      "description": "Returns a list of the container images that have been uploaded to the container registry for a title.",
      "schema": {
        "$ref": "#/definitions/ListContainerImagesRequest"
      }
    },
    "ListContainerImageTagsRequest": {
      "name": "ListContainerImageTagsRequest",
      "in": "body",
      "description": "Returns a list of the tags for a particular container image that exists in the container registry for a title.",
      "schema": {
        "$ref": "#/definitions/ListContainerImageTagsRequest"
      }
    },
    "ListMatchmakingTicketsForPlayerRequest": {
      "name": "ListMatchmakingTicketsForPlayerRequest",
      "in": "body",
      "description": "If the caller is a title, the EntityKey in the request is required. If the caller is a player, then it is optional. If it is provided it must match the caller's entity.",
      "schema": {
        "$ref": "#/definitions/ListMatchmakingTicketsForPlayerRequest"
      }
    },
    "ListMultiplayerServersRequest": {
      "name": "ListMultiplayerServersRequest",
      "in": "body",
      "description": "Returns a list of multiplayer servers for a build in a specific region.",
      "schema": {
        "$ref": "#/definitions/ListMultiplayerServersRequest"
      }
    },
    "ListQosServersRequest": {
      "name": "ListQosServersRequest",
      "in": "body",
      "description": "Returns a list of quality of service servers.",
      "schema": {
        "$ref": "#/definitions/ListQosServersRequest"
      }
    },
    "ListVirtualMachineSummariesRequest": {
      "name": "ListVirtualMachineSummariesRequest",
      "in": "body",
      "description": "Returns a list of virtual machines for a title.",
      "schema": {
        "$ref": "#/definitions/ListVirtualMachineSummariesRequest"
      }
    },
    "RequestMultiplayerServerRequest": {
      "name": "RequestMultiplayerServerRequest",
      "in": "body",
      "description": "Requests a multiplayer server session from a particular build in any of the given preferred regions.",
      "schema": {
        "$ref": "#/definitions/RequestMultiplayerServerRequest"
      }
    },
    "RolloverContainerRegistryCredentialsRequest": {
      "name": "RolloverContainerRegistryCredentialsRequest",
      "in": "body",
      "description": "Gets new credentials to the container registry where game developers can upload custom container images to before creating a new build.",
      "schema": {
        "$ref": "#/definitions/RolloverContainerRegistryCredentialsRequest"
      }
    },
    "ShutdownMultiplayerServerRequest": {
      "name": "ShutdownMultiplayerServerRequest",
      "in": "body",
      "description": "Executes the shutdown callback from the GSDK and terminates the multiplayer server session. The callback in the GSDK will allow for graceful shutdown with a 15 minute timeoutIf graceful shutdown has not been completed before 15 minutes have elapsed, the multiplayer server session will be forcefully terminated on it's own.",
      "schema": {
        "$ref": "#/definitions/ShutdownMultiplayerServerRequest"
      }
    },
    "UpdateBuildRegionsRequest": {
      "name": "UpdateBuildRegionsRequest",
      "in": "body",
      "description": "Updates a multiplayer server build's regions.",
      "schema": {
        "$ref": "#/definitions/UpdateBuildRegionsRequest"
      }
    },
    "UploadCertificateRequest": {
      "name": "UploadCertificateRequest",
      "in": "body",
      "description": "Uploads a multiplayer server game certificate.",
      "schema": {
        "$ref": "#/definitions/UploadCertificateRequest"
      }
    }
  },
  "responses": {
    "ApiErrorWrapper": {
      "description": "This is the outer-wrapper for all responses with errors",
      "schema": {
        "$ref": "#/definitions/ApiErrorWrapper"
      }
    },
    "CancelAllMatchmakingTicketsForPlayerResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CancelAllMatchmakingTicketsForPlayerResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "CancelMatchmakingTicketResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CancelMatchmakingTicketResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "CreateBuildWithCustomContainerResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CreateBuildWithCustomContainerResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "ContainerRunCommand": "/data/Assets -startserver",
            "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
            "BuildName": "GameBuildName",
            "CreationTime": "2014-04-07T09:04:28",
            "Metadata": {
              "MetadataKey": "MetadataValue"
            },
            "VmSize": "Standard_D2_v2",
            "ContainerFlavor": "CustomLinux",
            "Ports": [
              {
                "Name": "PortName",
                "Num": 1243
              }
            ],
            "RegionConfigurations": [
              {
                "Region": "EastUs",
                "Status": "Initialized",
                "MaxServers": 10,
                "StandbyServers": 5
              },
              {
                "Region": "WestUs",
                "Status": "Deployed",
                "MaxServers": 12,
                "StandbyServers": 8
              },
              {
                "Region": "NorthEurope",
                "Status": "Unhealthy",
                "MaxServers": 7,
                "StandbyServers": 3
              }
            ],
            "GameAssetReferences": [
              {
                "FileName": "gameserver.zip",
                "MountPath": "/data/Assets"
              }
            ],
            "GameCertificateReferences": [
              {
                "Name": "CertName",
                "GsdkAlias": "CertGsdkAlias"
              }
            ],
            "MultiplayerServerCountPerVm": 10
          }
        }
      }
    },
    "CreateBuildWithManagedContainerResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CreateBuildWithManagedContainerResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "StartMultiplayerServerCommand": "C:\\Assets\\gameserver.exe -startserver",
            "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
            "BuildName": "GameBuildName",
            "CreationTime": "2014-04-07T09:04:28",
            "Metadata": {
              "MetadataKey": "MetadataValue"
            },
            "VmSize": "Standard_D2_v2",
            "Ports": [
              {
                "Name": "PortName",
                "Num": 1243
              }
            ],
            "RegionConfigurations": [
              {
                "Region": "EastUs",
                "Status": "Initializing",
                "MaxServers": 10,
                "StandbyServers": 5
              },
              {
                "Region": "WestUs",
                "Status": "Succeeded",
                "MaxServers": 12,
                "StandbyServers": 8
              },
              {
                "Region": "NorthEurope",
                "Status": "Unhealthy",
                "MaxServers": 7,
                "StandbyServers": 3
              }
            ],
            "GameAssetReferences": [
              {
                "FileName": "gameserver.zip",
                "MountPath": "C:\\Asset\\"
              }
            ],
            "GameCertificateReferences": [
              {
                "Name": "CertName",
                "GsdkAlias": "CertGsdkAlias"
              }
            ],
            "MultiplayerServerCountPerVm": 10
          }
        }
      }
    },
    "CreateMatchmakingTicketResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CreateMatchmakingTicketResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c"
          }
        }
      }
    },
    "CreateRemoteUserResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CreateRemoteUserResponse"
          }
        }
      }
    },
    "EmptyResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/EmptyResponse"
          }
        }
      }
    },
    "EnableMultiplayerServersForTitleResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/EnableMultiplayerServersForTitleResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "GetAssetUploadUrlResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetAssetUploadUrlResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "FileName": "gameserver.zip",
            "AssetUploadUrl": "https://2mxyjirehzyc6.blob.core.windows.net/gameassets/gameserver.zip?sv=2015-04-05&ss=b&srt=sco&sp=rw&st=2018-08-21T20%3A27%3A47.5613204Z&se=2018-08-22T01%3A27%3A47.5613204Z&spr=https&sig=SJH%2B1rgFm6%2F6EkUWVPCI5pSR49W5EbZ4L51sDBlkAtE%3D&api-version=2017-07-29"
          }
        }
      }
    },
    "GetBuildResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetBuildResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
            "BuildName": "GameBuildName",
            "BuildStatus": "Deployed",
            "CreationTime": "2014-04-07T09:04:28",
            "Metadata": {
              "MetadataKey": "MetadataValue"
            },
            "VmSize": "Standard_D2_v2",
            "Ports": [
              {
                "Name": "PortName",
                "Num": 1243
              }
            ],
            "RegionConfigurations": [
              {
                "Region": "EastUs",
                "Status": "Initializing",
                "MaxServers": 10,
                "StandbyServers": 5,
                "CurrentServerStats": {
                  "Propping": 5,
                  "Total": 5
                }
              },
              {
                "Region": "WestUs",
                "Status": "Succeeded",
                "MaxServers": 12,
                "StandbyServers": 8,
                "CurrentServerStats": {
                  "Active": 1,
                  "StandingBy": 7,
                  "Propping": 1,
                  "Total": 9
                }
              },
              {
                "Region": "NorthEurope",
                "Status": "Unhealthy",
                "MaxServers": 7,
                "StandbyServers": 3,
                "CurrentServerStats": {
                  "Propping": 3,
                  "Total": 3
                }
              }
            ],
            "GameAssetReferences": [
              {
                "FileName": "gameserver.zip",
                "MountPath": "C:\\Asset\\"
              }
            ],
            "GameCertificateReferences": [
              {
                "Name": "CertName",
                "GsdkAlias": "CertGsdkAlias"
              }
            ],
            "StartMultiplayerServerCommand": "C:\\Assets\\gameserver.exe -startserver",
            "MultiplayerServerCountPerVm": 1
          }
        }
      }
    },
    "GetContainerRegistryCredentialsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetContainerRegistryCredentialsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "DnsName": "registry.azurecr.io",
            "Username": "RegistryUser",
            "Password": "RegistryPassword"
          }
        }
      }
    },
    "GetMatchmakingTicketResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetMatchmakingTicketResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
            "QueueName": "custom123",
            "MatchId": "4e0c5fd7-80e9-4744-b0ce-061a7f067ff5",
            "Created": "2016-08-23T12:33:14",
            "Status": "Matched",
            "GiveUpAfterSeconds": 100,
            "MembersToMatchWith": [
              {
                "Id": "456456456",
                "Type": "title_player_acount",
                "TypeString": "title_player_acount"
              }
            ],
            "Members": [],
            "Creator": {
              "Id": "123123123",
              "Type": "title_player_acount",
              "TypeString": "title_player_acount"
            }
          }
        }
      }
    },
    "GetMatchResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetMatchResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "MatchId": "4e0c5fd7-80e9-4744-b0ce-061a7f067ff5",
            "Members": [],
            "RegionPreferences": [
              "Region1",
              "Region2"
            ],
            "ServerDetails": {
              "IPV4Address": "10.250.24.54",
              "Ports": [
                {
                  "Name": "PortName",
                  "Num": 1243
                }
              ],
              "Region": "WestUS"
            }
          }
        }
      }
    },
    "GetMultiplayerServerDetailsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetMultiplayerServerDetailsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "SessionId": "02bdef0e-e01e-4b29-8efe-ff9f47a06d8c",
            "ServerId": "AMultiplayerGameServer",
            "VmId": "VmID1",
            "IPV4Address": "10.250.24.54",
            "FQDN": "vmId1.azure.cloudapp.net",
            "Ports": [
              {
                "Name": "PortName",
                "Num": 1243
              }
            ],
            "Region": "SouthCentralUs",
            "State": "Active",
            "ConnectedPlayers": [
              {
                "PlayerId": "10931352888739351331"
              },
              {
                "PlayerId": "10271352123739051532"
              }
            ]
          }
        }
      }
    },
    "GetQueueStatisticsResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetQueueStatisticsResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "NumberOfPlayersMatching": 563,
            "TimeToMatchStatisticsInSeconds": {
              "Average": 2.2,
              "Percentile50": 2.1,
              "Percentile90": 2.21,
              "Percentile99": 3.0
            }
          }
        }
      }
    },
    "GetRemoteLoginEndpointResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetRemoteLoginEndpointResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "IPV4Address": "10.250.24.54",
            "Port": 1234
          }
        }
      }
    },
    "GetTitleEnabledForMultiplayerServersStatusResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetTitleEnabledForMultiplayerServersStatusResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Status": "Disabled"
          }
        }
      }
    },
    "JoinMatchmakingTicketResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/JoinMatchmakingTicketResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "ListAssetSummariesResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ListAssetSummariesResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "AssetSummaries": [
              {
                "FileName": "gameserver.zip",
                "Metadata": {
                  "MetadataKey": "MetaDataValue"
                }
              }
            ],
            "PageSize": 10
          }
        }
      }
    },
    "ListBuildSummariesResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ListBuildSummariesResponse"
          }
        }
      }
    },
    "ListCertificateSummariesResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ListCertificateSummariesResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "CertificateSummaries": [
              {
                "Name": "GameCertificate1",
                "Thumbprint": "Thumbprint1"
              },
              {
                "Name": "GameCertificate2",
                "Thumbprint": "Thumbprint2"
              }
            ],
            "PageSize": 10
          }
        }
      }
    },
    "ListContainerImagesResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ListContainerImagesResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Images": [
              "ImageName1",
              "ImageName2"
            ],
            "PageSize": 10
          }
        }
      }
    },
    "ListContainerImageTagsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ListContainerImageTagsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Tags": [
              "ImageTag1",
              "ImageTag2"
            ]
          }
        }
      }
    },
    "ListMatchmakingTicketsForPlayerResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ListMatchmakingTicketsForPlayerResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "TicketIds": [
              "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
              "d7cf891d-1dea-4f32-9e7e-277c0a245064"
            ]
          }
        }
      }
    },
    "ListMultiplayerServersResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ListMultiplayerServersResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "MultiplayerServerSummaries": [
              {
                "ServerId": "AMultiplayerGameServer",
                "SessionId": "02bdef0e-e01e-4b29-8efe-ff9f47a06d8c",
                "VmId": "VmID1",
                "Region": "SouthCentralUs",
                "State": "Active",
                "ConnectedPlayers": [
                  {
                    "PlayerId": "10931352888739351331"
                  },
                  {
                    "PlayerId": "10271352123739051532"
                  }
                ]
              },
              {
                "ServerId": "SomeOtherMultiplayerGameServer",
                "SessionId": "82bdef0e-a21e-3b29-8efe-ff9e57a08c1d",
                "VmId": "VmID2",
                "Region": "SouthCentralUs",
                "State": "Terminated",
                "ConnectedPlayers": []
              }
            ]
          }
        }
      }
    },
    "ListQosServersResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ListQosServersResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "QosServers": [
              {
                "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
                "Region": "WestUs"
              },
              {
                "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
                "Region": "SouthCentralUs"
              },
              {
                "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
                "Region": "EastUs"
              },
              {
                "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
                "Region": "NorthEurope"
              },
              {
                "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
                "Region": "WestEurope"
              }
            ],
            "PageSize": 10
          }
        }
      }
    },
    "ListVirtualMachineSummariesResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ListVirtualMachineSummariesResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "VirtualMachines": [
              {
                "VmId": "VmID1",
                "State": "Running",
                "HealthStatus": "Healthy"
              },
              {
                "VmId": "VmID2",
                "State": "Propping",
                "HealthStatus": "Healthy"
              }
            ],
            "PageSize": 10
          }
        }
      }
    },
    "RequestMultiplayerServerResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/RequestMultiplayerServerResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "SessionId": "02bdef0e-e01e-4b29-8efe-ff9f47a06d8c",
            "ServerId": "AMultiplayerGameServer",
            "VmId": "80c00b02-a559-4961-9b31-4a04b39e26a6",
            "IPV4Address": "10.250.24.54",
            "FQDN": "vm.azure.cloudapp.net",
            "Ports": [
              {
                "Name": "PortName",
                "Num": 1243
              }
            ],
            "Region": "SouthCentralUs",
            "State": "Active",
            "ConnectedPlayers": [
              {
                "PlayerId": "10931352888739351331"
              },
              {
                "PlayerId": "10271352123739051532"
              }
            ]
          }
        }
      }
    },
    "RolloverContainerRegistryCredentialsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/RolloverContainerRegistryCredentialsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "DnsName": "registry.azurecr.io",
            "Username": "RegistryUser",
            "Password": "NewRegistryPassword"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Matchmaking",
      "description": "https://api.playfab.com/documentation/Multiplayer#Matchmaking"
    },
    {
      "name": "Matchmaking Admin",
      "description": "https://api.playfab.com/documentation/Multiplayer#Matchmaking-Admin"
    },
    {
      "name": "MultiplayerServer",
      "description": "https://api.playfab.com/documentation/Multiplayer#MultiplayerServer"
    }
  ],
  "securityDefinitions": {
    "None": {
      "type": "apiKey",
      "in": "header",
      "name": "None",
      "description": "This API requires no authentication headers (usually provides one to other calls)."
    },
    "SessionTicket": {
      "type": "apiKey",
      "in": "header",
      "name": "SessionTicket",
      "description": "This API requires a client session ticket, available from any Client Login function."
    },
    "SecretKey": {
      "type": "apiKey",
      "in": "header",
      "name": "SecretKey",
      "description": "This API requires a title secret key, available to title admins, from PlayFab Game Manager."
    },
    "EntityToken": {
      "type": "apiKey",
      "in": "header",
      "name": "EntityToken",
      "description": "This API requires an Entity Session Token, available from the Entity GetEntityToken method."
    }
  },
  "x-ms-docs-errors-mapping": {
    "Success": {
      "name": "Success"
    },
    "UnkownError": {
      "id": 500,
      "name": "UnkownError"
    },
    "InvalidParams": {
      "id": 1000,
      "name": "InvalidParams"
    },
    "AccountNotFound": {
      "id": 1001,
      "name": "AccountNotFound"
    },
    "AccountBanned": {
      "id": 1002,
      "name": "AccountBanned"
    },
    "InvalidUsernameOrPassword": {
      "id": 1003,
      "name": "InvalidUsernameOrPassword"
    },
    "InvalidTitleId": {
      "id": 1004,
      "name": "InvalidTitleId"
    },
    "InvalidEmailAddress": {
      "id": 1005,
      "name": "InvalidEmailAddress"
    },
    "EmailAddressNotAvailable": {
      "id": 1006,
      "name": "EmailAddressNotAvailable"
    },
    "InvalidUsername": {
      "id": 1007,
      "name": "InvalidUsername"
    },
    "InvalidPassword": {
      "id": 1008,
      "name": "InvalidPassword"
    },
    "UsernameNotAvailable": {
      "id": 1009,
      "name": "UsernameNotAvailable"
    },
    "InvalidSteamTicket": {
      "id": 1010,
      "name": "InvalidSteamTicket"
    },
    "AccountAlreadyLinked": {
      "id": 1011,
      "name": "AccountAlreadyLinked"
    },
    "LinkedAccountAlreadyClaimed": {
      "id": 1012,
      "name": "LinkedAccountAlreadyClaimed"
    },
    "InvalidFacebookToken": {
      "id": 1013,
      "name": "InvalidFacebookToken"
    },
    "AccountNotLinked": {
      "id": 1014,
      "name": "AccountNotLinked"
    },
    "FailedByPaymentProvider": {
      "id": 1015,
      "name": "FailedByPaymentProvider"
    },
    "CouponCodeNotFound": {
      "id": 1016,
      "name": "CouponCodeNotFound"
    },
    "InvalidContainerItem": {
      "id": 1017,
      "name": "InvalidContainerItem"
    },
    "ContainerNotOwned": {
      "id": 1018,
      "name": "ContainerNotOwned"
    },
    "KeyNotOwned": {
      "id": 1019,
      "name": "KeyNotOwned"
    },
    "InvalidItemIdInTable": {
      "id": 1020,
      "name": "InvalidItemIdInTable"
    },
    "InvalidReceipt": {
      "id": 1021,
      "name": "InvalidReceipt"
    },
    "ReceiptAlreadyUsed": {
      "id": 1022,
      "name": "ReceiptAlreadyUsed"
    },
    "ReceiptCancelled": {
      "id": 1023,
      "name": "ReceiptCancelled"
    },
    "GameNotFound": {
      "id": 1024,
      "name": "GameNotFound"
    },
    "GameModeNotFound": {
      "id": 1025,
      "name": "GameModeNotFound"
    },
    "InvalidGoogleToken": {
      "id": 1026,
      "name": "InvalidGoogleToken"
    },
    "UserIsNotPartOfDeveloper": {
      "id": 1027,
      "name": "UserIsNotPartOfDeveloper"
    },
    "InvalidTitleForDeveloper": {
      "id": 1028,
      "name": "InvalidTitleForDeveloper"
    },
    "TitleNameConflicts": {
      "id": 1029,
      "name": "TitleNameConflicts"
    },
    "UserisNotValid": {
      "id": 1030,
      "name": "UserisNotValid"
    },
    "ValueAlreadyExists": {
      "id": 1031,
      "name": "ValueAlreadyExists"
    },
    "BuildNotFound": {
      "id": 1032,
      "name": "BuildNotFound"
    },
    "PlayerNotInGame": {
      "id": 1033,
      "name": "PlayerNotInGame"
    },
    "InvalidTicket": {
      "id": 1034,
      "name": "InvalidTicket"
    },
    "InvalidDeveloper": {
      "id": 1035,
      "name": "InvalidDeveloper"
    },
    "InvalidOrderInfo": {
      "id": 1036,
      "name": "InvalidOrderInfo"
    },
    "RegistrationIncomplete": {
      "id": 1037,
      "name": "RegistrationIncomplete"
    },
    "InvalidPlatform": {
      "id": 1038,
      "name": "InvalidPlatform"
    },
    "UnknownError": {
      "id": 1039,
      "name": "UnknownError"
    },
    "SteamApplicationNotOwned": {
      "id": 1040,
      "name": "SteamApplicationNotOwned"
    },
    "WrongSteamAccount": {
      "id": 1041,
      "name": "WrongSteamAccount"
    },
    "TitleNotActivated": {
      "id": 1042,
      "name": "TitleNotActivated"
    },
    "RegistrationSessionNotFound": {
      "id": 1043,
      "name": "RegistrationSessionNotFound"
    },
    "NoSuchMod": {
      "id": 1044,
      "name": "NoSuchMod"
    },
    "FileNotFound": {
      "id": 1045,
      "name": "FileNotFound"
    },
    "DuplicateEmail": {
      "id": 1046,
      "name": "DuplicateEmail"
    },
    "ItemNotFound": {
      "id": 1047,
      "name": "ItemNotFound"
    },
    "ItemNotOwned": {
      "id": 1048,
      "name": "ItemNotOwned"
    },
    "ItemNotRecycleable": {
      "id": 1049,
      "name": "ItemNotRecycleable"
    },
    "ItemNotAffordable": {
      "id": 1050,
      "name": "ItemNotAffordable"
    },
    "InvalidVirtualCurrency": {
      "id": 1051,
      "name": "InvalidVirtualCurrency"
    },
    "WrongVirtualCurrency": {
      "id": 1052,
      "name": "WrongVirtualCurrency"
    },
    "WrongPrice": {
      "id": 1053,
      "name": "WrongPrice"
    },
    "NonPositiveValue": {
      "id": 1054,
      "name": "NonPositiveValue"
    },
    "InvalidRegion": {
      "id": 1055,
      "name": "InvalidRegion"
    },
    "RegionAtCapacity": {
      "id": 1056,
      "name": "RegionAtCapacity"
    },
    "ServerFailedToStart": {
      "id": 1057,
      "name": "ServerFailedToStart"
    },
    "NameNotAvailable": {
      "id": 1058,
      "name": "NameNotAvailable"
    },
    "InsufficientFunds": {
      "id": 1059,
      "name": "InsufficientFunds"
    },
    "InvalidDeviceID": {
      "id": 1060,
      "name": "InvalidDeviceID"
    },
    "InvalidPushNotificationToken": {
      "id": 1061,
      "name": "InvalidPushNotificationToken"
    },
    "NoRemainingUses": {
      "id": 1062,
      "name": "NoRemainingUses"
    },
    "InvalidPaymentProvider": {
      "id": 1063,
      "name": "InvalidPaymentProvider"
    },
    "PurchaseInitializationFailure": {
      "id": 1064,
      "name": "PurchaseInitializationFailure"
    },
    "DuplicateUsername": {
      "id": 1065,
      "name": "DuplicateUsername"
    },
    "InvalidBuyerInfo": {
      "id": 1066,
      "name": "InvalidBuyerInfo"
    },
    "NoGameModeParamsSet": {
      "id": 1067,
      "name": "NoGameModeParamsSet"
    },
    "BodyTooLarge": {
      "id": 1068,
      "name": "BodyTooLarge"
    },
    "ReservedWordInBody": {
      "id": 1069,
      "name": "ReservedWordInBody"
    },
    "InvalidTypeInBody": {
      "id": 1070,
      "name": "InvalidTypeInBody"
    },
    "InvalidRequest": {
      "id": 1071,
      "name": "InvalidRequest"
    },
    "ReservedEventName": {
      "id": 1072,
      "name": "ReservedEventName"
    },
    "InvalidUserStatistics": {
      "id": 1073,
      "name": "InvalidUserStatistics"
    },
    "NotAuthenticated": {
      "id": 1074,
      "name": "NotAuthenticated"
    },
    "StreamAlreadyExists": {
      "id": 1075,
      "name": "StreamAlreadyExists"
    },
    "ErrorCreatingStream": {
      "id": 1076,
      "name": "ErrorCreatingStream"
    },
    "StreamNotFound": {
      "id": 1077,
      "name": "StreamNotFound"
    },
    "InvalidAccount": {
      "id": 1078,
      "name": "InvalidAccount"
    },
    "PurchaseDoesNotExist": {
      "id": 1080,
      "name": "PurchaseDoesNotExist"
    },
    "InvalidPurchaseTransactionStatus": {
      "id": 1081,
      "name": "InvalidPurchaseTransactionStatus"
    },
    "APINotEnabledForGameClientAccess": {
      "id": 1082,
      "name": "APINotEnabledForGameClientAccess"
    },
    "NoPushNotificationARNForTitle": {
      "id": 1083,
      "name": "NoPushNotificationARNForTitle"
    },
    "BuildAlreadyExists": {
      "id": 1084,
      "name": "BuildAlreadyExists"
    },
    "BuildPackageDoesNotExist": {
      "id": 1085,
      "name": "BuildPackageDoesNotExist"
    },
    "CustomAnalyticsEventsNotEnabledForTitle": {
      "id": 1087,
      "name": "CustomAnalyticsEventsNotEnabledForTitle"
    },
    "InvalidSharedGroupId": {
      "id": 1088,
      "name": "InvalidSharedGroupId"
    },
    "NotAuthorized": {
      "id": 1089,
      "name": "NotAuthorized"
    },
    "MissingTitleGoogleProperties": {
      "id": 1090,
      "name": "MissingTitleGoogleProperties"
    },
    "InvalidItemProperties": {
      "id": 1091,
      "name": "InvalidItemProperties"
    },
    "InvalidPSNAuthCode": {
      "id": 1092,
      "name": "InvalidPSNAuthCode"
    },
    "InvalidItemId": {
      "id": 1093,
      "name": "InvalidItemId"
    },
    "PushNotEnabledForAccount": {
      "id": 1094,
      "name": "PushNotEnabledForAccount"
    },
    "PushServiceError": {
      "id": 1095,
      "name": "PushServiceError"
    },
    "ReceiptDoesNotContainInAppItems": {
      "id": 1096,
      "name": "ReceiptDoesNotContainInAppItems"
    },
    "ReceiptContainsMultipleInAppItems": {
      "id": 1097,
      "name": "ReceiptContainsMultipleInAppItems"
    },
    "InvalidBundleID": {
      "id": 1098,
      "name": "InvalidBundleID"
    },
    "JavascriptException": {
      "id": 1099,
      "name": "JavascriptException"
    },
    "InvalidSessionTicket": {
      "id": 1100,
      "name": "InvalidSessionTicket"
    },
    "UnableToConnectToDatabase": {
      "id": 1101,
      "name": "UnableToConnectToDatabase"
    },
    "InternalServerError": {
      "id": 1110,
      "name": "InternalServerError"
    },
    "InvalidReportDate": {
      "id": 1111,
      "name": "InvalidReportDate"
    },
    "ReportNotAvailable": {
      "id": 1112,
      "name": "ReportNotAvailable"
    },
    "DatabaseThroughputExceeded": {
      "id": 1113,
      "name": "DatabaseThroughputExceeded"
    },
    "InvalidGameTicket": {
      "id": 1115,
      "name": "InvalidGameTicket"
    },
    "ExpiredGameTicket": {
      "id": 1116,
      "name": "ExpiredGameTicket"
    },
    "GameTicketDoesNotMatchLobby": {
      "id": 1117,
      "name": "GameTicketDoesNotMatchLobby"
    },
    "LinkedDeviceAlreadyClaimed": {
      "id": 1118,
      "name": "LinkedDeviceAlreadyClaimed"
    },
    "DeviceAlreadyLinked": {
      "id": 1119,
      "name": "DeviceAlreadyLinked"
    },
    "DeviceNotLinked": {
      "id": 1120,
      "name": "DeviceNotLinked"
    },
    "PartialFailure": {
      "id": 1121,
      "name": "PartialFailure"
    },
    "PublisherNotSet": {
      "id": 1122,
      "name": "PublisherNotSet"
    },
    "ServiceUnavailable": {
      "id": 1123,
      "name": "ServiceUnavailable"
    },
    "VersionNotFound": {
      "id": 1124,
      "name": "VersionNotFound"
    },
    "RevisionNotFound": {
      "id": 1125,
      "name": "RevisionNotFound"
    },
    "InvalidPublisherId": {
      "id": 1126,
      "name": "InvalidPublisherId"
    },
    "DownstreamServiceUnavailable": {
      "id": 1127,
      "name": "DownstreamServiceUnavailable"
    },
    "APINotIncludedInTitleUsageTier": {
      "id": 1128,
      "name": "APINotIncludedInTitleUsageTier"
    },
    "DAULimitExceeded": {
      "id": 1129,
      "name": "DAULimitExceeded"
    },
    "APIRequestLimitExceeded": {
      "id": 1130,
      "name": "APIRequestLimitExceeded"
    },
    "InvalidAPIEndpoint": {
      "id": 1131,
      "name": "InvalidAPIEndpoint"
    },
    "BuildNotAvailable": {
      "id": 1132,
      "name": "BuildNotAvailable"
    },
    "ConcurrentEditError": {
      "id": 1133,
      "name": "ConcurrentEditError"
    },
    "ContentNotFound": {
      "id": 1134,
      "name": "ContentNotFound"
    },
    "CharacterNotFound": {
      "id": 1135,
      "name": "CharacterNotFound"
    },
    "CloudScriptNotFound": {
      "id": 1136,
      "name": "CloudScriptNotFound"
    },
    "ContentQuotaExceeded": {
      "id": 1137,
      "name": "ContentQuotaExceeded"
    },
    "InvalidCharacterStatistics": {
      "id": 1138,
      "name": "InvalidCharacterStatistics"
    },
    "PhotonNotEnabledForTitle": {
      "id": 1139,
      "name": "PhotonNotEnabledForTitle"
    },
    "PhotonApplicationNotFound": {
      "id": 1140,
      "name": "PhotonApplicationNotFound"
    },
    "PhotonApplicationNotAssociatedWithTitle": {
      "id": 1141,
      "name": "PhotonApplicationNotAssociatedWithTitle"
    },
    "InvalidEmailOrPassword": {
      "id": 1142,
      "name": "InvalidEmailOrPassword"
    },
    "FacebookAPIError": {
      "id": 1143,
      "name": "FacebookAPIError"
    },
    "InvalidContentType": {
      "id": 1144,
      "name": "InvalidContentType"
    },
    "KeyLengthExceeded": {
      "id": 1145,
      "name": "KeyLengthExceeded"
    },
    "DataLengthExceeded": {
      "id": 1146,
      "name": "DataLengthExceeded"
    },
    "TooManyKeys": {
      "id": 1147,
      "name": "TooManyKeys"
    },
    "FreeTierCannotHaveVirtualCurrency": {
      "id": 1148,
      "name": "FreeTierCannotHaveVirtualCurrency"
    },
    "MissingAmazonSharedKey": {
      "id": 1149,
      "name": "MissingAmazonSharedKey"
    },
    "AmazonValidationError": {
      "id": 1150,
      "name": "AmazonValidationError"
    },
    "InvalidPSNIssuerId": {
      "id": 1151,
      "name": "InvalidPSNIssuerId"
    },
    "PSNInaccessible": {
      "id": 1152,
      "name": "PSNInaccessible"
    },
    "ExpiredAuthToken": {
      "id": 1153,
      "name": "ExpiredAuthToken"
    },
    "FailedToGetEntitlements": {
      "id": 1154,
      "name": "FailedToGetEntitlements"
    },
    "FailedToConsumeEntitlement": {
      "id": 1155,
      "name": "FailedToConsumeEntitlement"
    },
    "TradeAcceptingUserNotAllowed": {
      "id": 1156,
      "name": "TradeAcceptingUserNotAllowed"
    },
    "TradeInventoryItemIsAssignedToCharacter": {
      "id": 1157,
      "name": "TradeInventoryItemIsAssignedToCharacter"
    },
    "TradeInventoryItemIsBundle": {
      "id": 1158,
      "name": "TradeInventoryItemIsBundle"
    },
    "TradeStatusNotValidForCancelling": {
      "id": 1159,
      "name": "TradeStatusNotValidForCancelling"
    },
    "TradeStatusNotValidForAccepting": {
      "id": 1160,
      "name": "TradeStatusNotValidForAccepting"
    },
    "TradeDoesNotExist": {
      "id": 1161,
      "name": "TradeDoesNotExist"
    },
    "TradeCancelled": {
      "id": 1162,
      "name": "TradeCancelled"
    },
    "TradeAlreadyFilled": {
      "id": 1163,
      "name": "TradeAlreadyFilled"
    },
    "TradeWaitForStatusTimeout": {
      "id": 1164,
      "name": "TradeWaitForStatusTimeout"
    },
    "TradeInventoryItemExpired": {
      "id": 1165,
      "name": "TradeInventoryItemExpired"
    },
    "TradeMissingOfferedAndAcceptedItems": {
      "id": 1166,
      "name": "TradeMissingOfferedAndAcceptedItems"
    },
    "TradeAcceptedItemIsBundle": {
      "id": 1167,
      "name": "TradeAcceptedItemIsBundle"
    },
    "TradeAcceptedItemIsStackable": {
      "id": 1168,
      "name": "TradeAcceptedItemIsStackable"
    },
    "TradeInventoryItemInvalidStatus": {
      "id": 1169,
      "name": "TradeInventoryItemInvalidStatus"
    },
    "TradeAcceptedCatalogItemInvalid": {
      "id": 1170,
      "name": "TradeAcceptedCatalogItemInvalid"
    },
    "TradeAllowedUsersInvalid": {
      "id": 1171,
      "name": "TradeAllowedUsersInvalid"
    },
    "TradeInventoryItemDoesNotExist": {
      "id": 1172,
      "name": "TradeInventoryItemDoesNotExist"
    },
    "TradeInventoryItemIsConsumed": {
      "id": 1173,
      "name": "TradeInventoryItemIsConsumed"
    },
    "TradeInventoryItemIsStackable": {
      "id": 1174,
      "name": "TradeInventoryItemIsStackable"
    },
    "TradeAcceptedItemsMismatch": {
      "id": 1175,
      "name": "TradeAcceptedItemsMismatch"
    },
    "InvalidKongregateToken": {
      "id": 1176,
      "name": "InvalidKongregateToken"
    },
    "FeatureNotConfiguredForTitle": {
      "id": 1177,
      "name": "FeatureNotConfiguredForTitle"
    },
    "NoMatchingCatalogItemForReceipt": {
      "id": 1178,
      "name": "NoMatchingCatalogItemForReceipt"
    },
    "InvalidCurrencyCode": {
      "id": 1179,
      "name": "InvalidCurrencyCode"
    },
    "NoRealMoneyPriceForCatalogItem": {
      "id": 1180,
      "name": "NoRealMoneyPriceForCatalogItem"
    },
    "TradeInventoryItemIsNotTradable": {
      "id": 1181,
      "name": "TradeInventoryItemIsNotTradable"
    },
    "TradeAcceptedCatalogItemIsNotTradable": {
      "id": 1182,
      "name": "TradeAcceptedCatalogItemIsNotTradable"
    },
    "UsersAlreadyFriends": {
      "id": 1183,
      "name": "UsersAlreadyFriends"
    },
    "LinkedIdentifierAlreadyClaimed": {
      "id": 1184,
      "name": "LinkedIdentifierAlreadyClaimed"
    },
    "CustomIdNotLinked": {
      "id": 1185,
      "name": "CustomIdNotLinked"
    },
    "TotalDataSizeExceeded": {
      "id": 1186,
      "name": "TotalDataSizeExceeded"
    },
    "DeleteKeyConflict": {
      "id": 1187,
      "name": "DeleteKeyConflict"
    },
    "InvalidXboxLiveToken": {
      "id": 1188,
      "name": "InvalidXboxLiveToken"
    },
    "ExpiredXboxLiveToken": {
      "id": 1189,
      "name": "ExpiredXboxLiveToken"
    },
    "ResettableStatisticVersionRequired": {
      "id": 1190,
      "name": "ResettableStatisticVersionRequired"
    },
    "NotAuthorizedByTitle": {
      "id": 1191,
      "name": "NotAuthorizedByTitle"
    },
    "NoPartnerEnabled": {
      "id": 1192,
      "name": "NoPartnerEnabled"
    },
    "InvalidPartnerResponse": {
      "id": 1193,
      "name": "InvalidPartnerResponse"
    },
    "APINotEnabledForGameServerAccess": {
      "id": 1194,
      "name": "APINotEnabledForGameServerAccess"
    },
    "StatisticNotFound": {
      "id": 1195,
      "name": "StatisticNotFound"
    },
    "StatisticNameConflict": {
      "id": 1196,
      "name": "StatisticNameConflict"
    },
    "StatisticVersionClosedForWrites": {
      "id": 1197,
      "name": "StatisticVersionClosedForWrites"
    },
    "StatisticVersionInvalid": {
      "id": 1198,
      "name": "StatisticVersionInvalid"
    },
    "APIClientRequestRateLimitExceeded": {
      "id": 1199,
      "name": "APIClientRequestRateLimitExceeded"
    },
    "InvalidJSONContent": {
      "id": 1200,
      "name": "InvalidJSONContent"
    },
    "InvalidDropTable": {
      "id": 1201,
      "name": "InvalidDropTable"
    },
    "StatisticVersionAlreadyIncrementedForScheduledInterval": {
      "id": 1202,
      "name": "StatisticVersionAlreadyIncrementedForScheduledInterval"
    },
    "StatisticCountLimitExceeded": {
      "id": 1203,
      "name": "StatisticCountLimitExceeded"
    },
    "StatisticVersionIncrementRateExceeded": {
      "id": 1204,
      "name": "StatisticVersionIncrementRateExceeded"
    },
    "ContainerKeyInvalid": {
      "id": 1205,
      "name": "ContainerKeyInvalid"
    },
    "CloudScriptExecutionTimeLimitExceeded": {
      "id": 1206,
      "name": "CloudScriptExecutionTimeLimitExceeded"
    },
    "NoWritePermissionsForEvent": {
      "id": 1207,
      "name": "NoWritePermissionsForEvent"
    },
    "CloudScriptFunctionArgumentSizeExceeded": {
      "id": 1208,
      "name": "CloudScriptFunctionArgumentSizeExceeded"
    },
    "CloudScriptAPIRequestCountExceeded": {
      "id": 1209,
      "name": "CloudScriptAPIRequestCountExceeded"
    },
    "CloudScriptAPIRequestError": {
      "id": 1210,
      "name": "CloudScriptAPIRequestError"
    },
    "CloudScriptHTTPRequestError": {
      "id": 1211,
      "name": "CloudScriptHTTPRequestError"
    },
    "InsufficientGuildRole": {
      "id": 1212,
      "name": "InsufficientGuildRole"
    },
    "GuildNotFound": {
      "id": 1213,
      "name": "GuildNotFound"
    },
    "OverLimit": {
      "id": 1214,
      "name": "OverLimit"
    },
    "EventNotFound": {
      "id": 1215,
      "name": "EventNotFound"
    },
    "InvalidEventField": {
      "id": 1216,
      "name": "InvalidEventField"
    },
    "InvalidEventName": {
      "id": 1217,
      "name": "InvalidEventName"
    },
    "CatalogNotConfigured": {
      "id": 1218,
      "name": "CatalogNotConfigured"
    },
    "OperationNotSupportedForPlatform": {
      "id": 1219,
      "name": "OperationNotSupportedForPlatform"
    },
    "SegmentNotFound": {
      "id": 1220,
      "name": "SegmentNotFound"
    },
    "StoreNotFound": {
      "id": 1221,
      "name": "StoreNotFound"
    },
    "InvalidStatisticName": {
      "id": 1222,
      "name": "InvalidStatisticName"
    },
    "TitleNotQualifiedForLimit": {
      "id": 1223,
      "name": "TitleNotQualifiedForLimit"
    },
    "InvalidServiceLimitLevel": {
      "id": 1224,
      "name": "InvalidServiceLimitLevel"
    },
    "ServiceLimitLevelInTransition": {
      "id": 1225,
      "name": "ServiceLimitLevelInTransition"
    },
    "CouponAlreadyRedeemed": {
      "id": 1226,
      "name": "CouponAlreadyRedeemed"
    },
    "GameServerBuildSizeLimitExceeded": {
      "id": 1227,
      "name": "GameServerBuildSizeLimitExceeded"
    },
    "GameServerBuildCountLimitExceeded": {
      "id": 1228,
      "name": "GameServerBuildCountLimitExceeded"
    },
    "VirtualCurrencyCountLimitExceeded": {
      "id": 1229,
      "name": "VirtualCurrencyCountLimitExceeded"
    },
    "VirtualCurrencyCodeExists": {
      "id": 1230,
      "name": "VirtualCurrencyCodeExists"
    },
    "TitleNewsItemCountLimitExceeded": {
      "id": 1231,
      "name": "TitleNewsItemCountLimitExceeded"
    },
    "InvalidTwitchToken": {
      "id": 1232,
      "name": "InvalidTwitchToken"
    },
    "TwitchResponseError": {
      "id": 1233,
      "name": "TwitchResponseError"
    },
    "ProfaneDisplayName": {
      "id": 1234,
      "name": "ProfaneDisplayName"
    },
    "UserAlreadyAdded": {
      "id": 1235,
      "name": "UserAlreadyAdded"
    },
    "InvalidVirtualCurrencyCode": {
      "id": 1236,
      "name": "InvalidVirtualCurrencyCode"
    },
    "VirtualCurrencyCannotBeDeleted": {
      "id": 1237,
      "name": "VirtualCurrencyCannotBeDeleted"
    },
    "IdentifierAlreadyClaimed": {
      "id": 1238,
      "name": "IdentifierAlreadyClaimed"
    },
    "IdentifierNotLinked": {
      "id": 1239,
      "name": "IdentifierNotLinked"
    },
    "InvalidContinuationToken": {
      "id": 1240,
      "name": "InvalidContinuationToken"
    },
    "ExpiredContinuationToken": {
      "id": 1241,
      "name": "ExpiredContinuationToken"
    },
    "InvalidSegment": {
      "id": 1242,
      "name": "InvalidSegment"
    },
    "InvalidSessionId": {
      "id": 1243,
      "name": "InvalidSessionId"
    },
    "SessionLogNotFound": {
      "id": 1244,
      "name": "SessionLogNotFound"
    },
    "InvalidSearchTerm": {
      "id": 1245,
      "name": "InvalidSearchTerm"
    },
    "TwoFactorAuthenticationTokenRequired": {
      "id": 1246,
      "name": "TwoFactorAuthenticationTokenRequired"
    },
    "GameServerHostCountLimitExceeded": {
      "id": 1247,
      "name": "GameServerHostCountLimitExceeded"
    },
    "PlayerTagCountLimitExceeded": {
      "id": 1248,
      "name": "PlayerTagCountLimitExceeded"
    },
    "RequestAlreadyRunning": {
      "id": 1249,
      "name": "RequestAlreadyRunning"
    },
    "ActionGroupNotFound": {
      "id": 1250,
      "name": "ActionGroupNotFound"
    },
    "MaximumSegmentBulkActionJobsRunning": {
      "id": 1251,
      "name": "MaximumSegmentBulkActionJobsRunning"
    },
    "NoActionsOnPlayersInSegmentJob": {
      "id": 1252,
      "name": "NoActionsOnPlayersInSegmentJob"
    },
    "DuplicateStatisticName": {
      "id": 1253,
      "name": "DuplicateStatisticName"
    },
    "ScheduledTaskNameConflict": {
      "id": 1254,
      "name": "ScheduledTaskNameConflict"
    },
    "ScheduledTaskCreateConflict": {
      "id": 1255,
      "name": "ScheduledTaskCreateConflict"
    },
    "InvalidScheduledTaskName": {
      "id": 1256,
      "name": "InvalidScheduledTaskName"
    },
    "InvalidTaskSchedule": {
      "id": 1257,
      "name": "InvalidTaskSchedule"
    },
    "SteamNotEnabledForTitle": {
      "id": 1258,
      "name": "SteamNotEnabledForTitle"
    },
    "LimitNotAnUpgradeOption": {
      "id": 1259,
      "name": "LimitNotAnUpgradeOption"
    },
    "NoSecretKeyEnabledForCloudScript": {
      "id": 1260,
      "name": "NoSecretKeyEnabledForCloudScript"
    },
    "TaskNotFound": {
      "id": 1261,
      "name": "TaskNotFound"
    },
    "TaskInstanceNotFound": {
      "id": 1262,
      "name": "TaskInstanceNotFound"
    },
    "InvalidIdentityProviderId": {
      "id": 1263,
      "name": "InvalidIdentityProviderId"
    },
    "MisconfiguredIdentityProvider": {
      "id": 1264,
      "name": "MisconfiguredIdentityProvider"
    },
    "InvalidScheduledTaskType": {
      "id": 1265,
      "name": "InvalidScheduledTaskType"
    },
    "BillingInformationRequired": {
      "id": 1266,
      "name": "BillingInformationRequired"
    },
    "LimitedEditionItemUnavailable": {
      "id": 1267,
      "name": "LimitedEditionItemUnavailable"
    },
    "InvalidAdPlacementAndReward": {
      "id": 1268,
      "name": "InvalidAdPlacementAndReward"
    },
    "AllAdPlacementViewsAlreadyConsumed": {
      "id": 1269,
      "name": "AllAdPlacementViewsAlreadyConsumed"
    },
    "GoogleOAuthNotConfiguredForTitle": {
      "id": 1270,
      "name": "GoogleOAuthNotConfiguredForTitle"
    },
    "GoogleOAuthError": {
      "id": 1271,
      "name": "GoogleOAuthError"
    },
    "UserNotFriend": {
      "id": 1272,
      "name": "UserNotFriend"
    },
    "InvalidSignature": {
      "id": 1273,
      "name": "InvalidSignature"
    },
    "InvalidPublicKey": {
      "id": 1274,
      "name": "InvalidPublicKey"
    },
    "GoogleOAuthNoIdTokenIncludedInResponse": {
      "id": 1275,
      "name": "GoogleOAuthNoIdTokenIncludedInResponse"
    },
    "StatisticUpdateInProgress": {
      "id": 1276,
      "name": "StatisticUpdateInProgress"
    },
    "LeaderboardVersionNotAvailable": {
      "id": 1277,
      "name": "LeaderboardVersionNotAvailable"
    },
    "StatisticAlreadyHasPrizeTable": {
      "id": 1279,
      "name": "StatisticAlreadyHasPrizeTable"
    },
    "PrizeTableHasOverlappingRanks": {
      "id": 1280,
      "name": "PrizeTableHasOverlappingRanks"
    },
    "PrizeTableHasMissingRanks": {
      "id": 1281,
      "name": "PrizeTableHasMissingRanks"
    },
    "PrizeTableRankStartsAtZero": {
      "id": 1282,
      "name": "PrizeTableRankStartsAtZero"
    },
    "InvalidStatistic": {
      "id": 1283,
      "name": "InvalidStatistic"
    },
    "ExpressionParseFailure": {
      "id": 1284,
      "name": "ExpressionParseFailure"
    },
    "ExpressionInvokeFailure": {
      "id": 1285,
      "name": "ExpressionInvokeFailure"
    },
    "ExpressionTooLong": {
      "id": 1286,
      "name": "ExpressionTooLong"
    },
    "DataUpdateRateExceeded": {
      "id": 1287,
      "name": "DataUpdateRateExceeded"
    },
    "RestrictedEmailDomain": {
      "id": 1288,
      "name": "RestrictedEmailDomain"
    },
    "EncryptionKeyDisabled": {
      "id": 1289,
      "name": "EncryptionKeyDisabled"
    },
    "EncryptionKeyMissing": {
      "id": 1290,
      "name": "EncryptionKeyMissing"
    },
    "EncryptionKeyBroken": {
      "id": 1291,
      "name": "EncryptionKeyBroken"
    },
    "NoSharedSecretKeyConfigured": {
      "id": 1292,
      "name": "NoSharedSecretKeyConfigured"
    },
    "SecretKeyNotFound": {
      "id": 1293,
      "name": "SecretKeyNotFound"
    },
    "PlayerSecretAlreadyConfigured": {
      "id": 1294,
      "name": "PlayerSecretAlreadyConfigured"
    },
    "APIRequestsDisabledForTitle": {
      "id": 1295,
      "name": "APIRequestsDisabledForTitle"
    },
    "InvalidSharedSecretKey": {
      "id": 1296,
      "name": "InvalidSharedSecretKey"
    },
    "PrizeTableHasNoRanks": {
      "id": 1297,
      "name": "PrizeTableHasNoRanks"
    },
    "ProfileDoesNotExist": {
      "id": 1298,
      "name": "ProfileDoesNotExist"
    },
    "ContentS3OriginBucketNotConfigured": {
      "id": 1299,
      "name": "ContentS3OriginBucketNotConfigured"
    },
    "InvalidEnvironmentForReceipt": {
      "id": 1300,
      "name": "InvalidEnvironmentForReceipt"
    },
    "EncryptedRequestNotAllowed": {
      "id": 1301,
      "name": "EncryptedRequestNotAllowed"
    },
    "SignedRequestNotAllowed": {
      "id": 1302,
      "name": "SignedRequestNotAllowed"
    },
    "RequestViewConstraintParamsNotAllowed": {
      "id": 1303,
      "name": "RequestViewConstraintParamsNotAllowed"
    },
    "BadPartnerConfiguration": {
      "id": 1304,
      "name": "BadPartnerConfiguration"
    },
    "XboxBPCertificateFailure": {
      "id": 1305,
      "name": "XboxBPCertificateFailure"
    },
    "XboxXASSExchangeFailure": {
      "id": 1306,
      "name": "XboxXASSExchangeFailure"
    },
    "InvalidEntityId": {
      "id": 1307,
      "name": "InvalidEntityId"
    },
    "StatisticValueAggregationOverflow": {
      "id": 1308,
      "name": "StatisticValueAggregationOverflow"
    },
    "EmailMessageFromAddressIsMissing": {
      "id": 1309,
      "name": "EmailMessageFromAddressIsMissing"
    },
    "EmailMessageToAddressIsMissing": {
      "id": 1310,
      "name": "EmailMessageToAddressIsMissing"
    },
    "SmtpServerAuthenticationError": {
      "id": 1311,
      "name": "SmtpServerAuthenticationError"
    },
    "SmtpServerLimitExceeded": {
      "id": 1312,
      "name": "SmtpServerLimitExceeded"
    },
    "SmtpServerInsufficientStorage": {
      "id": 1313,
      "name": "SmtpServerInsufficientStorage"
    },
    "SmtpServerCommunicationError": {
      "id": 1314,
      "name": "SmtpServerCommunicationError"
    },
    "SmtpServerGeneralFailure": {
      "id": 1315,
      "name": "SmtpServerGeneralFailure"
    },
    "EmailClientTimeout": {
      "id": 1316,
      "name": "EmailClientTimeout"
    },
    "EmailClientCanceledTask": {
      "id": 1317,
      "name": "EmailClientCanceledTask"
    },
    "EmailTemplateMissing": {
      "id": 1318,
      "name": "EmailTemplateMissing"
    },
    "InvalidHostForTitleId": {
      "id": 1319,
      "name": "InvalidHostForTitleId"
    },
    "EmailConfirmationTokenDoesNotExist": {
      "id": 1320,
      "name": "EmailConfirmationTokenDoesNotExist"
    },
    "EmailConfirmationTokenExpired": {
      "id": 1321,
      "name": "EmailConfirmationTokenExpired"
    },
    "AccountDeleted": {
      "id": 1322,
      "name": "AccountDeleted"
    },
    "PlayerSecretNotConfigured": {
      "id": 1323,
      "name": "PlayerSecretNotConfigured"
    },
    "InvalidSignatureTime": {
      "id": 1324,
      "name": "InvalidSignatureTime"
    },
    "NoContactEmailAddressFound": {
      "id": 1325,
      "name": "NoContactEmailAddressFound"
    },
    "InvalidAuthToken": {
      "id": 1326,
      "name": "InvalidAuthToken"
    },
    "AuthTokenDoesNotExist": {
      "id": 1327,
      "name": "AuthTokenDoesNotExist"
    },
    "AuthTokenExpired": {
      "id": 1328,
      "name": "AuthTokenExpired"
    },
    "AuthTokenAlreadyUsedToResetPassword": {
      "id": 1329,
      "name": "AuthTokenAlreadyUsedToResetPassword"
    },
    "MembershipNameTooLong": {
      "id": 1330,
      "name": "MembershipNameTooLong"
    },
    "MembershipNotFound": {
      "id": 1331,
      "name": "MembershipNotFound"
    },
    "GoogleServiceAccountInvalid": {
      "id": 1332,
      "name": "GoogleServiceAccountInvalid"
    },
    "GoogleServiceAccountParseFailure": {
      "id": 1333,
      "name": "GoogleServiceAccountParseFailure"
    },
    "EntityTokenMissing": {
      "id": 1334,
      "name": "EntityTokenMissing"
    },
    "EntityTokenInvalid": {
      "id": 1335,
      "name": "EntityTokenInvalid"
    },
    "EntityTokenExpired": {
      "id": 1336,
      "name": "EntityTokenExpired"
    },
    "EntityTokenRevoked": {
      "id": 1337,
      "name": "EntityTokenRevoked"
    },
    "InvalidProductForSubscription": {
      "id": 1338,
      "name": "InvalidProductForSubscription"
    },
    "XboxInaccessible": {
      "id": 1339,
      "name": "XboxInaccessible"
    },
    "SubscriptionAlreadyTaken": {
      "id": 1340,
      "name": "SubscriptionAlreadyTaken"
    },
    "SmtpAddonNotEnabled": {
      "id": 1341,
      "name": "SmtpAddonNotEnabled"
    },
    "APIConcurrentRequestLimitExceeded": {
      "id": 1342,
      "name": "APIConcurrentRequestLimitExceeded"
    },
    "XboxRejectedXSTSExchangeRequest": {
      "id": 1343,
      "name": "XboxRejectedXSTSExchangeRequest"
    },
    "VariableNotDefined": {
      "id": 1344,
      "name": "VariableNotDefined"
    },
    "TemplateVersionNotDefined": {
      "id": 1345,
      "name": "TemplateVersionNotDefined"
    },
    "FileTooLarge": {
      "id": 1346,
      "name": "FileTooLarge"
    },
    "TitleDeleted": {
      "id": 1347,
      "name": "TitleDeleted"
    },
    "TitleContainsUserAccounts": {
      "id": 1348,
      "name": "TitleContainsUserAccounts"
    },
    "TitleDeletionPlayerCleanupFailure": {
      "id": 1349,
      "name": "TitleDeletionPlayerCleanupFailure"
    },
    "EntityFileOperationPending": {
      "id": 1350,
      "name": "EntityFileOperationPending"
    },
    "NoEntityFileOperationPending": {
      "id": 1351,
      "name": "NoEntityFileOperationPending"
    },
    "EntityProfileVersionMismatch": {
      "id": 1352,
      "name": "EntityProfileVersionMismatch"
    },
    "TemplateVersionTooOld": {
      "id": 1353,
      "name": "TemplateVersionTooOld"
    },
    "MembershipDefinitionInUse": {
      "id": 1354,
      "name": "MembershipDefinitionInUse"
    },
    "PaymentPageNotConfigured": {
      "id": 1355,
      "name": "PaymentPageNotConfigured"
    },
    "FailedLoginAttemptRateLimitExceeded": {
      "id": 1356,
      "name": "FailedLoginAttemptRateLimitExceeded"
    },
    "EntityBlockedByGroup": {
      "id": 1357,
      "name": "EntityBlockedByGroup"
    },
    "RoleDoesNotExist": {
      "id": 1358,
      "name": "RoleDoesNotExist"
    },
    "EntityIsAlreadyMember": {
      "id": 1359,
      "name": "EntityIsAlreadyMember"
    },
    "DuplicateRoleId": {
      "id": 1360,
      "name": "DuplicateRoleId"
    },
    "GroupInvitationNotFound": {
      "id": 1361,
      "name": "GroupInvitationNotFound"
    },
    "GroupApplicationNotFound": {
      "id": 1362,
      "name": "GroupApplicationNotFound"
    },
    "OutstandingInvitationAcceptedInstead": {
      "id": 1363,
      "name": "OutstandingInvitationAcceptedInstead"
    },
    "OutstandingApplicationAcceptedInstead": {
      "id": 1364,
      "name": "OutstandingApplicationAcceptedInstead"
    },
    "RoleIsGroupDefaultMember": {
      "id": 1365,
      "name": "RoleIsGroupDefaultMember"
    },
    "RoleIsGroupAdmin": {
      "id": 1366,
      "name": "RoleIsGroupAdmin"
    },
    "RoleNameNotAvailable": {
      "id": 1367,
      "name": "RoleNameNotAvailable"
    },
    "GroupNameNotAvailable": {
      "id": 1368,
      "name": "GroupNameNotAvailable"
    },
    "EmailReportAlreadySent": {
      "id": 1369,
      "name": "EmailReportAlreadySent"
    },
    "EmailReportRecipientBlacklisted": {
      "id": 1370,
      "name": "EmailReportRecipientBlacklisted"
    },
    "EventNamespaceNotAllowed": {
      "id": 1371,
      "name": "EventNamespaceNotAllowed"
    },
    "EventEntityNotAllowed": {
      "id": 1372,
      "name": "EventEntityNotAllowed"
    },
    "InvalidEntityType": {
      "id": 1373,
      "name": "InvalidEntityType"
    },
    "NullTokenResultFromAad": {
      "id": 1374,
      "name": "NullTokenResultFromAad"
    },
    "InvalidTokenResultFromAad": {
      "id": 1375,
      "name": "InvalidTokenResultFromAad"
    },
    "NoValidCertificateForAad": {
      "id": 1376,
      "name": "NoValidCertificateForAad"
    },
    "InvalidCertificateForAad": {
      "id": 1377,
      "name": "InvalidCertificateForAad"
    },
    "DuplicateDropTableId": {
      "id": 1378,
      "name": "DuplicateDropTableId"
    },
    "MultiplayerServerError": {
      "id": 1379,
      "name": "MultiplayerServerError"
    },
    "MultiplayerServerTooManyRequests": {
      "id": 1380,
      "name": "MultiplayerServerTooManyRequests"
    },
    "MultiplayerServerNoContent": {
      "id": 1381,
      "name": "MultiplayerServerNoContent"
    },
    "MultiplayerServerBadRequest": {
      "id": 1382,
      "name": "MultiplayerServerBadRequest"
    },
    "MultiplayerServerUnauthorized": {
      "id": 1383,
      "name": "MultiplayerServerUnauthorized"
    },
    "MultiplayerServerForbidden": {
      "id": 1384,
      "name": "MultiplayerServerForbidden"
    },
    "MultiplayerServerNotFound": {
      "id": 1385,
      "name": "MultiplayerServerNotFound"
    },
    "MultiplayerServerConflict": {
      "id": 1386,
      "name": "MultiplayerServerConflict"
    },
    "MultiplayerServerInternalServerError": {
      "id": 1387,
      "name": "MultiplayerServerInternalServerError"
    },
    "MultiplayerServerUnavailable": {
      "id": 1388,
      "name": "MultiplayerServerUnavailable"
    },
    "ExplicitContentDetected": {
      "id": 1389,
      "name": "ExplicitContentDetected"
    },
    "PIIContentDetected": {
      "id": 1390,
      "name": "PIIContentDetected"
    },
    "InvalidScheduledTaskParameter": {
      "id": 1391,
      "name": "InvalidScheduledTaskParameter"
    },
    "PerEntityEventRateLimitExceeded": {
      "id": 1392,
      "name": "PerEntityEventRateLimitExceeded"
    },
    "TitleDefaultLanguageNotSet": {
      "id": 1393,
      "name": "TitleDefaultLanguageNotSet"
    },
    "EmailTemplateMissingDefaultVersion": {
      "id": 1394,
      "name": "EmailTemplateMissingDefaultVersion"
    },
    "FacebookInstantGamesIdNotLinked": {
      "id": 1395,
      "name": "FacebookInstantGamesIdNotLinked"
    },
    "InvalidFacebookInstantGamesSignature": {
      "id": 1396,
      "name": "InvalidFacebookInstantGamesSignature"
    },
    "FacebookInstantGamesAuthNotConfiguredForTitle": {
      "id": 1397,
      "name": "FacebookInstantGamesAuthNotConfiguredForTitle"
    },
    "EntityProfileConstraintValidationFailed": {
      "id": 1398,
      "name": "EntityProfileConstraintValidationFailed"
    },
    "TelemetryIngestionKeyPending": {
      "id": 1399,
      "name": "TelemetryIngestionKeyPending"
    },
    "TelemetryIngestionKeyNotFound": {
      "id": 1400,
      "name": "TelemetryIngestionKeyNotFound"
    },
    "StatisticChildNameInvalid": {
      "id": 1402,
      "name": "StatisticChildNameInvalid"
    },
    "DataIntegrityError": {
      "id": 1403,
      "name": "DataIntegrityError"
    },
    "VirtualCurrencyCannotBeSetToOlderVersion": {
      "id": 1404,
      "name": "VirtualCurrencyCannotBeSetToOlderVersion"
    },
    "VirtualCurrencyMustBeWithinIntegerRange": {
      "id": 1405,
      "name": "VirtualCurrencyMustBeWithinIntegerRange"
    },
    "EmailTemplateInvalidSyntax": {
      "id": 1406,
      "name": "EmailTemplateInvalidSyntax"
    },
    "EmailTemplateMissingCallback": {
      "id": 1407,
      "name": "EmailTemplateMissingCallback"
    },
    "PushNotificationTemplateInvalidPayload": {
      "id": 1408,
      "name": "PushNotificationTemplateInvalidPayload"
    },
    "InvalidLocalizedPushNotificationLanguage": {
      "id": 1409,
      "name": "InvalidLocalizedPushNotificationLanguage"
    },
    "MissingLocalizedPushNotificationMessage": {
      "id": 1410,
      "name": "MissingLocalizedPushNotificationMessage"
    },
    "PushNotificationTemplateMissingPlatformPayload": {
      "id": 1411,
      "name": "PushNotificationTemplateMissingPlatformPayload"
    },
    "PushNotificationTemplatePayloadContainsInvalidJson": {
      "id": 1412,
      "name": "PushNotificationTemplatePayloadContainsInvalidJson"
    },
    "PushNotificationTemplateContainsInvalidIosPayload": {
      "id": 1413,
      "name": "PushNotificationTemplateContainsInvalidIosPayload"
    },
    "PushNotificationTemplateContainsInvalidAndroidPayload": {
      "id": 1414,
      "name": "PushNotificationTemplateContainsInvalidAndroidPayload"
    },
    "PushNotificationTemplateIosPayloadMissingNotificationBody": {
      "id": 1415,
      "name": "PushNotificationTemplateIosPayloadMissingNotificationBody"
    },
    "PushNotificationTemplateAndroidPayloadMissingNotificationBody": {
      "id": 1416,
      "name": "PushNotificationTemplateAndroidPayloadMissingNotificationBody"
    },
    "PushNotificationTemplateNotFound": {
      "id": 1417,
      "name": "PushNotificationTemplateNotFound"
    },
    "PushNotificationTemplateMissingDefaultVersion": {
      "id": 1418,
      "name": "PushNotificationTemplateMissingDefaultVersion"
    },
    "PushNotificationTemplateInvalidSyntax": {
      "id": 1419,
      "name": "PushNotificationTemplateInvalidSyntax"
    },
    "PushNotificationTemplateNoCustomPayloadForV1": {
      "id": 1420,
      "name": "PushNotificationTemplateNoCustomPayloadForV1"
    },
    "NoLeaderboardForStatistic": {
      "id": 1421,
      "name": "NoLeaderboardForStatistic"
    },
    "TitleNewsMissingDefaultLanguage": {
      "id": 1422,
      "name": "TitleNewsMissingDefaultLanguage"
    },
    "TitleNewsNotFound": {
      "id": 1423,
      "name": "TitleNewsNotFound"
    },
    "TitleNewsDuplicateLanguage": {
      "id": 1424,
      "name": "TitleNewsDuplicateLanguage"
    },
    "TitleNewsMissingTitleOrBody": {
      "id": 1425,
      "name": "TitleNewsMissingTitleOrBody"
    },
    "TitleNewsInvalidLanguage": {
      "id": 1426,
      "name": "TitleNewsInvalidLanguage"
    },
    "EmailRecipientBlacklisted": {
      "id": 1427,
      "name": "EmailRecipientBlacklisted"
    },
    "InvalidGameCenterAuthRequest": {
      "id": 1428,
      "name": "InvalidGameCenterAuthRequest"
    },
    "GameCenterAuthenticationFailed": {
      "id": 1429,
      "name": "GameCenterAuthenticationFailed"
    },
    "CannotEnablePartiesForTitle": {
      "id": 1430,
      "name": "CannotEnablePartiesForTitle"
    },
    "PartyError": {
      "id": 1431,
      "name": "PartyError"
    },
    "PartyRequests": {
      "id": 1432,
      "name": "PartyRequests"
    },
    "PartyNoContent": {
      "id": 1433,
      "name": "PartyNoContent"
    },
    "PartyBadRequest": {
      "id": 1434,
      "name": "PartyBadRequest"
    },
    "PartyUnauthorized": {
      "id": 1435,
      "name": "PartyUnauthorized"
    },
    "PartyForbidden": {
      "id": 1436,
      "name": "PartyForbidden"
    },
    "PartyNotFound": {
      "id": 1437,
      "name": "PartyNotFound"
    },
    "PartyConflict": {
      "id": 1438,
      "name": "PartyConflict"
    },
    "PartyInternalServerError": {
      "id": 1439,
      "name": "PartyInternalServerError"
    },
    "PartyUnavailable": {
      "id": 1440,
      "name": "PartyUnavailable"
    },
    "PartyTooManyRequests": {
      "id": 1441,
      "name": "PartyTooManyRequests"
    },
    "PushNotificationTemplateMissingName": {
      "id": 1442,
      "name": "PushNotificationTemplateMissingName"
    },
    "CannotEnableMultiplayerServersForTitle": {
      "id": 1443,
      "name": "CannotEnableMultiplayerServersForTitle"
    },
    "WriteAttemptedDuringExport": {
      "id": 1444,
      "name": "WriteAttemptedDuringExport"
    },
    "MultiplayerServerTitleQuotaCoresExceeded": {
      "id": 1445,
      "name": "MultiplayerServerTitleQuotaCoresExceeded"
    },
    "AutomationRuleNotFound": {
      "id": 1446,
      "name": "AutomationRuleNotFound"
    },
    "EntityAPIKeyLimitExceeded": {
      "id": 1447,
      "name": "EntityAPIKeyLimitExceeded"
    },
    "EntityAPIKeyNotFound": {
      "id": 1448,
      "name": "EntityAPIKeyNotFound"
    },
    "EntityAPIKeyOrSecretInvalid": {
      "id": 1449,
      "name": "EntityAPIKeyOrSecretInvalid"
    },
    "EconomyServiceUnavailable": {
      "id": 1450,
      "name": "EconomyServiceUnavailable"
    },
    "EconomyServiceInternalError": {
      "id": 1451,
      "name": "EconomyServiceInternalError"
    },
    "MatchmakingEntityInvalid": {
      "id": 2001,
      "name": "MatchmakingEntityInvalid"
    },
    "MatchmakingPlayerAttributesInvalid": {
      "id": 2002,
      "name": "MatchmakingPlayerAttributesInvalid"
    },
    "MatchmakingQueueNotFound": {
      "id": 2016,
      "name": "MatchmakingQueueNotFound"
    },
    "MatchmakingMatchNotFound": {
      "id": 2017,
      "name": "MatchmakingMatchNotFound"
    },
    "MatchmakingTicketNotFound": {
      "id": 2018,
      "name": "MatchmakingTicketNotFound"
    },
    "MatchmakingAlreadyJoinedTicket": {
      "id": 2028,
      "name": "MatchmakingAlreadyJoinedTicket"
    },
    "MatchmakingTicketAlreadyCompleted": {
      "id": 2029,
      "name": "MatchmakingTicketAlreadyCompleted"
    },
    "MatchmakingQueueConfigInvalid": {
      "id": 2031,
      "name": "MatchmakingQueueConfigInvalid"
    },
    "MatchmakingMemberProfileInvalid": {
      "id": 2032,
      "name": "MatchmakingMemberProfileInvalid"
    },
    "NintendoSwitchDeviceIdNotLinked": {
      "id": 2034,
      "name": "NintendoSwitchDeviceIdNotLinked"
    },
    "MatchmakingNotEnabled": {
      "id": 2035,
      "name": "MatchmakingNotEnabled"
    },
    "MatchmakingPlayerAttributesTooLarge": {
      "id": 2043,
      "name": "MatchmakingPlayerAttributesTooLarge"
    },
    "MatchmakingNumberOfPlayersInTicketTooLarge": {
      "id": 2044,
      "name": "MatchmakingNumberOfPlayersInTicketTooLarge"
    },
    "MatchmakingAttributeInvalid": {
      "id": 2046,
      "name": "MatchmakingAttributeInvalid"
    },
    "MatchmakingPlayerHasNotJoinedTicket": {
      "id": 2053,
      "name": "MatchmakingPlayerHasNotJoinedTicket"
    },
    "MatchmakingRateLimitExceeded": {
      "id": 2054,
      "name": "MatchmakingRateLimitExceeded"
    },
    "MatchmakingTicketMembershipLimitExceeded": {
      "id": 2055,
      "name": "MatchmakingTicketMembershipLimitExceeded"
    },
    "MatchmakingUnauthorized": {
      "id": 2056,
      "name": "MatchmakingUnauthorized"
    },
    "MatchmakingQueueLimitExceeded": {
      "id": 2057,
      "name": "MatchmakingQueueLimitExceeded"
    },
    "MatchmakingRequestTypeMismatch": {
      "id": 2058,
      "name": "MatchmakingRequestTypeMismatch"
    },
    "MatchmakingBadRequest": {
      "id": 2059,
      "name": "MatchmakingBadRequest"
    },
    "TitleConfigNotFound": {
      "id": 3001,
      "name": "TitleConfigNotFound"
    },
    "TitleConfigUpdateConflict": {
      "id": 3002,
      "name": "TitleConfigUpdateConflict"
    },
    "TitleConfigSerializationError": {
      "id": 3003,
      "name": "TitleConfigSerializationError"
    },
    "CatalogEntityInvalid": {
      "id": 4001,
      "name": "CatalogEntityInvalid"
    },
    "CatalogTitleIdMissing": {
      "id": 4002,
      "name": "CatalogTitleIdMissing"
    },
    "CatalogPlayerIdMissing": {
      "id": 4003,
      "name": "CatalogPlayerIdMissing"
    },
    "CatalogClientIdentityInvalid": {
      "id": 4004,
      "name": "CatalogClientIdentityInvalid"
    },
    "CatalogOneOrMoreFilesInvalid": {
      "id": 4005,
      "name": "CatalogOneOrMoreFilesInvalid"
    },
    "CatalogItemMetadataInvalid": {
      "id": 4006,
      "name": "CatalogItemMetadataInvalid"
    },
    "CatalogItemIdInvalid": {
      "id": 4007,
      "name": "CatalogItemIdInvalid"
    },
    "CatalogSearchParameterInvalid": {
      "id": 4008,
      "name": "CatalogSearchParameterInvalid"
    },
    "CatalogFeatureDisabled": {
      "id": 4009,
      "name": "CatalogFeatureDisabled"
    },
    "CatalogConfigInvalid": {
      "id": 4010,
      "name": "CatalogConfigInvalid"
    },
    "CatalogUnauthorized": {
      "id": 4011,
      "name": "CatalogUnauthorized"
    },
    "ExportInvalidStatusUpdate": {
      "id": 5000,
      "name": "ExportInvalidStatusUpdate"
    },
    "ExportInvalidPrefix": {
      "id": 5001,
      "name": "ExportInvalidPrefix"
    },
    "ExportBlobContainerDoesNotExist": {
      "id": 5002,
      "name": "ExportBlobContainerDoesNotExist"
    },
    "ExportEventNameNotFound": {
      "id": 5003,
      "name": "ExportEventNameNotFound"
    },
    "ExportExportTitleIdNotFound": {
      "id": 5004,
      "name": "ExportExportTitleIdNotFound"
    },
    "ExportCouldNotUpdate": {
      "id": 5005,
      "name": "ExportCouldNotUpdate"
    },
    "ExportInvalidStorageType": {
      "id": 5006,
      "name": "ExportInvalidStorageType"
    },
    "ExportAmazonBucketDoesNotExist": {
      "id": 5007,
      "name": "ExportAmazonBucketDoesNotExist"
    },
    "ExportInvalidBlobStorage": {
      "id": 5008,
      "name": "ExportInvalidBlobStorage"
    },
    "ExportKustoException": {
      "id": 5009,
      "name": "ExportKustoException"
    },
    "ExportKustoExceptionNew_SomeResources": {
      "id": 5010,
      "name": "ExportKustoExceptionNew_SomeResources"
    },
    "ExportKustoExceptionEdit": {
      "id": 5011,
      "name": "ExportKustoExceptionEdit"
    },
    "ExportKustoConnectionFailed": {
      "id": 5012,
      "name": "ExportKustoConnectionFailed"
    },
    "ExportUnknownError": {
      "id": 5013,
      "name": "ExportUnknownError"
    },
    "ExportCantEditPendingExport": {
      "id": 5014,
      "name": "ExportCantEditPendingExport"
    },
    "ExportLimitExports": {
      "id": 5015,
      "name": "ExportLimitExports"
    },
    "ExportLimitEvents": {
      "id": 5016,
      "name": "ExportLimitEvents"
    }
  }
}