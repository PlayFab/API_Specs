{
  "swagger": "2.0",
  "info": {
    "version": "180726",
    "title": "PlayFab Multiplayer API",
    "description": "API methods that capture a wide variety of Multiplayer interactions between your players.",
    "termsOfService": "https://playfab.com/terms/",
    "contact": {
      "url": "https://community.playfab.com/index.html"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://github.com/PlayFab/API_Specs/blob/master/LICENSE"
    }
  },
  "host": "titleId.playfabapi.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/GameServer/AllocateSessionHost": {
      "post": {
        "operationId": "AllocateSessionHost",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/AllocateSessionHost"
        },
        "parameters": [
          {
            "$ref": "#/parameters/AllocateSessionHostRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/AllocateSessionHostResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/GetSessionHostDetails"
        ],
        "x-errors": [
          "GameServerAccepted",
          "GameServerBadRequest",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/CreateBuildWithCustomContainer": {
      "post": {
        "operationId": "CreateBuildWithCustomContainer",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/CreateBuildWithCustomContainer"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateBuildWithCustomContainerRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/CreateBuildResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/CreateBuildWithManagedContainer",
          "GameServer/DeleteBuild",
          "GameServer/GetBuild",
          "GameServer/ListBuilds"
        ],
        "x-errors": [
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerOk",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/CreateBuildWithManagedContainer": {
      "post": {
        "operationId": "CreateBuildWithManagedContainer",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/CreateBuildWithManagedContainer"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateBuildWithManagedContainerRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/CreateBuildResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/DeleteBuild",
          "GameServer/GetBuild",
          "GameServer/ListBuilds"
        ],
        "x-errors": [
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerOk",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/CreateRemoteUser": {
      "post": {
        "operationId": "CreateRemoteUser",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/CreateRemoteUser"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateRemoteUserRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/CreateRemoteUserResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/DeleteRemoteUser",
          "GameServer/GetRemoteLoginEndpoint"
        ],
        "x-errors": [
          "GameServerAccepted",
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNoContent",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/DeleteBuild": {
      "post": {
        "operationId": "DeleteBuild",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/DeleteBuild"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteBuildRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/DeleteBuildResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/CreateBuildWithManagedContainer",
          "GameServer/GetBuild",
          "GameServer/ListBuilds"
        ],
        "x-errors": [
          "GameServerAccepted",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNotFound",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/DeleteRemoteUser": {
      "post": {
        "operationId": "DeleteRemoteUser",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/DeleteRemoteUser"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteRemoteUserRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/DeleteRemoteUserResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/CreateRemoteUser",
          "GameServer/GetRemoteLoginEndpoint"
        ],
        "x-errors": [
          "GameServerAccepted",
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNoContent",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/GetAssetUploadUrl": {
      "post": {
        "operationId": "GetAssetUploadUrl",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/GetAssetUploadUrl"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetAssetUploadUrlRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetAssetUploadUrlResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/ListAssets",
          "GameServer/ListCertificates",
          "GameServer/UploadCertificate"
        ],
        "x-errors": [
          "GameServerAccepted",
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNoContent",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/GetBuild": {
      "post": {
        "operationId": "GetBuild",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/GetBuild"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetBuildRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetBuildResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/CreateBuildWithManagedContainer",
          "GameServer/DeleteBuild",
          "GameServer/ListBuilds"
        ],
        "x-errors": [
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/GetRemoteLoginEndpoint": {
      "post": {
        "operationId": "GetRemoteLoginEndpoint",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/GetRemoteLoginEndpoint"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetRemoteLoginEndpointRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetRemoteLoginEndpointResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/CreateRemoteUser"
        ],
        "x-errors": [
          "GameServerAccepted",
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNoContent",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/GetSessionHostDetails": {
      "post": {
        "operationId": "GetSessionHostDetails",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/GetSessionHostDetails"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetSessionHostDetailsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetSessionHostResponseDetailsResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/AllocateSessionHost"
        ],
        "x-errors": [
          "GameServerBadRequest",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/GetSessionHostLogs": {
      "post": {
        "operationId": "GetSessionHostLogs",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/GetSessionHostLogs"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetSessionHostLogsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetSessionHostLogsResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/AllocateSessionHost",
          "GameServer/GetSessionHostDetails"
        ],
        "x-errors": [
          "GameServerAccepted",
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNoContent",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/ListAssets": {
      "post": {
        "operationId": "ListAssets",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/ListAssets"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListAssetsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListAssetsResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/GetAssetUploadUrl",
          "GameServer/ListCertificates",
          "GameServer/UploadCertificate"
        ],
        "x-errors": [
          "GameServerAccepted",
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNoContent",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/ListBuilds": {
      "post": {
        "operationId": "ListBuilds",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/ListBuilds"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListBuildsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListBuildsResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/CreateBuildWithManagedContainer",
          "GameServer/DeleteBuild",
          "GameServer/GetBuild"
        ],
        "x-errors": [
          "GameServerBadRequest",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/ListCertificates": {
      "post": {
        "operationId": "ListCertificates",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/ListCertificates"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListCertificatesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListCertificatesResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/GetAssetUploadUrl",
          "GameServer/ListAssets",
          "GameServer/UploadCertificate"
        ],
        "x-errors": [
          "GameServerAccepted",
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNoContent",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/ListQosServers": {
      "post": {
        "operationId": "ListQosServers",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/ListQosServers"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListQosServersRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListQosServersResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-errors": [
          "GameServerBadRequest",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerOk",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/ListSessionHosts": {
      "post": {
        "operationId": "ListSessionHosts",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/ListSessionHosts"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListSessionHostsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListSessionHostsResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/AllocateSessionHost"
        ],
        "x-errors": [
          "GameServerBadRequest",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/ListVirtualMachines": {
      "post": {
        "operationId": "ListVirtualMachines",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/ListVirtualMachines"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListVirtualMachinesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListVirtualMachinesResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-errors": [
          "GameServerBadRequest",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/ShutdownSessionHost": {
      "post": {
        "operationId": "ShutdownSessionHost",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/ShutdownSessionHost"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ShutdownSessionHostRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ShutdownSessionHostResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/AllocateSessionHost",
          "GameServer/GetSessionHostDetails"
        ],
        "x-errors": [
          "GameServerAccepted",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNoContent",
          "GameServerNotFound",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/UpdateBuildRegions": {
      "post": {
        "operationId": "UpdateBuildRegions",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/UpdateBuildRegions"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UpdateBuildRegionsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/UpdateBuildRegionsResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/DeleteBuild",
          "GameServer/GetBuild",
          "GameServer/ListBuilds"
        ],
        "x-errors": [
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerOk",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/UploadCertificate": {
      "post": {
        "operationId": "UploadCertificate",
        "tags": [
          "GameServer"
        ],
        "description": "",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/UploadCertificate"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UploadCertificateRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/UploadCertificateResponse"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": null
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/GetAssetUploadUrl",
          "GameServer/ListAssets",
          "GameServer/ListCertificates"
        ],
        "x-errors": [
          "GameServerAccepted",
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNoContent",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/Match/CancelMatchmakingTicket": {
      "post": {
        "operationId": "CancelMatchmakingTicket",
        "tags": [
          "Matchmaking"
        ],
        "description": "Cancel a matchmaking ticket.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/CancelMatchmakingTicket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CancelMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/CancelMatchmakingTicketResult"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": {}
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Users can cancel a matchmaking ticket at anytime. Anyone in the matchmaking ticket can cancel it. We do not allow resubmitting a cancelled ticket because the players must consent to enter matchmaking again after the cancellation which is the same as creating a new ticket. The ticket can be in different states when it is cancelled: * The ticket has not started matching because not everyone has joined the ticket. If the ticket is cancelled, it will be deleted and never match. * The ticket is matching. If the ticket is cancelled, it will stop matching and it will be deleted. * The ticket has been matched. A matched ticket cannot be cancelled. There may be race conditions due to latency between the ticket being matched and the client being notified the match is ready. The client must handle the possibility that the cancel request may fail if the match has been made but the notification has not arrived.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-errors": [
          "MatchmakingCancelTicketServerIdentityInvalid",
          "MatchmakingCancelTicketUserIdentityMismatch",
          "MatchmakingEntityInvalid",
          "MatchmakingHopperIdMissing",
          "MatchmakingTicketAlreadyCompleted",
          "MatchmakingTicketIdIdMissing",
          "MatchmakingTicketIdMissing",
          "MatchmakingTicketNotFound",
          "MatchmakingTitleIdMissing"
        ]
      }
    },
    "/Match/CreateMatchmakingTicket": {
      "post": {
        "operationId": "CreateMatchmakingTicket",
        "tags": [
          "Matchmaking"
        ],
        "description": "Create a matchmaking ticket as a client.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/CreateMatchmakingTicket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/CreateMatchmakingTicketResult"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": {
                  "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The client specifies the creator's attributes and optionally a list of other users to match with.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-errors": [
          "MatchmakingCreateRequestCreatorIdMissing",
          "MatchmakingCreateRequestCreatorMissing",
          "MatchmakingCreateRequestGiveUpAfterInvalid",
          "MatchmakingCreateRequestMissing",
          "MatchmakingCreateTicketClientIdentityInvalid",
          "MatchmakingEntityInvalid",
          "MatchmakingHopperIdMissing",
          "MatchmakingPlayerAttributesInvalid",
          "MatchmakingPlayerIdentityMismatch",
          "MatchmakingPlayerIdMissing",
          "MatchmakingTicketIdMissing",
          "MatchmakingTitleIdMissing"
        ]
      }
    },
    "/Match/CreateServerMatchmakingTicket": {
      "post": {
        "operationId": "CreateServerMatchmakingTicket",
        "tags": [
          "Matchmaking"
        ],
        "description": "Create a matchmaking ticket as a server.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/CreateServerMatchmakingTicket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateServerMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/CreateMatchmakingTicketResult"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": {
                  "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The server specifies all the creators and their attributes.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-errors": [
          "MatchmakingCreateRequestGiveUpAfterInvalid",
          "MatchmakingCreateRequestUserListMissing",
          "MatchmakingCreateTicketServerIdentityInvalid",
          "MatchmakingEntityInvalid",
          "MatchmakingHopperIdMissing",
          "MatchmakingMemberProfileInvalid",
          "MatchmakingPlayerAttributesInvalid",
          "MatchmakingPlayerIdMissing",
          "MatchmakingTicketIdMissing",
          "MatchmakingTitleIdMissing"
        ]
      }
    },
    "/Match/GetMatch": {
      "post": {
        "operationId": "GetMatch",
        "tags": [
          "Matchmaking"
        ],
        "description": "Get a match.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/GetMatch"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetMatchRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetMatchResult"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": {
                  "MatchId": "4e0c5fd7-80e9-4744-b0ce-061a7f067ff5",
                  "Members": []
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "When matchmaking has successfully matched together a collection of tickets, it produces a 'match' with an ID. The match contains all of the players that were matched together, server connection information, etc. The match ID is usually sent to the matched players using the activity service. Only the players in the original ticket can get the match.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-errors": [
          "MatchmakingEntityInvalid",
          "MatchmakingHopperIdMissing",
          "MatchmakingMatchIdIdMissing",
          "MatchmakingMatchIdMissing",
          "MatchmakingMatchNotFound",
          "MatchmakingTitleIdMissing"
        ]
      }
    },
    "/Match/GetMatchmakingTicket": {
      "post": {
        "operationId": "GetMatchmakingTicket",
        "tags": [
          "Matchmaking"
        ],
        "description": "Get a matchmaking ticket by ticket ID.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/GetMatchmakingTicket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetMatchmakingTicketResult"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": {
                  "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
                  "HopperId": "custom123",
                  "MatchId": "4e0c5fd7-80e9-4744-b0ce-061a7f067ff5",
                  "Created": "2016-08-23T12:33:14",
                  "Status": "MATCHED",
                  "GiveUpAfterSeconds": 100,
                  "MembersToMatchWith": [
                    {
                      "Id": "123123123",
                      "TypeString": "title_player_acount"
                    }
                  ],
                  "Members": [],
                  "Creator": {
                    "Id": "123123123",
                    "TypeString": "title_player_acount"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The ticket includes the players who have joined, their attributes, who still hasn't joined, etc. Only the ticket creator and invited players can get the ticket.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-errors": [
          "MatchmakingEntityInvalid",
          "MatchmakingGetMatchIdentityMismatch",
          "MatchmakingGetTicketUserMismatch",
          "MatchmakingHopperIdMissing",
          "MatchmakingTicketIdIdMissing",
          "MatchmakingTicketIdMissing",
          "MatchmakingTicketNotFound",
          "MatchmakingTitleIdMissing"
        ]
      }
    },
    "/Match/JoinMatchmakingTicket": {
      "post": {
        "operationId": "JoinMatchmakingTicket",
        "tags": [
          "Matchmaking"
        ],
        "description": "Join a matchmaking ticket.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/multiplayer/method/JoinMatchmakingTicket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/JoinMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/JoinMatchmakingTicketResult"
                }
              },
              "example": {
                "code": 200,
                "status": 200,
                "data": {}
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Add the user to a matchmaking ticket and specify all the user's matchmaking attributes. Users can only join a ticket if and only if they were 'invited' to join the ticket by the ticket creator in the CreateMatchmakingTicket call. The matchmaking service automatically starts matching the ticket against other matchmaking tickets once all players have joined the ticket. Therefore, it is not possible to join a ticket once it has started matching.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-errors": [
          "MatchmakingAlreadyJoinedTicket",
          "MatchmakingEntityInvalid",
          "MatchmakingHopperIdMissing",
          "MatchmakingJoinRequestUserMissing",
          "MatchmakingJoinTicketServerIdentityInvalid",
          "MatchmakingJoinTicketUserIdentityMismatch",
          "MatchmakingMemberProfileInvalid",
          "MatchmakingPlayerAttributesInvalid",
          "MatchmakingPlayerIdentityMismatch",
          "MatchmakingPlayerIdMissing",
          "MatchmakingTicketAlreadyCompleted",
          "MatchmakingTicketIdIdMissing",
          "MatchmakingTicketIdMissing",
          "MatchmakingTicketNotFound",
          "MatchmakingTitleIdMissing"
        ]
      }
    }
  },
  "definitions": {
    "ApiErrorWrapper": {
      "description": "The basic wrapper around every failed API result",
      "type": "object",
      "properties": {
        "code": {
          "description": "Numerical HTTP code",
          "type": "number",
          "x-actualtype": "int32"
        },
        "status": {
          "description": "String HTTP code",
          "type": "string"
        },
        "error": {
          "description": "Playfab error code",
          "type": "string"
        },
        "errorCode": {
          "description": "Numerical Playfab error code",
          "type": "number",
          "x-actualtype": "int32"
        },
        "errorMessage": {
          "description": "Description for the Playfab errorCode",
          "type": "string"
        },
        "errorDetails": {
          "description": "Detailed description of individual issues with the request object",
          "type": "object"
        }
      }
    },
    "AllocateSessionHostRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "BuildId to allocate against, must be a GUID.",
          "type": "string"
        },
        "PreferredRegions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AzureRegion"
          },
          "x-isenum": true
        },
        "SessionCookie": {
          "description": "Data encoded as a string that is passed to the game server when allocated. This can be used to share a cryptographic secret for servers to authenticate clients, or to communication information such as game mode or map through the allocation flow.",
          "type": "string"
        },
        "SessionId": {
          "description": "An identifer you create to track the session over its life. Must be a GUID.",
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "SessionId",
        "PreferredRegions"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "AllocateSessionHostResponse": {
      "type": "object",
      "properties": {
        "ConnectedPlayers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectedPlayer"
          },
          "x-isclass": true
        },
        "IPv4Address": {
          "type": "string"
        },
        "Ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          },
          "x-isclass": true
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "type": "string",
          "x-isenum": true
        },
        "SessionHostId": {
          "type": "string"
        },
        "SessionId": {
          "type": "string"
        },
        "State": {
          "type": "string"
        },
        "VmId": {
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "AssetReference": {
      "type": "object",
      "properties": {
        "MountPath": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "AssetReferenceParams": {
      "type": "object",
      "properties": {
        "MountPath": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      },
      "required": [
        "MountPath"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "AssetSummary": {
      "type": "object",
      "properties": {
        "Metadata": {
          "type": "object"
        },
        "Name": {
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "AzureRegion": {
      "type": "object",
      "enum": [
        "EastUs",
        "CentralUs",
        "WestUs",
        "NorthEurope",
        "WestEurope"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "AzureVmSize": {
      "type": "object",
      "enum": [
        "Standard_A1_v2",
        "Standard_A2_v2",
        "Standard_A4_v2",
        "Standard_A8_v2",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_NC6",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NV6",
        "Standard_NV12",
        "Standard_NV24"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "BuildRegion": {
      "type": "object",
      "properties": {
        "MaxSessions": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "type": "string",
          "x-isenum": true
        },
        "StandbySessions": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "Status": {
          "$ref": "#/definitions/BuildRegionStatus",
          "type": "string",
          "x-isenum": true
        }
      },
      "required": [
        "MaxSessions",
        "StandbySessions"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "BuildRegionParams": {
      "type": "object",
      "properties": {
        "MaxSessions": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "type": "string",
          "x-isenum": true
        },
        "StandbySessions": {
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "Region",
        "MaxSessions",
        "StandbySessions"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "BuildRegionStatus": {
      "type": "object",
      "enum": [
        "Unknown",
        "Initializing",
        "InProbation",
        "Succeeded",
        "Unhealthy",
        "PendingDeletion",
        "Deleted"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "BuildSummary": {
      "type": "object",
      "properties": {
        "BuildId": {
          "type": "string"
        },
        "BuildName": {
          "type": "string"
        },
        "ContainerFlavor": {
          "$ref": "#/definitions/ContainerFlavor",
          "type": "string",
          "x-isenum": true
        },
        "CustomGameContainerImage": {
          "$ref": "#/definitions/ContainerImageReference",
          "type": "object",
          "x-isclass": true
        },
        "GameAssetReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetReference"
          },
          "x-isclass": true
        },
        "GameCertificateReferences": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MappedPorts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          },
          "x-isclass": true
        },
        "Metadata": {
          "type": "object"
        },
        "RegionConfigurations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildRegion"
          },
          "x-isclass": true
        },
        "SessionHostCountPerVm": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "StartGameCommand": {
          "type": "string"
        },
        "VmSize": {
          "$ref": "#/definitions/AzureVmSize",
          "type": "string",
          "x-isenum": true
        }
      },
      "required": [
        "SessionHostCountPerVm"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CancellationReason": {
      "type": "object",
      "enum": [
        "Requested",
        "Internal",
        "Timeout"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CancelMatchmakingTicketRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "HopperId": {
          "description": "The Id of the hopper to join.",
          "type": "string"
        },
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "TicketId",
        "HopperId"
      ],
      "example": {
        "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
        "HopperId": "custom123"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CancelMatchmakingTicketResult": {
      "type": "object",
      "properties": {},
      "example": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "Certificate": {
      "type": "object",
      "properties": {
        "Base64EncodedValue": {
          "description": "Base64 encoded string contents of the certificate.",
          "type": "string"
        },
        "Name": {
          "description": "A name for the certificate. This is used to reference certificates in build configurations.",
          "type": "string"
        },
        "Password": {
          "description": "If required for your PFX certificate, use this field to provide a password that will be used to install the certificate on the container.",
          "type": "string"
        }
      },
      "required": [
        "Name",
        "Base64EncodedValue"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CertificateSummary": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Thumbprint": {
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ConnectedPlayer": {
      "type": "object",
      "properties": {
        "PlayerId": {
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ContainerFlavor": {
      "type": "object",
      "enum": [
        "WindowsServerCorePlayFab",
        "LinuxCustom"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ContainerImageReference": {
      "type": "object",
      "properties": {
        "ImageName": {
          "type": "string"
        },
        "Tag": {
          "type": "string"
        }
      },
      "required": [
        "ImageName"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateBuildResponse": {
      "type": "object",
      "properties": {
        "BuildSummary": {
          "$ref": "#/definitions/BuildSummary",
          "type": "object",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateBuildWithCustomContainerRequest": {
      "type": "object",
      "properties": {
        "BuildName": {
          "type": "string"
        },
        "ContainerRepositoryName": {
          "type": "string"
        },
        "ContainerTag": {
          "type": "string"
        },
        "GameAssetReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetReferenceParams"
          },
          "x-isclass": true
        },
        "GameCertificateReferences": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MappedPorts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          },
          "x-isclass": true
        },
        "Metadata": {
          "type": "object"
        },
        "RegionConfiguration": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildRegionParams"
          },
          "x-isclass": true
        },
        "SessionHostCountPerVm": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "StartGameCommand": {
          "type": "string"
        },
        "VmSize": {
          "$ref": "#/definitions/AzureVmSize",
          "type": "string",
          "x-isenum": true
        }
      },
      "required": [
        "ContainerRepositoryName",
        "BuildName",
        "SessionHostCountPerVm",
        "MappedPorts",
        "RegionConfiguration"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateBuildWithManagedContainerRequest": {
      "type": "object",
      "properties": {
        "BuildName": {
          "type": "string"
        },
        "ContainerFlavor": {
          "$ref": "#/definitions/ContainerFlavor",
          "type": "string",
          "x-isenum": true
        },
        "GameAssetReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetReferenceParams"
          },
          "x-isclass": true
        },
        "GameCertificateReferences": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MappedPorts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          },
          "x-isclass": true
        },
        "Metadata": {
          "type": "object"
        },
        "RegionConfiguration": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildRegionParams"
          },
          "x-isclass": true
        },
        "SessionHostCountPerVm": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "StartGameCommand": {
          "description": "The command that is used to start the game server application, including any arguments",
          "type": "string"
        },
        "VmSize": {
          "$ref": "#/definitions/AzureVmSize",
          "type": "string",
          "x-isenum": true
        }
      },
      "required": [
        "StartGameCommand",
        "GameAssetReferences",
        "BuildName",
        "SessionHostCountPerVm",
        "MappedPorts",
        "RegionConfiguration"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateMatchmakingTicketRequest": {
      "type": "object",
      "properties": {
        "Creator": {
          "$ref": "#/definitions/MatchmakingPlayer",
          "description": "The User who created this ticket.",
          "type": "object",
          "x-isclass": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "GiveUpAfterSeconds": {
          "description": "How long to attempt matching this ticket in seconds.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "HopperId": {
          "description": "The Id of a match hopper.",
          "type": "string"
        },
        "MembersToMatchWith": {
          "description": "A list of Entity Keys of other users to match with.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityKey"
          },
          "x-isclass": true
        }
      },
      "required": [
        "Creator",
        "GiveUpAfterSeconds",
        "HopperId"
      ],
      "example": {
        "Creator": {},
        "MembersToMatchWith": [],
        "GiveUpAfterSeconds": 100,
        "HopperId": "custom123"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateMatchmakingTicketResult": {
      "type": "object",
      "properties": {
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "TicketId"
      ],
      "example": {
        "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateRemoteUserRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "type": "string"
        },
        "ExpirationTime": {
          "description": "The expiration time for the remote user created. Defaults to expiring in one day if not specified.",
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "type": "string",
          "x-isenum": true
        },
        "Username": {
          "type": "string"
        },
        "VmId": {
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "Region",
        "VmId",
        "Username",
        "Password"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateRemoteUserResponse": {
      "type": "object",
      "properties": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateServerMatchmakingTicketRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "GiveUpAfterSeconds": {
          "description": "How long to attempt matching this ticket in seconds.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "HopperId": {
          "description": "The Id of a match hopper.",
          "type": "string"
        },
        "Members": {
          "description": "The users who will be part of this ticket.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MatchmakingPlayer"
          },
          "x-isclass": true
        }
      },
      "required": [
        "Members",
        "GiveUpAfterSeconds",
        "HopperId"
      ],
      "example": {
        "Members": [],
        "GiveUpAfterSeconds": 100,
        "HopperId": "custom123"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeleteBuildRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "type": "string"
        }
      },
      "required": [
        "BuildId"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeleteBuildResponse": {
      "type": "object",
      "properties": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeleteRemoteUserRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "type": "string"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "type": "string",
          "x-isenum": true
        },
        "Username": {
          "type": "string"
        },
        "VmId": {
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "Region",
        "VmId",
        "Username"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeleteRemoteUserResponse": {
      "type": "object",
      "properties": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "EntityKey": {
      "description": "Entity identifier class that contains both the ID and type.",
      "type": "object",
      "properties": {
        "Id": {
          "description": "Entity profile ID.",
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/EntityTypes",
          "description": "Entity type. Optional to be used but one of EntityType or EntityTypeString must be set.",
          "type": "string",
          "x-isenum": true
        },
        "TypeString": {
          "description": "Entity type. Optional to be used but one of EntityType or EntityTypeString must be set.",
          "type": "string"
        }
      },
      "required": [
        "Id"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "EntityTypes": {
      "type": "object",
      "enum": [
        "title",
        "master_player_account",
        "title_player_account",
        "character",
        "group",
        "service"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetAssetUploadUrlRequest": {
      "type": "object",
      "properties": {
        "Metadata": {
          "type": "object"
        },
        "Name": {
          "description": "The asset's file name and associated metadata.",
          "type": "string"
        }
      },
      "required": [
        "Name"
      ],
      "example": {
        "Name": "gameserver.zip",
        "Metadata": {
          "AssetData1": "SomeData"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetAssetUploadUrlResponse": {
      "type": "object",
      "properties": {
        "AssetUploadUrl": {
          "type": "string"
        },
        "Metadata": {
          "type": "object"
        },
        "Name": {
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetBuildRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "type": "string"
        }
      },
      "required": [
        "BuildId"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetBuildResponse": {
      "type": "object",
      "properties": {
        "BuildSummary": {
          "$ref": "#/definitions/BuildSummary",
          "type": "object",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetMatchmakingTicketRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "EscapeObject": {
          "description": "Determines whether the matchmaking attributes will be returned as an escaped JSON string or as an un-escaped JSON object.",
          "type": "boolean"
        },
        "HopperId": {
          "description": "The Id of the hopper to find a match for.",
          "type": "string"
        },
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "TicketId",
        "HopperId",
        "EscapeObject"
      ],
      "example": {
        "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
        "HopperId": "custom123"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetMatchmakingTicketResult": {
      "type": "object",
      "properties": {
        "CancellationReason": {
          "$ref": "#/definitions/CancellationReason",
          "description": "The reason why the current ticket was canceled. This field is only set if the ticket is in canceled state.",
          "type": "string",
          "x-isenum": true
        },
        "Created": {
          "description": "The server date and time at which ticket was created.",
          "type": "string"
        },
        "Creator": {
          "$ref": "#/definitions/EntityKey",
          "description": "The Creator's entity key.",
          "type": "object",
          "x-isclass": true
        },
        "GiveUpAfterSeconds": {
          "description": "How long to attempt matching this ticket in seconds.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "HopperId": {
          "description": "The Id of a match hopper.",
          "type": "string"
        },
        "MatchId": {
          "description": "The Id of a match.",
          "type": "string"
        },
        "Members": {
          "description": "A list of Users that have joined this ticket.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MatchmakingPlayer"
          },
          "x-isclass": true
        },
        "MembersToMatchWith": {
          "description": "A list of PlayFab Ids of Users to match with.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityKey"
          },
          "x-isclass": true
        },
        "Status": {
          "description": "The current ticket status.",
          "type": "string"
        },
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "TicketId",
        "HopperId",
        "Created",
        "Status",
        "GiveUpAfterSeconds",
        "Members",
        "Creator"
      ],
      "example": {
        "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
        "HopperId": "custom123",
        "MatchId": "4e0c5fd7-80e9-4744-b0ce-061a7f067ff5",
        "Created": "2016-08-23T12:33:14",
        "Status": "MATCHED",
        "GiveUpAfterSeconds": 100,
        "MembersToMatchWith": [
          {
            "Id": "123123123",
            "TypeString": "title_player_acount"
          }
        ],
        "Members": [],
        "Creator": {
          "Id": "123123123",
          "TypeString": "title_player_acount"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetMatchRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "EscapeObject": {
          "description": "Determines whether the matchmaking attributes will be returned as an escaped JSON string or as an un-escaped JSON object.",
          "type": "boolean"
        },
        "HopperId": {
          "description": "The Id of the hopper to join.",
          "type": "string"
        },
        "MatchId": {
          "description": "The Id of a match.",
          "type": "string"
        }
      },
      "required": [
        "MatchId",
        "HopperId",
        "EscapeObject"
      ],
      "example": {
        "MatchId": "4e0c5fd7-80e9-4744-b0ce-061a7f067ff5",
        "HopperId": "custom123"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetMatchResult": {
      "type": "object",
      "properties": {
        "MatchId": {
          "description": "The Id of a match.",
          "type": "string"
        },
        "Members": {
          "description": "A list of Users that are matched together, along with their team assignments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MatchmakingPlayerWithTeamAssignment"
          },
          "x-isclass": true
        }
      },
      "required": [
        "MatchId",
        "Members"
      ],
      "example": {
        "MatchId": "4e0c5fd7-80e9-4744-b0ce-061a7f067ff5",
        "Members": []
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetRemoteLoginEndpointRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "type": "string"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "type": "string",
          "x-isenum": true
        },
        "VmId": {
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "Region",
        "VmId"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetRemoteLoginEndpointResponse": {
      "type": "object",
      "properties": {
        "IpV4Address": {
          "type": "string"
        },
        "Port": {
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "Port"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetSessionHostDetailsRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "type": "string"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "type": "string",
          "x-isenum": true
        },
        "SessionId": {
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "SessionId",
        "Region"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetSessionHostLogsRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "type": "string"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "type": "string",
          "x-isenum": true
        },
        "SessionHostId": {
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "Region",
        "SessionHostId"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetSessionHostLogsResponse": {
      "type": "object",
      "properties": {
        "LogDownloadUri": {
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetSessionHostResponseDetailsResponse": {
      "type": "object",
      "properties": {
        "ConnectedPlayers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectedPlayer"
          },
          "x-isclass": true
        },
        "IPv4Address": {
          "type": "string"
        },
        "Ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          },
          "x-isclass": true
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "type": "string",
          "x-isenum": true
        },
        "SessionHostId": {
          "type": "string"
        },
        "SessionId": {
          "type": "string"
        },
        "State": {
          "type": "string"
        },
        "VmId": {
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "JoinMatchmakingTicketRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "HopperId": {
          "description": "The Id of the hopper to join.",
          "type": "string"
        },
        "Member": {
          "$ref": "#/definitions/MatchmakingPlayer",
          "description": "The User who wants to join the ticket. Their Id must be listed in PlayFabIdsToMatchWith.",
          "type": "object",
          "x-isclass": true
        },
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "TicketId",
        "HopperId",
        "Member"
      ],
      "example": {
        "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
        "HopperId": "custom123",
        "Member": {}
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "JoinMatchmakingTicketResult": {
      "type": "object",
      "properties": {},
      "example": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListAssetsRequest": {
      "type": "object",
      "properties": {
        "NumItems": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListAssetsResponse": {
      "type": "object",
      "properties": {
        "AssetSummaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetSummary"
          },
          "x-isclass": true
        },
        "NumItems": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "type": "string"
        }
      },
      "required": [
        "NumItems"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListBuildsRequest": {
      "type": "object",
      "properties": {
        "NumItems": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListBuildsResponse": {
      "type": "object",
      "properties": {
        "BuildSummaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildSummary"
          },
          "x-isclass": true
        },
        "NumItems": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "type": "string"
        }
      },
      "required": [
        "NumItems"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListCertificatesRequest": {
      "type": "object",
      "properties": {
        "NumItems": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListCertificatesResponse": {
      "type": "object",
      "properties": {
        "CertificateSummaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateSummary"
          },
          "x-isclass": true
        },
        "NumItems": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "type": "string"
        }
      },
      "required": [
        "NumItems"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListQosServersRequest": {
      "type": "object",
      "properties": {
        "NumItems": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListQosServersResponse": {
      "type": "object",
      "properties": {
        "NumItems": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "QosServers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QosServer"
          },
          "x-isclass": true
        },
        "SkipToken": {
          "type": "string"
        }
      },
      "required": [
        "NumItems"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListSessionHostsRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "type": "string"
        },
        "NumItems": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "type": "string",
          "x-isenum": true
        },
        "SkipToken": {
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "Region"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListSessionHostsResponse": {
      "type": "object",
      "properties": {
        "NumItems": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "SessionHostSummaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SessionHostSummary"
          },
          "x-isclass": true
        },
        "SkipToken": {
          "type": "string"
        }
      },
      "required": [
        "NumItems"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListVirtualMachinesRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "type": "string"
        },
        "NumItems": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "type": "string",
          "x-isenum": true
        },
        "SkipToken": {
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "Region"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListVirtualMachinesResponse": {
      "type": "object",
      "properties": {
        "NumItems": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "type": "string"
        },
        "VirtualMachines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualMachine"
          },
          "x-isclass": true
        }
      },
      "required": [
        "NumItems"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "MatchmakingPlayer": {
      "description": "A user in a matchmaking ticket.",
      "type": "object",
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/MatchmakingPlayerAttributes",
          "description": "The user's attributes custom to the title.",
          "type": "object",
          "x-isclass": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity key of the matchmaking user.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Entity"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "MatchmakingPlayerAttributes": {
      "description": "The matchmaking attributes for a user.",
      "type": "object",
      "properties": {
        "DataObject": {
          "description": "A data object representing a user's attributes.",
          "type": "object"
        },
        "EscapedDataObject": {
          "description": "An escaped data object representing a user's attributes.",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "MatchmakingPlayerWithTeamAssignment": {
      "description": "A player in a created matchmaking match with a team assignment.",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity key of the matchmaking user.",
          "type": "object",
          "x-isclass": true
        },
        "TeamId": {
          "description": "The Id of the team the User has been assigned to by matchmaking.",
          "type": "string"
        }
      },
      "required": [
        "Entity"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "Port": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Num": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "Protocol": {
          "$ref": "#/definitions/ProtocolType",
          "type": "string",
          "x-isenum": true
        }
      },
      "required": [
        "Name",
        "Num",
        "Protocol"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ProtocolType": {
      "type": "object",
      "enum": [
        "TCP",
        "UDP"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "QosServer": {
      "type": "object",
      "properties": {
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "type": "string",
          "x-isenum": true
        },
        "ServerUrl": {
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SessionHostSummary": {
      "type": "object",
      "properties": {
        "ConnectedPlayers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectedPlayer"
          },
          "x-isclass": true
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "type": "string",
          "x-isenum": true
        },
        "SessionHostId": {
          "type": "string"
        },
        "State": {
          "type": "string"
        },
        "VmId": {
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ShutdownSessionHostRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "BuildID of the session host to be deleted, must be a GUID.",
          "type": "string"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "type": "string",
          "x-isenum": true
        },
        "SessionId": {
          "description": "SessionID of the session host to be deleted, must be a GUID.",
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "Region",
        "SessionId"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ShutdownSessionHostResponse": {
      "type": "object",
      "properties": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UpdateBuildRegionsRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "type": "string"
        },
        "BuildRegions": {
          "description": "The updated region configuration that should be applied to the specified build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildRegionParams"
          },
          "x-isclass": true
        }
      },
      "required": [
        "BuildId",
        "BuildRegions"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UpdateBuildRegionsResponse": {
      "type": "object",
      "properties": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UploadCertificateRequest": {
      "type": "object",
      "properties": {
        "GameCertificate": {
          "$ref": "#/definitions/Certificate",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "GameCertificate"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UploadCertificateResponse": {
      "type": "object",
      "properties": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "VirtualMachine": {
      "type": "object",
      "properties": {
        "State": {
          "type": "string"
        },
        "VmId": {
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    }
  },
  "parameters": {
    "AllocateSessionHostRequest": {
      "name": "AllocateSessionHostRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/AllocateSessionHostRequest"
      }
    },
    "CancelMatchmakingTicketRequest": {
      "name": "CancelMatchmakingTicketRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/CancelMatchmakingTicketRequest"
      }
    },
    "CreateBuildWithCustomContainerRequest": {
      "name": "CreateBuildWithCustomContainerRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateBuildWithCustomContainerRequest"
      }
    },
    "CreateBuildWithManagedContainerRequest": {
      "name": "CreateBuildWithManagedContainerRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateBuildWithManagedContainerRequest"
      }
    },
    "CreateMatchmakingTicketRequest": {
      "name": "CreateMatchmakingTicketRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateMatchmakingTicketRequest"
      }
    },
    "CreateRemoteUserRequest": {
      "name": "CreateRemoteUserRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateRemoteUserRequest"
      }
    },
    "CreateServerMatchmakingTicketRequest": {
      "name": "CreateServerMatchmakingTicketRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateServerMatchmakingTicketRequest"
      }
    },
    "DeleteBuildRequest": {
      "name": "DeleteBuildRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/DeleteBuildRequest"
      }
    },
    "DeleteRemoteUserRequest": {
      "name": "DeleteRemoteUserRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/DeleteRemoteUserRequest"
      }
    },
    "GetAssetUploadUrlRequest": {
      "name": "GetAssetUploadUrlRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetAssetUploadUrlRequest"
      }
    },
    "GetBuildRequest": {
      "name": "GetBuildRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetBuildRequest"
      }
    },
    "GetMatchmakingTicketRequest": {
      "name": "GetMatchmakingTicketRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetMatchmakingTicketRequest"
      }
    },
    "GetMatchRequest": {
      "name": "GetMatchRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetMatchRequest"
      }
    },
    "GetRemoteLoginEndpointRequest": {
      "name": "GetRemoteLoginEndpointRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetRemoteLoginEndpointRequest"
      }
    },
    "GetSessionHostDetailsRequest": {
      "name": "GetSessionHostDetailsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetSessionHostDetailsRequest"
      }
    },
    "GetSessionHostLogsRequest": {
      "name": "GetSessionHostLogsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetSessionHostLogsRequest"
      }
    },
    "JoinMatchmakingTicketRequest": {
      "name": "JoinMatchmakingTicketRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/JoinMatchmakingTicketRequest"
      }
    },
    "ListAssetsRequest": {
      "name": "ListAssetsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListAssetsRequest"
      }
    },
    "ListBuildsRequest": {
      "name": "ListBuildsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListBuildsRequest"
      }
    },
    "ListCertificatesRequest": {
      "name": "ListCertificatesRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListCertificatesRequest"
      }
    },
    "ListQosServersRequest": {
      "name": "ListQosServersRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListQosServersRequest"
      }
    },
    "ListSessionHostsRequest": {
      "name": "ListSessionHostsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListSessionHostsRequest"
      }
    },
    "ListVirtualMachinesRequest": {
      "name": "ListVirtualMachinesRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListVirtualMachinesRequest"
      }
    },
    "ShutdownSessionHostRequest": {
      "name": "ShutdownSessionHostRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ShutdownSessionHostRequest"
      }
    },
    "UpdateBuildRegionsRequest": {
      "name": "UpdateBuildRegionsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/UpdateBuildRegionsRequest"
      }
    },
    "UploadCertificateRequest": {
      "name": "UploadCertificateRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/UploadCertificateRequest"
      }
    }
  },
  "responses": {
    "ApiErrorWrapper": {
      "description": "This is the outer-wrapper for all results with errors",
      "schema": {
        "$ref": "#/definitions/ApiErrorWrapper"
      }
    },
    "AllocateSessionHostResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/AllocateSessionHostResponse"
      }
    },
    "CancelMatchmakingTicketResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/CancelMatchmakingTicketResult"
      }
    },
    "CreateBuildResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateBuildResponse"
      }
    },
    "CreateMatchmakingTicketResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateMatchmakingTicketResult"
      }
    },
    "CreateRemoteUserResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateRemoteUserResponse"
      }
    },
    "DeleteBuildResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/DeleteBuildResponse"
      }
    },
    "DeleteRemoteUserResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/DeleteRemoteUserResponse"
      }
    },
    "GetAssetUploadUrlResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetAssetUploadUrlResponse"
      }
    },
    "GetBuildResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetBuildResponse"
      }
    },
    "GetMatchmakingTicketResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetMatchmakingTicketResult"
      }
    },
    "GetMatchResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetMatchResult"
      }
    },
    "GetRemoteLoginEndpointResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetRemoteLoginEndpointResponse"
      }
    },
    "GetSessionHostLogsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetSessionHostLogsResponse"
      }
    },
    "GetSessionHostResponseDetailsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetSessionHostResponseDetailsResponse"
      }
    },
    "JoinMatchmakingTicketResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/JoinMatchmakingTicketResult"
      }
    },
    "ListAssetsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListAssetsResponse"
      }
    },
    "ListBuildsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListBuildsResponse"
      }
    },
    "ListCertificatesResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListCertificatesResponse"
      }
    },
    "ListQosServersResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListQosServersResponse"
      }
    },
    "ListSessionHostsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListSessionHostsResponse"
      }
    },
    "ListVirtualMachinesResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListVirtualMachinesResponse"
      }
    },
    "ShutdownSessionHostResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ShutdownSessionHostResponse"
      }
    },
    "UpdateBuildRegionsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/UpdateBuildRegionsResponse"
      }
    },
    "UploadCertificateResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/UploadCertificateResponse"
      }
    }
  },
  "x-AnyInclusiveFlags": [
    "Beta"
  ],
  "tags": [
    {
      "name": "GameServer",
      "description": "https://api.playfab.com/documentation/Multiplayer#GameServer"
    },
    {
      "name": "Matchmaking",
      "description": "https://api.playfab.com/documentation/Multiplayer#Matchmaking"
    }
  ],
  "securityDefinitions": {
    "None": {
      "type": "apiKey",
      "in": "header",
      "name": "None",
      "description": "This API requires no authentication headers (usually provides one to other calls)."
    },
    "SessionTicket": {
      "type": "apiKey",
      "in": "header",
      "name": "SessionTicket",
      "description": "This API requires a client session ticket, available from any Client Login function."
    },
    "SecretKey": {
      "type": "apiKey",
      "in": "header",
      "name": "SecretKey",
      "description": "This API requires a title secret key, available to title admins, from PlayFab Game Manager."
    },
    "EntityToken": {
      "type": "apiKey",
      "in": "header",
      "name": "EntityToken",
      "description": "This API requires an Entity Session Token, available from the Entity GetEntityToken method."
    }
  },
  "x-errors": {
    "Success": {
      "name": "Success"
    },
    "UnkownError": {
      "id": 500,
      "name": "UnkownError"
    },
    "InvalidParams": {
      "id": 1000,
      "name": "InvalidParams"
    },
    "AccountNotFound": {
      "id": 1001,
      "name": "AccountNotFound"
    },
    "AccountBanned": {
      "id": 1002,
      "name": "AccountBanned"
    },
    "InvalidUsernameOrPassword": {
      "id": 1003,
      "name": "InvalidUsernameOrPassword"
    },
    "InvalidTitleId": {
      "id": 1004,
      "name": "InvalidTitleId"
    },
    "InvalidEmailAddress": {
      "id": 1005,
      "name": "InvalidEmailAddress"
    },
    "EmailAddressNotAvailable": {
      "id": 1006,
      "name": "EmailAddressNotAvailable"
    },
    "InvalidUsername": {
      "id": 1007,
      "name": "InvalidUsername"
    },
    "InvalidPassword": {
      "id": 1008,
      "name": "InvalidPassword"
    },
    "UsernameNotAvailable": {
      "id": 1009,
      "name": "UsernameNotAvailable"
    },
    "InvalidSteamTicket": {
      "id": 1010,
      "name": "InvalidSteamTicket"
    },
    "AccountAlreadyLinked": {
      "id": 1011,
      "name": "AccountAlreadyLinked"
    },
    "LinkedAccountAlreadyClaimed": {
      "id": 1012,
      "name": "LinkedAccountAlreadyClaimed"
    },
    "InvalidFacebookToken": {
      "id": 1013,
      "name": "InvalidFacebookToken"
    },
    "AccountNotLinked": {
      "id": 1014,
      "name": "AccountNotLinked"
    },
    "FailedByPaymentProvider": {
      "id": 1015,
      "name": "FailedByPaymentProvider"
    },
    "CouponCodeNotFound": {
      "id": 1016,
      "name": "CouponCodeNotFound"
    },
    "InvalidContainerItem": {
      "id": 1017,
      "name": "InvalidContainerItem"
    },
    "ContainerNotOwned": {
      "id": 1018,
      "name": "ContainerNotOwned"
    },
    "KeyNotOwned": {
      "id": 1019,
      "name": "KeyNotOwned"
    },
    "InvalidItemIdInTable": {
      "id": 1020,
      "name": "InvalidItemIdInTable"
    },
    "InvalidReceipt": {
      "id": 1021,
      "name": "InvalidReceipt"
    },
    "ReceiptAlreadyUsed": {
      "id": 1022,
      "name": "ReceiptAlreadyUsed"
    },
    "ReceiptCancelled": {
      "id": 1023,
      "name": "ReceiptCancelled"
    },
    "GameNotFound": {
      "id": 1024,
      "name": "GameNotFound"
    },
    "GameModeNotFound": {
      "id": 1025,
      "name": "GameModeNotFound"
    },
    "InvalidGoogleToken": {
      "id": 1026,
      "name": "InvalidGoogleToken"
    },
    "UserIsNotPartOfDeveloper": {
      "id": 1027,
      "name": "UserIsNotPartOfDeveloper"
    },
    "InvalidTitleForDeveloper": {
      "id": 1028,
      "name": "InvalidTitleForDeveloper"
    },
    "TitleNameConflicts": {
      "id": 1029,
      "name": "TitleNameConflicts"
    },
    "UserisNotValid": {
      "id": 1030,
      "name": "UserisNotValid"
    },
    "ValueAlreadyExists": {
      "id": 1031,
      "name": "ValueAlreadyExists"
    },
    "BuildNotFound": {
      "id": 1032,
      "name": "BuildNotFound"
    },
    "PlayerNotInGame": {
      "id": 1033,
      "name": "PlayerNotInGame"
    },
    "InvalidTicket": {
      "id": 1034,
      "name": "InvalidTicket"
    },
    "InvalidDeveloper": {
      "id": 1035,
      "name": "InvalidDeveloper"
    },
    "InvalidOrderInfo": {
      "id": 1036,
      "name": "InvalidOrderInfo"
    },
    "RegistrationIncomplete": {
      "id": 1037,
      "name": "RegistrationIncomplete"
    },
    "InvalidPlatform": {
      "id": 1038,
      "name": "InvalidPlatform"
    },
    "UnknownError": {
      "id": 1039,
      "name": "UnknownError"
    },
    "SteamApplicationNotOwned": {
      "id": 1040,
      "name": "SteamApplicationNotOwned"
    },
    "WrongSteamAccount": {
      "id": 1041,
      "name": "WrongSteamAccount"
    },
    "TitleNotActivated": {
      "id": 1042,
      "name": "TitleNotActivated"
    },
    "RegistrationSessionNotFound": {
      "id": 1043,
      "name": "RegistrationSessionNotFound"
    },
    "NoSuchMod": {
      "id": 1044,
      "name": "NoSuchMod"
    },
    "FileNotFound": {
      "id": 1045,
      "name": "FileNotFound"
    },
    "DuplicateEmail": {
      "id": 1046,
      "name": "DuplicateEmail"
    },
    "ItemNotFound": {
      "id": 1047,
      "name": "ItemNotFound"
    },
    "ItemNotOwned": {
      "id": 1048,
      "name": "ItemNotOwned"
    },
    "ItemNotRecycleable": {
      "id": 1049,
      "name": "ItemNotRecycleable"
    },
    "ItemNotAffordable": {
      "id": 1050,
      "name": "ItemNotAffordable"
    },
    "InvalidVirtualCurrency": {
      "id": 1051,
      "name": "InvalidVirtualCurrency"
    },
    "WrongVirtualCurrency": {
      "id": 1052,
      "name": "WrongVirtualCurrency"
    },
    "WrongPrice": {
      "id": 1053,
      "name": "WrongPrice"
    },
    "NonPositiveValue": {
      "id": 1054,
      "name": "NonPositiveValue"
    },
    "InvalidRegion": {
      "id": 1055,
      "name": "InvalidRegion"
    },
    "RegionAtCapacity": {
      "id": 1056,
      "name": "RegionAtCapacity"
    },
    "ServerFailedToStart": {
      "id": 1057,
      "name": "ServerFailedToStart"
    },
    "NameNotAvailable": {
      "id": 1058,
      "name": "NameNotAvailable"
    },
    "InsufficientFunds": {
      "id": 1059,
      "name": "InsufficientFunds"
    },
    "InvalidDeviceID": {
      "id": 1060,
      "name": "InvalidDeviceID"
    },
    "InvalidPushNotificationToken": {
      "id": 1061,
      "name": "InvalidPushNotificationToken"
    },
    "NoRemainingUses": {
      "id": 1062,
      "name": "NoRemainingUses"
    },
    "InvalidPaymentProvider": {
      "id": 1063,
      "name": "InvalidPaymentProvider"
    },
    "PurchaseInitializationFailure": {
      "id": 1064,
      "name": "PurchaseInitializationFailure"
    },
    "DuplicateUsername": {
      "id": 1065,
      "name": "DuplicateUsername"
    },
    "InvalidBuyerInfo": {
      "id": 1066,
      "name": "InvalidBuyerInfo"
    },
    "NoGameModeParamsSet": {
      "id": 1067,
      "name": "NoGameModeParamsSet"
    },
    "BodyTooLarge": {
      "id": 1068,
      "name": "BodyTooLarge"
    },
    "ReservedWordInBody": {
      "id": 1069,
      "name": "ReservedWordInBody"
    },
    "InvalidTypeInBody": {
      "id": 1070,
      "name": "InvalidTypeInBody"
    },
    "InvalidRequest": {
      "id": 1071,
      "name": "InvalidRequest"
    },
    "ReservedEventName": {
      "id": 1072,
      "name": "ReservedEventName"
    },
    "InvalidUserStatistics": {
      "id": 1073,
      "name": "InvalidUserStatistics"
    },
    "NotAuthenticated": {
      "id": 1074,
      "name": "NotAuthenticated"
    },
    "StreamAlreadyExists": {
      "id": 1075,
      "name": "StreamAlreadyExists"
    },
    "ErrorCreatingStream": {
      "id": 1076,
      "name": "ErrorCreatingStream"
    },
    "StreamNotFound": {
      "id": 1077,
      "name": "StreamNotFound"
    },
    "InvalidAccount": {
      "id": 1078,
      "name": "InvalidAccount"
    },
    "PurchaseDoesNotExist": {
      "id": 1080,
      "name": "PurchaseDoesNotExist"
    },
    "InvalidPurchaseTransactionStatus": {
      "id": 1081,
      "name": "InvalidPurchaseTransactionStatus"
    },
    "APINotEnabledForGameClientAccess": {
      "id": 1082,
      "name": "APINotEnabledForGameClientAccess"
    },
    "NoPushNotificationARNForTitle": {
      "id": 1083,
      "name": "NoPushNotificationARNForTitle"
    },
    "BuildAlreadyExists": {
      "id": 1084,
      "name": "BuildAlreadyExists"
    },
    "BuildPackageDoesNotExist": {
      "id": 1085,
      "name": "BuildPackageDoesNotExist"
    },
    "CustomAnalyticsEventsNotEnabledForTitle": {
      "id": 1087,
      "name": "CustomAnalyticsEventsNotEnabledForTitle"
    },
    "InvalidSharedGroupId": {
      "id": 1088,
      "name": "InvalidSharedGroupId"
    },
    "NotAuthorized": {
      "id": 1089,
      "name": "NotAuthorized"
    },
    "MissingTitleGoogleProperties": {
      "id": 1090,
      "name": "MissingTitleGoogleProperties"
    },
    "InvalidItemProperties": {
      "id": 1091,
      "name": "InvalidItemProperties"
    },
    "InvalidPSNAuthCode": {
      "id": 1092,
      "name": "InvalidPSNAuthCode"
    },
    "InvalidItemId": {
      "id": 1093,
      "name": "InvalidItemId"
    },
    "PushNotEnabledForAccount": {
      "id": 1094,
      "name": "PushNotEnabledForAccount"
    },
    "PushServiceError": {
      "id": 1095,
      "name": "PushServiceError"
    },
    "ReceiptDoesNotContainInAppItems": {
      "id": 1096,
      "name": "ReceiptDoesNotContainInAppItems"
    },
    "ReceiptContainsMultipleInAppItems": {
      "id": 1097,
      "name": "ReceiptContainsMultipleInAppItems"
    },
    "InvalidBundleID": {
      "id": 1098,
      "name": "InvalidBundleID"
    },
    "JavascriptException": {
      "id": 1099,
      "name": "JavascriptException"
    },
    "InvalidSessionTicket": {
      "id": 1100,
      "name": "InvalidSessionTicket"
    },
    "UnableToConnectToDatabase": {
      "id": 1101,
      "name": "UnableToConnectToDatabase"
    },
    "InternalServerError": {
      "id": 1110,
      "name": "InternalServerError"
    },
    "InvalidReportDate": {
      "id": 1111,
      "name": "InvalidReportDate"
    },
    "ReportNotAvailable": {
      "id": 1112,
      "name": "ReportNotAvailable"
    },
    "DatabaseThroughputExceeded": {
      "id": 1113,
      "name": "DatabaseThroughputExceeded"
    },
    "InvalidGameTicket": {
      "id": 1115,
      "name": "InvalidGameTicket"
    },
    "ExpiredGameTicket": {
      "id": 1116,
      "name": "ExpiredGameTicket"
    },
    "GameTicketDoesNotMatchLobby": {
      "id": 1117,
      "name": "GameTicketDoesNotMatchLobby"
    },
    "LinkedDeviceAlreadyClaimed": {
      "id": 1118,
      "name": "LinkedDeviceAlreadyClaimed"
    },
    "DeviceAlreadyLinked": {
      "id": 1119,
      "name": "DeviceAlreadyLinked"
    },
    "DeviceNotLinked": {
      "id": 1120,
      "name": "DeviceNotLinked"
    },
    "PartialFailure": {
      "id": 1121,
      "name": "PartialFailure"
    },
    "PublisherNotSet": {
      "id": 1122,
      "name": "PublisherNotSet"
    },
    "ServiceUnavailable": {
      "id": 1123,
      "name": "ServiceUnavailable"
    },
    "VersionNotFound": {
      "id": 1124,
      "name": "VersionNotFound"
    },
    "RevisionNotFound": {
      "id": 1125,
      "name": "RevisionNotFound"
    },
    "InvalidPublisherId": {
      "id": 1126,
      "name": "InvalidPublisherId"
    },
    "DownstreamServiceUnavailable": {
      "id": 1127,
      "name": "DownstreamServiceUnavailable"
    },
    "APINotIncludedInTitleUsageTier": {
      "id": 1128,
      "name": "APINotIncludedInTitleUsageTier"
    },
    "DAULimitExceeded": {
      "id": 1129,
      "name": "DAULimitExceeded"
    },
    "APIRequestLimitExceeded": {
      "id": 1130,
      "name": "APIRequestLimitExceeded"
    },
    "InvalidAPIEndpoint": {
      "id": 1131,
      "name": "InvalidAPIEndpoint"
    },
    "BuildNotAvailable": {
      "id": 1132,
      "name": "BuildNotAvailable"
    },
    "ConcurrentEditError": {
      "id": 1133,
      "name": "ConcurrentEditError"
    },
    "ContentNotFound": {
      "id": 1134,
      "name": "ContentNotFound"
    },
    "CharacterNotFound": {
      "id": 1135,
      "name": "CharacterNotFound"
    },
    "CloudScriptNotFound": {
      "id": 1136,
      "name": "CloudScriptNotFound"
    },
    "ContentQuotaExceeded": {
      "id": 1137,
      "name": "ContentQuotaExceeded"
    },
    "InvalidCharacterStatistics": {
      "id": 1138,
      "name": "InvalidCharacterStatistics"
    },
    "PhotonNotEnabledForTitle": {
      "id": 1139,
      "name": "PhotonNotEnabledForTitle"
    },
    "PhotonApplicationNotFound": {
      "id": 1140,
      "name": "PhotonApplicationNotFound"
    },
    "PhotonApplicationNotAssociatedWithTitle": {
      "id": 1141,
      "name": "PhotonApplicationNotAssociatedWithTitle"
    },
    "InvalidEmailOrPassword": {
      "id": 1142,
      "name": "InvalidEmailOrPassword"
    },
    "FacebookAPIError": {
      "id": 1143,
      "name": "FacebookAPIError"
    },
    "InvalidContentType": {
      "id": 1144,
      "name": "InvalidContentType"
    },
    "KeyLengthExceeded": {
      "id": 1145,
      "name": "KeyLengthExceeded"
    },
    "DataLengthExceeded": {
      "id": 1146,
      "name": "DataLengthExceeded"
    },
    "TooManyKeys": {
      "id": 1147,
      "name": "TooManyKeys"
    },
    "FreeTierCannotHaveVirtualCurrency": {
      "id": 1148,
      "name": "FreeTierCannotHaveVirtualCurrency"
    },
    "MissingAmazonSharedKey": {
      "id": 1149,
      "name": "MissingAmazonSharedKey"
    },
    "AmazonValidationError": {
      "id": 1150,
      "name": "AmazonValidationError"
    },
    "InvalidPSNIssuerId": {
      "id": 1151,
      "name": "InvalidPSNIssuerId"
    },
    "PSNInaccessible": {
      "id": 1152,
      "name": "PSNInaccessible"
    },
    "ExpiredAuthToken": {
      "id": 1153,
      "name": "ExpiredAuthToken"
    },
    "FailedToGetEntitlements": {
      "id": 1154,
      "name": "FailedToGetEntitlements"
    },
    "FailedToConsumeEntitlement": {
      "id": 1155,
      "name": "FailedToConsumeEntitlement"
    },
    "TradeAcceptingUserNotAllowed": {
      "id": 1156,
      "name": "TradeAcceptingUserNotAllowed"
    },
    "TradeInventoryItemIsAssignedToCharacter": {
      "id": 1157,
      "name": "TradeInventoryItemIsAssignedToCharacter"
    },
    "TradeInventoryItemIsBundle": {
      "id": 1158,
      "name": "TradeInventoryItemIsBundle"
    },
    "TradeStatusNotValidForCancelling": {
      "id": 1159,
      "name": "TradeStatusNotValidForCancelling"
    },
    "TradeStatusNotValidForAccepting": {
      "id": 1160,
      "name": "TradeStatusNotValidForAccepting"
    },
    "TradeDoesNotExist": {
      "id": 1161,
      "name": "TradeDoesNotExist"
    },
    "TradeCancelled": {
      "id": 1162,
      "name": "TradeCancelled"
    },
    "TradeAlreadyFilled": {
      "id": 1163,
      "name": "TradeAlreadyFilled"
    },
    "TradeWaitForStatusTimeout": {
      "id": 1164,
      "name": "TradeWaitForStatusTimeout"
    },
    "TradeInventoryItemExpired": {
      "id": 1165,
      "name": "TradeInventoryItemExpired"
    },
    "TradeMissingOfferedAndAcceptedItems": {
      "id": 1166,
      "name": "TradeMissingOfferedAndAcceptedItems"
    },
    "TradeAcceptedItemIsBundle": {
      "id": 1167,
      "name": "TradeAcceptedItemIsBundle"
    },
    "TradeAcceptedItemIsStackable": {
      "id": 1168,
      "name": "TradeAcceptedItemIsStackable"
    },
    "TradeInventoryItemInvalidStatus": {
      "id": 1169,
      "name": "TradeInventoryItemInvalidStatus"
    },
    "TradeAcceptedCatalogItemInvalid": {
      "id": 1170,
      "name": "TradeAcceptedCatalogItemInvalid"
    },
    "TradeAllowedUsersInvalid": {
      "id": 1171,
      "name": "TradeAllowedUsersInvalid"
    },
    "TradeInventoryItemDoesNotExist": {
      "id": 1172,
      "name": "TradeInventoryItemDoesNotExist"
    },
    "TradeInventoryItemIsConsumed": {
      "id": 1173,
      "name": "TradeInventoryItemIsConsumed"
    },
    "TradeInventoryItemIsStackable": {
      "id": 1174,
      "name": "TradeInventoryItemIsStackable"
    },
    "TradeAcceptedItemsMismatch": {
      "id": 1175,
      "name": "TradeAcceptedItemsMismatch"
    },
    "InvalidKongregateToken": {
      "id": 1176,
      "name": "InvalidKongregateToken"
    },
    "FeatureNotConfiguredForTitle": {
      "id": 1177,
      "name": "FeatureNotConfiguredForTitle"
    },
    "NoMatchingCatalogItemForReceipt": {
      "id": 1178,
      "name": "NoMatchingCatalogItemForReceipt"
    },
    "InvalidCurrencyCode": {
      "id": 1179,
      "name": "InvalidCurrencyCode"
    },
    "NoRealMoneyPriceForCatalogItem": {
      "id": 1180,
      "name": "NoRealMoneyPriceForCatalogItem"
    },
    "TradeInventoryItemIsNotTradable": {
      "id": 1181,
      "name": "TradeInventoryItemIsNotTradable"
    },
    "TradeAcceptedCatalogItemIsNotTradable": {
      "id": 1182,
      "name": "TradeAcceptedCatalogItemIsNotTradable"
    },
    "UsersAlreadyFriends": {
      "id": 1183,
      "name": "UsersAlreadyFriends"
    },
    "LinkedIdentifierAlreadyClaimed": {
      "id": 1184,
      "name": "LinkedIdentifierAlreadyClaimed"
    },
    "CustomIdNotLinked": {
      "id": 1185,
      "name": "CustomIdNotLinked"
    },
    "TotalDataSizeExceeded": {
      "id": 1186,
      "name": "TotalDataSizeExceeded"
    },
    "DeleteKeyConflict": {
      "id": 1187,
      "name": "DeleteKeyConflict"
    },
    "InvalidXboxLiveToken": {
      "id": 1188,
      "name": "InvalidXboxLiveToken"
    },
    "ExpiredXboxLiveToken": {
      "id": 1189,
      "name": "ExpiredXboxLiveToken"
    },
    "ResettableStatisticVersionRequired": {
      "id": 1190,
      "name": "ResettableStatisticVersionRequired"
    },
    "NotAuthorizedByTitle": {
      "id": 1191,
      "name": "NotAuthorizedByTitle"
    },
    "NoPartnerEnabled": {
      "id": 1192,
      "name": "NoPartnerEnabled"
    },
    "InvalidPartnerResponse": {
      "id": 1193,
      "name": "InvalidPartnerResponse"
    },
    "APINotEnabledForGameServerAccess": {
      "id": 1194,
      "name": "APINotEnabledForGameServerAccess"
    },
    "StatisticNotFound": {
      "id": 1195,
      "name": "StatisticNotFound"
    },
    "StatisticNameConflict": {
      "id": 1196,
      "name": "StatisticNameConflict"
    },
    "StatisticVersionClosedForWrites": {
      "id": 1197,
      "name": "StatisticVersionClosedForWrites"
    },
    "StatisticVersionInvalid": {
      "id": 1198,
      "name": "StatisticVersionInvalid"
    },
    "APIClientRequestRateLimitExceeded": {
      "id": 1199,
      "name": "APIClientRequestRateLimitExceeded"
    },
    "InvalidJSONContent": {
      "id": 1200,
      "name": "InvalidJSONContent"
    },
    "InvalidDropTable": {
      "id": 1201,
      "name": "InvalidDropTable"
    },
    "StatisticVersionAlreadyIncrementedForScheduledInterval": {
      "id": 1202,
      "name": "StatisticVersionAlreadyIncrementedForScheduledInterval"
    },
    "StatisticCountLimitExceeded": {
      "id": 1203,
      "name": "StatisticCountLimitExceeded"
    },
    "StatisticVersionIncrementRateExceeded": {
      "id": 1204,
      "name": "StatisticVersionIncrementRateExceeded"
    },
    "ContainerKeyInvalid": {
      "id": 1205,
      "name": "ContainerKeyInvalid"
    },
    "CloudScriptExecutionTimeLimitExceeded": {
      "id": 1206,
      "name": "CloudScriptExecutionTimeLimitExceeded"
    },
    "NoWritePermissionsForEvent": {
      "id": 1207,
      "name": "NoWritePermissionsForEvent"
    },
    "CloudScriptFunctionArgumentSizeExceeded": {
      "id": 1208,
      "name": "CloudScriptFunctionArgumentSizeExceeded"
    },
    "CloudScriptAPIRequestCountExceeded": {
      "id": 1209,
      "name": "CloudScriptAPIRequestCountExceeded"
    },
    "CloudScriptAPIRequestError": {
      "id": 1210,
      "name": "CloudScriptAPIRequestError"
    },
    "CloudScriptHTTPRequestError": {
      "id": 1211,
      "name": "CloudScriptHTTPRequestError"
    },
    "InsufficientGuildRole": {
      "id": 1212,
      "name": "InsufficientGuildRole"
    },
    "GuildNotFound": {
      "id": 1213,
      "name": "GuildNotFound"
    },
    "OverLimit": {
      "id": 1214,
      "name": "OverLimit"
    },
    "EventNotFound": {
      "id": 1215,
      "name": "EventNotFound"
    },
    "InvalidEventField": {
      "id": 1216,
      "name": "InvalidEventField"
    },
    "InvalidEventName": {
      "id": 1217,
      "name": "InvalidEventName"
    },
    "CatalogNotConfigured": {
      "id": 1218,
      "name": "CatalogNotConfigured"
    },
    "OperationNotSupportedForPlatform": {
      "id": 1219,
      "name": "OperationNotSupportedForPlatform"
    },
    "SegmentNotFound": {
      "id": 1220,
      "name": "SegmentNotFound"
    },
    "StoreNotFound": {
      "id": 1221,
      "name": "StoreNotFound"
    },
    "InvalidStatisticName": {
      "id": 1222,
      "name": "InvalidStatisticName"
    },
    "TitleNotQualifiedForLimit": {
      "id": 1223,
      "name": "TitleNotQualifiedForLimit"
    },
    "InvalidServiceLimitLevel": {
      "id": 1224,
      "name": "InvalidServiceLimitLevel"
    },
    "ServiceLimitLevelInTransition": {
      "id": 1225,
      "name": "ServiceLimitLevelInTransition"
    },
    "CouponAlreadyRedeemed": {
      "id": 1226,
      "name": "CouponAlreadyRedeemed"
    },
    "GameServerBuildSizeLimitExceeded": {
      "id": 1227,
      "name": "GameServerBuildSizeLimitExceeded"
    },
    "GameServerBuildCountLimitExceeded": {
      "id": 1228,
      "name": "GameServerBuildCountLimitExceeded"
    },
    "VirtualCurrencyCountLimitExceeded": {
      "id": 1229,
      "name": "VirtualCurrencyCountLimitExceeded"
    },
    "VirtualCurrencyCodeExists": {
      "id": 1230,
      "name": "VirtualCurrencyCodeExists"
    },
    "TitleNewsItemCountLimitExceeded": {
      "id": 1231,
      "name": "TitleNewsItemCountLimitExceeded"
    },
    "InvalidTwitchToken": {
      "id": 1232,
      "name": "InvalidTwitchToken"
    },
    "TwitchResponseError": {
      "id": 1233,
      "name": "TwitchResponseError"
    },
    "ProfaneDisplayName": {
      "id": 1234,
      "name": "ProfaneDisplayName"
    },
    "UserAlreadyAdded": {
      "id": 1235,
      "name": "UserAlreadyAdded"
    },
    "InvalidVirtualCurrencyCode": {
      "id": 1236,
      "name": "InvalidVirtualCurrencyCode"
    },
    "VirtualCurrencyCannotBeDeleted": {
      "id": 1237,
      "name": "VirtualCurrencyCannotBeDeleted"
    },
    "IdentifierAlreadyClaimed": {
      "id": 1238,
      "name": "IdentifierAlreadyClaimed"
    },
    "IdentifierNotLinked": {
      "id": 1239,
      "name": "IdentifierNotLinked"
    },
    "InvalidContinuationToken": {
      "id": 1240,
      "name": "InvalidContinuationToken"
    },
    "ExpiredContinuationToken": {
      "id": 1241,
      "name": "ExpiredContinuationToken"
    },
    "InvalidSegment": {
      "id": 1242,
      "name": "InvalidSegment"
    },
    "InvalidSessionId": {
      "id": 1243,
      "name": "InvalidSessionId"
    },
    "SessionLogNotFound": {
      "id": 1244,
      "name": "SessionLogNotFound"
    },
    "InvalidSearchTerm": {
      "id": 1245,
      "name": "InvalidSearchTerm"
    },
    "TwoFactorAuthenticationTokenRequired": {
      "id": 1246,
      "name": "TwoFactorAuthenticationTokenRequired"
    },
    "GameServerHostCountLimitExceeded": {
      "id": 1247,
      "name": "GameServerHostCountLimitExceeded"
    },
    "PlayerTagCountLimitExceeded": {
      "id": 1248,
      "name": "PlayerTagCountLimitExceeded"
    },
    "RequestAlreadyRunning": {
      "id": 1249,
      "name": "RequestAlreadyRunning"
    },
    "ActionGroupNotFound": {
      "id": 1250,
      "name": "ActionGroupNotFound"
    },
    "MaximumSegmentBulkActionJobsRunning": {
      "id": 1251,
      "name": "MaximumSegmentBulkActionJobsRunning"
    },
    "NoActionsOnPlayersInSegmentJob": {
      "id": 1252,
      "name": "NoActionsOnPlayersInSegmentJob"
    },
    "DuplicateStatisticName": {
      "id": 1253,
      "name": "DuplicateStatisticName"
    },
    "ScheduledTaskNameConflict": {
      "id": 1254,
      "name": "ScheduledTaskNameConflict"
    },
    "ScheduledTaskCreateConflict": {
      "id": 1255,
      "name": "ScheduledTaskCreateConflict"
    },
    "InvalidScheduledTaskName": {
      "id": 1256,
      "name": "InvalidScheduledTaskName"
    },
    "InvalidTaskSchedule": {
      "id": 1257,
      "name": "InvalidTaskSchedule"
    },
    "SteamNotEnabledForTitle": {
      "id": 1258,
      "name": "SteamNotEnabledForTitle"
    },
    "LimitNotAnUpgradeOption": {
      "id": 1259,
      "name": "LimitNotAnUpgradeOption"
    },
    "NoSecretKeyEnabledForCloudScript": {
      "id": 1260,
      "name": "NoSecretKeyEnabledForCloudScript"
    },
    "TaskNotFound": {
      "id": 1261,
      "name": "TaskNotFound"
    },
    "TaskInstanceNotFound": {
      "id": 1262,
      "name": "TaskInstanceNotFound"
    },
    "InvalidIdentityProviderId": {
      "id": 1263,
      "name": "InvalidIdentityProviderId"
    },
    "MisconfiguredIdentityProvider": {
      "id": 1264,
      "name": "MisconfiguredIdentityProvider"
    },
    "InvalidScheduledTaskType": {
      "id": 1265,
      "name": "InvalidScheduledTaskType"
    },
    "BillingInformationRequired": {
      "id": 1266,
      "name": "BillingInformationRequired"
    },
    "LimitedEditionItemUnavailable": {
      "id": 1267,
      "name": "LimitedEditionItemUnavailable"
    },
    "InvalidAdPlacementAndReward": {
      "id": 1268,
      "name": "InvalidAdPlacementAndReward"
    },
    "AllAdPlacementViewsAlreadyConsumed": {
      "id": 1269,
      "name": "AllAdPlacementViewsAlreadyConsumed"
    },
    "GoogleOAuthNotConfiguredForTitle": {
      "id": 1270,
      "name": "GoogleOAuthNotConfiguredForTitle"
    },
    "GoogleOAuthError": {
      "id": 1271,
      "name": "GoogleOAuthError"
    },
    "UserNotFriend": {
      "id": 1272,
      "name": "UserNotFriend"
    },
    "InvalidSignature": {
      "id": 1273,
      "name": "InvalidSignature"
    },
    "InvalidPublicKey": {
      "id": 1274,
      "name": "InvalidPublicKey"
    },
    "GoogleOAuthNoIdTokenIncludedInResponse": {
      "id": 1275,
      "name": "GoogleOAuthNoIdTokenIncludedInResponse"
    },
    "StatisticUpdateInProgress": {
      "id": 1276,
      "name": "StatisticUpdateInProgress"
    },
    "LeaderboardVersionNotAvailable": {
      "id": 1277,
      "name": "LeaderboardVersionNotAvailable"
    },
    "StatisticAlreadyHasPrizeTable": {
      "id": 1279,
      "name": "StatisticAlreadyHasPrizeTable"
    },
    "PrizeTableHasOverlappingRanks": {
      "id": 1280,
      "name": "PrizeTableHasOverlappingRanks"
    },
    "PrizeTableHasMissingRanks": {
      "id": 1281,
      "name": "PrizeTableHasMissingRanks"
    },
    "PrizeTableRankStartsAtZero": {
      "id": 1282,
      "name": "PrizeTableRankStartsAtZero"
    },
    "InvalidStatistic": {
      "id": 1283,
      "name": "InvalidStatistic"
    },
    "ExpressionParseFailure": {
      "id": 1284,
      "name": "ExpressionParseFailure"
    },
    "ExpressionInvokeFailure": {
      "id": 1285,
      "name": "ExpressionInvokeFailure"
    },
    "ExpressionTooLong": {
      "id": 1286,
      "name": "ExpressionTooLong"
    },
    "DataUpdateRateExceeded": {
      "id": 1287,
      "name": "DataUpdateRateExceeded"
    },
    "RestrictedEmailDomain": {
      "id": 1288,
      "name": "RestrictedEmailDomain"
    },
    "EncryptionKeyDisabled": {
      "id": 1289,
      "name": "EncryptionKeyDisabled"
    },
    "EncryptionKeyMissing": {
      "id": 1290,
      "name": "EncryptionKeyMissing"
    },
    "EncryptionKeyBroken": {
      "id": 1291,
      "name": "EncryptionKeyBroken"
    },
    "NoSharedSecretKeyConfigured": {
      "id": 1292,
      "name": "NoSharedSecretKeyConfigured"
    },
    "SecretKeyNotFound": {
      "id": 1293,
      "name": "SecretKeyNotFound"
    },
    "PlayerSecretAlreadyConfigured": {
      "id": 1294,
      "name": "PlayerSecretAlreadyConfigured"
    },
    "APIRequestsDisabledForTitle": {
      "id": 1295,
      "name": "APIRequestsDisabledForTitle"
    },
    "InvalidSharedSecretKey": {
      "id": 1296,
      "name": "InvalidSharedSecretKey"
    },
    "PrizeTableHasNoRanks": {
      "id": 1297,
      "name": "PrizeTableHasNoRanks"
    },
    "ProfileDoesNotExist": {
      "id": 1298,
      "name": "ProfileDoesNotExist"
    },
    "ContentS3OriginBucketNotConfigured": {
      "id": 1299,
      "name": "ContentS3OriginBucketNotConfigured"
    },
    "InvalidEnvironmentForReceipt": {
      "id": 1300,
      "name": "InvalidEnvironmentForReceipt"
    },
    "EncryptedRequestNotAllowed": {
      "id": 1301,
      "name": "EncryptedRequestNotAllowed"
    },
    "SignedRequestNotAllowed": {
      "id": 1302,
      "name": "SignedRequestNotAllowed"
    },
    "RequestViewConstraintParamsNotAllowed": {
      "id": 1303,
      "name": "RequestViewConstraintParamsNotAllowed"
    },
    "BadPartnerConfiguration": {
      "id": 1304,
      "name": "BadPartnerConfiguration"
    },
    "XboxBPCertificateFailure": {
      "id": 1305,
      "name": "XboxBPCertificateFailure"
    },
    "XboxXASSExchangeFailure": {
      "id": 1306,
      "name": "XboxXASSExchangeFailure"
    },
    "InvalidEntityId": {
      "id": 1307,
      "name": "InvalidEntityId"
    },
    "StatisticValueAggregationOverflow": {
      "id": 1308,
      "name": "StatisticValueAggregationOverflow"
    },
    "EmailMessageFromAddressIsMissing": {
      "id": 1309,
      "name": "EmailMessageFromAddressIsMissing"
    },
    "EmailMessageToAddressIsMissing": {
      "id": 1310,
      "name": "EmailMessageToAddressIsMissing"
    },
    "SmtpServerAuthenticationError": {
      "id": 1311,
      "name": "SmtpServerAuthenticationError"
    },
    "SmtpServerLimitExceeded": {
      "id": 1312,
      "name": "SmtpServerLimitExceeded"
    },
    "SmtpServerInsufficientStorage": {
      "id": 1313,
      "name": "SmtpServerInsufficientStorage"
    },
    "SmtpServerCommunicationError": {
      "id": 1314,
      "name": "SmtpServerCommunicationError"
    },
    "SmtpServerGeneralFailure": {
      "id": 1315,
      "name": "SmtpServerGeneralFailure"
    },
    "EmailClientTimeout": {
      "id": 1316,
      "name": "EmailClientTimeout"
    },
    "EmailClientCanceledTask": {
      "id": 1317,
      "name": "EmailClientCanceledTask"
    },
    "EmailTemplateMissing": {
      "id": 1318,
      "name": "EmailTemplateMissing"
    },
    "InvalidHostForTitleId": {
      "id": 1319,
      "name": "InvalidHostForTitleId"
    },
    "EmailConfirmationTokenDoesNotExist": {
      "id": 1320,
      "name": "EmailConfirmationTokenDoesNotExist"
    },
    "EmailConfirmationTokenExpired": {
      "id": 1321,
      "name": "EmailConfirmationTokenExpired"
    },
    "AccountDeleted": {
      "id": 1322,
      "name": "AccountDeleted"
    },
    "PlayerSecretNotConfigured": {
      "id": 1323,
      "name": "PlayerSecretNotConfigured"
    },
    "InvalidSignatureTime": {
      "id": 1324,
      "name": "InvalidSignatureTime"
    },
    "NoContactEmailAddressFound": {
      "id": 1325,
      "name": "NoContactEmailAddressFound"
    },
    "InvalidAuthToken": {
      "id": 1326,
      "name": "InvalidAuthToken"
    },
    "AuthTokenDoesNotExist": {
      "id": 1327,
      "name": "AuthTokenDoesNotExist"
    },
    "AuthTokenExpired": {
      "id": 1328,
      "name": "AuthTokenExpired"
    },
    "AuthTokenAlreadyUsedToResetPassword": {
      "id": 1329,
      "name": "AuthTokenAlreadyUsedToResetPassword"
    },
    "MembershipNameTooLong": {
      "id": 1330,
      "name": "MembershipNameTooLong"
    },
    "MembershipNotFound": {
      "id": 1331,
      "name": "MembershipNotFound"
    },
    "GoogleServiceAccountInvalid": {
      "id": 1332,
      "name": "GoogleServiceAccountInvalid"
    },
    "GoogleServiceAccountParseFailure": {
      "id": 1333,
      "name": "GoogleServiceAccountParseFailure"
    },
    "EntityTokenMissing": {
      "id": 1334,
      "name": "EntityTokenMissing"
    },
    "EntityTokenInvalid": {
      "id": 1335,
      "name": "EntityTokenInvalid"
    },
    "EntityTokenExpired": {
      "id": 1336,
      "name": "EntityTokenExpired"
    },
    "EntityTokenRevoked": {
      "id": 1337,
      "name": "EntityTokenRevoked"
    },
    "InvalidProductForSubscription": {
      "id": 1338,
      "name": "InvalidProductForSubscription"
    },
    "XboxInaccessible": {
      "id": 1339,
      "name": "XboxInaccessible"
    },
    "SubscriptionAlreadyTaken": {
      "id": 1340,
      "name": "SubscriptionAlreadyTaken"
    },
    "SmtpAddonNotEnabled": {
      "id": 1341,
      "name": "SmtpAddonNotEnabled"
    },
    "APIConcurrentRequestLimitExceeded": {
      "id": 1342,
      "name": "APIConcurrentRequestLimitExceeded"
    },
    "XboxRejectedXSTSExchangeRequest": {
      "id": 1343,
      "name": "XboxRejectedXSTSExchangeRequest"
    },
    "VariableNotDefined": {
      "id": 1344,
      "name": "VariableNotDefined"
    },
    "TemplateVersionNotDefined": {
      "id": 1345,
      "name": "TemplateVersionNotDefined"
    },
    "FileTooLarge": {
      "id": 1346,
      "name": "FileTooLarge"
    },
    "TitleDeleted": {
      "id": 1347,
      "name": "TitleDeleted"
    },
    "TitleContainsUserAccounts": {
      "id": 1348,
      "name": "TitleContainsUserAccounts"
    },
    "TitleDeletionPlayerCleanupFailure": {
      "id": 1349,
      "name": "TitleDeletionPlayerCleanupFailure"
    },
    "EntityFileOperationPending": {
      "id": 1350,
      "name": "EntityFileOperationPending"
    },
    "NoEntityFileOperationPending": {
      "id": 1351,
      "name": "NoEntityFileOperationPending"
    },
    "EntityProfileVersionMismatch": {
      "id": 1352,
      "name": "EntityProfileVersionMismatch"
    },
    "TemplateVersionTooOld": {
      "id": 1353,
      "name": "TemplateVersionTooOld"
    },
    "MembershipDefinitionInUse": {
      "id": 1354,
      "name": "MembershipDefinitionInUse"
    },
    "PaymentPageNotConfigured": {
      "id": 1355,
      "name": "PaymentPageNotConfigured"
    },
    "FailedLoginAttemptRateLimitExceeded": {
      "id": 1356,
      "name": "FailedLoginAttemptRateLimitExceeded"
    },
    "EntityBlockedByGroup": {
      "id": 1357,
      "name": "EntityBlockedByGroup"
    },
    "RoleDoesNotExist": {
      "id": 1358,
      "name": "RoleDoesNotExist"
    },
    "EntityIsAlreadyMember": {
      "id": 1359,
      "name": "EntityIsAlreadyMember"
    },
    "DuplicateRoleId": {
      "id": 1360,
      "name": "DuplicateRoleId"
    },
    "GroupInvitationNotFound": {
      "id": 1361,
      "name": "GroupInvitationNotFound"
    },
    "GroupApplicationNotFound": {
      "id": 1362,
      "name": "GroupApplicationNotFound"
    },
    "OutstandingInvitationAcceptedInstead": {
      "id": 1363,
      "name": "OutstandingInvitationAcceptedInstead"
    },
    "OutstandingApplicationAcceptedInstead": {
      "id": 1364,
      "name": "OutstandingApplicationAcceptedInstead"
    },
    "RoleIsGroupDefaultMember": {
      "id": 1365,
      "name": "RoleIsGroupDefaultMember"
    },
    "RoleIsGroupAdmin": {
      "id": 1366,
      "name": "RoleIsGroupAdmin"
    },
    "RoleNameNotAvailable": {
      "id": 1367,
      "name": "RoleNameNotAvailable"
    },
    "GroupNameNotAvailable": {
      "id": 1368,
      "name": "GroupNameNotAvailable"
    },
    "EmailReportAlreadySent": {
      "id": 1369,
      "name": "EmailReportAlreadySent"
    },
    "EmailReportRecipientBlacklisted": {
      "id": 1370,
      "name": "EmailReportRecipientBlacklisted"
    },
    "EventNamespaceNotAllowed": {
      "id": 1371,
      "name": "EventNamespaceNotAllowed"
    },
    "EventEntityNotAllowed": {
      "id": 1372,
      "name": "EventEntityNotAllowed"
    },
    "InvalidEntityType": {
      "id": 1373,
      "name": "InvalidEntityType"
    },
    "NullTokenResultFromAad": {
      "id": 1374,
      "name": "NullTokenResultFromAad"
    },
    "InvalidTokenResultFromAad": {
      "id": 1375,
      "name": "InvalidTokenResultFromAad"
    },
    "NoValidCertificateForAad": {
      "id": 1376,
      "name": "NoValidCertificateForAad"
    },
    "InvalidCertificateForAad": {
      "id": 1377,
      "name": "InvalidCertificateForAad"
    },
    "DuplicateDropTableId": {
      "id": 1378,
      "name": "DuplicateDropTableId"
    },
    "GameServerOk": {
      "id": 1379,
      "name": "GameServerOk"
    },
    "GameServerAccepted": {
      "id": 1380,
      "name": "GameServerAccepted"
    },
    "GameServerNoContent": {
      "id": 1381,
      "name": "GameServerNoContent"
    },
    "GameServerBadRequest": {
      "id": 1382,
      "name": "GameServerBadRequest"
    },
    "GameServerUnauthorized": {
      "id": 1383,
      "name": "GameServerUnauthorized"
    },
    "GameServerForbidden": {
      "id": 1384,
      "name": "GameServerForbidden"
    },
    "GameServerNotFound": {
      "id": 1385,
      "name": "GameServerNotFound"
    },
    "GameServerConflict": {
      "id": 1386,
      "name": "GameServerConflict"
    },
    "GameServerInternalServerError": {
      "id": 1387,
      "name": "GameServerInternalServerError"
    },
    "GameServerServiceUnavailable": {
      "id": 1388,
      "name": "GameServerServiceUnavailable"
    },
    "ExplicitContentDetected": {
      "id": 1389,
      "name": "ExplicitContentDetected"
    },
    "PIIContentDetected": {
      "id": 1390,
      "name": "PIIContentDetected"
    },
    "InvalidScheduledTaskParameter": {
      "id": 1391,
      "name": "InvalidScheduledTaskParameter"
    },
    "PerEntityEventRateLimitExceeded": {
      "id": 1392,
      "name": "PerEntityEventRateLimitExceeded"
    },
    "MatchmakingEntityInvalid": {
      "id": 2001,
      "name": "MatchmakingEntityInvalid"
    },
    "MatchmakingPlayerAttributesInvalid": {
      "id": 2002,
      "name": "MatchmakingPlayerAttributesInvalid"
    },
    "MatchmakingCreateRequestMissing": {
      "id": 2003,
      "name": "MatchmakingCreateRequestMissing"
    },
    "MatchmakingCreateRequestCreatorMissing": {
      "id": 2004,
      "name": "MatchmakingCreateRequestCreatorMissing"
    },
    "MatchmakingCreateRequestCreatorIdMissing": {
      "id": 2005,
      "name": "MatchmakingCreateRequestCreatorIdMissing"
    },
    "MatchmakingCreateRequestUserListMissing": {
      "id": 2006,
      "name": "MatchmakingCreateRequestUserListMissing"
    },
    "MatchmakingCreateRequestGiveUpAfterInvalid": {
      "id": 2007,
      "name": "MatchmakingCreateRequestGiveUpAfterInvalid"
    },
    "MatchmakingTicketIdMissing": {
      "id": 2008,
      "name": "MatchmakingTicketIdMissing"
    },
    "MatchmakingMatchIdMissing": {
      "id": 2009,
      "name": "MatchmakingMatchIdMissing"
    },
    "MatchmakingMatchIdIdMissing": {
      "id": 2010,
      "name": "MatchmakingMatchIdIdMissing"
    },
    "MatchmakingHopperIdMissing": {
      "id": 2011,
      "name": "MatchmakingHopperIdMissing"
    },
    "MatchmakingTitleIdMissing": {
      "id": 2012,
      "name": "MatchmakingTitleIdMissing"
    },
    "MatchmakingTicketIdIdMissing": {
      "id": 2013,
      "name": "MatchmakingTicketIdIdMissing"
    },
    "MatchmakingPlayerIdMissing": {
      "id": 2014,
      "name": "MatchmakingPlayerIdMissing"
    },
    "MatchmakingJoinRequestUserMissing": {
      "id": 2015,
      "name": "MatchmakingJoinRequestUserMissing"
    },
    "MatchmakingHopperConfigNotFound": {
      "id": 2016,
      "name": "MatchmakingHopperConfigNotFound"
    },
    "MatchmakingMatchNotFound": {
      "id": 2017,
      "name": "MatchmakingMatchNotFound"
    },
    "MatchmakingTicketNotFound": {
      "id": 2018,
      "name": "MatchmakingTicketNotFound"
    },
    "MatchmakingCreateTicketServerIdentityInvalid": {
      "id": 2019,
      "name": "MatchmakingCreateTicketServerIdentityInvalid"
    },
    "MatchmakingCreateTicketClientIdentityInvalid": {
      "id": 2020,
      "name": "MatchmakingCreateTicketClientIdentityInvalid"
    },
    "MatchmakingGetTicketUserMismatch": {
      "id": 2021,
      "name": "MatchmakingGetTicketUserMismatch"
    },
    "MatchmakingJoinTicketServerIdentityInvalid": {
      "id": 2022,
      "name": "MatchmakingJoinTicketServerIdentityInvalid"
    },
    "MatchmakingJoinTicketUserIdentityMismatch": {
      "id": 2023,
      "name": "MatchmakingJoinTicketUserIdentityMismatch"
    },
    "MatchmakingCancelTicketServerIdentityInvalid": {
      "id": 2024,
      "name": "MatchmakingCancelTicketServerIdentityInvalid"
    },
    "MatchmakingCancelTicketUserIdentityMismatch": {
      "id": 2025,
      "name": "MatchmakingCancelTicketUserIdentityMismatch"
    },
    "MatchmakingGetMatchIdentityMismatch": {
      "id": 2026,
      "name": "MatchmakingGetMatchIdentityMismatch"
    },
    "MatchmakingPlayerIdentityMismatch": {
      "id": 2027,
      "name": "MatchmakingPlayerIdentityMismatch"
    },
    "MatchmakingAlreadyJoinedTicket": {
      "id": 2028,
      "name": "MatchmakingAlreadyJoinedTicket"
    },
    "MatchmakingTicketAlreadyCompleted": {
      "id": 2029,
      "name": "MatchmakingTicketAlreadyCompleted"
    },
    "MatchmakingHopperIdInvalid": {
      "id": 2030,
      "name": "MatchmakingHopperIdInvalid"
    },
    "MatchmakingHopperConfigInvalid": {
      "id": 2031,
      "name": "MatchmakingHopperConfigInvalid"
    },
    "MatchmakingMemberProfileInvalid": {
      "id": 2032,
      "name": "MatchmakingMemberProfileInvalid"
    },
    "WriteAttemptedDuringExport": {
      "id": 2033,
      "name": "WriteAttemptedDuringExport"
    }
  }
}