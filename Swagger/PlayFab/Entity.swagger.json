{
  "swagger": "2.0",
  "info": {
    "version": "180611",
    "title": "PlayFab Entity API",
    "description": "PlayFab Entity APIs provide a variety of core PlayFab features and work consistently across a broad set of entities, such as titles, players, characters, and more.",
    "termsOfService": "https://playfab.com/terms/",
    "contact": {
      "url": "https://community.playfab.com/index.html"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://github.com/PlayFab/API_Specs/blob/master/LICENSE"
    }
  },
  "host": "titleId.playfabapi.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/Authentication/GetEntityToken": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "Method to exchange a legacy AuthenticationTicket or title SecretKey for an Entity Token or to refresh a still valid Entity Token.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/GetEntityToken"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetEntityTokenRequest"
          }
        ],
        "security": [
          {
            "None": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetEntityTokenResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "This API must be called with X-SecretKey, X-Authentication or X-EntityToken headers. An optional EntityKey may be included to attempt to set the resulting EntityToken to a specific entity, however the entity must be a relation of the caller, such as the master_player_account of a character. If sending X-EntityToken the account will be marked as freshly logged in and will issue a new token. If using X-Authentication or X-EntityToken the header must still be valid and cannot be expired or revoked.",
        "x-errors": [
          "EntityTokenExpired",
          "EntityTokenInvalid",
          "EntityTokenRevoked",
          "NotAuthenticated"
        ]
      }
    },
    "/Event/WriteEvents": {
      "post": {
        "tags": [
          "PlayStream Events"
        ],
        "description": "Writes events to PlayStream.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/WriteEvents"
        },
        "parameters": [
          {
            "$ref": "#/parameters/WriteEventsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/WriteEventsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AllInclusiveFlags": [
          "Beta"
        ],
        "x-errors": [
          "EventEntityNotAllowed",
          "EventNamespaceNotAllowed",
          "InvalidJSONContent",
          "NotAuthenticated",
          "NotAuthorized",
          "OverLimit",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/File/AbortFileUploads": {
      "post": {
        "tags": [
          "File"
        ],
        "description": "Abort pending file uploads to an entity's profile.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/AbortFileUploads"
        },
        "parameters": [
          {
            "$ref": "#/parameters/AbortFileUploadsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/AbortFileUploadsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Aborts the pending upload of the requested files.",
        "x-seeAlso": [
          "File/DeleteFiles",
          "File/FinalizeFileUploads",
          "File/GetFiles",
          "File/InitiateFileUploads"
        ],
        "x-errors": [
          "FileNotFound",
          "NoEntityFileOperationPending"
        ]
      }
    },
    "/File/DeleteFiles": {
      "post": {
        "tags": [
          "File"
        ],
        "description": "Delete files on an entity's profile.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/DeleteFiles"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteFilesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/DeleteFilesResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Deletes the requested files from the entity's profile.",
        "x-seeAlso": [
          "File/FinalizeFileUploads",
          "File/GetFiles",
          "File/InitiateFileUploads"
        ],
        "x-errors": [
          "EntityFileOperationPending",
          "FileNotFound"
        ]
      }
    },
    "/File/FinalizeFileUploads": {
      "post": {
        "tags": [
          "File"
        ],
        "description": "Finalize file uploads to an entity's profile.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/FinalizeFileUploads"
        },
        "parameters": [
          {
            "$ref": "#/parameters/FinalizeFileUploadsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/FinalizeFileUploadsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Finalizes the upload of the requested files. Verifies that the files have been successfully uploaded and moves the file pointers from pending to live.",
        "x-seeAlso": [
          "File/AbortFileUploads",
          "File/DeleteFiles",
          "File/GetFiles",
          "File/InitiateFileUploads"
        ],
        "x-errors": [
          "FileNotFound",
          "NoEntityFileOperationPending"
        ]
      }
    },
    "/File/GetFiles": {
      "post": {
        "tags": [
          "File"
        ],
        "description": "Retrieves file metadata from an entity's profile.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/GetFiles"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetFilesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetFilesResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns URLs that may be used to download the files for a profile for a limited length of time. Only returns files that have been successfully uploaded, files that are still pending will either return the old value, if it exists, or nothing. ",
        "x-seeAlso": [
          "File/AbortFileUploads",
          "File/DeleteFiles",
          "File/FinalizeFileUploads",
          "File/InitiateFileUploads"
        ]
      }
    },
    "/File/InitiateFileUploads": {
      "post": {
        "tags": [
          "File"
        ],
        "description": "Initiates file uploads to an entity's profile.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/InitiateFileUploads"
        },
        "parameters": [
          {
            "$ref": "#/parameters/InitiateFileUploadsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/InitiateFileUploadsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns URLs that may be used to upload the files for a profile 5 minutes. After using the upload calls FinalizeFileUploads must be called to move the file status from pending to live.",
        "x-seeAlso": [
          "File/AbortFileUploads",
          "File/DeleteFiles",
          "File/FinalizeFileUploads",
          "File/GetFiles"
        ],
        "x-errors": [
          "EntityFileOperationPending"
        ]
      }
    },
    "/GameServer/AllocateSessionHost": {
      "post": {
        "tags": [
          "GameServer"
        ],
        "description": null,
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/AllocateSessionHost"
        },
        "parameters": [
          {
            "$ref": "#/parameters/AllocateSessionHostRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/AllocateSessionHostResultResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/GetSessionHostDetails"
        ],
        "x-errors": [
          "GameServerAccepted",
          "GameServerBadRequest",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/CreateBuild": {
      "post": {
        "tags": [
          "GameServer"
        ],
        "description": null,
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/CreateBuild"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateBuildRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/CreateBuildResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/DeleteBuild",
          "GameServer/GetBuild",
          "GameServer/ListBuilds"
        ],
        "x-errors": [
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerOk",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/CreateRemoteUser": {
      "post": {
        "tags": [
          "GameServer"
        ],
        "description": null,
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/CreateRemoteUser"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateRemoteUserRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/CreateRemoteUserResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/GetRemoteLoginEndpoint"
        ],
        "x-errors": [
          "GameServerAccepted",
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNoContent",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/DeleteBuild": {
      "post": {
        "tags": [
          "GameServer"
        ],
        "description": null,
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/DeleteBuild"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteBuildRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/DeleteBuildResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/CreateBuild",
          "GameServer/GetBuild",
          "GameServer/ListBuilds"
        ],
        "x-errors": [
          "GameServerAccepted",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNotFound",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/GetAssetUploadUrl": {
      "post": {
        "tags": [
          "GameServer"
        ],
        "description": null,
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/GetAssetUploadUrl"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetAssetUploadUrlRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetAssetUploadUrlResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/ListAssets",
          "GameServer/ListCertificates",
          "GameServer/UploadCertificate"
        ],
        "x-errors": [
          "GameServerAccepted",
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNoContent",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/GetBuild": {
      "post": {
        "tags": [
          "GameServer"
        ],
        "description": null,
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/GetBuild"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetBuildRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetBuildResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/CreateBuild",
          "GameServer/DeleteBuild",
          "GameServer/ListBuilds"
        ],
        "x-errors": [
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/GetRemoteLoginEndpoint": {
      "post": {
        "tags": [
          "GameServer"
        ],
        "description": null,
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/GetRemoteLoginEndpoint"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetRemoteLoginEndpointRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetRemoteLoginEndpointResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/CreateRemoteUser"
        ],
        "x-errors": [
          "GameServerAccepted",
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNoContent",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/GetSessionHostDetails": {
      "post": {
        "tags": [
          "GameServer"
        ],
        "description": null,
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/GetSessionHostDetails"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetSessionHostDetailsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetSessionHostResultDetailsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/AllocateSessionHost"
        ],
        "x-errors": [
          "GameServerBadRequest",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/ListAssets": {
      "post": {
        "tags": [
          "GameServer"
        ],
        "description": null,
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/ListAssets"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListAssetsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListAssetsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/GetAssetUploadUrl",
          "GameServer/ListCertificates",
          "GameServer/UploadCertificate"
        ],
        "x-errors": [
          "GameServerAccepted",
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNoContent",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/ListBuilds": {
      "post": {
        "tags": [
          "GameServer"
        ],
        "description": null,
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/ListBuilds"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListBuildsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListBuildsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/CreateBuild",
          "GameServer/DeleteBuild",
          "GameServer/GetBuild"
        ],
        "x-errors": [
          "GameServerBadRequest",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/ListCertificates": {
      "post": {
        "tags": [
          "GameServer"
        ],
        "description": null,
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/ListCertificates"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListCertificatesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListCertificatesResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/GetAssetUploadUrl",
          "GameServer/ListAssets",
          "GameServer/UploadCertificate"
        ],
        "x-errors": [
          "GameServerAccepted",
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNoContent",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/ListQosServers": {
      "post": {
        "tags": [
          "GameServer"
        ],
        "description": null,
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/ListQosServers"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListQosServersRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListQosServersResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-errors": [
          "GameServerBadRequest",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerOk",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/ListSessionHosts": {
      "post": {
        "tags": [
          "GameServer"
        ],
        "description": null,
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/ListSessionHosts"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListSessionHostsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListSessionHostsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/AllocateSessionHost"
        ],
        "x-errors": [
          "GameServerBadRequest",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/UpdateBuildRegions": {
      "post": {
        "tags": [
          "GameServer"
        ],
        "description": null,
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/UpdateBuildRegions"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UpdateBuildRegionsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/UpdateBuildRegionsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/DeleteBuild",
          "GameServer/GetBuild",
          "GameServer/ListBuilds"
        ],
        "x-errors": [
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerOk",
          "GameServerUnauthorized"
        ]
      }
    },
    "/GameServer/UploadCertificate": {
      "post": {
        "tags": [
          "GameServer"
        ],
        "description": null,
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/UploadCertificate"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UploadCertificateRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/UploadCertificateResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-seeAlso": [
          "GameServer/GetAssetUploadUrl",
          "GameServer/ListAssets",
          "GameServer/ListCertificates"
        ],
        "x-errors": [
          "GameServerAccepted",
          "GameServerBadRequest",
          "GameServerConflict",
          "GameServerForbidden",
          "GameServerInternalServerError",
          "GameServerNoContent",
          "GameServerNotFound",
          "GameServerOk",
          "GameServerServiceUnavailable",
          "GameServerUnauthorized"
        ]
      }
    },
    "/Group/AcceptGroupApplication": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Accepts an outstanding invitation to to join a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/AcceptGroupApplication"
        },
        "parameters": [
          {
            "$ref": "#/parameters/AcceptGroupApplicationRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Accepts an outstanding invitation to to join a group if the invited entity is not blocked by the group. Nothing is returned in the case of success.",
        "x-seeAlso": [
          "Group/ApplyToGroup",
          "Group/ListGroupApplications",
          "Group/RemoveGroupApplication"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/AcceptGroupInvitation": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Accepts an invitation to join a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/AcceptGroupInvitation"
        },
        "parameters": [
          {
            "$ref": "#/parameters/AcceptGroupInvitationRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Accepts an outstanding invitation to join the group if the invited entity is not blocked by the group. Only the invited entity or a parent in its chain (e.g. title) may accept the invitation on the invited entity's behalf. Nothing is returned in the case of success.",
        "x-seeAlso": [
          "Group/InviteToGroup",
          "Group/ListGroupInvitations",
          "Group/ListMembershipOpportunities",
          "Group/RemoveGroupInvitation"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/AddMembers": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Adds members to a group or role.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/AddMembers"
        },
        "parameters": [
          {
            "$ref": "#/parameters/AddMembersRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Adds members to a group or role. Existing members of the group will added to roles within the group, but if the user is not already a member of the group, only title claimants may add them to the group, and others must use the group application or invite system to add new members to a group. Returns nothing if successful.",
        "x-seeAlso": [
          "Group/ApplyToGroup",
          "Group/InviteToGroup",
          "Group/ListGroupMembers",
          "Group/RemoveMembers"
        ],
        "x-errors": [
          "InvalidParams",
          "NotAuthenticated",
          "NotAuthorized",
          "RoleDoesNotExist"
        ]
      }
    },
    "/Group/ApplyToGroup": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Applies to join a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/ApplyToGroup"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApplyToGroupRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ApplyToGroupResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Creates an application to join a group. Calling this while a group application already exists will return the same application instead of an error and will not refresh the time before the application expires. By default, if the entity has an invitation to join the group outstanding, this will accept the invitation to join the group instead and return an error indicating such, rather than creating a duplicate application to join that will need to be cleaned up later. Returns information about the application or an error indicating an invitation was accepted instead.",
        "x-seeAlso": [
          "Group/AcceptGroupApplication",
          "Group/ListGroupApplications",
          "Group/RemoveGroupApplication"
        ],
        "x-errors": [
          "InvalidParams",
          "NotAuthenticated",
          "NotAuthorized",
          "OutstandingInvitationAcceptedInstead"
        ]
      }
    },
    "/Group/BlockEntity": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Blocks a list of entities from joining a group.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/BlockEntity"
        },
        "parameters": [
          {
            "$ref": "#/parameters/BlockEntityRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Blocks a list of entities from joining a group. Blocked entities may not create new applications to join, be invited to join, accept an invitation, or have an application accepted. Failure due to being blocked does not clean up existing applications or invitations to the group. No data is returned in the case of success.",
        "x-seeAlso": [
          "Group/ListGroupBlocks",
          "Group/UnblockEntity"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/ChangeMemberRole": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Changes the role membership of a list of entities from one role to another.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/ChangeMemberRole"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ChangeMemberRoleRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Changes the role membership of a list of entities from one role to another in in a single operation. The destination role must already exist. This is equivalent to adding the entities to the destination role and removing from the origin role. Returns nothing if successful.",
        "x-seeAlso": [
          "Group/AddMembers",
          "Group/CreateRole",
          "Group/RemoveMembers"
        ],
        "x-errors": [
          "InvalidParams",
          "NotAuthenticated",
          "NotAuthorized",
          "RoleDoesNotExist"
        ]
      }
    },
    "/Group/CreateGroup": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Creates a new group.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/CreateGroup"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateGroupRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/CreateGroupResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Creates a new group, as well as administration and member roles, based off of a title's group template. Returns information about the group that was created.",
        "x-seeAlso": [
          "Group/AddMembers",
          "Group/ApplyToGroup",
          "Group/DeleteGroup",
          "Group/InviteToGroup",
          "Group/ListGroupMembers",
          "Group/RemoveMembers"
        ],
        "x-errors": [
          "GroupNameNotAvailable",
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Group/CreateRole": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Creates a new group role.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/CreateRole"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateGroupRoleRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/CreateGroupRoleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Creates a new role within an existing group, with no members. Both the role ID and role name must be unique within the group, but the name can be the same as the ID. The role ID is set at creation and cannot be changed. Returns information about the role that was created.",
        "x-seeAlso": [
          "Group/DeleteRole"
        ],
        "x-errors": [
          "DuplicateRoleId",
          "NotAuthenticated",
          "NotAuthorized",
          "RoleNameNotAvailable"
        ]
      }
    },
    "/Group/DeleteGroup": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Deletes a group and all roles, invitations, join requests, and blocks associated with it.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/DeleteGroup"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteGroupRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Deletes a group and all roles, invitations, join requests, and blocks associated with it. Permission to delete is only required the group itself to execute this action. The group and data cannot be cannot be recovered once removed, but any abuse reports about the group will remain. No data is returned in the case of success.",
        "x-seeAlso": [
          "Group/CreateGroup"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/DeleteRole": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Deletes an existing role in a group.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/DeleteRole"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteRoleRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns information about the role",
        "x-seeAlso": [
          "Group/CreateRole"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "RoleDoesNotExist"
        ]
      }
    },
    "/Group/GetGroup": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Gets information about a group and its roles",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/GetGroup"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetGroupRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetGroupResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns the ID, name, role list and other non-membership related information about a group.",
        "x-seeAlso": [
          "Group/UpdateGroup"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/InviteToGroup": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Invites a player to join a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/InviteToGroup"
        },
        "parameters": [
          {
            "$ref": "#/parameters/InviteToGroupRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/InviteToGroupResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Invites a player to join a group, if they are not blocked by the group. An optional role can be provided to automatically assign the player to the role if they accept the invitation. By default, if the entity has an application to the group outstanding, this will accept the application instead and return an error indicating such, rather than creating a duplicate invitation to join that will need to be cleaned up later. Returns information about the new invitation or an error indicating an existing application to join was accepted.",
        "x-seeAlso": [
          "Group/AcceptGroupInvitation",
          "Group/ListGroupInvitations",
          "Group/ListMembershipOpportunities",
          "Group/RemoveGroupInvitation"
        ],
        "x-errors": [
          "InvalidParams",
          "NotAuthenticated",
          "NotAuthorized",
          "OutstandingApplicationAcceptedInstead"
        ]
      }
    },
    "/Group/IsMember": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Checks to see if an entity is a member of a group or role within the group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/IsMember"
        },
        "parameters": [
          {
            "$ref": "#/parameters/IsMemberRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/IsMemberResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Checks to see if an entity is a member of a group or role within the group. A result indicating if the entity is a member of the group is returned, or a permission error if the caller does not have permission to read the group's member list.",
        "x-seeAlso": [
          "Group/GetGroup"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/ListGroupApplications": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Lists all outstanding requests to join a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/ListGroupApplications"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListGroupApplicationsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListGroupApplicationsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Lists all outstanding requests to join a group. Returns a list of all requests to join, as well as when the request will expire. To get the group applications for a specific entity, use ListMembershipOpportunities.",
        "x-seeAlso": [
          "Group/AcceptGroupApplication",
          "Group/ApplyToGroup",
          "Group/RemoveGroupApplication"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/ListGroupBlocks": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Lists all entities blocked from joining a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/ListGroupBlocks"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListGroupBlocksRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListGroupBlocksResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Lists all entities blocked from joining a group. A list of blocked entities is returned",
        "x-seeAlso": [
          "Group/BlockEntity",
          "Group/UnblockEntity"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/ListGroupInvitations": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Lists all outstanding invitations for a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/ListGroupInvitations"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListGroupInvitationsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListGroupInvitationsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Lists all outstanding invitations for a group. Returns a list of entities that have been invited, as well as when the invitation will expire. To get the group invitations for a specific entity, use ListMembershipOpportunities.",
        "x-seeAlso": [
          "Group/AcceptGroupInvitation",
          "Group/InviteToGroup",
          "Group/ListMembershipOpportunities",
          "Group/RemoveGroupInvitation"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/ListGroupMembers": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Lists all members for a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/ListGroupMembers"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListGroupMembersRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListGroupMembersResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Gets a list of members and the roles they belong to within the group. If the caller does not have permission to view the role, and the member is in no other role, the member is not displayed. Returns a list of entities that are members of the group.",
        "x-seeAlso": [
          "Group/ListMembership"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/ListMembership": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Lists all groups and roles for an entity",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/ListMembership"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListMembershipRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListMembershipResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Lists the groups and roles that an entity is a part of, checking to see if group and role metadata and memberships should be visible to the caller. If the entity is not in any roles that are visible to the caller, the group is not returned in the results, even if the caller otherwise has permission to see that the entity is a member of that group.",
        "x-seeAlso": [
          "Group/ListGroupMembers",
          "Group/ListMembershipOpportunities"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/ListMembershipOpportunities": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Lists all outstanding invitations and group applications for an entity",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/ListMembershipOpportunities"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListMembershipOpportunitiesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/ListMembershipOpportunitiesResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Lists all outstanding group applications and invitations for an entity. Anyone may call this for any entity, but data will only be returned for the entity or a parent of that entity. To list invitations or applications for a group to check if a player is trying to join, use ListGroupInvitations and ListGroupApplications.",
        "x-seeAlso": [
          "Group/ListGroupApplications",
          "Group/ListGroupInvitations"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/RemoveGroupApplication": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Removes an application to join a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/RemoveGroupApplication"
        },
        "parameters": [
          {
            "$ref": "#/parameters/RemoveGroupApplicationRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Removes an existing application to join the group. This is used for both rejection of an application as well as withdrawing an application. The applying entity or a parent in its chain (e.g. title) may withdraw the application, and any caller with appropriate access in the group may reject an application. No data is returned in the case of success.",
        "x-seeAlso": [
          "Group/AcceptGroupApplication",
          "Group/ApplyToGroup",
          "Group/ListGroupApplications"
        ],
        "x-errors": [
          "GroupApplicationNotFound",
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/RemoveGroupInvitation": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Removes an invitation join a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/RemoveGroupInvitation"
        },
        "parameters": [
          {
            "$ref": "#/parameters/RemoveGroupInvitationRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Removes an existing invitation to join the group. This is used for both rejection of an invitation as well as rescinding an invitation. The invited entity or a parent in its chain (e.g. title) may reject the invitation by calling this method, and any caller with appropriate access in the group may rescind an invitation. No data is returned in the case of success.",
        "x-seeAlso": [
          "Group/AcceptGroupInvitation",
          "Group/InviteToGroup",
          "Group/ListGroupInvitations",
          "Group/ListMembershipOpportunities"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/RemoveMembers": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Removes members from a group.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/RemoveMembers"
        },
        "parameters": [
          {
            "$ref": "#/parameters/RemoveMembersRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Removes members from a group. A member can always remove themselves from a group, regardless of permissions. Returns nothing if successful.",
        "x-seeAlso": [
          "Group/AddMembers",
          "Group/ListGroupMembers"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/UnblockEntity": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Unblocks a list of entities from joining a group",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/UnblockEntity"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UnblockEntityRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/EmptyResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Unblocks a list of entities from joining a group. No data is returned in the case of success.",
        "x-seeAlso": [
          "Group/BlockEntity",
          "Group/ListGroupBlocks"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized"
        ]
      }
    },
    "/Group/UpdateGroup": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Updates non-membership data about a group.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/UpdateGroup"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UpdateGroupRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/UpdateGroupResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Updates data about a group, such as the name or default member role. Returns information about whether the update was successful. Only title claimants may modify the administration role for a group.",
        "x-seeAlso": [
          "Group/CreateGroup",
          "Group/DeleteGroup",
          "Group/GetGroup"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "RoleDoesNotExist"
        ]
      }
    },
    "/Group/UpdateRole": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Updates metadata about a role.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/UpdateRole"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UpdateGroupRoleRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/UpdateGroupRoleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Updates the role name. Returns information about whether the update was successful.",
        "x-seeAlso": [
          "Group/CreateRole",
          "Group/DeleteRole"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "RoleDoesNotExist"
        ]
      }
    },
    "/Match/CancelMatchmakingTicket": {
      "post": {
        "tags": [
          "Matchmaking"
        ],
        "description": "Cancel a matchmaking ticket.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/CancelMatchmakingTicket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CancelMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/CancelMatchmakingTicketResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Users can cancel a matchmaking ticket at anytime. Anyone in the matchmaking ticket can cancel         it. We do not allow resubmitting a cancelled ticket because the players         must consent to enter matchmaking again after the cancellation which is the         same as creating a new ticket.         The ticket can be in different states when it is cancelled:         * The ticket has not started matching because not everyone has joined the ticket.          If the ticket is cancelled, it will be deleted and never match.         * The ticket is matching. If the ticket is cancelled, it will stop matching          and it will be deleted.         * The ticket has been matched. A matched ticket cannot be cancelled.         There may be race conditions due to latency between the ticket being matched and         the client being notified the match is ready. The client must handle the possibility         that the cancel request may fail if the match has been made but the notification         has not arrived.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-errors": [
          "MatchmakingCancelTicketServerIdentityInvalid",
          "MatchmakingCancelTicketUserIdentityMismatch",
          "MatchmakingHopperIdMissing",
          "MatchmakingTicketAlreadyCompleted",
          "MatchmakingTicketIdIdMissing",
          "MatchmakingTicketIdMissing",
          "MatchmakingTicketNotFound",
          "MatchmakingTitleIdMissing"
        ]
      }
    },
    "/Match/CreateMatchmakingTicket": {
      "post": {
        "tags": [
          "Matchmaking"
        ],
        "description": "Create a matchmaking ticket as a client.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/CreateMatchmakingTicket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/CreateMatchmakingTicketResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The client specifies the creator's attributes and optionally a list of other users to match with.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-errors": [
          "MatchmakingCreateRequestCreatorIdMissing",
          "MatchmakingCreateRequestCreatorMissing",
          "MatchmakingCreateRequestGiveUpAfterInvalid",
          "MatchmakingCreateRequestMissing",
          "MatchmakingCreateTicketClientIdentityInvalid",
          "MatchmakingHopperIdMissing",
          "MatchmakingInvalidEntityKeyList",
          "MatchmakingInvalidUserAttributes",
          "MatchmakingTicketIdMissing",
          "MatchmakingTitleIdMissing",
          "MatchmakingUserIdentityMismatch",
          "MatchmakingUserIdMissing"
        ]
      }
    },
    "/Match/CreateServerMatchmakingTicket": {
      "post": {
        "tags": [
          "Matchmaking"
        ],
        "description": "Create a matchmaking ticket as a server.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/CreateServerMatchmakingTicket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateServerMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/CreateMatchmakingTicketResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The server specifies all the creators and their attributes.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-errors": [
          "MatchmakingCreateRequestGiveUpAfterInvalid",
          "MatchmakingCreateRequestUserListMissing",
          "MatchmakingCreateTicketServerIdentityInvalid",
          "MatchmakingHopperIdMissing",
          "MatchmakingInvalidEntityKeyList",
          "MatchmakingInvalidTicketCreatorProfile",
          "MatchmakingInvalidUserAttributes",
          "MatchmakingTicketIdMissing",
          "MatchmakingTitleIdMissing",
          "MatchmakingUserIdMissing"
        ]
      }
    },
    "/Match/GetMatch": {
      "post": {
        "tags": [
          "Matchmaking"
        ],
        "description": "Get a match.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/GetMatch"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetMatchRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetMatchResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "When matchmaking has successfully matched together a collection of         tickets, it produces a 'match' with an ID. The match contains all of         the players that were matched together, server connection information,         etc. The match ID is usually sent to the matched players using the         activity service.         Only the players in the original ticket can get the match.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-errors": [
          "MatchmakingHopperIdMissing",
          "MatchmakingMatchIdIdMissing",
          "MatchmakingMatchIdMissing",
          "MatchmakingMatchNotFound",
          "MatchmakingTitleIdMissing"
        ]
      }
    },
    "/Match/GetMatchmakingTicket": {
      "post": {
        "tags": [
          "Matchmaking"
        ],
        "description": "Get a matchmaking ticket by ticket ID.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/GetMatchmakingTicket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetMatchmakingTicketResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The ticket includes the players who have joined, their attributes,         who still hasn't joined, etc. Only the ticket creator and invited players can get the ticket.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-errors": [
          "MatchmakingGetMatchIdentityMismatch",
          "MatchmakingGetTicketUserMismatch",
          "MatchmakingHopperIdMissing",
          "MatchmakingTicketIdIdMissing",
          "MatchmakingTicketIdMissing",
          "MatchmakingTicketNotFound",
          "MatchmakingTitleIdMissing"
        ]
      }
    },
    "/Match/JoinMatchmakingTicket": {
      "post": {
        "tags": [
          "Matchmaking"
        ],
        "description": "Join a matchmaking ticket.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/JoinMatchmakingTicket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/JoinMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/JoinMatchmakingTicketResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Add the user to a matchmaking ticket and specify all the user's matchmaking         attributes. Users can only join a ticket if and only if they were 'invited'         to join the ticket by the ticket creator in the CreateMatchmakingTicket         call.         The matchmaking service automatically starts matching the ticket against         other matchmaking tickets once all players have joined the ticket. Therefore,         it is not possible to join a ticket once it has started matching.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-errors": [
          "MatchmakingAlreadyJoinedTicket",
          "MatchmakingHopperIdMissing",
          "MatchmakingInvalidUserAttributes",
          "MatchmakingJoinRequestUserMissing",
          "MatchmakingJoinTicketServerIdentityInvalid",
          "MatchmakingJoinTicketUserIdentityMismatch",
          "MatchmakingTicketAlreadyCompleted",
          "MatchmakingTicketIdIdMissing",
          "MatchmakingTicketIdMissing",
          "MatchmakingTicketNotFound",
          "MatchmakingTitleIdMissing",
          "MatchmakingUserIdentityMismatch",
          "MatchmakingUserIdMissing"
        ]
      }
    },
    "/Object/GetObjects": {
      "post": {
        "tags": [
          "Object"
        ],
        "description": "Retrieves objects from an entity's profile.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/GetObjects"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetObjectsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetObjectsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Gets JSON objects from an entity profile and returns it. ",
        "x-seeAlso": [
          "Object/SetObjects"
        ]
      }
    },
    "/Object/SetObjects": {
      "post": {
        "tags": [
          "Object"
        ],
        "description": "Sets objects on an entity's profile.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/SetObjects"
        },
        "parameters": [
          {
            "$ref": "#/parameters/SetObjectsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/SetObjectsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Sets JSON objects on the requested entity profile. May include a version number to be used to perform optimistic concurrency operations during update. If the current version differs from the version in the request the request will be ignored. If no version is set on the request then the value will always be updated if the values differ. Using the version value does not guarantee a write though, ConcurrentEditError may still occur if multiple clients are attempting to update the same profile. ",
        "x-seeAlso": [
          "Object/GetObjects"
        ],
        "x-errors": [
          "EntityProfileVersionMismatch"
        ]
      }
    },
    "/Profile/GetGlobalPolicy": {
      "post": {
        "tags": [
          "Account Management"
        ],
        "description": "Gets the global title access policy ",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/GetGlobalPolicy"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetGlobalPolicyRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetGlobalPolicyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Retrieves the title access policy that is used before the profile's policy is inspected during a request. If never customized this will return the default starter policy built by PlayFab.",
        "x-seeAlso": [
          "Profile/GetProfile"
        ],
        "x-errors": [
          "NotAuthorized"
        ]
      }
    },
    "/Profile/GetProfile": {
      "post": {
        "tags": [
          "Account Management"
        ],
        "description": "Retrieves the entity's profile.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/GetProfile"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetEntityProfileRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetEntityProfileResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type and entity identifier will retrieve the profile from the entity store. If the profile being retrieved is the caller's, then the read operation is consistent, if not it is an inconsistent read. An inconsistent read means that we do not guarantee all committed writes have occurred before reading the profile, allowing for a stale read. If consistency is important the Version Number on the result can be used to compare which version of the profile any reader has.",
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Profile/GetProfiles": {
      "post": {
        "tags": [
          "Account Management"
        ],
        "description": "Retrieves the entity's profile.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/GetProfiles"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetEntityProfilesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/GetEntityProfilesResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given a set of entity types and entity identifiers will retrieve all readable profiles properties for the caller. Profiles that the caller is not allowed to read will silently not be included in the results.",
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Profile/SetGlobalPolicy": {
      "post": {
        "tags": [
          "Account Management"
        ],
        "description": "Sets the global title access policy ",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/SetGlobalPolicy"
        },
        "parameters": [
          {
            "$ref": "#/parameters/SetGlobalPolicyRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/SetGlobalPolicyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Updates the title access policy that is used before the profile's policy is inspected during a request. Policies are compiled and cached for several minutes so an update here may not be reflected in behavior for a short time.",
        "x-seeAlso": [
          "Profile/GetProfile"
        ],
        "x-errors": [
          "NotAuthorized"
        ]
      }
    },
    "/Profile/SetProfilePolicy": {
      "post": {
        "tags": [
          "Account Management"
        ],
        "description": "Sets the profiles access policy",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/entity/method/SetProfilePolicy"
        },
        "parameters": [
          {
            "$ref": "#/parameters/SetEntityProfilePolicyRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "The basic wrapper around all successful api calls",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
                },
                "status": {
                  "type": "string",
                  "description": "The Http status code as a string."
                },
                "data": {
                  "$ref": "#/responses/SetEntityProfilePolicyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "This will set the access policy statements on the given entity profile. This is not additive, any existing statements will be replaced with the statements in this request.",
        "x-seeAlso": [
          "Profile/GetProfile"
        ],
        "x-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    }
  },
  "definitions": {
    "ApiErrorWrapper": {
      "description": "The basic wrapper around every failed API result",
      "type": "object",
      "properties": {
        "code": {
          "description": "Numerical HTTP code",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "status": {
          "description": "String HTTP code",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "error": {
          "description": "Playfab error code",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "errorCode": {
          "description": "Numerical Playfab error code",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "errorMessage": {
          "description": "Description for the Playfab errorCode",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "errorDetails": {
          "description": "Detailed description of individual issues with the request object",
          "x-jsontype": "object",
          "x-actualtype": "object"
        }
      }
    },
    "AbortFileUploadsRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "FileNames": {
          "description": "Names of the files to have their pending uploads aborted.",
          "x-collection": "array",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "ProfileVersion": {
          "description": "The expected version of the profile, if set and doesn't match the current version of the profile the operation will not be performed.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "FileNames",
        "Entity"
      ]
    },
    "AbortFileUploadsResponse": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity id and type.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "ProfileVersion": {
          "description": "The current version of the profile, can be used for concurrency control during updates.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "ProfileVersion"
      ]
    },
    "AcceptGroupApplicationRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "Optional. Type of the entity to accept as. If specified, must be the same entity as the claimant or an entity that is a child of the claimant entity. Defaults to the claimant entity.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Group",
        "Entity"
      ]
    },
    "AcceptGroupInvitationRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Group"
      ]
    },
    "AddMembersRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "Members": {
          "$ref": "#/definitions/EntityKey",
          "description": "List of entities to add to the group. Only entities of type title_player_account and character may be added to groups.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "RoleId": {
          "description": "Optional: The ID of the existing role to add the entities to. If this is not specified, the default member role for the group will be used. Role IDs must be between 1 and 64 characters long.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "Group",
        "Members"
      ]
    },
    "AllocateSessionHostRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "BuildId to allocate against",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "PreferredRegions": {
          "$ref": "#/definitions/AzureRegion",
          "x-collection": "array",
          "x-jsontype": "String",
          "x-actualtype": "AzureRegion",
          "x-isenum": true
        },
        "SessionCookie": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "SessionId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "BuildId",
        "SessionId",
        "PreferredRegions"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "AllocateSessionHostResultResult": {
      "type": "object",
      "properties": {
        "ConnectedPlayers": {
          "$ref": "#/definitions/ConnectedPlayer",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "ConnectedPlayer",
          "x-isclass": true
        },
        "IPv4Address": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Ports": {
          "$ref": "#/definitions/Port",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "Port",
          "x-isclass": true
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "x-jsontype": "String",
          "x-actualtype": "AzureRegion",
          "x-isenum": true
        },
        "SessionHostId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "SessionId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "State": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "VmId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ApplyToGroupRequest": {
      "type": "object",
      "properties": {
        "AutoAcceptOutstandingInvite": {
          "description": "Optional, default true. Automatically accept an outstanding invitation if one exists instead of creating an application",
          "x-jsontype": "Boolean",
          "x-actualtype": "Boolean"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Group"
      ]
    },
    "ApplyToGroupResponse": {
      "description": "Describes an application to join a group",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityWithLineage",
          "description": "Type of entity that requested membership",
          "x-jsontype": "Object",
          "x-actualtype": "EntityWithLineage",
          "x-isclass": true
        },
        "Expires": {
          "description": "When the application to join will expire and be deleted",
          "x-jsontype": "String",
          "x-actualtype": "DateTime"
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "ID of the group that the entity requesting membership to",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Expires"
      ]
    },
    "AssetReference": {
      "type": "object",
      "properties": {
        "MountPath": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Name": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "AssetReferenceParams": {
      "type": "object",
      "properties": {
        "MountPath": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Name": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "AssetSummary": {
      "type": "object",
      "properties": {
        "Metadata": {
          "x-collection": "map",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Name": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "AzureRegion": {
      "type": "object",
      "enum": [
        "EastUs",
        "CentralUs",
        "WestUs",
        "NorthEurope",
        "WestEurope"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "AzureVmSize": {
      "type": "object",
      "enum": [
        "Standard_A1_v2",
        "Standard_A2_v2",
        "Standard_A4_v2",
        "Standard_A8_v2",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_NC6",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NV6",
        "Standard_NV12",
        "Standard_NV24"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "BlockEntityRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Group",
        "Entity"
      ]
    },
    "BuildRegion": {
      "type": "object",
      "properties": {
        "MaxSessions": {
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "x-jsontype": "String",
          "x-actualtype": "AzureRegion",
          "x-isenum": true
        },
        "StandbySessions": {
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "Status": {
          "$ref": "#/definitions/BuildRegionStatus",
          "x-jsontype": "String",
          "x-actualtype": "BuildRegionStatus",
          "x-isenum": true
        }
      },
      "required": [
        "MaxSessions",
        "StandbySessions"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "BuildRegionParams": {
      "type": "object",
      "properties": {
        "MaxSessions": {
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "Region": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "StandbySessions": {
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "Region",
        "MaxSessions",
        "StandbySessions"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "BuildRegionStatus": {
      "type": "object",
      "enum": [
        "Unknown",
        "Initializing",
        "Ready",
        "Provisioning",
        "PendingDeletion",
        "Deleted"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "BuildSummary": {
      "type": "object",
      "properties": {
        "BuildId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "BuildName": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "ContainerFlavor": {
          "$ref": "#/definitions/ContainerFlavor",
          "x-jsontype": "String",
          "x-actualtype": "ContainerFlavor",
          "x-isenum": true
        },
        "GameAssetReferences": {
          "$ref": "#/definitions/AssetReference",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "AssetReference",
          "x-isclass": true
        },
        "GameCertificateReferences": {
          "x-collection": "array",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "MappedPorts": {
          "$ref": "#/definitions/Port",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "Port",
          "x-isclass": true
        },
        "Metadata": {
          "x-collection": "map",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "RegionConfigurations": {
          "$ref": "#/definitions/BuildRegion",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "BuildRegion",
          "x-isclass": true
        },
        "SessionHostCountPerVm": {
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "StartGameCommand": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "VmSize": {
          "$ref": "#/definitions/AzureVmSize",
          "x-jsontype": "String",
          "x-actualtype": "AzureVmSize",
          "x-isenum": true
        }
      },
      "required": [
        "SessionHostCountPerVm"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CancelMatchmakingTicketRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "HopperId": {
          "description": "The Id of the hopper to join.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "TicketId",
        "HopperId"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CancelMatchmakingTicketResult": {
      "type": "object",
      "properties": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "Certificate": {
      "type": "object",
      "properties": {
        "Base64EncodedValue": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Name": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Password": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CertificateSummary": {
      "type": "object",
      "properties": {
        "Name": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Thumbprint": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ChangeMemberRoleRequest": {
      "type": "object",
      "properties": {
        "DestinationRoleId": {
          "description": "The ID of the role that the entities will become a member of. This must be an existing role. Role IDs must be between 1 and 64 characters long.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "Members": {
          "$ref": "#/definitions/EntityKey",
          "description": "List of entities to move between roles in the group. All entities in this list must be members of the group and origin role.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "OriginRoleId": {
          "description": "The ID of the role that the entities currently are a member of. Role IDs must be between 1 and 64 characters long.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "Group",
        "OriginRoleId",
        "Members"
      ]
    },
    "ConnectedPlayer": {
      "type": "object",
      "properties": {
        "PlayerId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ContainerFlavor": {
      "type": "object",
      "enum": [
        "WindowsServerCorePlayFab"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateBuildRequest": {
      "type": "object",
      "properties": {
        "BuildName": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "ContainerFlavor": {
          "$ref": "#/definitions/ContainerFlavor",
          "x-jsontype": "String",
          "x-actualtype": "ContainerFlavor",
          "x-isenum": true
        },
        "GameAssetReferences": {
          "$ref": "#/definitions/AssetReferenceParams",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "AssetReferenceParams",
          "x-isclass": true
        },
        "GameCertificateReferences": {
          "x-collection": "array",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "MappedPorts": {
          "$ref": "#/definitions/Port",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "Port",
          "x-isclass": true
        },
        "Metadata": {
          "x-collection": "map",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "RegionConfiguration": {
          "$ref": "#/definitions/BuildRegionParams",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "BuildRegionParams",
          "x-isclass": true
        },
        "SessionHostCountPerVm": {
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "StartGameCommand": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "VmSize": {
          "$ref": "#/definitions/AzureVmSize",
          "x-jsontype": "String",
          "x-actualtype": "AzureVmSize",
          "x-isenum": true
        }
      },
      "required": [
        "BuildName",
        "SessionHostCountPerVm",
        "MappedPorts",
        "RegionConfiguration"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateBuildResult": {
      "type": "object",
      "properties": {
        "BuildSummary": {
          "$ref": "#/definitions/BuildSummary",
          "x-jsontype": "Object",
          "x-actualtype": "BuildSummary",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateGroupRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "GroupName": {
          "description": "The name of the group. This is unique at the title level by default.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "GroupName"
      ]
    },
    "CreateGroupResponse": {
      "type": "object",
      "properties": {
        "AdminRoleId": {
          "description": "The ID of the administrator role for the group.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Created": {
          "description": "The server date and time the group was created.",
          "x-jsontype": "String",
          "x-actualtype": "DateTime"
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "GroupName": {
          "description": "The name of the group.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "MemberRoleId": {
          "description": "The ID of the default member role for the group.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "ProfileVersion": {
          "description": "The current version of the profile, can be used for concurrency control during updates.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "Roles": {
          "description": "The list of roles and names that belong to the group.",
          "x-collection": "map",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "Group",
        "Created",
        "ProfileVersion"
      ]
    },
    "CreateGroupRoleRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "RoleId": {
          "description": "The ID of the role. This must be unique within the group and cannot be changed. Role IDs must be between 1 and 64 characters long.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "RoleName": {
          "description": "The name of the role. This must be unique within the group and can be changed later. Role names must be between 1 and 100 characters long",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "RoleId",
        "RoleName",
        "Group"
      ]
    },
    "CreateGroupRoleResponse": {
      "type": "object",
      "properties": {
        "ProfileVersion": {
          "description": "The current version of the group profile, can be used for concurrency control during updates.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "RoleId": {
          "description": "ID for the role",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "RoleName": {
          "description": "The name of the role",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "ProfileVersion"
      ]
    },
    "CreateMatchmakingTicketRequest": {
      "type": "object",
      "properties": {
        "Creator": {
          "$ref": "#/definitions/MatchmakingUser",
          "description": "The User who created this ticket.",
          "x-jsontype": "Object",
          "x-actualtype": "MatchmakingUser",
          "x-isclass": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "GiveUpAfterSeconds": {
          "description": "How long to attempt matching this ticket in seconds.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "HopperId": {
          "description": "The Id of a match hopper.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "MembersToMatchWith": {
          "$ref": "#/definitions/EntityKey",
          "description": "A list of Entity Keys of other users to match with.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Creator",
        "GiveUpAfterSeconds",
        "HopperId"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateMatchmakingTicketResult": {
      "type": "object",
      "properties": {
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "TicketId"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateRemoteUserRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "ExpirationTime": {
          "description": "The expiration time for the remote user created. Defaults to expiring in one day if not specified.",
          "x-jsontype": "String",
          "x-actualtype": "DateTime"
        },
        "Password": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "x-jsontype": "String",
          "x-actualtype": "AzureRegion",
          "x-isenum": true
        },
        "Username": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "VmId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "BuildId",
        "Region",
        "VmId",
        "Username",
        "Password"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateRemoteUserResult": {
      "type": "object",
      "properties": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateServerMatchmakingTicketRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "GiveUpAfterSeconds": {
          "description": "How long to attempt matching this ticket in seconds.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "HopperId": {
          "description": "The Id of a match hopper.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Members": {
          "$ref": "#/definitions/MatchmakingUser",
          "description": "The users who will be part of this ticket.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "MatchmakingUser",
          "x-isclass": true
        }
      },
      "required": [
        "Members",
        "GiveUpAfterSeconds",
        "HopperId"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeleteBuildRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "BuildId"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeleteBuildResult": {
      "type": "object",
      "properties": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeleteFilesRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "FileNames": {
          "description": "Names of the files to be deleted.",
          "x-collection": "array",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "ProfileVersion": {
          "description": "The expected version of the profile, if set and doesn't match the current version of the profile the operation will not be performed.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "FileNames",
        "Entity"
      ]
    },
    "DeleteFilesResponse": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity id and type.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "ProfileVersion": {
          "description": "The current version of the profile, can be used for concurrency control during updates.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "ProfileVersion"
      ]
    },
    "DeleteGroupRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "ID of the group or role to remove",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Group"
      ]
    },
    "DeleteRoleRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "RoleId": {
          "description": "The ID of the role to delete. Role IDs must be between 1 and 64 characters long.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "Group"
      ]
    },
    "EffectType": {
      "type": "object",
      "enum": [
        "Allow",
        "Deny"
      ]
    },
    "EmptyResult": {
      "type": "object",
      "properties": {}
    },
    "EntityDataObject": {
      "description": "An entity object and its associated meta data.",
      "type": "object",
      "properties": {
        "DataObject": {
          "description": "Un-escaped JSON object, if DataAsObject is true.",
          "x-jsontype": "Object",
          "x-actualtype": "object"
        },
        "EscapedDataObject": {
          "description": "Escaped string JSON body of the object, if DataAsObject is default or false.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "ObjectName": {
          "description": "Name of this object.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      }
    },
    "EntityKey": {
      "description": "Entity identifier class that contains both the ID and type.",
      "type": "object",
      "properties": {
        "Id": {
          "description": "Entity profile ID.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Type": {
          "$ref": "#/definitions/EntityTypes",
          "description": "Entity type. Optional to be used but one of EntityType or EntityTypeString must be set.",
          "x-jsontype": "String",
          "x-actualtype": "EntityTypes",
          "x-isenum": true
        },
        "TypeString": {
          "description": "Entity type. Optional to be used but one of EntityType or EntityTypeString must be set.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "Id"
      ]
    },
    "EntityMemberRole": {
      "type": "object",
      "properties": {
        "Members": {
          "$ref": "#/definitions/EntityWithLineage",
          "description": "The list of members in the role",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "EntityWithLineage",
          "x-isclass": true
        },
        "RoleId": {
          "description": "The ID of the role.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "RoleName": {
          "description": "The name of the role",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      }
    },
    "EntityPermissionStatement": {
      "type": "object",
      "properties": {
        "Action": {
          "description": "The action this statement effects. May be 'Read', 'Write' or '*' for both read and write.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Comment": {
          "description": "A comment about the statement. Intended solely for bookkeeping and debugging.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Condition": {
          "description": "Additional conditions to be applied for entity resources.",
          "x-jsontype": "Object",
          "x-actualtype": "object"
        },
        "Effect": {
          "$ref": "#/definitions/EffectType",
          "description": "The effect this statement will have. It may be either Allow or Deny",
          "x-jsontype": "String",
          "x-actualtype": "EffectType",
          "x-isenum": true
        },
        "Principal": {
          "description": "The principal this statement will effect.",
          "x-jsontype": "Object",
          "x-actualtype": "object"
        },
        "Resource": {
          "description": "The resource this statements effects. Similar to 'pfrn:data--title![Title ID]/Profile/*'",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "Resource",
        "Action",
        "Effect",
        "Principal"
      ]
    },
    "EntityProfileBody": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity id and type.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "EntityChain": {
          "description": "The chain of responsibility for this entity. This is a representation of 'ownership'. It is constructed using the following formats (replace '[ID]' with the unique identifier for the given entity): Namespace: 'namespace![Namespace ID]' Title: 'title![Namespace ID]/[Title ID]' Master Player Account: 'master_player_account![Namespace ID]/[MasterPlayerAccount ID]' Title Player Account: 'title_player_account![Namespace ID]/[Title ID]/[MasterPlayerAccount ID]/[TitlePlayerAccount ID]' Character: 'character![Namespace ID]/[Title ID]/[MasterPlayerAccount ID]/[TitlePlayerAccount ID]/[Character ID]'",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Files": {
          "$ref": "#/definitions/EntityProfileFileMetadata",
          "description": "The files on this profile.",
          "x-collection": "map",
          "x-jsontype": "Object",
          "x-actualtype": "EntityProfileFileMetadata",
          "x-isclass": true
        },
        "Objects": {
          "$ref": "#/definitions/EntityDataObject",
          "description": "The objects on this profile.",
          "x-collection": "map",
          "x-jsontype": "Object",
          "x-actualtype": "EntityDataObject",
          "x-isclass": true
        },
        "Permissions": {
          "$ref": "#/definitions/EntityPermissionStatement",
          "description": "The permissions that govern access to this entity profile and its properties. Only includes permissions set on this profile, not global statements from titles and namespaces.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "EntityPermissionStatement",
          "x-isclass": true
        },
        "VersionNumber": {
          "description": "The version number of the profile in persistent storage at the time of the read. Used for optional optimistic concurrency during update.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "VersionNumber"
      ]
    },
    "EntityProfileFileMetadata": {
      "description": "An entity file's meta data. To get a download URL call File/GetFiles API.",
      "type": "object",
      "properties": {
        "Checksum": {
          "description": "Checksum value for the file",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "FileName": {
          "description": "Name of the file",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "LastModified": {
          "description": "Last UTC time the file was modified",
          "x-jsontype": "String",
          "x-actualtype": "DateTime"
        },
        "Size": {
          "description": "Storage service's reported byte count",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "Size",
        "LastModified"
      ]
    },
    "EntityTypes": {
      "type": "object",
      "enum": [
        "title",
        "master_player_account",
        "title_player_account",
        "character",
        "group",
        "service"
      ]
    },
    "EntityWithLineage": {
      "description": "Entity wrapper class that contains the entity key and the entities that make up the lineage of the entity.",
      "type": "object",
      "properties": {
        "Key": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity key for the specified entity",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "Lineage": {
          "$ref": "#/definitions/EntityKey",
          "description": "Dictionary of entity keys for related entities. Dictionary key is entity type.",
          "x-collection": "map",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      }
    },
    "EventContents": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "Entity associated with the event",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "EventNamespace": {
          "description": "The namespace in which the event is defined. For example: 'com.playfab.matchmaking'. If not specified, a default will be chosen based on the calling identity.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Name": {
          "description": "The name of this event.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "OriginalId": {
          "description": "The original unique identifier associated with this event before it was posted to PlayFab. The value might differ from the EventId value, which is assigned when the event is received by the server.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "OriginalTimestamp": {
          "description": "The time (in UTC) associated with this event when it occurred. If specified, this value is stored in the OriginalTimestamp property of the PlayStream event.",
          "x-jsontype": "String",
          "x-actualtype": "DateTime"
        },
        "Payload": {
          "description": "Arbitrary data associated with the event.",
          "x-jsontype": "Object",
          "x-actualtype": "object"
        },
        "PayloadJSON": {
          "description": "Arbitrary data associated with the event, represented as a JSON serialized string.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "Entity",
        "Name"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "FinalizeFileUploadsRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "FileNames": {
          "description": "Names of the files to be finalized. Restricted to a-Z, 0-9, '(', ')', '_', '-' and '.'",
          "x-collection": "array",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "FileNames",
        "Entity"
      ]
    },
    "FinalizeFileUploadsResponse": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity id and type.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "Metadata": {
          "$ref": "#/definitions/GetFileMetadata",
          "description": "Collection of metadata for the entity's files",
          "x-collection": "map",
          "x-jsontype": "Object",
          "x-actualtype": "GetFileMetadata",
          "x-isclass": true
        },
        "ProfileVersion": {
          "description": "The current version of the profile, can be used for concurrency control during updates.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "ProfileVersion"
      ]
    },
    "GetAssetUploadUrlRequest": {
      "type": "object",
      "properties": {
        "Metadata": {
          "x-collection": "map",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Name": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "Name"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetAssetUploadUrlResult": {
      "type": "object",
      "properties": {
        "AssetUploadUrl": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Metadata": {
          "x-collection": "map",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Name": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetBuildRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "BuildId"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetBuildResult": {
      "type": "object",
      "properties": {
        "BuildSummary": {
          "$ref": "#/definitions/BuildSummary",
          "x-jsontype": "Object",
          "x-actualtype": "BuildSummary",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetEntityProfileRequest": {
      "type": "object",
      "properties": {
        "DataAsObject": {
          "description": "Determines whether the objects will be returned as an escaped JSON string or as a un-escaped JSON object. Default is JSON string.",
          "x-jsontype": "Boolean",
          "x-actualtype": "Boolean"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Entity"
      ]
    },
    "GetEntityProfileResponse": {
      "type": "object",
      "properties": {
        "Profile": {
          "$ref": "#/definitions/EntityProfileBody",
          "description": "Entity profile",
          "x-jsontype": "Object",
          "x-actualtype": "EntityProfileBody",
          "x-isclass": true
        }
      }
    },
    "GetEntityProfilesRequest": {
      "type": "object",
      "properties": {
        "DataAsObject": {
          "description": "Determines whether the objects will be returned as an escaped JSON string or as a un-escaped JSON object. Default is JSON string.",
          "x-jsontype": "Boolean",
          "x-actualtype": "Boolean"
        },
        "Entities": {
          "$ref": "#/definitions/EntityKey",
          "description": "Entity keys of the profiles to load. Must be between 1 and 25",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Entities"
      ]
    },
    "GetEntityProfilesResponse": {
      "type": "object",
      "properties": {
        "Profiles": {
          "$ref": "#/definitions/EntityProfileBody",
          "description": "Entity profiles",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "EntityProfileBody",
          "x-isclass": true
        }
      }
    },
    "GetEntityTokenRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      }
    },
    "GetEntityTokenResponse": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity id and type.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "EntityToken": {
          "description": "The token used to set X-EntityToken for all entity based API calls.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "TokenExpiration": {
          "description": "The time the token will expire, if it is an expiring token, in UTC.",
          "x-jsontype": "String",
          "x-actualtype": "DateTime"
        }
      }
    },
    "GetFileMetadata": {
      "type": "object",
      "properties": {
        "Checksum": {
          "description": "Checksum value for the file",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "DownloadUrl": {
          "description": "Download URL where the file can be retrieved",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "FileName": {
          "description": "Name of the file",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "LastModified": {
          "description": "Last UTC time the file was modified",
          "x-jsontype": "String",
          "x-actualtype": "DateTime"
        },
        "Size": {
          "description": "Storage service's reported byte count",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "Size",
        "LastModified"
      ]
    },
    "GetFilesRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Entity"
      ]
    },
    "GetFilesResponse": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity id and type.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "Metadata": {
          "$ref": "#/definitions/GetFileMetadata",
          "description": "Collection of metadata for the entity's files",
          "x-collection": "map",
          "x-jsontype": "Object",
          "x-actualtype": "GetFileMetadata",
          "x-isclass": true
        },
        "ProfileVersion": {
          "description": "The current version of the profile, can be used for concurrency control during updates.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "ProfileVersion"
      ]
    },
    "GetGlobalPolicyRequest": {
      "type": "object",
      "properties": {}
    },
    "GetGlobalPolicyResponse": {
      "type": "object",
      "properties": {
        "Permissions": {
          "$ref": "#/definitions/EntityPermissionStatement",
          "description": "The permissions that govern access to all entities under this title or namespace.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "EntityPermissionStatement",
          "x-isclass": true
        }
      }
    },
    "GetGroupRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "GroupName": {
          "description": "The full name of the group",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      }
    },
    "GetGroupResponse": {
      "type": "object",
      "properties": {
        "AdminRoleId": {
          "description": "The ID of the administrator role for the group.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Created": {
          "description": "The server date and time the group was created.",
          "x-jsontype": "String",
          "x-actualtype": "DateTime"
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "GroupName": {
          "description": "The name of the group.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "MemberRoleId": {
          "description": "The ID of the default member role for the group.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "ProfileVersion": {
          "description": "The current version of the profile, can be used for concurrency control during updates.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "Roles": {
          "description": "The list of roles and names that belong to the group.",
          "x-collection": "map",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "Group",
        "Created",
        "ProfileVersion"
      ]
    },
    "GetMatchmakingTicketRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "EscapeObject": {
          "description": "Determines whether the matchmaking attributes will be returned as an escaped JSON string or as an un-escaped JSON object.",
          "x-jsontype": "Boolean",
          "x-actualtype": "Boolean"
        },
        "HopperId": {
          "description": "The Id of the hopper to find a match for.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "TicketId",
        "HopperId",
        "EscapeObject"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetMatchmakingTicketResult": {
      "type": "object",
      "properties": {
        "Created": {
          "description": "The server date and time at which ticket was created.",
          "x-jsontype": "String",
          "x-actualtype": "DateTime"
        },
        "Creator": {
          "$ref": "#/definitions/EntityKey",
          "description": "The Creator's entity key.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "GiveUpAfterSeconds": {
          "description": "How long to attempt matching this ticket in seconds.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "HopperId": {
          "description": "The Id of a match hopper.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "MatchId": {
          "description": "The Id of a match.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Members": {
          "$ref": "#/definitions/MatchmakingUser",
          "description": "A list of Users that have joined this ticket.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "MatchmakingUser",
          "x-isclass": true
        },
        "MembersToMatchWith": {
          "$ref": "#/definitions/EntityKey",
          "description": "A list of PlayFab Ids of Users to match with.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "Status": {
          "description": "The current ticket status.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "TicketId",
        "HopperId",
        "MatchId",
        "Created",
        "Status",
        "GiveUpAfterSeconds",
        "MembersToMatchWith",
        "Members",
        "Creator"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetMatchRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "EscapeObject": {
          "description": "Determines whether the matchmaking attributes will be returned as an escaped JSON string or as an un-escaped JSON object.",
          "x-jsontype": "Boolean",
          "x-actualtype": "Boolean"
        },
        "HopperId": {
          "description": "The Id of the hopper to join.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "MatchId": {
          "description": "The Id of a match.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "MatchId",
        "HopperId",
        "EscapeObject"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetMatchResult": {
      "type": "object",
      "properties": {
        "MatchId": {
          "description": "The Id of a match.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Members": {
          "$ref": "#/definitions/MatchmakingUserWithTeamAssignment",
          "description": "A list of Users that are matched together, along with their team assignments.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "MatchmakingUserWithTeamAssignment",
          "x-isclass": true
        }
      },
      "required": [
        "MatchId",
        "Members"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetObjectsRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "EscapeObject": {
          "description": "Determines whether the object will be returned as an escaped JSON string or as a un-escaped JSON object. Default is JSON object.",
          "x-jsontype": "Boolean",
          "x-actualtype": "Boolean"
        }
      },
      "required": [
        "Entity"
      ]
    },
    "GetObjectsResponse": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity id and type.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "Objects": {
          "$ref": "#/definitions/ObjectResult",
          "description": "Requested objects that the calling entity has access to",
          "x-collection": "map",
          "x-jsontype": "Object",
          "x-actualtype": "ObjectResult",
          "x-isclass": true
        },
        "ProfileVersion": {
          "description": "The current version of the profile, can be used for concurrency control during updates.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "ProfileVersion"
      ]
    },
    "GetRemoteLoginEndpointRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "x-jsontype": "String",
          "x-actualtype": "AzureRegion",
          "x-isenum": true
        },
        "VmId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "BuildId",
        "Region",
        "VmId"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetRemoteLoginEndpointResult": {
      "type": "object",
      "properties": {
        "IpV4Address": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Port": {
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "Port"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetSessionHostDetailsRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "SessionId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "BuildId",
        "SessionId"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetSessionHostResultDetailsResult": {
      "type": "object",
      "properties": {
        "ConnectedPlayers": {
          "$ref": "#/definitions/ConnectedPlayer",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "ConnectedPlayer",
          "x-isclass": true
        },
        "IPv4Address": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Ports": {
          "$ref": "#/definitions/Port",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "Port",
          "x-isclass": true
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "x-jsontype": "String",
          "x-actualtype": "AzureRegion",
          "x-isenum": true
        },
        "SessionHostId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "SessionId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "State": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "VmId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GroupApplication": {
      "description": "Describes an application to join a group",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityWithLineage",
          "description": "Type of entity that requested membership",
          "x-jsontype": "Object",
          "x-actualtype": "EntityWithLineage",
          "x-isclass": true
        },
        "Expires": {
          "description": "When the application to join will expire and be deleted",
          "x-jsontype": "String",
          "x-actualtype": "DateTime"
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "ID of the group that the entity requesting membership to",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Expires"
      ]
    },
    "GroupBlock": {
      "description": "Describes an entity that is blocked from joining a group.",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityWithLineage",
          "description": "The entity that is blocked",
          "x-jsontype": "Object",
          "x-actualtype": "EntityWithLineage",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "ID of the group that the entity is blocked from",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Group"
      ]
    },
    "GroupInvitation": {
      "description": "Describes an invitation to a group.",
      "type": "object",
      "properties": {
        "Expires": {
          "description": "When the invitation will expire and be deleted",
          "x-jsontype": "String",
          "x-actualtype": "DateTime"
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The group that the entity invited to",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "InvitedByEntity": {
          "$ref": "#/definitions/EntityWithLineage",
          "description": "The entity that created the invitation",
          "x-jsontype": "Object",
          "x-actualtype": "EntityWithLineage",
          "x-isclass": true
        },
        "InvitedEntity": {
          "$ref": "#/definitions/EntityWithLineage",
          "description": "The entity that is invited",
          "x-jsontype": "Object",
          "x-actualtype": "EntityWithLineage",
          "x-isclass": true
        },
        "RoleId": {
          "description": "ID of the role in the group to assign the user to.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "Expires"
      ]
    },
    "GroupRole": {
      "description": "Describes a group role",
      "type": "object",
      "properties": {
        "RoleId": {
          "description": "ID for the role",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "RoleName": {
          "description": "The name of the role",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      }
    },
    "GroupWithRoles": {
      "description": "Describes a group and the roles that it contains",
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "ID for the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "GroupName": {
          "description": "The name of the group",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "ProfileVersion": {
          "description": "The current version of the profile, can be used for concurrency control during updates.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "Roles": {
          "$ref": "#/definitions/GroupRole",
          "description": "The list of roles within the group",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "GroupRole",
          "x-isclass": true
        }
      },
      "required": [
        "ProfileVersion"
      ]
    },
    "InitiateFileUploadMetadata": {
      "type": "object",
      "properties": {
        "FileName": {
          "description": "Name of the file.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "UploadUrl": {
          "description": "Location the data should be sent to via an HTTP PUT operation.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      }
    },
    "InitiateFileUploadsRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "FileNames": {
          "description": "Names of the files to be set. Restricted to a-Z, 0-9, '(', ')', '_', '-' and '.'",
          "x-collection": "array",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "ProfileVersion": {
          "description": "The expected version of the profile, if set and doesn't match the current version of the profile the operation will not be performed.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "FileNames",
        "Entity"
      ]
    },
    "InitiateFileUploadsResponse": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity id and type.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "ProfileVersion": {
          "description": "The current version of the profile, can be used for concurrency control during updates.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "UploadDetails": {
          "$ref": "#/definitions/InitiateFileUploadMetadata",
          "description": "Collection of file names and upload urls",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "InitiateFileUploadMetadata",
          "x-isclass": true
        }
      },
      "required": [
        "ProfileVersion"
      ]
    },
    "InviteToGroupRequest": {
      "type": "object",
      "properties": {
        "AutoAcceptOutstandingApplication": {
          "description": "Optional, default true. Automatically accept an application if one exists instead of creating an invitation",
          "x-jsontype": "Boolean",
          "x-actualtype": "Boolean"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "RoleId": {
          "description": "Optional. ID of an existing a role in the group to assign the user to. The group's default member role is used if this is not specified. Role IDs must be between 1 and 64 characters long.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "Group",
        "Entity"
      ]
    },
    "InviteToGroupResponse": {
      "description": "Describes an invitation to a group.",
      "type": "object",
      "properties": {
        "Expires": {
          "description": "When the invitation will expire and be deleted",
          "x-jsontype": "String",
          "x-actualtype": "DateTime"
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The group that the entity invited to",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "InvitedByEntity": {
          "$ref": "#/definitions/EntityWithLineage",
          "description": "The entity that created the invitation",
          "x-jsontype": "Object",
          "x-actualtype": "EntityWithLineage",
          "x-isclass": true
        },
        "InvitedEntity": {
          "$ref": "#/definitions/EntityWithLineage",
          "description": "The entity that is invited",
          "x-jsontype": "Object",
          "x-actualtype": "EntityWithLineage",
          "x-isclass": true
        },
        "RoleId": {
          "description": "ID of the role in the group to assign the user to.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "Expires"
      ]
    },
    "IsMemberRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "RoleId": {
          "description": "Optional: ID of the role to check membership of. Defaults to any role (that is, check to see if the entity is a member of the group in any capacity) if not specified.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "Group",
        "Entity"
      ]
    },
    "IsMemberResponse": {
      "type": "object",
      "properties": {
        "IsMember": {
          "description": "A value indicating whether or not the entity is a member.",
          "x-jsontype": "Boolean",
          "x-actualtype": "Boolean"
        }
      },
      "required": [
        "IsMember"
      ]
    },
    "JoinMatchmakingTicketRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "HopperId": {
          "description": "The Id of the hopper to join.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Member": {
          "$ref": "#/definitions/MatchmakingUser",
          "description": "The User who wants to join the ticket. Their Id must be listed in PlayFabIdsToMatchWith.",
          "x-jsontype": "Object",
          "x-actualtype": "MatchmakingUser",
          "x-isclass": true
        },
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "TicketId",
        "HopperId",
        "Member"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "JoinMatchmakingTicketResult": {
      "type": "object",
      "properties": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListAssetsRequest": {
      "type": "object",
      "properties": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListAssetsResult": {
      "type": "object",
      "properties": {
        "AssetSummaries": {
          "$ref": "#/definitions/AssetSummary",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "AssetSummary",
          "x-isclass": true
        },
        "NextLink": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListBuildsRequest": {
      "type": "object",
      "properties": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListBuildsResult": {
      "type": "object",
      "properties": {
        "BuildSummaries": {
          "$ref": "#/definitions/BuildSummary",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "BuildSummary",
          "x-isclass": true
        },
        "NextLink": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListCertificatesRequest": {
      "type": "object",
      "properties": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListCertificatesResult": {
      "type": "object",
      "properties": {
        "CertificateSummaries": {
          "$ref": "#/definitions/CertificateSummary",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "CertificateSummary",
          "x-isclass": true
        },
        "NextLink": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListGroupApplicationsRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Group"
      ]
    },
    "ListGroupApplicationsResponse": {
      "type": "object",
      "properties": {
        "Applications": {
          "$ref": "#/definitions/GroupApplication",
          "description": "The requested list of applications to the group.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "GroupApplication",
          "x-isclass": true
        }
      }
    },
    "ListGroupBlocksRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Group"
      ]
    },
    "ListGroupBlocksResponse": {
      "type": "object",
      "properties": {
        "BlockedEntities": {
          "$ref": "#/definitions/GroupBlock",
          "description": "The requested list blocked entities.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "GroupBlock",
          "x-isclass": true
        }
      }
    },
    "ListGroupInvitationsRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Group"
      ]
    },
    "ListGroupInvitationsResponse": {
      "type": "object",
      "properties": {
        "Invitations": {
          "$ref": "#/definitions/GroupInvitation",
          "description": "The requested list of group invitations.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "GroupInvitation",
          "x-isclass": true
        }
      }
    },
    "ListGroupMembersRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "ID of the group to list the members and roles for",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Group"
      ]
    },
    "ListGroupMembersResponse": {
      "type": "object",
      "properties": {
        "Members": {
          "$ref": "#/definitions/EntityMemberRole",
          "description": "The requested list of roles and member entity IDs.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "EntityMemberRole",
          "x-isclass": true
        }
      }
    },
    "ListMembershipOpportunitiesRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      }
    },
    "ListMembershipOpportunitiesResponse": {
      "type": "object",
      "properties": {
        "Applications": {
          "$ref": "#/definitions/GroupApplication",
          "description": "The requested list of group applications.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "GroupApplication",
          "x-isclass": true
        },
        "Invitations": {
          "$ref": "#/definitions/GroupInvitation",
          "description": "The requested list of group invitations.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "GroupInvitation",
          "x-isclass": true
        }
      }
    },
    "ListMembershipRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      }
    },
    "ListMembershipResponse": {
      "type": "object",
      "properties": {
        "Groups": {
          "$ref": "#/definitions/GroupWithRoles",
          "description": "The list of groups",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "GroupWithRoles",
          "x-isclass": true
        }
      }
    },
    "ListQosServersRequest": {
      "type": "object",
      "properties": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListQosServersResult": {
      "type": "object",
      "properties": {
        "NextLink": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "QosServers": {
          "$ref": "#/definitions/QosServer",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "QosServer",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListSessionHostsRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "x-jsontype": "String",
          "x-actualtype": "AzureRegion",
          "x-isenum": true
        }
      },
      "required": [
        "BuildId",
        "Region"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ListSessionHostsResult": {
      "type": "object",
      "properties": {
        "NextLink": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "NumSessionHosts": {
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "SessionHostSummaries": {
          "$ref": "#/definitions/SessionHostSummary",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "SessionHostSummary",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "MatchmakingUser": {
      "type": "object",
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/MatchmakingUserAttributes",
          "description": "The user's attributes custom to the title.",
          "x-jsontype": "Object",
          "x-actualtype": "MatchmakingUserAttributes",
          "x-isclass": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity key of the matchmaking user.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Entity"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "MatchmakingUserAttributes": {
      "type": "object",
      "properties": {
        "DataObject": {
          "description": "A data object representing a user's attributes.",
          "x-jsontype": "Object",
          "x-actualtype": "object"
        },
        "EscapedDataObject": {
          "description": "An escaped data object representing a user's attributes.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "MatchmakingUserWithTeamAssignment": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity key of the matchmaking user.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "TeamId": {
          "description": "The Id of the team the User has been assigned to by matchmaking.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "Entity"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ObjectResult": {
      "type": "object",
      "properties": {
        "DataObject": {
          "description": "Un-escaped JSON object, if EscapeObject false or default.",
          "x-jsontype": "Object",
          "x-actualtype": "object"
        },
        "EscapedDataObject": {
          "description": "Escaped string JSON body of the object, if EscapeObject is true.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "ObjectName": {
          "description": "Name of the object. Restricted to a-Z, 0-9, '(', ')', '_', '-' and '.'",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      }
    },
    "OperationTypes": {
      "type": "object",
      "enum": [
        "Created",
        "Updated",
        "Deleted",
        "None"
      ]
    },
    "Port": {
      "type": "object",
      "properties": {
        "Name": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "Num": {
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "Protocol": {
          "$ref": "#/definitions/ProtocolType",
          "x-jsontype": "String",
          "x-actualtype": "ProtocolType",
          "x-isenum": true
        }
      },
      "required": [
        "Name",
        "Num",
        "Protocol"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ProtocolType": {
      "type": "object",
      "enum": [
        "TCP",
        "UDP"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "QosServer": {
      "type": "object",
      "properties": {
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "x-jsontype": "String",
          "x-actualtype": "AzureRegion",
          "x-isenum": true
        },
        "ServerUrl": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "RemoveGroupApplicationRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Group",
        "Entity"
      ]
    },
    "RemoveGroupInvitationRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Group",
        "Entity"
      ]
    },
    "RemoveMembersRequest": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "Members": {
          "$ref": "#/definitions/EntityKey",
          "description": "List of entities to remove",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "RoleId": {
          "description": "The ID of the role to remove the entities from.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "Group",
        "Members"
      ]
    },
    "SessionHostSummary": {
      "type": "object",
      "properties": {
        "ConnectedPlayers": {
          "$ref": "#/definitions/ConnectedPlayer",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "ConnectedPlayer",
          "x-isclass": true
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "x-jsontype": "String",
          "x-actualtype": "AzureRegion",
          "x-isenum": true
        },
        "SessionHostId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "State": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "VmId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SetEntityProfilePolicyRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "Statements": {
          "$ref": "#/definitions/EntityPermissionStatement",
          "description": "The statements to include in the access policy.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "EntityPermissionStatement",
          "x-isclass": true
        }
      },
      "required": [
        "Entity"
      ]
    },
    "SetEntityProfilePolicyResponse": {
      "type": "object",
      "properties": {
        "Permissions": {
          "$ref": "#/definitions/EntityPermissionStatement",
          "description": "The permissions that govern access to this entity profile and its properties. Only includes permissions set on this profile, not global statements from titles and namespaces.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "EntityPermissionStatement",
          "x-isclass": true
        }
      }
    },
    "SetGlobalPolicyRequest": {
      "type": "object",
      "properties": {
        "Permissions": {
          "$ref": "#/definitions/EntityPermissionStatement",
          "description": "The permissions that govern access to all entities under this title or namespace.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "EntityPermissionStatement",
          "x-isclass": true
        }
      }
    },
    "SetGlobalPolicyResponse": {
      "type": "object",
      "properties": {}
    },
    "SetObject": {
      "type": "object",
      "properties": {
        "DataObject": {
          "description": "Body of the object to be saved. If empty and DeleteObject is true object will be deleted if it exists, or no operation will occur if it does not exist. Only one of Object or EscapedDataObject fields may be used.",
          "x-jsontype": "Object",
          "x-actualtype": "object"
        },
        "DeleteObject": {
          "description": "Flag to indicate that this object should be deleted. Both DataObject and EscapedDataObject must not be set as well.",
          "x-jsontype": "Boolean",
          "x-actualtype": "Boolean"
        },
        "EscapedDataObject": {
          "description": "Body of the object to be saved as an escaped JSON string. If empty and DeleteObject is true object will be deleted if it exists, or no operation will occur if it does not exist. Only one of DataObject or EscapedDataObject fields may be used.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "ObjectName": {
          "description": "Name of object. Restricted to a-Z, 0-9, '(', ')', '_', '-' and '.'.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "ObjectName"
      ]
    },
    "SetObjectInfo": {
      "type": "object",
      "properties": {
        "ObjectName": {
          "description": "Name of the object",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "OperationReason": {
          "description": "Optional reason to explain why the operation was the result that it was.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "SetResult": {
          "$ref": "#/definitions/OperationTypes",
          "description": "Indicates which operation was completed, either Created, Updated, Deleted or None.",
          "x-jsontype": "String",
          "x-actualtype": "OperationTypes",
          "x-isenum": true
        }
      }
    },
    "SetObjectsRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "ExpectedProfileVersion": {
          "description": "Optional field used for concurrency control. By specifying the previously returned value of ProfileVersion from GetProfile API, you can ensure that the object set will only be performed if the profile has not been updated by any other clients since the version you last loaded.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "Objects": {
          "$ref": "#/definitions/SetObject",
          "description": "Collection of objects to set on the profile.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "SetObject",
          "x-isclass": true
        }
      },
      "required": [
        "Objects",
        "Entity"
      ]
    },
    "SetObjectsResponse": {
      "type": "object",
      "properties": {
        "ProfileVersion": {
          "description": "New version of the entity profile.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "SetResults": {
          "$ref": "#/definitions/SetObjectInfo",
          "description": "New version of the entity profile.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "SetObjectInfo",
          "x-isclass": true
        }
      },
      "required": [
        "ProfileVersion"
      ]
    },
    "UnblockEntityRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        }
      },
      "required": [
        "Group",
        "Entity"
      ]
    },
    "UpdateBuildRegionsRequest": {
      "type": "object",
      "properties": {
        "BuildId": {
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "BuildRegions": {
          "$ref": "#/definitions/BuildRegionParams",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "BuildRegionParams",
          "x-isclass": true
        }
      },
      "required": [
        "BuildId",
        "BuildRegions"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UpdateBuildRegionsResult": {
      "type": "object",
      "properties": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UpdateGroupRequest": {
      "type": "object",
      "properties": {
        "AdminRoleId": {
          "description": "Optional: the ID of an existing role to set as the new administrator role for the group",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "ExpectedProfileVersion": {
          "description": "Optional field used for concurrency control. By specifying the previously returned value of ProfileVersion from the GetGroup API, you can ensure that the group data update will only be performed if the group has not been updated by any other clients since the version you last loaded.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "GroupName": {
          "description": "Optional: the new name of the group",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "MemberRoleId": {
          "description": "Optional: the ID of an existing role to set as the new member role for the group",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "Group"
      ]
    },
    "UpdateGroupResponse": {
      "type": "object",
      "properties": {
        "OperationReason": {
          "description": "Optional reason to explain why the operation was the result that it was.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "ProfileVersion": {
          "description": "New version of the group data.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "SetResult": {
          "$ref": "#/definitions/OperationTypes",
          "description": "Indicates which operation was completed, either Created, Updated, Deleted or None.",
          "x-jsontype": "String",
          "x-actualtype": "OperationTypes",
          "x-isenum": true
        }
      },
      "required": [
        "ProfileVersion"
      ]
    },
    "UpdateGroupRoleRequest": {
      "type": "object",
      "properties": {
        "ExpectedProfileVersion": {
          "description": "Optional field used for concurrency control. By specifying the previously returned value of ProfileVersion from the GetGroup API, you can ensure that the group data update will only be performed if the group has not been updated by any other clients since the version you last loaded.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "Group": {
          "$ref": "#/definitions/EntityKey",
          "description": "The identifier of the group",
          "x-jsontype": "Object",
          "x-actualtype": "EntityKey",
          "x-isclass": true
        },
        "RoleId": {
          "description": "ID of the role to update. Role IDs must be between 1 and 64 characters long.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "RoleName": {
          "description": "The new name of the role",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "required": [
        "Group",
        "RoleName"
      ]
    },
    "UpdateGroupRoleResponse": {
      "type": "object",
      "properties": {
        "OperationReason": {
          "description": "Optional reason to explain why the operation was the result that it was.",
          "x-jsontype": "String",
          "x-actualtype": "String"
        },
        "ProfileVersion": {
          "description": "New version of the role data.",
          "x-jsontype": "Number",
          "x-actualtype": "int32"
        },
        "SetResult": {
          "$ref": "#/definitions/OperationTypes",
          "description": "Indicates which operation was completed, either Created, Updated, Deleted or None.",
          "x-jsontype": "String",
          "x-actualtype": "OperationTypes",
          "x-isenum": true
        }
      },
      "required": [
        "ProfileVersion"
      ]
    },
    "UploadCertificateRequest": {
      "type": "object",
      "properties": {
        "GameCertificate": {
          "$ref": "#/definitions/Certificate",
          "x-jsontype": "Object",
          "x-actualtype": "Certificate",
          "x-isclass": true
        }
      },
      "required": [
        "GameCertificate"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UploadCertificateResult": {
      "type": "object",
      "properties": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "WriteEventsRequest": {
      "type": "object",
      "properties": {
        "Events": {
          "$ref": "#/definitions/EventContents",
          "description": "Collection of events to write to PlayStream.",
          "x-collection": "array",
          "x-jsontype": "Object",
          "x-actualtype": "EventContents",
          "x-isclass": true
        },
        "FlushToPlayStream": {
          "x-jsontype": "Boolean",
          "x-actualtype": "Boolean"
        }
      },
      "required": [
        "Events"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "WriteEventsResponse": {
      "type": "object",
      "properties": {
        "AssignedEventIds": {
          "description": "The unique identifiers assigned by the server to the events, in the same order as the events in the request. Only returned if FlushToPlayStream option is true.",
          "x-collection": "array",
          "x-jsontype": "String",
          "x-actualtype": "String"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    }
  },
  "parameters": {
    "AbortFileUploadsRequest": {
      "name": "AbortFileUploadsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/AbortFileUploadsRequest"
      }
    },
    "AcceptGroupApplicationRequest": {
      "name": "AcceptGroupApplicationRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/AcceptGroupApplicationRequest"
      }
    },
    "AcceptGroupInvitationRequest": {
      "name": "AcceptGroupInvitationRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/AcceptGroupInvitationRequest"
      }
    },
    "AddMembersRequest": {
      "name": "AddMembersRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/AddMembersRequest"
      }
    },
    "AllocateSessionHostRequest": {
      "name": "AllocateSessionHostRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/AllocateSessionHostRequest"
      }
    },
    "ApplyToGroupRequest": {
      "name": "ApplyToGroupRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ApplyToGroupRequest"
      }
    },
    "BlockEntityRequest": {
      "name": "BlockEntityRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/BlockEntityRequest"
      }
    },
    "CancelMatchmakingTicketRequest": {
      "name": "CancelMatchmakingTicketRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/CancelMatchmakingTicketRequest"
      }
    },
    "ChangeMemberRoleRequest": {
      "name": "ChangeMemberRoleRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ChangeMemberRoleRequest"
      }
    },
    "CreateBuildRequest": {
      "name": "CreateBuildRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateBuildRequest"
      }
    },
    "CreateGroupRequest": {
      "name": "CreateGroupRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateGroupRequest"
      }
    },
    "CreateGroupRoleRequest": {
      "name": "CreateGroupRoleRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateGroupRoleRequest"
      }
    },
    "CreateMatchmakingTicketRequest": {
      "name": "CreateMatchmakingTicketRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateMatchmakingTicketRequest"
      }
    },
    "CreateRemoteUserRequest": {
      "name": "CreateRemoteUserRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateRemoteUserRequest"
      }
    },
    "CreateServerMatchmakingTicketRequest": {
      "name": "CreateServerMatchmakingTicketRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateServerMatchmakingTicketRequest"
      }
    },
    "DeleteBuildRequest": {
      "name": "DeleteBuildRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/DeleteBuildRequest"
      }
    },
    "DeleteFilesRequest": {
      "name": "DeleteFilesRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/DeleteFilesRequest"
      }
    },
    "DeleteGroupRequest": {
      "name": "DeleteGroupRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/DeleteGroupRequest"
      }
    },
    "DeleteRoleRequest": {
      "name": "DeleteRoleRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/DeleteRoleRequest"
      }
    },
    "FinalizeFileUploadsRequest": {
      "name": "FinalizeFileUploadsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/FinalizeFileUploadsRequest"
      }
    },
    "GetAssetUploadUrlRequest": {
      "name": "GetAssetUploadUrlRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetAssetUploadUrlRequest"
      }
    },
    "GetBuildRequest": {
      "name": "GetBuildRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetBuildRequest"
      }
    },
    "GetEntityProfileRequest": {
      "name": "GetEntityProfileRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetEntityProfileRequest"
      }
    },
    "GetEntityProfilesRequest": {
      "name": "GetEntityProfilesRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetEntityProfilesRequest"
      }
    },
    "GetEntityTokenRequest": {
      "name": "GetEntityTokenRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetEntityTokenRequest"
      }
    },
    "GetFilesRequest": {
      "name": "GetFilesRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetFilesRequest"
      }
    },
    "GetGlobalPolicyRequest": {
      "name": "GetGlobalPolicyRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetGlobalPolicyRequest"
      }
    },
    "GetGroupRequest": {
      "name": "GetGroupRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetGroupRequest"
      }
    },
    "GetMatchmakingTicketRequest": {
      "name": "GetMatchmakingTicketRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetMatchmakingTicketRequest"
      }
    },
    "GetMatchRequest": {
      "name": "GetMatchRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetMatchRequest"
      }
    },
    "GetObjectsRequest": {
      "name": "GetObjectsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetObjectsRequest"
      }
    },
    "GetRemoteLoginEndpointRequest": {
      "name": "GetRemoteLoginEndpointRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetRemoteLoginEndpointRequest"
      }
    },
    "GetSessionHostDetailsRequest": {
      "name": "GetSessionHostDetailsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetSessionHostDetailsRequest"
      }
    },
    "InitiateFileUploadsRequest": {
      "name": "InitiateFileUploadsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/InitiateFileUploadsRequest"
      }
    },
    "InviteToGroupRequest": {
      "name": "InviteToGroupRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/InviteToGroupRequest"
      }
    },
    "IsMemberRequest": {
      "name": "IsMemberRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/IsMemberRequest"
      }
    },
    "JoinMatchmakingTicketRequest": {
      "name": "JoinMatchmakingTicketRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/JoinMatchmakingTicketRequest"
      }
    },
    "ListAssetsRequest": {
      "name": "ListAssetsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListAssetsRequest"
      }
    },
    "ListBuildsRequest": {
      "name": "ListBuildsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListBuildsRequest"
      }
    },
    "ListCertificatesRequest": {
      "name": "ListCertificatesRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListCertificatesRequest"
      }
    },
    "ListGroupApplicationsRequest": {
      "name": "ListGroupApplicationsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListGroupApplicationsRequest"
      }
    },
    "ListGroupBlocksRequest": {
      "name": "ListGroupBlocksRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListGroupBlocksRequest"
      }
    },
    "ListGroupInvitationsRequest": {
      "name": "ListGroupInvitationsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListGroupInvitationsRequest"
      }
    },
    "ListGroupMembersRequest": {
      "name": "ListGroupMembersRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListGroupMembersRequest"
      }
    },
    "ListMembershipOpportunitiesRequest": {
      "name": "ListMembershipOpportunitiesRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListMembershipOpportunitiesRequest"
      }
    },
    "ListMembershipRequest": {
      "name": "ListMembershipRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListMembershipRequest"
      }
    },
    "ListQosServersRequest": {
      "name": "ListQosServersRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListQosServersRequest"
      }
    },
    "ListSessionHostsRequest": {
      "name": "ListSessionHostsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListSessionHostsRequest"
      }
    },
    "RemoveGroupApplicationRequest": {
      "name": "RemoveGroupApplicationRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/RemoveGroupApplicationRequest"
      }
    },
    "RemoveGroupInvitationRequest": {
      "name": "RemoveGroupInvitationRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/RemoveGroupInvitationRequest"
      }
    },
    "RemoveMembersRequest": {
      "name": "RemoveMembersRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/RemoveMembersRequest"
      }
    },
    "SetEntityProfilePolicyRequest": {
      "name": "SetEntityProfilePolicyRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/SetEntityProfilePolicyRequest"
      }
    },
    "SetGlobalPolicyRequest": {
      "name": "SetGlobalPolicyRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/SetGlobalPolicyRequest"
      }
    },
    "SetObjectsRequest": {
      "name": "SetObjectsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/SetObjectsRequest"
      }
    },
    "UnblockEntityRequest": {
      "name": "UnblockEntityRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/UnblockEntityRequest"
      }
    },
    "UpdateBuildRegionsRequest": {
      "name": "UpdateBuildRegionsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/UpdateBuildRegionsRequest"
      }
    },
    "UpdateGroupRequest": {
      "name": "UpdateGroupRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/UpdateGroupRequest"
      }
    },
    "UpdateGroupRoleRequest": {
      "name": "UpdateGroupRoleRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/UpdateGroupRoleRequest"
      }
    },
    "UploadCertificateRequest": {
      "name": "UploadCertificateRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/UploadCertificateRequest"
      }
    },
    "WriteEventsRequest": {
      "name": "WriteEventsRequest",
      "in": "body",
      "description": "",
      "schema": {
        "$ref": "#/definitions/WriteEventsRequest"
      }
    }
  },
  "responses": {
    "ApiErrorWrapper": {
      "description": "This is the outer-wrapper for all results with errors",
      "schema": {
        "$ref": "#/definitions/ApiErrorWrapper"
      }
    },
    "AbortFileUploadsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/AbortFileUploadsResponse"
      }
    },
    "AllocateSessionHostResultResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/AllocateSessionHostResultResult"
      }
    },
    "ApplyToGroupResponse": {
      "description": "Describes an application to join a group",
      "schema": {
        "$ref": "#/definitions/ApplyToGroupResponse"
      }
    },
    "CancelMatchmakingTicketResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/CancelMatchmakingTicketResult"
      }
    },
    "CreateBuildResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateBuildResult"
      }
    },
    "CreateGroupResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateGroupResponse"
      }
    },
    "CreateGroupRoleResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateGroupRoleResponse"
      }
    },
    "CreateMatchmakingTicketResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateMatchmakingTicketResult"
      }
    },
    "CreateRemoteUserResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateRemoteUserResult"
      }
    },
    "DeleteBuildResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/DeleteBuildResult"
      }
    },
    "DeleteFilesResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/DeleteFilesResponse"
      }
    },
    "EmptyResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/EmptyResult"
      }
    },
    "FinalizeFileUploadsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/FinalizeFileUploadsResponse"
      }
    },
    "GetAssetUploadUrlResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetAssetUploadUrlResult"
      }
    },
    "GetBuildResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetBuildResult"
      }
    },
    "GetEntityProfileResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetEntityProfileResponse"
      }
    },
    "GetEntityProfilesResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetEntityProfilesResponse"
      }
    },
    "GetEntityTokenResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetEntityTokenResponse"
      }
    },
    "GetFilesResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetFilesResponse"
      }
    },
    "GetGlobalPolicyResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetGlobalPolicyResponse"
      }
    },
    "GetGroupResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetGroupResponse"
      }
    },
    "GetMatchmakingTicketResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetMatchmakingTicketResult"
      }
    },
    "GetMatchResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetMatchResult"
      }
    },
    "GetObjectsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetObjectsResponse"
      }
    },
    "GetRemoteLoginEndpointResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetRemoteLoginEndpointResult"
      }
    },
    "GetSessionHostResultDetailsResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetSessionHostResultDetailsResult"
      }
    },
    "InitiateFileUploadsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/InitiateFileUploadsResponse"
      }
    },
    "InviteToGroupResponse": {
      "description": "Describes an invitation to a group.",
      "schema": {
        "$ref": "#/definitions/InviteToGroupResponse"
      }
    },
    "IsMemberResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/IsMemberResponse"
      }
    },
    "JoinMatchmakingTicketResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/JoinMatchmakingTicketResult"
      }
    },
    "ListAssetsResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListAssetsResult"
      }
    },
    "ListBuildsResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListBuildsResult"
      }
    },
    "ListCertificatesResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListCertificatesResult"
      }
    },
    "ListGroupApplicationsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListGroupApplicationsResponse"
      }
    },
    "ListGroupBlocksResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListGroupBlocksResponse"
      }
    },
    "ListGroupInvitationsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListGroupInvitationsResponse"
      }
    },
    "ListGroupMembersResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListGroupMembersResponse"
      }
    },
    "ListMembershipOpportunitiesResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListMembershipOpportunitiesResponse"
      }
    },
    "ListMembershipResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListMembershipResponse"
      }
    },
    "ListQosServersResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListQosServersResult"
      }
    },
    "ListSessionHostsResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListSessionHostsResult"
      }
    },
    "SetEntityProfilePolicyResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/SetEntityProfilePolicyResponse"
      }
    },
    "SetGlobalPolicyResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/SetGlobalPolicyResponse"
      }
    },
    "SetObjectsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/SetObjectsResponse"
      }
    },
    "UpdateBuildRegionsResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/UpdateBuildRegionsResult"
      }
    },
    "UpdateGroupResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/UpdateGroupResponse"
      }
    },
    "UpdateGroupRoleResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/UpdateGroupRoleResponse"
      }
    },
    "UploadCertificateResult": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/UploadCertificateResult"
      }
    },
    "WriteEventsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/WriteEventsResponse"
      }
    }
  },
  "tags": [
    {
      "name": "Account Management",
      "description": "https://api.playfab.com/documentation/Entity#Account-Management"
    },
    {
      "name": "Authentication",
      "description": "https://api.playfab.com/documentation/Entity#Authentication"
    },
    {
      "name": "File",
      "description": "https://api.playfab.com/documentation/Entity#File"
    },
    {
      "name": "GameServer",
      "description": "https://api.playfab.com/documentation/Entity#GameServer"
    },
    {
      "name": "Groups",
      "description": "https://api.playfab.com/documentation/Entity#Groups"
    },
    {
      "name": "Matchmaking",
      "description": "https://api.playfab.com/documentation/Entity#Matchmaking"
    },
    {
      "name": "Object",
      "description": "https://api.playfab.com/documentation/Entity#Object"
    },
    {
      "name": "PlayStream Events",
      "description": "https://api.playfab.com/documentation/Entity#PlayStream-Events"
    }
  ],
  "securityDefinitions": {
    "None": {
      "type": "apiKey",
      "in": "header",
      "name": "None",
      "description": "This API requires no authentication headers (usually provides one to other calls)."
    },
    "SessionTicket": {
      "type": "apiKey",
      "in": "header",
      "name": "SessionTicket",
      "description": "This API requires a client session ticket, available from any Client Login function."
    },
    "SecretKey": {
      "type": "apiKey",
      "in": "header",
      "name": "SecretKey",
      "description": "This API requires a title secret key, available to title admins, from PlayFab Game Manager."
    },
    "EntityToken": {
      "type": "apiKey",
      "in": "header",
      "name": "EntityToken",
      "description": "This API requires an Entity Session Token, available from the Entity GetEntityToken method."
    }
  },
  "x-errors": {
    "Success": {
      "name": "Success"
    },
    "MatchmakingHopperIdInvalid": {
      "id": 230,
      "name": "MatchmakingHopperIdInvalid"
    },
    "UnkownError": {
      "id": 500,
      "name": "UnkownError"
    },
    "InvalidParams": {
      "id": 1000,
      "name": "InvalidParams"
    },
    "AccountNotFound": {
      "id": 1001,
      "name": "AccountNotFound"
    },
    "AccountBanned": {
      "id": 1002,
      "name": "AccountBanned"
    },
    "InvalidUsernameOrPassword": {
      "id": 1003,
      "name": "InvalidUsernameOrPassword"
    },
    "InvalidTitleId": {
      "id": 1004,
      "name": "InvalidTitleId"
    },
    "InvalidEmailAddress": {
      "id": 1005,
      "name": "InvalidEmailAddress"
    },
    "EmailAddressNotAvailable": {
      "id": 1006,
      "name": "EmailAddressNotAvailable"
    },
    "InvalidUsername": {
      "id": 1007,
      "name": "InvalidUsername"
    },
    "InvalidPassword": {
      "id": 1008,
      "name": "InvalidPassword"
    },
    "UsernameNotAvailable": {
      "id": 1009,
      "name": "UsernameNotAvailable"
    },
    "InvalidSteamTicket": {
      "id": 1010,
      "name": "InvalidSteamTicket"
    },
    "AccountAlreadyLinked": {
      "id": 1011,
      "name": "AccountAlreadyLinked"
    },
    "LinkedAccountAlreadyClaimed": {
      "id": 1012,
      "name": "LinkedAccountAlreadyClaimed"
    },
    "InvalidFacebookToken": {
      "id": 1013,
      "name": "InvalidFacebookToken"
    },
    "AccountNotLinked": {
      "id": 1014,
      "name": "AccountNotLinked"
    },
    "FailedByPaymentProvider": {
      "id": 1015,
      "name": "FailedByPaymentProvider"
    },
    "CouponCodeNotFound": {
      "id": 1016,
      "name": "CouponCodeNotFound"
    },
    "InvalidContainerItem": {
      "id": 1017,
      "name": "InvalidContainerItem"
    },
    "ContainerNotOwned": {
      "id": 1018,
      "name": "ContainerNotOwned"
    },
    "KeyNotOwned": {
      "id": 1019,
      "name": "KeyNotOwned"
    },
    "InvalidItemIdInTable": {
      "id": 1020,
      "name": "InvalidItemIdInTable"
    },
    "InvalidReceipt": {
      "id": 1021,
      "name": "InvalidReceipt"
    },
    "ReceiptAlreadyUsed": {
      "id": 1022,
      "name": "ReceiptAlreadyUsed"
    },
    "ReceiptCancelled": {
      "id": 1023,
      "name": "ReceiptCancelled"
    },
    "GameNotFound": {
      "id": 1024,
      "name": "GameNotFound"
    },
    "GameModeNotFound": {
      "id": 1025,
      "name": "GameModeNotFound"
    },
    "InvalidGoogleToken": {
      "id": 1026,
      "name": "InvalidGoogleToken"
    },
    "UserIsNotPartOfDeveloper": {
      "id": 1027,
      "name": "UserIsNotPartOfDeveloper"
    },
    "InvalidTitleForDeveloper": {
      "id": 1028,
      "name": "InvalidTitleForDeveloper"
    },
    "TitleNameConflicts": {
      "id": 1029,
      "name": "TitleNameConflicts"
    },
    "UserisNotValid": {
      "id": 1030,
      "name": "UserisNotValid"
    },
    "ValueAlreadyExists": {
      "id": 1031,
      "name": "ValueAlreadyExists"
    },
    "BuildNotFound": {
      "id": 1032,
      "name": "BuildNotFound"
    },
    "PlayerNotInGame": {
      "id": 1033,
      "name": "PlayerNotInGame"
    },
    "InvalidTicket": {
      "id": 1034,
      "name": "InvalidTicket"
    },
    "InvalidDeveloper": {
      "id": 1035,
      "name": "InvalidDeveloper"
    },
    "InvalidOrderInfo": {
      "id": 1036,
      "name": "InvalidOrderInfo"
    },
    "RegistrationIncomplete": {
      "id": 1037,
      "name": "RegistrationIncomplete"
    },
    "InvalidPlatform": {
      "id": 1038,
      "name": "InvalidPlatform"
    },
    "UnknownError": {
      "id": 1039,
      "name": "UnknownError"
    },
    "SteamApplicationNotOwned": {
      "id": 1040,
      "name": "SteamApplicationNotOwned"
    },
    "WrongSteamAccount": {
      "id": 1041,
      "name": "WrongSteamAccount"
    },
    "TitleNotActivated": {
      "id": 1042,
      "name": "TitleNotActivated"
    },
    "RegistrationSessionNotFound": {
      "id": 1043,
      "name": "RegistrationSessionNotFound"
    },
    "NoSuchMod": {
      "id": 1044,
      "name": "NoSuchMod"
    },
    "FileNotFound": {
      "id": 1045,
      "name": "FileNotFound"
    },
    "DuplicateEmail": {
      "id": 1046,
      "name": "DuplicateEmail"
    },
    "ItemNotFound": {
      "id": 1047,
      "name": "ItemNotFound"
    },
    "ItemNotOwned": {
      "id": 1048,
      "name": "ItemNotOwned"
    },
    "ItemNotRecycleable": {
      "id": 1049,
      "name": "ItemNotRecycleable"
    },
    "ItemNotAffordable": {
      "id": 1050,
      "name": "ItemNotAffordable"
    },
    "InvalidVirtualCurrency": {
      "id": 1051,
      "name": "InvalidVirtualCurrency"
    },
    "WrongVirtualCurrency": {
      "id": 1052,
      "name": "WrongVirtualCurrency"
    },
    "WrongPrice": {
      "id": 1053,
      "name": "WrongPrice"
    },
    "NonPositiveValue": {
      "id": 1054,
      "name": "NonPositiveValue"
    },
    "InvalidRegion": {
      "id": 1055,
      "name": "InvalidRegion"
    },
    "RegionAtCapacity": {
      "id": 1056,
      "name": "RegionAtCapacity"
    },
    "ServerFailedToStart": {
      "id": 1057,
      "name": "ServerFailedToStart"
    },
    "NameNotAvailable": {
      "id": 1058,
      "name": "NameNotAvailable"
    },
    "InsufficientFunds": {
      "id": 1059,
      "name": "InsufficientFunds"
    },
    "InvalidDeviceID": {
      "id": 1060,
      "name": "InvalidDeviceID"
    },
    "InvalidPushNotificationToken": {
      "id": 1061,
      "name": "InvalidPushNotificationToken"
    },
    "NoRemainingUses": {
      "id": 1062,
      "name": "NoRemainingUses"
    },
    "InvalidPaymentProvider": {
      "id": 1063,
      "name": "InvalidPaymentProvider"
    },
    "PurchaseInitializationFailure": {
      "id": 1064,
      "name": "PurchaseInitializationFailure"
    },
    "DuplicateUsername": {
      "id": 1065,
      "name": "DuplicateUsername"
    },
    "InvalidBuyerInfo": {
      "id": 1066,
      "name": "InvalidBuyerInfo"
    },
    "NoGameModeParamsSet": {
      "id": 1067,
      "name": "NoGameModeParamsSet"
    },
    "BodyTooLarge": {
      "id": 1068,
      "name": "BodyTooLarge"
    },
    "ReservedWordInBody": {
      "id": 1069,
      "name": "ReservedWordInBody"
    },
    "InvalidTypeInBody": {
      "id": 1070,
      "name": "InvalidTypeInBody"
    },
    "InvalidRequest": {
      "id": 1071,
      "name": "InvalidRequest"
    },
    "ReservedEventName": {
      "id": 1072,
      "name": "ReservedEventName"
    },
    "InvalidUserStatistics": {
      "id": 1073,
      "name": "InvalidUserStatistics"
    },
    "NotAuthenticated": {
      "id": 1074,
      "name": "NotAuthenticated"
    },
    "StreamAlreadyExists": {
      "id": 1075,
      "name": "StreamAlreadyExists"
    },
    "ErrorCreatingStream": {
      "id": 1076,
      "name": "ErrorCreatingStream"
    },
    "StreamNotFound": {
      "id": 1077,
      "name": "StreamNotFound"
    },
    "InvalidAccount": {
      "id": 1078,
      "name": "InvalidAccount"
    },
    "PurchaseDoesNotExist": {
      "id": 1080,
      "name": "PurchaseDoesNotExist"
    },
    "InvalidPurchaseTransactionStatus": {
      "id": 1081,
      "name": "InvalidPurchaseTransactionStatus"
    },
    "APINotEnabledForGameClientAccess": {
      "id": 1082,
      "name": "APINotEnabledForGameClientAccess"
    },
    "NoPushNotificationARNForTitle": {
      "id": 1083,
      "name": "NoPushNotificationARNForTitle"
    },
    "BuildAlreadyExists": {
      "id": 1084,
      "name": "BuildAlreadyExists"
    },
    "BuildPackageDoesNotExist": {
      "id": 1085,
      "name": "BuildPackageDoesNotExist"
    },
    "CustomAnalyticsEventsNotEnabledForTitle": {
      "id": 1087,
      "name": "CustomAnalyticsEventsNotEnabledForTitle"
    },
    "InvalidSharedGroupId": {
      "id": 1088,
      "name": "InvalidSharedGroupId"
    },
    "NotAuthorized": {
      "id": 1089,
      "name": "NotAuthorized"
    },
    "MissingTitleGoogleProperties": {
      "id": 1090,
      "name": "MissingTitleGoogleProperties"
    },
    "InvalidItemProperties": {
      "id": 1091,
      "name": "InvalidItemProperties"
    },
    "InvalidPSNAuthCode": {
      "id": 1092,
      "name": "InvalidPSNAuthCode"
    },
    "InvalidItemId": {
      "id": 1093,
      "name": "InvalidItemId"
    },
    "PushNotEnabledForAccount": {
      "id": 1094,
      "name": "PushNotEnabledForAccount"
    },
    "PushServiceError": {
      "id": 1095,
      "name": "PushServiceError"
    },
    "ReceiptDoesNotContainInAppItems": {
      "id": 1096,
      "name": "ReceiptDoesNotContainInAppItems"
    },
    "ReceiptContainsMultipleInAppItems": {
      "id": 1097,
      "name": "ReceiptContainsMultipleInAppItems"
    },
    "InvalidBundleID": {
      "id": 1098,
      "name": "InvalidBundleID"
    },
    "JavascriptException": {
      "id": 1099,
      "name": "JavascriptException"
    },
    "InvalidSessionTicket": {
      "id": 1100,
      "name": "InvalidSessionTicket"
    },
    "UnableToConnectToDatabase": {
      "id": 1101,
      "name": "UnableToConnectToDatabase"
    },
    "InternalServerError": {
      "id": 1110,
      "name": "InternalServerError"
    },
    "InvalidReportDate": {
      "id": 1111,
      "name": "InvalidReportDate"
    },
    "ReportNotAvailable": {
      "id": 1112,
      "name": "ReportNotAvailable"
    },
    "DatabaseThroughputExceeded": {
      "id": 1113,
      "name": "DatabaseThroughputExceeded"
    },
    "InvalidGameTicket": {
      "id": 1115,
      "name": "InvalidGameTicket"
    },
    "ExpiredGameTicket": {
      "id": 1116,
      "name": "ExpiredGameTicket"
    },
    "GameTicketDoesNotMatchLobby": {
      "id": 1117,
      "name": "GameTicketDoesNotMatchLobby"
    },
    "LinkedDeviceAlreadyClaimed": {
      "id": 1118,
      "name": "LinkedDeviceAlreadyClaimed"
    },
    "DeviceAlreadyLinked": {
      "id": 1119,
      "name": "DeviceAlreadyLinked"
    },
    "DeviceNotLinked": {
      "id": 1120,
      "name": "DeviceNotLinked"
    },
    "PartialFailure": {
      "id": 1121,
      "name": "PartialFailure"
    },
    "PublisherNotSet": {
      "id": 1122,
      "name": "PublisherNotSet"
    },
    "ServiceUnavailable": {
      "id": 1123,
      "name": "ServiceUnavailable"
    },
    "VersionNotFound": {
      "id": 1124,
      "name": "VersionNotFound"
    },
    "RevisionNotFound": {
      "id": 1125,
      "name": "RevisionNotFound"
    },
    "InvalidPublisherId": {
      "id": 1126,
      "name": "InvalidPublisherId"
    },
    "DownstreamServiceUnavailable": {
      "id": 1127,
      "name": "DownstreamServiceUnavailable"
    },
    "APINotIncludedInTitleUsageTier": {
      "id": 1128,
      "name": "APINotIncludedInTitleUsageTier"
    },
    "DAULimitExceeded": {
      "id": 1129,
      "name": "DAULimitExceeded"
    },
    "APIRequestLimitExceeded": {
      "id": 1130,
      "name": "APIRequestLimitExceeded"
    },
    "InvalidAPIEndpoint": {
      "id": 1131,
      "name": "InvalidAPIEndpoint"
    },
    "BuildNotAvailable": {
      "id": 1132,
      "name": "BuildNotAvailable"
    },
    "ConcurrentEditError": {
      "id": 1133,
      "name": "ConcurrentEditError"
    },
    "ContentNotFound": {
      "id": 1134,
      "name": "ContentNotFound"
    },
    "CharacterNotFound": {
      "id": 1135,
      "name": "CharacterNotFound"
    },
    "CloudScriptNotFound": {
      "id": 1136,
      "name": "CloudScriptNotFound"
    },
    "ContentQuotaExceeded": {
      "id": 1137,
      "name": "ContentQuotaExceeded"
    },
    "InvalidCharacterStatistics": {
      "id": 1138,
      "name": "InvalidCharacterStatistics"
    },
    "PhotonNotEnabledForTitle": {
      "id": 1139,
      "name": "PhotonNotEnabledForTitle"
    },
    "PhotonApplicationNotFound": {
      "id": 1140,
      "name": "PhotonApplicationNotFound"
    },
    "PhotonApplicationNotAssociatedWithTitle": {
      "id": 1141,
      "name": "PhotonApplicationNotAssociatedWithTitle"
    },
    "InvalidEmailOrPassword": {
      "id": 1142,
      "name": "InvalidEmailOrPassword"
    },
    "FacebookAPIError": {
      "id": 1143,
      "name": "FacebookAPIError"
    },
    "InvalidContentType": {
      "id": 1144,
      "name": "InvalidContentType"
    },
    "KeyLengthExceeded": {
      "id": 1145,
      "name": "KeyLengthExceeded"
    },
    "DataLengthExceeded": {
      "id": 1146,
      "name": "DataLengthExceeded"
    },
    "TooManyKeys": {
      "id": 1147,
      "name": "TooManyKeys"
    },
    "FreeTierCannotHaveVirtualCurrency": {
      "id": 1148,
      "name": "FreeTierCannotHaveVirtualCurrency"
    },
    "MissingAmazonSharedKey": {
      "id": 1149,
      "name": "MissingAmazonSharedKey"
    },
    "AmazonValidationError": {
      "id": 1150,
      "name": "AmazonValidationError"
    },
    "InvalidPSNIssuerId": {
      "id": 1151,
      "name": "InvalidPSNIssuerId"
    },
    "PSNInaccessible": {
      "id": 1152,
      "name": "PSNInaccessible"
    },
    "ExpiredAuthToken": {
      "id": 1153,
      "name": "ExpiredAuthToken"
    },
    "FailedToGetEntitlements": {
      "id": 1154,
      "name": "FailedToGetEntitlements"
    },
    "FailedToConsumeEntitlement": {
      "id": 1155,
      "name": "FailedToConsumeEntitlement"
    },
    "TradeAcceptingUserNotAllowed": {
      "id": 1156,
      "name": "TradeAcceptingUserNotAllowed"
    },
    "TradeInventoryItemIsAssignedToCharacter": {
      "id": 1157,
      "name": "TradeInventoryItemIsAssignedToCharacter"
    },
    "TradeInventoryItemIsBundle": {
      "id": 1158,
      "name": "TradeInventoryItemIsBundle"
    },
    "TradeStatusNotValidForCancelling": {
      "id": 1159,
      "name": "TradeStatusNotValidForCancelling"
    },
    "TradeStatusNotValidForAccepting": {
      "id": 1160,
      "name": "TradeStatusNotValidForAccepting"
    },
    "TradeDoesNotExist": {
      "id": 1161,
      "name": "TradeDoesNotExist"
    },
    "TradeCancelled": {
      "id": 1162,
      "name": "TradeCancelled"
    },
    "TradeAlreadyFilled": {
      "id": 1163,
      "name": "TradeAlreadyFilled"
    },
    "TradeWaitForStatusTimeout": {
      "id": 1164,
      "name": "TradeWaitForStatusTimeout"
    },
    "TradeInventoryItemExpired": {
      "id": 1165,
      "name": "TradeInventoryItemExpired"
    },
    "TradeMissingOfferedAndAcceptedItems": {
      "id": 1166,
      "name": "TradeMissingOfferedAndAcceptedItems"
    },
    "TradeAcceptedItemIsBundle": {
      "id": 1167,
      "name": "TradeAcceptedItemIsBundle"
    },
    "TradeAcceptedItemIsStackable": {
      "id": 1168,
      "name": "TradeAcceptedItemIsStackable"
    },
    "TradeInventoryItemInvalidStatus": {
      "id": 1169,
      "name": "TradeInventoryItemInvalidStatus"
    },
    "TradeAcceptedCatalogItemInvalid": {
      "id": 1170,
      "name": "TradeAcceptedCatalogItemInvalid"
    },
    "TradeAllowedUsersInvalid": {
      "id": 1171,
      "name": "TradeAllowedUsersInvalid"
    },
    "TradeInventoryItemDoesNotExist": {
      "id": 1172,
      "name": "TradeInventoryItemDoesNotExist"
    },
    "TradeInventoryItemIsConsumed": {
      "id": 1173,
      "name": "TradeInventoryItemIsConsumed"
    },
    "TradeInventoryItemIsStackable": {
      "id": 1174,
      "name": "TradeInventoryItemIsStackable"
    },
    "TradeAcceptedItemsMismatch": {
      "id": 1175,
      "name": "TradeAcceptedItemsMismatch"
    },
    "InvalidKongregateToken": {
      "id": 1176,
      "name": "InvalidKongregateToken"
    },
    "FeatureNotConfiguredForTitle": {
      "id": 1177,
      "name": "FeatureNotConfiguredForTitle"
    },
    "NoMatchingCatalogItemForReceipt": {
      "id": 1178,
      "name": "NoMatchingCatalogItemForReceipt"
    },
    "InvalidCurrencyCode": {
      "id": 1179,
      "name": "InvalidCurrencyCode"
    },
    "NoRealMoneyPriceForCatalogItem": {
      "id": 1180,
      "name": "NoRealMoneyPriceForCatalogItem"
    },
    "TradeInventoryItemIsNotTradable": {
      "id": 1181,
      "name": "TradeInventoryItemIsNotTradable"
    },
    "TradeAcceptedCatalogItemIsNotTradable": {
      "id": 1182,
      "name": "TradeAcceptedCatalogItemIsNotTradable"
    },
    "UsersAlreadyFriends": {
      "id": 1183,
      "name": "UsersAlreadyFriends"
    },
    "LinkedIdentifierAlreadyClaimed": {
      "id": 1184,
      "name": "LinkedIdentifierAlreadyClaimed"
    },
    "CustomIdNotLinked": {
      "id": 1185,
      "name": "CustomIdNotLinked"
    },
    "TotalDataSizeExceeded": {
      "id": 1186,
      "name": "TotalDataSizeExceeded"
    },
    "DeleteKeyConflict": {
      "id": 1187,
      "name": "DeleteKeyConflict"
    },
    "InvalidXboxLiveToken": {
      "id": 1188,
      "name": "InvalidXboxLiveToken"
    },
    "ExpiredXboxLiveToken": {
      "id": 1189,
      "name": "ExpiredXboxLiveToken"
    },
    "ResettableStatisticVersionRequired": {
      "id": 1190,
      "name": "ResettableStatisticVersionRequired"
    },
    "NotAuthorizedByTitle": {
      "id": 1191,
      "name": "NotAuthorizedByTitle"
    },
    "NoPartnerEnabled": {
      "id": 1192,
      "name": "NoPartnerEnabled"
    },
    "InvalidPartnerResponse": {
      "id": 1193,
      "name": "InvalidPartnerResponse"
    },
    "APINotEnabledForGameServerAccess": {
      "id": 1194,
      "name": "APINotEnabledForGameServerAccess"
    },
    "StatisticNotFound": {
      "id": 1195,
      "name": "StatisticNotFound"
    },
    "StatisticNameConflict": {
      "id": 1196,
      "name": "StatisticNameConflict"
    },
    "StatisticVersionClosedForWrites": {
      "id": 1197,
      "name": "StatisticVersionClosedForWrites"
    },
    "StatisticVersionInvalid": {
      "id": 1198,
      "name": "StatisticVersionInvalid"
    },
    "APIClientRequestRateLimitExceeded": {
      "id": 1199,
      "name": "APIClientRequestRateLimitExceeded"
    },
    "InvalidJSONContent": {
      "id": 1200,
      "name": "InvalidJSONContent"
    },
    "InvalidDropTable": {
      "id": 1201,
      "name": "InvalidDropTable"
    },
    "StatisticVersionAlreadyIncrementedForScheduledInterval": {
      "id": 1202,
      "name": "StatisticVersionAlreadyIncrementedForScheduledInterval"
    },
    "StatisticCountLimitExceeded": {
      "id": 1203,
      "name": "StatisticCountLimitExceeded"
    },
    "StatisticVersionIncrementRateExceeded": {
      "id": 1204,
      "name": "StatisticVersionIncrementRateExceeded"
    },
    "ContainerKeyInvalid": {
      "id": 1205,
      "name": "ContainerKeyInvalid"
    },
    "CloudScriptExecutionTimeLimitExceeded": {
      "id": 1206,
      "name": "CloudScriptExecutionTimeLimitExceeded"
    },
    "NoWritePermissionsForEvent": {
      "id": 1207,
      "name": "NoWritePermissionsForEvent"
    },
    "CloudScriptFunctionArgumentSizeExceeded": {
      "id": 1208,
      "name": "CloudScriptFunctionArgumentSizeExceeded"
    },
    "CloudScriptAPIRequestCountExceeded": {
      "id": 1209,
      "name": "CloudScriptAPIRequestCountExceeded"
    },
    "CloudScriptAPIRequestError": {
      "id": 1210,
      "name": "CloudScriptAPIRequestError"
    },
    "CloudScriptHTTPRequestError": {
      "id": 1211,
      "name": "CloudScriptHTTPRequestError"
    },
    "InsufficientGuildRole": {
      "id": 1212,
      "name": "InsufficientGuildRole"
    },
    "GuildNotFound": {
      "id": 1213,
      "name": "GuildNotFound"
    },
    "OverLimit": {
      "id": 1214,
      "name": "OverLimit"
    },
    "EventNotFound": {
      "id": 1215,
      "name": "EventNotFound"
    },
    "InvalidEventField": {
      "id": 1216,
      "name": "InvalidEventField"
    },
    "InvalidEventName": {
      "id": 1217,
      "name": "InvalidEventName"
    },
    "CatalogNotConfigured": {
      "id": 1218,
      "name": "CatalogNotConfigured"
    },
    "OperationNotSupportedForPlatform": {
      "id": 1219,
      "name": "OperationNotSupportedForPlatform"
    },
    "SegmentNotFound": {
      "id": 1220,
      "name": "SegmentNotFound"
    },
    "StoreNotFound": {
      "id": 1221,
      "name": "StoreNotFound"
    },
    "InvalidStatisticName": {
      "id": 1222,
      "name": "InvalidStatisticName"
    },
    "TitleNotQualifiedForLimit": {
      "id": 1223,
      "name": "TitleNotQualifiedForLimit"
    },
    "InvalidServiceLimitLevel": {
      "id": 1224,
      "name": "InvalidServiceLimitLevel"
    },
    "ServiceLimitLevelInTransition": {
      "id": 1225,
      "name": "ServiceLimitLevelInTransition"
    },
    "CouponAlreadyRedeemed": {
      "id": 1226,
      "name": "CouponAlreadyRedeemed"
    },
    "GameServerBuildSizeLimitExceeded": {
      "id": 1227,
      "name": "GameServerBuildSizeLimitExceeded"
    },
    "GameServerBuildCountLimitExceeded": {
      "id": 1228,
      "name": "GameServerBuildCountLimitExceeded"
    },
    "VirtualCurrencyCountLimitExceeded": {
      "id": 1229,
      "name": "VirtualCurrencyCountLimitExceeded"
    },
    "VirtualCurrencyCodeExists": {
      "id": 1230,
      "name": "VirtualCurrencyCodeExists"
    },
    "TitleNewsItemCountLimitExceeded": {
      "id": 1231,
      "name": "TitleNewsItemCountLimitExceeded"
    },
    "InvalidTwitchToken": {
      "id": 1232,
      "name": "InvalidTwitchToken"
    },
    "TwitchResponseError": {
      "id": 1233,
      "name": "TwitchResponseError"
    },
    "ProfaneDisplayName": {
      "id": 1234,
      "name": "ProfaneDisplayName"
    },
    "UserAlreadyAdded": {
      "id": 1235,
      "name": "UserAlreadyAdded"
    },
    "InvalidVirtualCurrencyCode": {
      "id": 1236,
      "name": "InvalidVirtualCurrencyCode"
    },
    "VirtualCurrencyCannotBeDeleted": {
      "id": 1237,
      "name": "VirtualCurrencyCannotBeDeleted"
    },
    "IdentifierAlreadyClaimed": {
      "id": 1238,
      "name": "IdentifierAlreadyClaimed"
    },
    "IdentifierNotLinked": {
      "id": 1239,
      "name": "IdentifierNotLinked"
    },
    "InvalidContinuationToken": {
      "id": 1240,
      "name": "InvalidContinuationToken"
    },
    "ExpiredContinuationToken": {
      "id": 1241,
      "name": "ExpiredContinuationToken"
    },
    "InvalidSegment": {
      "id": 1242,
      "name": "InvalidSegment"
    },
    "InvalidSessionId": {
      "id": 1243,
      "name": "InvalidSessionId"
    },
    "SessionLogNotFound": {
      "id": 1244,
      "name": "SessionLogNotFound"
    },
    "InvalidSearchTerm": {
      "id": 1245,
      "name": "InvalidSearchTerm"
    },
    "TwoFactorAuthenticationTokenRequired": {
      "id": 1246,
      "name": "TwoFactorAuthenticationTokenRequired"
    },
    "GameServerHostCountLimitExceeded": {
      "id": 1247,
      "name": "GameServerHostCountLimitExceeded"
    },
    "PlayerTagCountLimitExceeded": {
      "id": 1248,
      "name": "PlayerTagCountLimitExceeded"
    },
    "RequestAlreadyRunning": {
      "id": 1249,
      "name": "RequestAlreadyRunning"
    },
    "ActionGroupNotFound": {
      "id": 1250,
      "name": "ActionGroupNotFound"
    },
    "MaximumSegmentBulkActionJobsRunning": {
      "id": 1251,
      "name": "MaximumSegmentBulkActionJobsRunning"
    },
    "NoActionsOnPlayersInSegmentJob": {
      "id": 1252,
      "name": "NoActionsOnPlayersInSegmentJob"
    },
    "DuplicateStatisticName": {
      "id": 1253,
      "name": "DuplicateStatisticName"
    },
    "ScheduledTaskNameConflict": {
      "id": 1254,
      "name": "ScheduledTaskNameConflict"
    },
    "ScheduledTaskCreateConflict": {
      "id": 1255,
      "name": "ScheduledTaskCreateConflict"
    },
    "InvalidScheduledTaskName": {
      "id": 1256,
      "name": "InvalidScheduledTaskName"
    },
    "InvalidTaskSchedule": {
      "id": 1257,
      "name": "InvalidTaskSchedule"
    },
    "SteamNotEnabledForTitle": {
      "id": 1258,
      "name": "SteamNotEnabledForTitle"
    },
    "LimitNotAnUpgradeOption": {
      "id": 1259,
      "name": "LimitNotAnUpgradeOption"
    },
    "NoSecretKeyEnabledForCloudScript": {
      "id": 1260,
      "name": "NoSecretKeyEnabledForCloudScript"
    },
    "TaskNotFound": {
      "id": 1261,
      "name": "TaskNotFound"
    },
    "TaskInstanceNotFound": {
      "id": 1262,
      "name": "TaskInstanceNotFound"
    },
    "InvalidIdentityProviderId": {
      "id": 1263,
      "name": "InvalidIdentityProviderId"
    },
    "MisconfiguredIdentityProvider": {
      "id": 1264,
      "name": "MisconfiguredIdentityProvider"
    },
    "InvalidScheduledTaskType": {
      "id": 1265,
      "name": "InvalidScheduledTaskType"
    },
    "BillingInformationRequired": {
      "id": 1266,
      "name": "BillingInformationRequired"
    },
    "LimitedEditionItemUnavailable": {
      "id": 1267,
      "name": "LimitedEditionItemUnavailable"
    },
    "InvalidAdPlacementAndReward": {
      "id": 1268,
      "name": "InvalidAdPlacementAndReward"
    },
    "AllAdPlacementViewsAlreadyConsumed": {
      "id": 1269,
      "name": "AllAdPlacementViewsAlreadyConsumed"
    },
    "GoogleOAuthNotConfiguredForTitle": {
      "id": 1270,
      "name": "GoogleOAuthNotConfiguredForTitle"
    },
    "GoogleOAuthError": {
      "id": 1271,
      "name": "GoogleOAuthError"
    },
    "UserNotFriend": {
      "id": 1272,
      "name": "UserNotFriend"
    },
    "InvalidSignature": {
      "id": 1273,
      "name": "InvalidSignature"
    },
    "InvalidPublicKey": {
      "id": 1274,
      "name": "InvalidPublicKey"
    },
    "GoogleOAuthNoIdTokenIncludedInResponse": {
      "id": 1275,
      "name": "GoogleOAuthNoIdTokenIncludedInResponse"
    },
    "StatisticUpdateInProgress": {
      "id": 1276,
      "name": "StatisticUpdateInProgress"
    },
    "LeaderboardVersionNotAvailable": {
      "id": 1277,
      "name": "LeaderboardVersionNotAvailable"
    },
    "StatisticAlreadyHasPrizeTable": {
      "id": 1279,
      "name": "StatisticAlreadyHasPrizeTable"
    },
    "PrizeTableHasOverlappingRanks": {
      "id": 1280,
      "name": "PrizeTableHasOverlappingRanks"
    },
    "PrizeTableHasMissingRanks": {
      "id": 1281,
      "name": "PrizeTableHasMissingRanks"
    },
    "PrizeTableRankStartsAtZero": {
      "id": 1282,
      "name": "PrizeTableRankStartsAtZero"
    },
    "InvalidStatistic": {
      "id": 1283,
      "name": "InvalidStatistic"
    },
    "ExpressionParseFailure": {
      "id": 1284,
      "name": "ExpressionParseFailure"
    },
    "ExpressionInvokeFailure": {
      "id": 1285,
      "name": "ExpressionInvokeFailure"
    },
    "ExpressionTooLong": {
      "id": 1286,
      "name": "ExpressionTooLong"
    },
    "DataUpdateRateExceeded": {
      "id": 1287,
      "name": "DataUpdateRateExceeded"
    },
    "RestrictedEmailDomain": {
      "id": 1288,
      "name": "RestrictedEmailDomain"
    },
    "EncryptionKeyDisabled": {
      "id": 1289,
      "name": "EncryptionKeyDisabled"
    },
    "EncryptionKeyMissing": {
      "id": 1290,
      "name": "EncryptionKeyMissing"
    },
    "EncryptionKeyBroken": {
      "id": 1291,
      "name": "EncryptionKeyBroken"
    },
    "NoSharedSecretKeyConfigured": {
      "id": 1292,
      "name": "NoSharedSecretKeyConfigured"
    },
    "SecretKeyNotFound": {
      "id": 1293,
      "name": "SecretKeyNotFound"
    },
    "PlayerSecretAlreadyConfigured": {
      "id": 1294,
      "name": "PlayerSecretAlreadyConfigured"
    },
    "APIRequestsDisabledForTitle": {
      "id": 1295,
      "name": "APIRequestsDisabledForTitle"
    },
    "InvalidSharedSecretKey": {
      "id": 1296,
      "name": "InvalidSharedSecretKey"
    },
    "PrizeTableHasNoRanks": {
      "id": 1297,
      "name": "PrizeTableHasNoRanks"
    },
    "ProfileDoesNotExist": {
      "id": 1298,
      "name": "ProfileDoesNotExist"
    },
    "ContentS3OriginBucketNotConfigured": {
      "id": 1299,
      "name": "ContentS3OriginBucketNotConfigured"
    },
    "InvalidEnvironmentForReceipt": {
      "id": 1300,
      "name": "InvalidEnvironmentForReceipt"
    },
    "EncryptedRequestNotAllowed": {
      "id": 1301,
      "name": "EncryptedRequestNotAllowed"
    },
    "SignedRequestNotAllowed": {
      "id": 1302,
      "name": "SignedRequestNotAllowed"
    },
    "RequestViewConstraintParamsNotAllowed": {
      "id": 1303,
      "name": "RequestViewConstraintParamsNotAllowed"
    },
    "BadPartnerConfiguration": {
      "id": 1304,
      "name": "BadPartnerConfiguration"
    },
    "XboxBPCertificateFailure": {
      "id": 1305,
      "name": "XboxBPCertificateFailure"
    },
    "XboxXASSExchangeFailure": {
      "id": 1306,
      "name": "XboxXASSExchangeFailure"
    },
    "InvalidEntityId": {
      "id": 1307,
      "name": "InvalidEntityId"
    },
    "StatisticValueAggregationOverflow": {
      "id": 1308,
      "name": "StatisticValueAggregationOverflow"
    },
    "EmailMessageFromAddressIsMissing": {
      "id": 1309,
      "name": "EmailMessageFromAddressIsMissing"
    },
    "EmailMessageToAddressIsMissing": {
      "id": 1310,
      "name": "EmailMessageToAddressIsMissing"
    },
    "SmtpServerAuthenticationError": {
      "id": 1311,
      "name": "SmtpServerAuthenticationError"
    },
    "SmtpServerLimitExceeded": {
      "id": 1312,
      "name": "SmtpServerLimitExceeded"
    },
    "SmtpServerInsufficientStorage": {
      "id": 1313,
      "name": "SmtpServerInsufficientStorage"
    },
    "SmtpServerCommunicationError": {
      "id": 1314,
      "name": "SmtpServerCommunicationError"
    },
    "SmtpServerGeneralFailure": {
      "id": 1315,
      "name": "SmtpServerGeneralFailure"
    },
    "EmailClientTimeout": {
      "id": 1316,
      "name": "EmailClientTimeout"
    },
    "EmailClientCanceledTask": {
      "id": 1317,
      "name": "EmailClientCanceledTask"
    },
    "EmailTemplateMissing": {
      "id": 1318,
      "name": "EmailTemplateMissing"
    },
    "InvalidHostForTitleId": {
      "id": 1319,
      "name": "InvalidHostForTitleId"
    },
    "EmailConfirmationTokenDoesNotExist": {
      "id": 1320,
      "name": "EmailConfirmationTokenDoesNotExist"
    },
    "EmailConfirmationTokenExpired": {
      "id": 1321,
      "name": "EmailConfirmationTokenExpired"
    },
    "AccountDeleted": {
      "id": 1322,
      "name": "AccountDeleted"
    },
    "PlayerSecretNotConfigured": {
      "id": 1323,
      "name": "PlayerSecretNotConfigured"
    },
    "InvalidSignatureTime": {
      "id": 1324,
      "name": "InvalidSignatureTime"
    },
    "NoContactEmailAddressFound": {
      "id": 1325,
      "name": "NoContactEmailAddressFound"
    },
    "InvalidAuthToken": {
      "id": 1326,
      "name": "InvalidAuthToken"
    },
    "AuthTokenDoesNotExist": {
      "id": 1327,
      "name": "AuthTokenDoesNotExist"
    },
    "AuthTokenExpired": {
      "id": 1328,
      "name": "AuthTokenExpired"
    },
    "AuthTokenAlreadyUsedToResetPassword": {
      "id": 1329,
      "name": "AuthTokenAlreadyUsedToResetPassword"
    },
    "MembershipNameTooLong": {
      "id": 1330,
      "name": "MembershipNameTooLong"
    },
    "MembershipNotFound": {
      "id": 1331,
      "name": "MembershipNotFound"
    },
    "GoogleServiceAccountInvalid": {
      "id": 1332,
      "name": "GoogleServiceAccountInvalid"
    },
    "GoogleServiceAccountParseFailure": {
      "id": 1333,
      "name": "GoogleServiceAccountParseFailure"
    },
    "EntityTokenMissing": {
      "id": 1334,
      "name": "EntityTokenMissing"
    },
    "EntityTokenInvalid": {
      "id": 1335,
      "name": "EntityTokenInvalid"
    },
    "EntityTokenExpired": {
      "id": 1336,
      "name": "EntityTokenExpired"
    },
    "EntityTokenRevoked": {
      "id": 1337,
      "name": "EntityTokenRevoked"
    },
    "InvalidProductForSubscription": {
      "id": 1338,
      "name": "InvalidProductForSubscription"
    },
    "XboxInaccessible": {
      "id": 1339,
      "name": "XboxInaccessible"
    },
    "SubscriptionAlreadyTaken": {
      "id": 1340,
      "name": "SubscriptionAlreadyTaken"
    },
    "SmtpAddonNotEnabled": {
      "id": 1341,
      "name": "SmtpAddonNotEnabled"
    },
    "APIConcurrentRequestLimitExceeded": {
      "id": 1342,
      "name": "APIConcurrentRequestLimitExceeded"
    },
    "XboxRejectedXSTSExchangeRequest": {
      "id": 1343,
      "name": "XboxRejectedXSTSExchangeRequest"
    },
    "VariableNotDefined": {
      "id": 1344,
      "name": "VariableNotDefined"
    },
    "TemplateVersionNotDefined": {
      "id": 1345,
      "name": "TemplateVersionNotDefined"
    },
    "FileTooLarge": {
      "id": 1346,
      "name": "FileTooLarge"
    },
    "TitleDeleted": {
      "id": 1347,
      "name": "TitleDeleted"
    },
    "TitleContainsUserAccounts": {
      "id": 1348,
      "name": "TitleContainsUserAccounts"
    },
    "TitleDeletionPlayerCleanupFailure": {
      "id": 1349,
      "name": "TitleDeletionPlayerCleanupFailure"
    },
    "EntityFileOperationPending": {
      "id": 1350,
      "name": "EntityFileOperationPending"
    },
    "NoEntityFileOperationPending": {
      "id": 1351,
      "name": "NoEntityFileOperationPending"
    },
    "EntityProfileVersionMismatch": {
      "id": 1352,
      "name": "EntityProfileVersionMismatch"
    },
    "TemplateVersionTooOld": {
      "id": 1353,
      "name": "TemplateVersionTooOld"
    },
    "MembershipDefinitionInUse": {
      "id": 1354,
      "name": "MembershipDefinitionInUse"
    },
    "PaymentPageNotConfigured": {
      "id": 1355,
      "name": "PaymentPageNotConfigured"
    },
    "FailedLoginAttemptRateLimitExceeded": {
      "id": 1356,
      "name": "FailedLoginAttemptRateLimitExceeded"
    },
    "EntityBlockedByGroup": {
      "id": 1357,
      "name": "EntityBlockedByGroup"
    },
    "RoleDoesNotExist": {
      "id": 1358,
      "name": "RoleDoesNotExist"
    },
    "EntityIsAlreadyMember": {
      "id": 1359,
      "name": "EntityIsAlreadyMember"
    },
    "DuplicateRoleId": {
      "id": 1360,
      "name": "DuplicateRoleId"
    },
    "GroupInvitationNotFound": {
      "id": 1361,
      "name": "GroupInvitationNotFound"
    },
    "GroupApplicationNotFound": {
      "id": 1362,
      "name": "GroupApplicationNotFound"
    },
    "OutstandingInvitationAcceptedInstead": {
      "id": 1363,
      "name": "OutstandingInvitationAcceptedInstead"
    },
    "OutstandingApplicationAcceptedInstead": {
      "id": 1364,
      "name": "OutstandingApplicationAcceptedInstead"
    },
    "RoleIsGroupDefaultMember": {
      "id": 1365,
      "name": "RoleIsGroupDefaultMember"
    },
    "RoleIsGroupAdmin": {
      "id": 1366,
      "name": "RoleIsGroupAdmin"
    },
    "RoleNameNotAvailable": {
      "id": 1367,
      "name": "RoleNameNotAvailable"
    },
    "GroupNameNotAvailable": {
      "id": 1368,
      "name": "GroupNameNotAvailable"
    },
    "EmailReportAlreadySent": {
      "id": 1369,
      "name": "EmailReportAlreadySent"
    },
    "EmailReportRecipientBlacklisted": {
      "id": 1370,
      "name": "EmailReportRecipientBlacklisted"
    },
    "EventNamespaceNotAllowed": {
      "id": 1371,
      "name": "EventNamespaceNotAllowed"
    },
    "EventEntityNotAllowed": {
      "id": 1372,
      "name": "EventEntityNotAllowed"
    },
    "InvalidEntityType": {
      "id": 1373,
      "name": "InvalidEntityType"
    },
    "NullTokenResultFromAad": {
      "id": 1374,
      "name": "NullTokenResultFromAad"
    },
    "InvalidTokenResultFromAad": {
      "id": 1375,
      "name": "InvalidTokenResultFromAad"
    },
    "NoValidCertificateForAad": {
      "id": 1376,
      "name": "NoValidCertificateForAad"
    },
    "InvalidCertificateForAad": {
      "id": 1377,
      "name": "InvalidCertificateForAad"
    },
    "DuplicateDropTableId": {
      "id": 1378,
      "name": "DuplicateDropTableId"
    },
    "GameServerOk": {
      "id": 1379,
      "name": "GameServerOk"
    },
    "GameServerAccepted": {
      "id": 1380,
      "name": "GameServerAccepted"
    },
    "GameServerNoContent": {
      "id": 1381,
      "name": "GameServerNoContent"
    },
    "GameServerBadRequest": {
      "id": 1382,
      "name": "GameServerBadRequest"
    },
    "GameServerUnauthorized": {
      "id": 1383,
      "name": "GameServerUnauthorized"
    },
    "GameServerForbidden": {
      "id": 1384,
      "name": "GameServerForbidden"
    },
    "GameServerNotFound": {
      "id": 1385,
      "name": "GameServerNotFound"
    },
    "GameServerConflict": {
      "id": 1386,
      "name": "GameServerConflict"
    },
    "GameServerInternalServerError": {
      "id": 1387,
      "name": "GameServerInternalServerError"
    },
    "GameServerServiceUnavailable": {
      "id": 1388,
      "name": "GameServerServiceUnavailable"
    },
    "MatchmakingInvalidEntityKeyList": {
      "id": 2000,
      "name": "MatchmakingInvalidEntityKeyList"
    },
    "MatchmakingInvalidTicketCreatorProfile": {
      "id": 2001,
      "name": "MatchmakingInvalidTicketCreatorProfile"
    },
    "MatchmakingInvalidUserAttributes": {
      "id": 2002,
      "name": "MatchmakingInvalidUserAttributes"
    },
    "MatchmakingCreateRequestMissing": {
      "id": 2003,
      "name": "MatchmakingCreateRequestMissing"
    },
    "MatchmakingCreateRequestCreatorMissing": {
      "id": 2004,
      "name": "MatchmakingCreateRequestCreatorMissing"
    },
    "MatchmakingCreateRequestCreatorIdMissing": {
      "id": 2005,
      "name": "MatchmakingCreateRequestCreatorIdMissing"
    },
    "MatchmakingCreateRequestUserListMissing": {
      "id": 2006,
      "name": "MatchmakingCreateRequestUserListMissing"
    },
    "MatchmakingCreateRequestGiveUpAfterInvalid": {
      "id": 2007,
      "name": "MatchmakingCreateRequestGiveUpAfterInvalid"
    },
    "MatchmakingTicketIdMissing": {
      "id": 2008,
      "name": "MatchmakingTicketIdMissing"
    },
    "MatchmakingMatchIdMissing": {
      "id": 2009,
      "name": "MatchmakingMatchIdMissing"
    },
    "MatchmakingMatchIdIdMissing": {
      "id": 2010,
      "name": "MatchmakingMatchIdIdMissing"
    },
    "MatchmakingHopperIdMissing": {
      "id": 2011,
      "name": "MatchmakingHopperIdMissing"
    },
    "MatchmakingTitleIdMissing": {
      "id": 2012,
      "name": "MatchmakingTitleIdMissing"
    },
    "MatchmakingTicketIdIdMissing": {
      "id": 2013,
      "name": "MatchmakingTicketIdIdMissing"
    },
    "MatchmakingUserIdMissing": {
      "id": 2014,
      "name": "MatchmakingUserIdMissing"
    },
    "MatchmakingJoinRequestUserMissing": {
      "id": 2015,
      "name": "MatchmakingJoinRequestUserMissing"
    },
    "MatchmakingHopperConfigNotFound": {
      "id": 2016,
      "name": "MatchmakingHopperConfigNotFound"
    },
    "MatchmakingMatchNotFound": {
      "id": 2017,
      "name": "MatchmakingMatchNotFound"
    },
    "MatchmakingTicketNotFound": {
      "id": 2018,
      "name": "MatchmakingTicketNotFound"
    },
    "MatchmakingCreateTicketServerIdentityInvalid": {
      "id": 2019,
      "name": "MatchmakingCreateTicketServerIdentityInvalid"
    },
    "MatchmakingCreateTicketClientIdentityInvalid": {
      "id": 2020,
      "name": "MatchmakingCreateTicketClientIdentityInvalid"
    },
    "MatchmakingGetTicketUserMismatch": {
      "id": 2021,
      "name": "MatchmakingGetTicketUserMismatch"
    },
    "MatchmakingJoinTicketServerIdentityInvalid": {
      "id": 2022,
      "name": "MatchmakingJoinTicketServerIdentityInvalid"
    },
    "MatchmakingJoinTicketUserIdentityMismatch": {
      "id": 2023,
      "name": "MatchmakingJoinTicketUserIdentityMismatch"
    },
    "MatchmakingCancelTicketServerIdentityInvalid": {
      "id": 2024,
      "name": "MatchmakingCancelTicketServerIdentityInvalid"
    },
    "MatchmakingCancelTicketUserIdentityMismatch": {
      "id": 2025,
      "name": "MatchmakingCancelTicketUserIdentityMismatch"
    },
    "MatchmakingGetMatchIdentityMismatch": {
      "id": 2026,
      "name": "MatchmakingGetMatchIdentityMismatch"
    },
    "MatchmakingUserIdentityMismatch": {
      "id": 2027,
      "name": "MatchmakingUserIdentityMismatch"
    },
    "MatchmakingAlreadyJoinedTicket": {
      "id": 2028,
      "name": "MatchmakingAlreadyJoinedTicket"
    },
    "MatchmakingTicketAlreadyCompleted": {
      "id": 2029,
      "name": "MatchmakingTicketAlreadyCompleted"
    },
    "MatchmakingHopperConfigInvalid": {
      "id": 2031,
      "name": "MatchmakingHopperConfigInvalid"
    }
  }
}