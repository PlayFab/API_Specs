{
  "swagger": "2.0",
  "info": {
    "version": "231013",
    "title": "PlayFab Economy API",
    "description": "API methods for managing the catalog. Inventory manages in-game assets for any given entity.",
    "termsOfService": "https://playfab.com/terms/",
    "contact": {
      "url": "https://community.playfab.com/index.html"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://github.com/PlayFab/API_Specs/blob/master/LICENSE"
    }
  },
  "host": "titleId.playfabapi.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/Catalog/CreateDraftItem": {
      "post": {
        "operationId": "CreateDraftItem",
        "tags": [
          "Catalog"
        ],
        "description": "Creates a new item in the working catalog using provided metadata.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/createdraftitem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateDraftItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDraftItemResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The item will not be published to the public catalog until the PublishItem API is called for the item.",
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound",
          "NotImplemented"
        ]
      }
    },
    "/Catalog/CreateUploadUrls": {
      "post": {
        "operationId": "CreateUploadUrls",
        "tags": [
          "Catalog"
        ],
        "description": "Creates one or more upload URLs which can be used by the client to upload raw file data. Content URls and uploaded content will be garbage collected after 24 hours if not attached to a draft or published item. Detailed pricing info around uploading content can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/pricing/meters/catalog-meters",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/createuploadurls"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateUploadUrlsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateUploadUrlsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Upload URLs point to Azure Blobs; clients must follow the Microsoft Azure Storage Blob Service REST API pattern for uploading content. The response contains upload URLs and IDs for each file. The IDs and URLs returned must be added to the item metadata and committed using the CreateDraftItem or UpdateDraftItem Item APIs."
      }
    },
    "/Catalog/DeleteEntityItemReviews": {
      "post": {
        "operationId": "DeleteEntityItemReviews",
        "tags": [
          "Catalog"
        ],
        "description": "Deletes all reviews, helpfulness votes, and ratings submitted by the entity specified.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/deleteentityitemreviews"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteEntityItemReviewsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteEntityItemReviewsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/DeleteItem": {
      "post": {
        "operationId": "DeleteItem",
        "tags": [
          "Catalog"
        ],
        "description": "Removes an item from working catalog and all published versions from the public catalog.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/deleteitem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteItemResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound"
        ]
      }
    },
    "/Catalog/GetCatalogConfig": {
      "post": {
        "operationId": "GetCatalogConfig",
        "tags": [
          "Catalog"
        ],
        "description": "Gets the configuration for the catalog. Only Title Entities can call this API. There is a limit of 100 requests in 10 seconds for this API. More information about the Catalog Config can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/settings",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/getcatalogconfig"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetCatalogConfigRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetCatalogConfigResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "BillingInformationRequired",
          "InvalidEntityType"
        ]
      }
    },
    "/Catalog/GetDraftItem": {
      "post": {
        "operationId": "GetDraftItem",
        "tags": [
          "Catalog"
        ],
        "description": "Retrieves an item from the working catalog. This item represents the current working state of the item. GetDraftItem does not work off a cache of the Catalog and should be used when trying to get recent item updates. However, please note that item references data is cached and may take a few moments for changes to propagate.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/getdraftitem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetDraftItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetDraftItemResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound",
          "NotImplemented"
        ]
      }
    },
    "/Catalog/GetDraftItems": {
      "post": {
        "operationId": "GetDraftItems",
        "tags": [
          "Catalog"
        ],
        "description": "Retrieves a paginated list of the items from the draft catalog. Up to 50 IDs can be retrieved in a single request. GetDraftItems does not work off a cache of the Catalog and should be used when trying to get recent item updates.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/getdraftitems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetDraftItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetDraftItemsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound"
        ]
      }
    },
    "/Catalog/GetEntityDraftItems": {
      "post": {
        "operationId": "GetEntityDraftItems",
        "tags": [
          "Catalog"
        ],
        "description": "Retrieves a paginated list of the items from the draft catalog created by the Entity. Up to 50 items can be returned at once. You can use continuation tokens to paginate through results that return greater than the limit. GetEntityDraftItems does not work off a cache of the Catalog and should be used when trying to get recent item updates.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/getentitydraftitems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetEntityDraftItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetEntityDraftItemsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound"
        ]
      }
    },
    "/Catalog/GetEntityItemReview": {
      "post": {
        "operationId": "GetEntityItemReview",
        "tags": [
          "Catalog"
        ],
        "description": "Gets the submitted review for the specified item by the authenticated entity. Individual ratings and reviews data update in near real time with delays within a few seconds.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/getentityitemreview"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetEntityItemReviewRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetEntityItemReviewResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound"
        ]
      }
    },
    "/Catalog/GetItem": {
      "post": {
        "operationId": "GetItem",
        "tags": [
          "Catalog"
        ],
        "description": "Retrieves an item from the public catalog. GetItem does not work off a cache of the Catalog and should be used when trying to get recent item updates. However, please note that item references data is cached and may take a few moments for changes to propagate.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/getitem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetItemResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound"
        ]
      }
    },
    "/Catalog/GetItemContainers": {
      "post": {
        "operationId": "GetItemContainers",
        "tags": [
          "Catalog"
        ],
        "description": "Search for a given item and return a set of bundles and stores containing the item. Up to 50 items can be returned at once. You can use continuation tokens to paginate through results that return greater than the limit. This API is intended for tooling/automation scenarios and has a reduced RPS with Player Entities limited to 30 requests in 300 seconds and Title Entities limited to 100 requests in 10 seconds.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/getitemcontainers"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetItemContainersRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetItemContainersResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an item, return a set of bundles and stores containing the item.",
        "x-ms-docs-errors": [
          "ItemNotFound"
        ]
      }
    },
    "/Catalog/GetItemModerationState": {
      "post": {
        "operationId": "GetItemModerationState",
        "tags": [
          "Catalog"
        ],
        "description": "Gets the moderation state for an item, including the concern category and string reason. More information about moderation states can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/ugc/moderation",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/getitemmoderationstate"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetItemModerationStateRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetItemModerationStateResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound"
        ]
      }
    },
    "/Catalog/GetItemPublishStatus": {
      "post": {
        "operationId": "GetItemPublishStatus",
        "tags": [
          "Catalog"
        ],
        "description": "Gets the status of a publish of an item.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/getitempublishstatus"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetItemPublishStatusRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetItemPublishStatusResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound"
        ]
      }
    },
    "/Catalog/GetItemReviews": {
      "post": {
        "operationId": "GetItemReviews",
        "tags": [
          "Catalog"
        ],
        "description": "Get a paginated set of reviews associated with the specified item. Individual ratings and reviews data update in near real time with delays within a few seconds.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/getitemreviews"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetItemReviewsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetItemReviewsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound"
        ]
      }
    },
    "/Catalog/GetItemReviewSummary": {
      "post": {
        "operationId": "GetItemReviewSummary",
        "tags": [
          "Catalog"
        ],
        "description": "Get a summary of all ratings and reviews associated with the specified item. Summary ratings data is cached with update data coming within 15 minutes.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/getitemreviewsummary"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetItemReviewSummaryRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetItemReviewSummaryResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound"
        ]
      }
    },
    "/Catalog/GetItems": {
      "post": {
        "operationId": "GetItems",
        "tags": [
          "Catalog"
        ],
        "description": "Retrieves items from the public catalog. Up to 50 items can be returned at once. GetItems does not work off a cache of the Catalog and should be used when trying to get recent item updates. However, please note that item references data is cached and may take a few moments for changes to propagate.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/getitems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetItemsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "ItemNotFound",
          "NotImplemented"
        ]
      }
    },
    "/Catalog/PublishDraftItem": {
      "post": {
        "operationId": "PublishDraftItem",
        "tags": [
          "Catalog"
        ],
        "description": "Initiates a publish of an item from the working catalog to the public catalog. You can use the GetItemPublishStatus API to track the state of the item publish.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/publishdraftitem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/PublishDraftItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PublishDraftItemResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The call kicks off a workflow to publish the item to the public catalog. The Publish Status API should be used to monitor the publish job.",
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound"
        ]
      }
    },
    "/Catalog/ReportItem": {
      "post": {
        "operationId": "ReportItem",
        "tags": [
          "Catalog"
        ],
        "description": "Submit a report for an item, indicating in what way the item is inappropriate.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/reportitem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ReportItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ReportItemResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound"
        ]
      }
    },
    "/Catalog/ReportItemReview": {
      "post": {
        "operationId": "ReportItemReview",
        "tags": [
          "Catalog"
        ],
        "description": "Submit a report for a review",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/reportitemreview"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ReportItemReviewRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ReportItemReviewResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Submit a report for an inappropriate review, allowing the submitting user to specify their concern.",
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded"
        ]
      }
    },
    "/Catalog/ReviewItem": {
      "post": {
        "operationId": "ReviewItem",
        "tags": [
          "Catalog"
        ],
        "description": "Creates or updates a review for the specified item. More information around the caching surrounding item ratings and reviews can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/ratings#ratings-design-and-caching",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/reviewitem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ReviewItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ReviewItemResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound"
        ]
      }
    },
    "/Catalog/SearchItems": {
      "post": {
        "operationId": "SearchItems",
        "tags": [
          "Catalog"
        ],
        "description": "Executes a search against the public catalog using the provided search parameters and returns a set of paginated results. SearchItems uses a cache of the catalog with item updates taking up to a few minutes to propagate. You should use the GetItem API for when trying to immediately get recent item updates. More information about the Search API can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/search",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/searchitems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/SearchItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SearchItemsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound",
          "NotImplemented"
        ]
      }
    },
    "/Catalog/SetItemModerationState": {
      "post": {
        "operationId": "SetItemModerationState",
        "tags": [
          "Catalog"
        ],
        "description": "Sets the moderation state for an item, including the concern category and string reason. More information about moderation states can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/ugc/moderation",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/setitemmoderationstate"
        },
        "parameters": [
          {
            "$ref": "#/parameters/SetItemModerationStateRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SetItemModerationStateResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound"
        ]
      }
    },
    "/Catalog/SubmitItemReviewVote": {
      "post": {
        "operationId": "SubmitItemReviewVote",
        "tags": [
          "Catalog"
        ],
        "description": "Submit a vote for a review, indicating whether the review was helpful or unhelpful.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/submititemreviewvote"
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubmitItemReviewVoteRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SubmitItemReviewVoteResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded"
        ]
      }
    },
    "/Catalog/TakedownItemReviews": {
      "post": {
        "operationId": "TakedownItemReviews",
        "tags": [
          "Catalog"
        ],
        "description": "Submit a request to takedown one or more reviews.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/takedownitemreviews"
        },
        "parameters": [
          {
            "$ref": "#/parameters/TakedownItemReviewsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TakedownItemReviewsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Submit a request to takedown one or more reviews, removing them from public view. Authors will still be able to see their reviews after being taken down.",
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound"
        ]
      }
    },
    "/Catalog/UpdateCatalogConfig": {
      "post": {
        "operationId": "UpdateCatalogConfig",
        "tags": [
          "Catalog"
        ],
        "description": "Updates the configuration for the catalog. Only Title Entities can call this API. There is a limit of 10 requests in 10 seconds for this API. More information about the Catalog Config can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/settings",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/updatecatalogconfig"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UpdateCatalogConfigRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateCatalogConfigResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "BillingInformationRequired",
          "CatalogConfigInvalid",
          "InvalidEntityType"
        ]
      }
    },
    "/Catalog/UpdateDraftItem": {
      "post": {
        "operationId": "UpdateDraftItem",
        "tags": [
          "Catalog"
        ],
        "description": "Update the metadata for an item in the working catalog.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/catalog/updatedraftitem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UpdateDraftItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDraftItemResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound"
        ]
      }
    },
    "/Inventory/AddInventoryItems": {
      "post": {
        "operationId": "AddInventoryItems",
        "tags": [
          "Inventory"
        ],
        "description": "Add inventory items. Up to 3500 stacks of items can be added to a single inventory collection. Stack size is uncapped.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/inventory/addinventoryitems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/AddInventoryItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AddInventoryItemsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, entity identifier and container details, will add the specified inventory items.",
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound"
        ]
      }
    },
    "/Inventory/DeleteInventoryCollection": {
      "post": {
        "operationId": "DeleteInventoryCollection",
        "tags": [
          "Inventory"
        ],
        "description": "Delete an Inventory Collection. More information about Inventory Collections can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/inventory/collections",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/inventory/deleteinventorycollection"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteInventoryCollectionRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteInventoryCollectionResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Delete an Inventory Collection by the specified Id for an Entity"
      }
    },
    "/Inventory/DeleteInventoryItems": {
      "post": {
        "operationId": "DeleteInventoryItems",
        "tags": [
          "Inventory"
        ],
        "description": "Delete inventory items",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/inventory/deleteinventoryitems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteInventoryItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteInventoryItemsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, entity identifier and container details, will delete the entity's inventory items",
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound"
        ]
      }
    },
    "/Inventory/ExecuteInventoryOperations": {
      "post": {
        "operationId": "ExecuteInventoryOperations",
        "tags": [
          "Inventory"
        ],
        "description": "Execute a list of Inventory Operations. A maximum list of 10 operations can be performed by a single request. There is also a limit to 250 items that can be modified/added in a single request. For example, adding a bundle with 50 items counts as 50 items modified. All operations must be done within a single inventory collection. This API has a reduced RPS compared to an individual inventory operation with Player Entities limited to 15 requests in 90 seconds and Title Entities limited to 500 requests in 10 seconds.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/inventory/executeinventoryoperations"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ExecuteInventoryOperationsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ExecuteInventoryOperationsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Execute a list of Inventory Operations for an Entity",
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "InsufficientFunds",
          "ItemNotFound"
        ]
      }
    },
    "/Inventory/GetInventoryCollectionIds": {
      "post": {
        "operationId": "GetInventoryCollectionIds",
        "tags": [
          "Inventory"
        ],
        "description": "Get Inventory Collection Ids. Up to 50 Ids can be returned at once. You can use continuation tokens to paginate through results that return greater than the limit. It can take a few seconds for new collection Ids to show up.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/inventory/getinventorycollectionids"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetInventoryCollectionIdsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetInventoryCollectionIdsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Get a list of Inventory Collection Ids for the specified Entity"
      }
    },
    "/Inventory/GetInventoryItems": {
      "post": {
        "operationId": "GetInventoryItems",
        "tags": [
          "Inventory"
        ],
        "description": "Get current inventory items.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/inventory/getinventoryitems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetInventoryItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetInventoryItemsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, entity identifier and container details, will get the entity's inventory items. ",
        "x-ms-docs-errors": [
          "AccountDeleted",
          "DatabaseThroughputExceeded"
        ]
      }
    },
    "/Inventory/GetMicrosoftStoreAccessTokens": {
      "post": {
        "operationId": "GetMicrosoftStoreAccessTokens",
        "tags": [
          "Inventory"
        ],
        "description": "Gets the access tokens.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/inventory/getmicrosoftstoreaccesstokens"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetMicrosoftStoreAccessTokensRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetMicrosoftStoreAccessTokensResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Gets the access tokens for Microsoft Store authentication.",
        "x-ms-docs-errors": [
          "NotImplemented"
        ]
      }
    },
    "/Inventory/GetTransactionHistory": {
      "post": {
        "operationId": "GetTransactionHistory",
        "tags": [
          "Inventory"
        ],
        "description": "Get transaction history for a player. Up to 50 Events can be returned at once. You can use continuation tokens to paginate through results that return greater than the limit. Getting transaction history has a lower RPS limit than getting a Player's inventory with Player Entities having a limit of 30 requests in 300 seconds and Title Entities having a limit of 100 requests in 10 seconds.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/inventory/gettransactionhistory"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetTransactionHistoryRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetTransactionHistoryResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Get transaction history for specified entity and collection."
      }
    },
    "/Inventory/PurchaseInventoryItems": {
      "post": {
        "operationId": "PurchaseInventoryItems",
        "tags": [
          "Inventory"
        ],
        "description": "Purchase an item or bundle. Up to 3500 stacks of items can be added to a single inventory collection. Stack size is uncapped.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/inventory/purchaseinventoryitems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/PurchaseInventoryItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PurchaseInventoryItemsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Purchase a single item or bundle, paying the associated price.",
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "InsufficientFunds",
          "ItemNotFound"
        ]
      }
    },
    "/Inventory/RedeemAppleAppStoreInventoryItems": {
      "post": {
        "operationId": "RedeemAppleAppStoreInventoryItems",
        "tags": [
          "Inventory"
        ],
        "description": "Redeem items.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/inventory/redeemappleappstoreinventoryitems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/RedeemAppleAppStoreInventoryItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RedeemAppleAppStoreInventoryItemsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Redeem items from the Apple App Store."
      }
    },
    "/Inventory/RedeemGooglePlayInventoryItems": {
      "post": {
        "operationId": "RedeemGooglePlayInventoryItems",
        "tags": [
          "Inventory"
        ],
        "description": "Redeem items.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/inventory/redeemgoogleplayinventoryitems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/RedeemGooglePlayInventoryItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RedeemGooglePlayInventoryItemsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Redeem items from the Google Play Store."
      }
    },
    "/Inventory/RedeemMicrosoftStoreInventoryItems": {
      "post": {
        "operationId": "RedeemMicrosoftStoreInventoryItems",
        "tags": [
          "Inventory"
        ],
        "description": "Redeem items.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/inventory/redeemmicrosoftstoreinventoryitems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/RedeemMicrosoftStoreInventoryItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RedeemMicrosoftStoreInventoryItemsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Redeem items from the Microsoft Store.",
        "x-ms-docs-errors": [
          "AccountNotLinked",
          "InvalidXboxLiveToken",
          "XboxInaccessible",
          "XboxXASSExchangeFailure"
        ]
      }
    },
    "/Inventory/RedeemNintendoEShopInventoryItems": {
      "post": {
        "operationId": "RedeemNintendoEShopInventoryItems",
        "tags": [
          "Inventory"
        ],
        "description": "Redeem items.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/inventory/redeemnintendoeshopinventoryitems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/RedeemNintendoEShopInventoryItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RedeemNintendoEShopInventoryItemsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Redeem items from the Nintendo EShop.",
        "x-ms-docs-errors": [
          "AccountNotLinked",
          "InvalidNintendoSwitchAccountId"
        ]
      }
    },
    "/Inventory/RedeemPlayStationStoreInventoryItems": {
      "post": {
        "operationId": "RedeemPlayStationStoreInventoryItems",
        "tags": [
          "Inventory"
        ],
        "description": "Redeem items.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/inventory/redeemplaystationstoreinventoryitems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/RedeemPlayStationStoreInventoryItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RedeemPlayStationStoreInventoryItemsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Redeem items from the PlayStation Store.",
        "x-ms-docs-errors": [
          "AccountNotLinked",
          "InvalidPSNAuthCode",
          "NotAuthorized"
        ]
      }
    },
    "/Inventory/RedeemSteamInventoryItems": {
      "post": {
        "operationId": "RedeemSteamInventoryItems",
        "tags": [
          "Inventory"
        ],
        "description": "Redeem items.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/inventory/redeemsteaminventoryitems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/RedeemSteamInventoryItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RedeemSteamInventoryItemsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Redeem inventory items from Steam.",
        "x-ms-docs-errors": [
          "AccountNotLinked"
        ]
      }
    },
    "/Inventory/SubtractInventoryItems": {
      "post": {
        "operationId": "SubtractInventoryItems",
        "tags": [
          "Inventory"
        ],
        "description": "Subtract inventory items.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/inventory/subtractinventoryitems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubtractInventoryItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SubtractInventoryItemsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, entity identifier and container details, will subtract the specified inventory items. ",
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "InsufficientFunds",
          "ItemNotFound"
        ]
      }
    },
    "/Inventory/TransferInventoryItems": {
      "post": {
        "operationId": "TransferInventoryItems",
        "tags": [
          "Inventory"
        ],
        "description": "Transfer inventory items. When transferring across collections, a 202 response indicates that the transfer did not complete within the timeframe of the request. You can identify the pending operations by looking for OperationStatus = 'InProgress'. You can check on the operation status at anytime within 30 days of the request by passing the TransactionToken to the GetInventoryOperationStatus API. More information about item transfer scenarios can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/inventory/?tabs=inventory-game-manager#transfer-inventory-items",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/inventory/transferinventoryitems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/TransferInventoryItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TransferInventoryItemsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Transfer the specified inventory items of an entity's container Id to another entity's container Id.",
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "InsufficientFunds",
          "ItemNotFound"
        ]
      }
    },
    "/Inventory/UpdateInventoryItems": {
      "post": {
        "operationId": "UpdateInventoryItems",
        "tags": [
          "Inventory"
        ],
        "description": "Update inventory items",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/economy/inventory/updateinventoryitems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UpdateInventoryItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateInventoryItemsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, entity identifier and container details, will update the entity's inventory items",
        "x-ms-docs-errors": [
          "DatabaseThroughputExceeded",
          "ItemNotFound"
        ]
      }
    }
  },
  "definitions": {
    "ApiErrorWrapper": {
      "description": "The basic wrapper around every failed API response",
      "type": "object",
      "properties": {
        "code": {
          "description": "Numerical HTTP code",
          "type": "integer"
        },
        "status": {
          "description": "String HTTP code",
          "type": "string"
        },
        "error": {
          "description": "Playfab error code",
          "type": "string"
        },
        "errorCode": {
          "description": "Numerical PlayFab error code",
          "type": "integer"
        },
        "errorMessage": {
          "description": "Description for the PlayFab errorCode",
          "type": "string"
        },
        "errorDetails": {
          "description": "Detailed description of individual issues with the request object",
          "type": "object"
        }
      },
      "required": [
        "code",
        "errorCode"
      ]
    },
    "AddInventoryItemsOperation": {
      "type": "object",
      "properties": {
        "Amount": {
          "description": "The amount to add to the current item amount.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "DurationInSeconds": {
          "description": "The duration to add to the current item expiration date.",
          "type": "number",
          "x-actualtype": "double"
        },
        "Item": {
          "$ref": "#/definitions/InventoryItemReference",
          "description": "The inventory item the operation applies to.",
          "type": "object",
          "x-isclass": true
        },
        "NewStackValues": {
          "$ref": "#/definitions/InitialValues",
          "description": "The values to apply to a stack newly created by this operation.",
          "type": "object",
          "x-isclass": true
        }
      }
    },
    "AddInventoryItemsRequest": {
      "description": "Given an entity type, entity identifier and container details, will add the specified inventory items.",
      "type": "object",
      "properties": {
        "Amount": {
          "description": "The amount to add for the current item.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "CollectionId": {
          "description": "The id of the entity's collection to perform this action on. (Default=\"default\"). The number of inventory collections is unlimited.",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "DurationInSeconds": {
          "description": "The duration to add to the current item expiration date.",
          "type": "number",
          "x-actualtype": "double"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ETag": {
          "description": "ETags are used for concurrency checking when updating resources. More information about using ETags can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/etags",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The Idempotency ID for this request. Idempotency IDs can be used to prevent operation replay in the medium term but will be garbage collected eventually.",
          "type": "string"
        },
        "Item": {
          "$ref": "#/definitions/InventoryItemReference",
          "description": "The inventory item the request applies to.",
          "type": "object",
          "x-isclass": true
        },
        "NewStackValues": {
          "$ref": "#/definitions/InitialValues",
          "description": "The values to apply to a stack newly created by this request.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Item": {
          "Id": "11111111-1111-1111-1111-111111111111"
        },
        "Amount": 3
      }
    },
    "AddInventoryItemsResponse": {
      "type": "object",
      "properties": {
        "ETag": {
          "description": "ETags are used for concurrency checking when updating resources. More information about using ETags can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/etags",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The idempotency id used in the request.",
          "type": "string"
        },
        "TransactionIds": {
          "description": "The ids of transactions that occurred as a result of the request.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "IdempotencyId": "idempotencyId",
        "TransactionIds": [
          "transactionId1",
          "transactionId2"
        ]
      }
    },
    "AlternateId": {
      "type": "object",
      "properties": {
        "Type": {
          "description": "Type of the alternate ID.",
          "type": "string"
        },
        "Value": {
          "description": "Value of the alternate ID.",
          "type": "string"
        }
      }
    },
    "CatalogAlternateId": {
      "type": "object",
      "properties": {
        "Type": {
          "description": "Type of the alternate ID.",
          "type": "string"
        },
        "Value": {
          "description": "Value of the alternate ID.",
          "type": "string"
        }
      }
    },
    "CatalogConfig": {
      "type": "object",
      "properties": {
        "AdminEntities": {
          "description": "A list of player entity keys that will have admin permissions. There is a maximum of 64 entities that can be added.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityKey"
          },
          "x-isclass": true
        },
        "Catalog": {
          "$ref": "#/definitions/CatalogSpecificConfig",
          "description": "The set of configuration that only applies to catalog items.",
          "type": "object",
          "x-isclass": true
        },
        "DeepLinkFormats": {
          "description": "A list of deep link formats. Up to 10 can be added.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeepLinkFormat"
          },
          "x-isclass": true
        },
        "DisplayPropertyIndexInfos": {
          "description": "A list of display properties to index. Up to 5 mappings can be added per Display Property Type. More info on display properties can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/content-types-tags-and-properties#displayproperties",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DisplayPropertyIndexInfo"
          },
          "x-isclass": true
        },
        "File": {
          "$ref": "#/definitions/FileConfig",
          "description": "The set of configuration that only applies to Files.",
          "type": "object",
          "x-isclass": true
        },
        "Image": {
          "$ref": "#/definitions/ImageConfig",
          "description": "The set of configuration that only applies to Images.",
          "type": "object",
          "x-isclass": true
        },
        "IsCatalogEnabled": {
          "description": "Flag defining whether catalog is enabled.",
          "type": "boolean"
        },
        "Platforms": {
          "description": "A list of Platforms that can be applied to catalog items. Each platform can have a maximum character length of 40 and up to 128 platforms can be listed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ReviewerEntities": {
          "description": "A set of player entity keys that are allowed to review content. There is a maximum of 128 entities that can be added.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityKey"
          },
          "x-isclass": true
        },
        "UserGeneratedContent": {
          "$ref": "#/definitions/UserGeneratedContentSpecificConfig",
          "description": "The set of configuration that only applies to user generated contents.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "IsCatalogEnabled"
      ]
    },
    "CatalogItem": {
      "type": "object",
      "properties": {
        "AlternateIds": {
          "description": "The alternate IDs associated with this item. An alternate ID can be set to 'FriendlyId' or any of the supported marketplace names.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogAlternateId"
          },
          "x-isclass": true
        },
        "Contents": {
          "description": "The set of content/files associated with this item. Up to 100 files can be added to an item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Content"
          },
          "x-isclass": true
        },
        "ContentType": {
          "description": "The client-defined type of the item.",
          "type": "string"
        },
        "CreationDate": {
          "description": "The date and time when this item was created.",
          "type": "string"
        },
        "CreatorEntity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The ID of the creator of this catalog item.",
          "type": "object",
          "x-isclass": true
        },
        "DeepLinks": {
          "description": "The set of platform specific deep links for this item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeepLink"
          },
          "x-isclass": true
        },
        "DefaultStackId": {
          "description": "The Stack Id that will be used as default for this item in Inventory when an explicit one is not provided. This DefaultStackId can be a static stack id or '{guid}', which will generate a unique stack id for the item. If null, Inventory's default stack id will be used.",
          "type": "string"
        },
        "Description": {
          "description": "A dictionary of localized descriptions. Key is language code and localized string is the value. The NEUTRAL locale is required. Descriptions have a 10000 character limit per country code.",
          "type": "object"
        },
        "DisplayProperties": {
          "description": "Game specific properties for display purposes. This is an arbitrary JSON blob. The Display Properties field has a 10000 byte limit per item.",
          "type": "object"
        },
        "DisplayVersion": {
          "description": "The user provided version of the item for display purposes. Maximum character length of 50.",
          "type": "string"
        },
        "EndDate": {
          "description": "The date of when the item will cease to be available. If not provided then the product will be available indefinitely.",
          "type": "string"
        },
        "ETag": {
          "description": "The current ETag value that can be used for optimistic concurrency in the If-None-Match header.",
          "type": "string"
        },
        "Id": {
          "description": "The unique ID of the item.",
          "type": "string"
        },
        "Images": {
          "description": "The images associated with this item. Images can be thumbnails or screenshots. Up to 100 images can be added to an item. Only .png, .jpg, .gif, and .bmp file types can be uploaded",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          },
          "x-isclass": true
        },
        "IsHidden": {
          "description": "Indicates if the item is hidden.",
          "type": "boolean"
        },
        "ItemReferences": {
          "description": "The item references associated with this item. For example, the items in a Bundle/Store/Subscription. Every item can have up to 50 item references.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogItemReference"
          },
          "x-isclass": true
        },
        "Keywords": {
          "$ref": "#/definitions/KeywordSet",
          "description": "A dictionary of localized keywords. Key is language code and localized list of keywords is the value. Keywords have a 50 character limit per keyword and up to 32 keywords can be added per country code.",
          "type": "object",
          "x-isclass": true
        },
        "LastModifiedDate": {
          "description": "The date and time this item was last updated.",
          "type": "string"
        },
        "Moderation": {
          "$ref": "#/definitions/ModerationState",
          "description": "The moderation state for this item.",
          "type": "object",
          "x-isclass": true
        },
        "Platforms": {
          "description": "The platforms supported by this item.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "PriceOptions": {
          "$ref": "#/definitions/CatalogPriceOptions",
          "description": "The prices the item can be purchased for.",
          "type": "object",
          "x-isclass": true
        },
        "Rating": {
          "$ref": "#/definitions/Rating",
          "description": "Rating summary for this item.",
          "type": "object",
          "x-isclass": true
        },
        "StartDate": {
          "description": "The date of when the item will be available. If not provided then the product will appear immediately.",
          "type": "string"
        },
        "StoreDetails": {
          "$ref": "#/definitions/StoreDetails",
          "description": "Optional details for stores items.",
          "type": "object",
          "x-isclass": true
        },
        "Tags": {
          "description": "The list of tags that are associated with this item. Up to 32 tags can be added to an item.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Title": {
          "description": "A dictionary of localized titles. Key is language code and localized string is the value. The NEUTRAL locale is required. Titles have a 512 character limit per country code.",
          "type": "object"
        },
        "Type": {
          "description": "The high-level type of the item. The following item types are supported: bundle, catalogItem, currency, store, ugc, subscription.",
          "type": "string"
        }
      }
    },
    "CatalogItemReference": {
      "type": "object",
      "properties": {
        "Amount": {
          "description": "The amount of the catalog item.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Id": {
          "description": "The unique ID of the catalog item.",
          "type": "string"
        },
        "PriceOptions": {
          "$ref": "#/definitions/CatalogPriceOptions",
          "description": "The prices the catalog item can be purchased for.",
          "type": "object",
          "x-isclass": true
        }
      }
    },
    "CatalogPrice": {
      "type": "object",
      "properties": {
        "Amounts": {
          "description": "The amounts of the catalog item price. Each price can have up to 15 item amounts.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogPriceAmount"
          },
          "x-isclass": true
        },
        "UnitAmount": {
          "description": "The per-unit amount this price can be used to purchase.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "UnitDurationInSeconds": {
          "description": "The per-unit duration this price can be used to purchase. The maximum duration is 100 years.",
          "type": "number",
          "x-actualtype": "double"
        }
      }
    },
    "CatalogPriceAmount": {
      "type": "object",
      "properties": {
        "Amount": {
          "description": "The amount of the price.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "ItemId": {
          "description": "The Item Id of the price.",
          "type": "string"
        }
      },
      "required": [
        "Amount"
      ]
    },
    "CatalogPriceAmountOverride": {
      "type": "object",
      "properties": {
        "FixedValue": {
          "description": "The exact value that should be utilized in the override.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "ItemId": {
          "description": "The id of the item this override should utilize.",
          "type": "string"
        },
        "Multiplier": {
          "description": "The multiplier that will be applied to the base Catalog value to determine what value should be utilized in the override.",
          "type": "number",
          "x-actualtype": "double"
        }
      }
    },
    "CatalogPriceOptions": {
      "type": "object",
      "properties": {
        "Prices": {
          "description": "Prices of the catalog item. An item can have up to 15 prices",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogPrice"
          },
          "x-isclass": true
        }
      }
    },
    "CatalogPriceOptionsOverride": {
      "type": "object",
      "properties": {
        "Prices": {
          "description": "The prices utilized in the override.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogPriceOverride"
          },
          "x-isclass": true
        }
      }
    },
    "CatalogPriceOverride": {
      "type": "object",
      "properties": {
        "Amounts": {
          "description": "The currency amounts utilized in the override for a singular price.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogPriceAmountOverride"
          },
          "x-isclass": true
        }
      }
    },
    "CatalogSpecificConfig": {
      "type": "object",
      "properties": {
        "ContentTypes": {
          "description": "The set of content types that will be used for validation. Each content type can have a maximum character length of 40 and up to 128 types can be listed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Tags": {
          "description": "The set of tags that will be used for validation. Each tag can have a maximum character length of 32 and up to 1024 tags can be listed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ConcernCategory": {
      "type": "string",
      "enum": [
        "None",
        "OffensiveContent",
        "ChildExploitation",
        "MalwareOrVirus",
        "PrivacyConcerns",
        "MisleadingApp",
        "PoorPerformance",
        "ReviewResponse",
        "SpamAdvertising",
        "Profanity"
      ]
    },
    "Content": {
      "type": "object",
      "properties": {
        "Id": {
          "description": "The content unique ID.",
          "type": "string"
        },
        "MaxClientVersion": {
          "description": "The maximum client version that this content is compatible with. Client Versions can be up to 3 segments separated by periods(.) and each segment can have a maximum value of 65535.",
          "type": "string"
        },
        "MinClientVersion": {
          "description": "The minimum client version that this content is compatible with. Client Versions can be up to 3 segments separated by periods(.) and each segment can have a maximum value of 65535.",
          "type": "string"
        },
        "Tags": {
          "description": "The list of tags that are associated with this content. Tags must be defined in the Catalog Config before being used in content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Type": {
          "description": "The client-defined type of the content. Content Types must be defined in the Catalog Config before being used.",
          "type": "string"
        },
        "Url": {
          "description": "The Azure CDN URL for retrieval of the catalog item binary content.",
          "type": "string"
        }
      }
    },
    "ContentFeed": {
      "type": "object",
      "properties": {}
    },
    "CountryCode": {
      "type": "string",
      "enum": [
        "AF",
        "AX",
        "AL",
        "DZ",
        "AS",
        "AD",
        "AO",
        "AI",
        "AQ",
        "AG",
        "AR",
        "AM",
        "AW",
        "AU",
        "AT",
        "AZ",
        "BS",
        "BH",
        "BD",
        "BB",
        "BY",
        "BE",
        "BZ",
        "BJ",
        "BM",
        "BT",
        "BO",
        "BQ",
        "BA",
        "BW",
        "BV",
        "BR",
        "IO",
        "BN",
        "BG",
        "BF",
        "BI",
        "KH",
        "CM",
        "CA",
        "CV",
        "KY",
        "CF",
        "TD",
        "CL",
        "CN",
        "CX",
        "CC",
        "CO",
        "KM",
        "CG",
        "CD",
        "CK",
        "CR",
        "CI",
        "HR",
        "CU",
        "CW",
        "CY",
        "CZ",
        "DK",
        "DJ",
        "DM",
        "DO",
        "EC",
        "EG",
        "SV",
        "GQ",
        "ER",
        "EE",
        "ET",
        "FK",
        "FO",
        "FJ",
        "FI",
        "FR",
        "GF",
        "PF",
        "TF",
        "GA",
        "GM",
        "GE",
        "DE",
        "GH",
        "GI",
        "GR",
        "GL",
        "GD",
        "GP",
        "GU",
        "GT",
        "GG",
        "GN",
        "GW",
        "GY",
        "HT",
        "HM",
        "VA",
        "HN",
        "HK",
        "HU",
        "IS",
        "IN",
        "ID",
        "IR",
        "IQ",
        "IE",
        "IM",
        "IL",
        "IT",
        "JM",
        "JP",
        "JE",
        "JO",
        "KZ",
        "KE",
        "KI",
        "KP",
        "KR",
        "KW",
        "KG",
        "LA",
        "LV",
        "LB",
        "LS",
        "LR",
        "LY",
        "LI",
        "LT",
        "LU",
        "MO",
        "MK",
        "MG",
        "MW",
        "MY",
        "MV",
        "ML",
        "MT",
        "MH",
        "MQ",
        "MR",
        "MU",
        "YT",
        "MX",
        "FM",
        "MD",
        "MC",
        "MN",
        "ME",
        "MS",
        "MA",
        "MZ",
        "MM",
        "NA",
        "NR",
        "NP",
        "NL",
        "NC",
        "NZ",
        "NI",
        "NE",
        "NG",
        "NU",
        "NF",
        "MP",
        "NO",
        "OM",
        "PK",
        "PW",
        "PS",
        "PA",
        "PG",
        "PY",
        "PE",
        "PH",
        "PN",
        "PL",
        "PT",
        "PR",
        "QA",
        "RE",
        "RO",
        "RU",
        "RW",
        "BL",
        "SH",
        "KN",
        "LC",
        "MF",
        "PM",
        "VC",
        "WS",
        "SM",
        "ST",
        "SA",
        "SN",
        "RS",
        "SC",
        "SL",
        "SG",
        "SX",
        "SK",
        "SI",
        "SB",
        "SO",
        "ZA",
        "GS",
        "SS",
        "ES",
        "LK",
        "SD",
        "SR",
        "SJ",
        "SZ",
        "SE",
        "CH",
        "SY",
        "TW",
        "TJ",
        "TZ",
        "TH",
        "TL",
        "TG",
        "TK",
        "TO",
        "TT",
        "TN",
        "TR",
        "TM",
        "TC",
        "TV",
        "UG",
        "UA",
        "AE",
        "GB",
        "US",
        "UM",
        "UY",
        "UZ",
        "VU",
        "VE",
        "VN",
        "VG",
        "VI",
        "WF",
        "EH",
        "YE",
        "ZM",
        "ZW",
        "Unknown"
      ]
    },
    "CreateDraftItemRequest": {
      "description": "The item will not be published to the public catalog until the PublishItem API is called for the item.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Item": {
          "$ref": "#/definitions/CatalogItem",
          "description": "Metadata describing the new catalog item to be created.",
          "type": "object",
          "x-isclass": true
        },
        "Publish": {
          "description": "Whether the item should be published immediately. This value is optional, defaults to false.",
          "type": "boolean"
        }
      },
      "required": [
        "Publish"
      ],
      "example": {
        "Item": {
          "Type": "ugc",
          "Title": {
            "NEUTRAL": "Neutral title",
            "en-US": "US English title"
          },
          "Description": {
            "NEUTRAL": "Neutral description",
            "en-US": "US English description"
          },
          "Keywords": {
            "NEUTRAL": {
              "Values": [
                "Keyword_1",
                "Keyword_2"
              ]
            }
          },
          "ContentType": "example item",
          "CreatorEntity": {
            "Id": "someId",
            "Type": "title_player_account",
            "TypeString": "title_player_account"
          },
          "IsHidden": false,
          "Tags": [
            "pirates",
            "holiday"
          ],
          "DisplayVersion": "1.0.0",
          "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
          "Contents": [
            {
              "Id": "00000000-0000-0000-0000-000000000001",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
              "MaxClientVersion": "2.4.1",
              "MinClientVersion": "2.0.0"
            }
          ],
          "Images": [
            {
              "Id": "00000000-0000-0000-0000-000000000003",
              "Type": "Thumbnail",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
            }
          ],
          "DisplayProperties": {
            "mapDetails": {
              "mapType": "desertIsland",
              "gameMode": "capture",
              "maxPlayers": 16
            },
            "averageMatchLengthInSeconds": 947
          },
          "DefaultStackId": "Static_Default_Stack_Id"
        }
      }
    },
    "CreateDraftItemResponse": {
      "type": "object",
      "properties": {
        "Item": {
          "$ref": "#/definitions/CatalogItem",
          "description": "Updated metadata describing the catalog item just created.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Item": {
          "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
          "Type": "ugc",
          "Title": {
            "NEUTRAL": "Neutral title",
            "en-US": "US English title"
          },
          "Description": {
            "NEUTRAL": "Neutral description",
            "en-US": "US English description"
          },
          "Keywords": {
            "NEUTRAL": {
              "Values": [
                "Keyword_1",
                "Keyword_2"
              ]
            }
          },
          "ContentType": "example item",
          "CreatorEntity": {
            "Id": "someId",
            "Type": "title_player_account",
            "TypeString": "title_player_account"
          },
          "IsHidden": false,
          "Tags": [
            "pirates",
            "holiday"
          ],
          "DisplayVersion": "1.0.0",
          "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
          "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
          "Contents": [
            {
              "Id": "00000000-0000-0000-0000-000000000001",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
              "MaxClientVersion": "2.4.1",
              "MinClientVersion": "2.0.0"
            }
          ],
          "Images": [
            {
              "Id": "00000000-0000-0000-0000-000000000003",
              "Type": "Thumbnail",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
            }
          ],
          "DisplayProperties": {
            "mapDetails": {
              "mapType": "desertIsland",
              "gameMode": "capture",
              "maxPlayers": 16
            },
            "averageMatchLengthInSeconds": 947
          },
          "ETag": "opaqueString",
          "DefaultStackId": "Static_Default_Stack_Id"
        }
      }
    },
    "CreateUploadUrlsRequest": {
      "description": "Upload URLs point to Azure Blobs; clients must follow the Microsoft Azure Storage Blob Service REST API pattern for uploading content. The response contains upload URLs and IDs for each file. The IDs and URLs returned must be added to the item metadata and committed using the CreateDraftItem or UpdateDraftItem Item APIs.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Files": {
          "description": "Description of the files to be uploaded by the client.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UploadInfo"
          },
          "x-isclass": true
        }
      },
      "example": {
        "Files": [
          {
            "FileName": "textures.zip"
          },
          {
            "FileName": "sprites.png"
          }
        ]
      }
    },
    "CreateUploadUrlsResponse": {
      "type": "object",
      "properties": {
        "UploadUrls": {
          "description": "List of URLs metadata for the files to be uploaded by the client.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UploadUrlMetadata"
          },
          "x-isclass": true
        }
      },
      "example": {
        "UploadUrls": [
          {
            "Id": "11111111-1111-1111-1111-111111111111",
            "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/11111111-1111-1111-1111-111111111111/textures.zip",
            "FileName": "textures.zip"
          },
          {
            "Id": "22222222-2222-2222-2222-222222222222",
            "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/22222222-2222-2222-2222-222222222222/sprites.png",
            "FileName": "sprites.png"
          }
        ]
      }
    },
    "DeepLink": {
      "type": "object",
      "properties": {
        "Platform": {
          "description": "Target platform for this deep link.",
          "type": "string"
        },
        "Url": {
          "description": "The deep link for this platform.",
          "type": "string"
        }
      }
    },
    "DeepLinkFormat": {
      "type": "object",
      "properties": {
        "Format": {
          "description": "The format of the deep link to return. The format should contain '{id}' to represent where the item ID should be placed.",
          "type": "string"
        },
        "Platform": {
          "description": "The target platform for the deep link.",
          "type": "string"
        }
      }
    },
    "DeleteEntityItemReviewsRequest": {
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Entity": {
          "Id": "ABC123",
          "Type": "title_player_account",
          "TypeString": "title_player_account"
        }
      }
    },
    "DeleteEntityItemReviewsResponse": {
      "type": "object",
      "properties": {},
      "example": {}
    },
    "DeleteInventoryCollectionRequest": {
      "description": "Delete an Inventory Collection by the specified Id for an Entity",
      "type": "object",
      "properties": {
        "CollectionId": {
          "description": "The inventory collection id the request applies to.",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity the request is about. Set to the caller by default.",
          "type": "object",
          "x-isclass": true
        },
        "ETag": {
          "description": "ETags are used for concurrency checking when updating resources. More information about using ETags can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/etags",
          "type": "string"
        }
      },
      "example": {
        "CollectionId": "backpack"
      }
    },
    "DeleteInventoryCollectionResponse": {
      "type": "object",
      "properties": {},
      "example": {}
    },
    "DeleteInventoryItemsOperation": {
      "type": "object",
      "properties": {
        "Item": {
          "$ref": "#/definitions/InventoryItemReference",
          "description": "The inventory item the operation applies to.",
          "type": "object",
          "x-isclass": true
        }
      }
    },
    "DeleteInventoryItemsRequest": {
      "description": "Given an entity type, entity identifier and container details, will delete the entity's inventory items",
      "type": "object",
      "properties": {
        "CollectionId": {
          "description": "The id of the entity's collection to perform this action on. (Default=\"default\"). The number of inventory collections is unlimited.",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ETag": {
          "description": "ETags are used for concurrency checking when updating resources. More information about using ETags can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/etags",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The Idempotency ID for this request. Idempotency IDs can be used to prevent operation replay in the medium term but will be garbage collected eventually.",
          "type": "string"
        },
        "Item": {
          "$ref": "#/definitions/InventoryItemReference",
          "description": "The inventory item the request applies to.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Item": {
          "Id": "11111111-1111-1111-1111-111111111111"
        }
      }
    },
    "DeleteInventoryItemsResponse": {
      "type": "object",
      "properties": {
        "ETag": {
          "description": "ETags are used for concurrency checking when updating resources.",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The idempotency id used in the request.",
          "type": "string"
        },
        "TransactionIds": {
          "description": "The ids of transactions that occurred as a result of the request.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "IdempotencyId": "idempotencyId",
        "TransactionIds": [
          "transactionId1",
          "transactionId2"
        ]
      }
    },
    "DeleteItemRequest": {
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "description": "An alternate ID associated with this item.",
          "type": "object",
          "x-isclass": true
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Id": {
          "description": "The unique ID of the item.",
          "type": "string"
        }
      },
      "example": {
        "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      }
    },
    "DeleteItemResponse": {
      "type": "object",
      "properties": {},
      "example": {}
    },
    "DisplayPropertyIndexInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The property name in the 'DisplayProperties' property to be indexed.",
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/DisplayPropertyType",
          "description": "The type of the property to be indexed.",
          "type": "string",
          "x-isenum": true
        }
      }
    },
    "DisplayPropertyType": {
      "type": "string",
      "enum": [
        "None",
        "QueryDateTime",
        "QueryDouble",
        "QueryString",
        "SearchString"
      ]
    },
    "EntityKey": {
      "description": "Combined entity type and ID structure which uniquely identifies a single entity.",
      "type": "object",
      "properties": {
        "Id": {
          "description": "Unique ID of the entity.",
          "type": "string"
        },
        "Type": {
          "description": "Entity type. See https://docs.microsoft.com/gaming/playfab/features/data/entities/available-built-in-entity-types",
          "type": "string"
        }
      },
      "required": [
        "Id"
      ]
    },
    "ExecuteInventoryOperationsRequest": {
      "description": "Execute a list of Inventory Operations for an Entity",
      "type": "object",
      "properties": {
        "CollectionId": {
          "description": "The id of the entity's collection to perform this action on. (Default=\"default\"). The number of inventory collections is unlimited.",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ETag": {
          "description": "ETags are used for concurrency checking when updating resources. More information about using ETags can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/etags",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The Idempotency ID for this request. Idempotency IDs can be used to prevent operation replay in the medium term but will be garbage collected eventually.",
          "type": "string"
        },
        "Operations": {
          "description": "The operations to run transactionally. The operations will be executed in-order sequentially and will succeed or fail as a batch. Up to 10 operations can be added.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryOperation"
          },
          "x-isclass": true
        }
      },
      "example": {
        "Operations": [
          {
            "Add": {
              "Item": {
                "Id": "11111111-1111-1111-1111-111111111111"
              },
              "Amount": 3
            }
          },
          {
            "Subtract": {
              "Item": {
                "Id": "11111111-1111-1111-1111-111111111111"
              },
              "Amount": 3
            }
          }
        ]
      }
    },
    "ExecuteInventoryOperationsResponse": {
      "type": "object",
      "properties": {
        "ETag": {
          "description": "ETags are used for concurrency checking when updating resources. More information about using ETags can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/etags",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The idempotency id used in the request.",
          "type": "string"
        },
        "TransactionIds": {
          "description": "The ids of the transactions that occurred as a result of the request.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "IdempotencyId": "idempotencyId",
        "TransactionIds": [
          "transactionId1",
          "transactionId2"
        ]
      }
    },
    "FileConfig": {
      "type": "object",
      "properties": {
        "ContentTypes": {
          "description": "The set of content types that will be used for validation. Each content type can have a maximum character length of 40 and up to 128 types can be listed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Tags": {
          "description": "The set of tags that will be used for validation. Each tag can have a maximum character length of 32 and up to 1024 tags can be listed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FilterOptions": {
      "type": "object",
      "properties": {
        "Filter": {
          "description": "The OData filter utilized. Mutually exclusive with 'IncludeAllItems'. More info about Filter Complexity limits can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/search#limits",
          "type": "string"
        },
        "IncludeAllItems": {
          "description": "The flag that overrides the filter and allows for returning all catalog items. Mutually exclusive with 'Filter'.",
          "type": "boolean"
        }
      }
    },
    "GetCatalogConfigRequest": {
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        }
      },
      "example": {}
    },
    "GetCatalogConfigResponse": {
      "type": "object",
      "properties": {
        "Config": {
          "$ref": "#/definitions/CatalogConfig",
          "description": "The catalog configuration.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Config": {
          "IsCatalogEnabled": true,
          "AdminEntities": [
            {
              "Id": "ABC123",
              "Type": "title_player_account",
              "TypeString": "title_player_account"
            }
          ],
          "DisplayPropertyIndexInfos": [
            {
              "Name": "damage",
              "Type": "QueryDouble"
            }
          ],
          "ReviewerEntities": [
            {
              "Id": "ABC123",
              "Type": "title_player_account",
              "TypeString": "title_player_account"
            }
          ],
          "UserGeneratedContent": {
            "ContentTypes": [
              "skin",
              "map",
              "example item"
            ],
            "Tags": [
              "pirate",
              "holiday"
            ]
          }
        }
      }
    },
    "GetDraftItemRequest": {
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "description": "An alternate ID associated with this item.",
          "type": "object",
          "x-isclass": true
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Id": {
          "description": "The unique ID of the item.",
          "type": "string"
        }
      },
      "example": {
        "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      }
    },
    "GetDraftItemResponse": {
      "type": "object",
      "properties": {
        "Item": {
          "$ref": "#/definitions/CatalogItem",
          "description": "Full metadata of the catalog item requested.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Item": {
          "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
          "Type": "ugc",
          "Title": {
            "NEUTRAL": "Neutral title",
            "en-US": "US English title"
          },
          "Description": {
            "NEUTRAL": "Neutral description",
            "en-US": "US English description"
          },
          "Keywords": {
            "NEUTRAL": {
              "Values": [
                "Keyword_1",
                "Keyword_2"
              ]
            }
          },
          "ContentType": "example item",
          "CreatorEntity": {
            "Id": "someId",
            "Type": "title_player_account",
            "TypeString": "title_player_account"
          },
          "IsHidden": false,
          "Tags": [
            "pirates",
            "holiday"
          ],
          "DisplayVersion": "1.0.0",
          "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
          "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
          "Contents": [
            {
              "Id": "00000000-0000-0000-0000-000000000001",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
              "MaxClientVersion": "2.4.1",
              "MinClientVersion": "2.0.0"
            }
          ],
          "Images": [
            {
              "Id": "00000000-0000-0000-0000-000000000003",
              "Type": "Thumbnail",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
            }
          ],
          "DisplayProperties": {
            "mapDetails": {
              "mapType": "desertIsland",
              "gameMode": "capture",
              "maxPlayers": 16
            },
            "averageMatchLengthInSeconds": 947
          },
          "ETag": "opaqueString",
          "DefaultStackId": "Static_Default_Stack_Id"
        }
      }
    },
    "GetDraftItemsRequest": {
      "type": "object",
      "properties": {
        "AlternateIds": {
          "description": "List of item alternate IDs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogAlternateId"
          },
          "x-isclass": true
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Ids": {
          "description": "List of Item Ids.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "Ids": [
          "dddddddd-dddd-dddd-dddd-dddddddddddd",
          "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"
        ]
      }
    },
    "GetDraftItemsResponse": {
      "type": "object",
      "properties": {
        "ContinuationToken": {
          "description": "An opaque token used to retrieve the next page of items, if any are available.",
          "type": "string"
        },
        "Items": {
          "description": "A set of items created by the entity.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogItem"
          },
          "x-isclass": true
        }
      },
      "example": {
        "Items": [
          {
            "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
            "Type": "ugc",
            "Title": {
              "NEUTRAL": "Neutral title",
              "en-US": "US English title"
            },
            "Description": {
              "NEUTRAL": "Neutral description",
              "en-US": "US English description"
            },
            "Keywords": {
              "NEUTRAL": {
                "Values": [
                  "Keyword_1",
                  "Keyword_2"
                ]
              }
            },
            "ContentType": "example item",
            "CreatorEntity": {
              "Id": "someId",
              "Type": "title_player_account",
              "TypeString": "title_player_account"
            },
            "IsHidden": false,
            "Tags": [
              "pirates",
              "holiday"
            ],
            "DisplayVersion": "1.0.0",
            "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
            "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
            "Contents": [
              {
                "Id": "00000000-0000-0000-0000-000000000001",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                "MaxClientVersion": "2.4.1",
                "MinClientVersion": "2.0.0"
              }
            ],
            "Images": [
              {
                "Id": "00000000-0000-0000-0000-000000000003",
                "Type": "Thumbnail",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
              }
            ],
            "DisplayProperties": {
              "mapDetails": {
                "mapType": "desertIsland",
                "gameMode": "capture",
                "maxPlayers": 16
              },
              "averageMatchLengthInSeconds": 947
            },
            "ETag": "opaqueString",
            "DefaultStackId": "Static_Default_Stack_Id"
          },
          {
            "Id": "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee",
            "Type": "ugc",
            "Title": {
              "NEUTRAL": "Neutral title",
              "en-US": "US English title"
            },
            "Description": {
              "NEUTRAL": "Neutral description",
              "en-US": "US English description"
            },
            "Keywords": {
              "NEUTRAL": {
                "Values": [
                  "Keyword_1",
                  "Keyword_2"
                ]
              }
            },
            "ContentType": "example item",
            "CreatorEntity": {
              "Id": "someId",
              "Type": "title_player_account",
              "TypeString": "title_player_account"
            },
            "IsHidden": false,
            "Tags": [
              "pirates",
              "holiday"
            ],
            "DisplayVersion": "1.0.0",
            "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
            "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
            "Contents": [
              {
                "Id": "00000000-0000-0000-0000-000000000001",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                "MaxClientVersion": "2.4.1",
                "MinClientVersion": "2.0.0"
              }
            ],
            "Images": [
              {
                "Id": "00000000-0000-0000-0000-000000000003",
                "Type": "Thumbnail",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
              }
            ],
            "DisplayProperties": {
              "mapDetails": {
                "mapType": "desertIsland",
                "gameMode": "capture",
                "maxPlayers": 16
              },
              "averageMatchLengthInSeconds": 947
            },
            "ETag": "opaqueString",
            "DefaultStackId": "Static_Default_Stack_Id"
          }
        ],
        "ContinuationToken": "+RID:IQkbAIvkRQD9oQIAAAAAAA==#RT:1#TRC:10#FPC:AgEKHAoKAPEhAOAhQP8DWIAMAgB8rRACAJeAHAIA0r0="
      }
    },
    "GetEntityDraftItemsRequest": {
      "type": "object",
      "properties": {
        "ContinuationToken": {
          "description": "An opaque token used to retrieve the next page of items created by the caller, if any are available. Should be null on initial request.",
          "type": "string"
        },
        "Count": {
          "description": "Number of items to retrieve. This value is optional. Default value is 10.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Filter": {
          "description": "OData Filter to refine the items returned. CatalogItem properties 'type' can be used in the filter. For example: \"type eq 'ugc'\"",
          "type": "string"
        }
      },
      "required": [
        "Count"
      ],
      "example": {
        "Count": 2,
        "Entity": {
          "Id": "someId",
          "Type": "title_player_account",
          "TypeString": "title_player_account"
        }
      }
    },
    "GetEntityDraftItemsResponse": {
      "type": "object",
      "properties": {
        "ContinuationToken": {
          "description": "An opaque token used to retrieve the next page of items, if any are available.",
          "type": "string"
        },
        "Items": {
          "description": "A set of items created by the entity.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogItem"
          },
          "x-isclass": true
        }
      },
      "example": {
        "Items": [
          {
            "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
            "Type": "ugc",
            "Title": {
              "NEUTRAL": "Neutral title",
              "en-US": "US English title"
            },
            "Description": {
              "NEUTRAL": "Neutral description",
              "en-US": "US English description"
            },
            "Keywords": {
              "NEUTRAL": {
                "Values": [
                  "Keyword_1",
                  "Keyword_2"
                ]
              }
            },
            "ContentType": "example item",
            "CreatorEntity": {
              "Id": "someId",
              "Type": "title_player_account",
              "TypeString": "title_player_account"
            },
            "IsHidden": false,
            "Tags": [
              "pirates",
              "holiday"
            ],
            "DisplayVersion": "1.0.0",
            "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
            "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
            "Contents": [
              {
                "Id": "00000000-0000-0000-0000-000000000001",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                "MaxClientVersion": "2.4.1",
                "MinClientVersion": "2.0.0"
              }
            ],
            "Images": [
              {
                "Id": "00000000-0000-0000-0000-000000000003",
                "Type": "Thumbnail",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
              }
            ],
            "DisplayProperties": {
              "mapDetails": {
                "mapType": "desertIsland",
                "gameMode": "capture",
                "maxPlayers": 16
              },
              "averageMatchLengthInSeconds": 947
            },
            "ETag": "opaqueString",
            "DefaultStackId": "Static_Default_Stack_Id"
          },
          {
            "Id": "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee",
            "Type": "ugc",
            "Title": {
              "NEUTRAL": "Neutral title",
              "en-US": "US English title"
            },
            "Description": {
              "NEUTRAL": "Neutral description",
              "en-US": "US English description"
            },
            "Keywords": {
              "NEUTRAL": {
                "Values": [
                  "Keyword_1",
                  "Keyword_2"
                ]
              }
            },
            "ContentType": "example item",
            "CreatorEntity": {
              "Id": "someId",
              "Type": "title_player_account",
              "TypeString": "title_player_account"
            },
            "IsHidden": false,
            "Tags": [
              "pirates",
              "holiday"
            ],
            "DisplayVersion": "1.0.0",
            "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
            "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
            "Contents": [
              {
                "Id": "00000000-0000-0000-0000-000000000001",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                "MaxClientVersion": "2.4.1",
                "MinClientVersion": "2.0.0"
              }
            ],
            "Images": [
              {
                "Id": "00000000-0000-0000-0000-000000000003",
                "Type": "Thumbnail",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
              }
            ],
            "DisplayProperties": {
              "mapDetails": {
                "mapType": "desertIsland",
                "gameMode": "capture",
                "maxPlayers": 16
              },
              "averageMatchLengthInSeconds": 947
            },
            "ETag": "opaqueString",
            "DefaultStackId": "Static_Default_Stack_Id"
          }
        ],
        "ContinuationToken": "+RID:IQkbAIvkRQD9oQIAAAAAAA==#RT:1#TRC:10#FPC:AgEKHAoKAPEhAOAhQP8DWIAMAgB8rRACAJeAHAIA0r0="
      }
    },
    "GetEntityItemReviewRequest": {
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "description": "An alternate ID associated with this item.",
          "type": "object",
          "x-isclass": true
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Id": {
          "description": "The unique ID of the item.",
          "type": "string"
        }
      },
      "example": {
        "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      }
    },
    "GetEntityItemReviewResponse": {
      "type": "object",
      "properties": {
        "Review": {
          "$ref": "#/definitions/Review",
          "description": "The review the entity submitted for the requested item.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Review": {
          "ReviewId": "372f84cd-b45b-48a7-9549-2c09a6c12104",
          "ItemId": "dddddddd-dddd-dddd-dddd-dddddddddddd",
          "ReviewerEntity": {
            "Id": "ABCD1234",
            "Type": "title_player_account",
            "TypeString": "title_player_account"
          },
          "ReviewerId": "title_player_account!ABCD1234",
          "ItemVersion": "2.1.4",
          "Title": "Best game ever",
          "ReviewText": "I play this game every day. It's so much fun!",
          "Rating": 3,
          "IsInstalled": true,
          "Locale": "en-us",
          "HelpfulPositive": 11,
          "HelpfulNegative": 17,
          "Submitted": "2018-08-17T22:32:10.4729879+00:00"
        }
      }
    },
    "GetInventoryCollectionIdsRequest": {
      "description": "Get a list of Inventory Collection Ids for the specified Entity",
      "type": "object",
      "properties": {
        "ContinuationToken": {
          "description": "An opaque token used to retrieve the next page of collection ids, if any are available.",
          "type": "string"
        },
        "Count": {
          "description": "Number of items to retrieve. This value is optional. The default value is 10",
          "type": "number",
          "x-actualtype": "int32"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity the request is about. Set to the caller by default.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Count"
      ],
      "example": {
        "Count": 5
      }
    },
    "GetInventoryCollectionIdsResponse": {
      "type": "object",
      "properties": {
        "CollectionIds": {
          "description": "The requested inventory collection ids.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ContinuationToken": {
          "description": "An opaque token used to retrieve the next page of collection ids, if any are available.",
          "type": "string"
        }
      },
      "example": {
        "CollectionIds": [
          "default",
          "backpack"
        ]
      }
    },
    "GetInventoryItemsRequest": {
      "description": "Given an entity type, entity identifier and container details, will get the entity's inventory items. ",
      "type": "object",
      "properties": {
        "CollectionId": {
          "description": "The id of the entity's collection to perform this action on. (Default=\"default\")",
          "type": "string"
        },
        "ContinuationToken": {
          "description": "An opaque token used to retrieve the next page of items in the inventory, if any are available. Should be null on initial request.",
          "type": "string"
        },
        "Count": {
          "description": "Number of items to retrieve. This value is optional. Maximum page size is 50. The default value is 10",
          "type": "number",
          "x-actualtype": "int32"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Filter": {
          "description": "OData Filter to refine the items returned. InventoryItem properties 'type', 'id', and 'stackId' can be used in the filter. For example: \"type eq 'currency'\"",
          "type": "string"
        }
      },
      "required": [
        "Count"
      ],
      "example": {
        "Count": 5
      }
    },
    "GetInventoryItemsResponse": {
      "type": "object",
      "properties": {
        "ContinuationToken": {
          "description": "An opaque token used to retrieve the next page of items, if any are available.",
          "type": "string"
        },
        "ETag": {
          "description": "ETags are used for concurrency checking when updating resources. More information about using ETags can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/etags",
          "type": "string"
        },
        "Items": {
          "description": "The requested inventory items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryItem"
          },
          "x-isclass": true
        }
      },
      "example": {
        "Items": [
          {
            "Id": "11111111-1111-1111-1111-111111111111",
            "StackId": "default",
            "Amount": 5,
            "Type": "catalogItem"
          },
          {
            "Id": "22222222-2222-2222-2222-222222222222",
            "StackId": "default",
            "Amount": 5,
            "Type": "catalogItem"
          }
        ]
      }
    },
    "GetItemContainersRequest": {
      "description": "Given an item, return a set of bundles and stores containing the item.",
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "description": "An alternate ID associated with this item.",
          "type": "object",
          "x-isclass": true
        },
        "ContinuationToken": {
          "description": "An opaque token used to retrieve the next page of items in the inventory, if any are available. Should be null on initial request.",
          "type": "string"
        },
        "Count": {
          "description": "Number of items to retrieve. This value is optional. Default value is 10.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Id": {
          "description": "The unique ID of the item.",
          "type": "string"
        }
      },
      "required": [
        "Count"
      ],
      "example": {
        "Count": 5,
        "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      }
    },
    "GetItemContainersResponse": {
      "type": "object",
      "properties": {
        "Containers": {
          "description": "List of Bundles and Stores containing the requested items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogItem"
          },
          "x-isclass": true
        },
        "ContinuationToken": {
          "description": "An opaque token used to retrieve the next page of items, if any are available.",
          "type": "string"
        }
      },
      "example": {
        "Containers": [
          {
            "Id": "11111111-1111-1111-1111-111111111111",
            "Type": "bundle",
            "Title": {
              "NEUTRAL": "Neutral title",
              "en-US": "US English title"
            },
            "Description": {
              "NEUTRAL": "Neutral description",
              "en-US": "US English description"
            },
            "ContentType": "example item",
            "CreatorEntity": {
              "Id": "someId",
              "Type": "title_player_account",
              "TypeString": "title_player_account"
            },
            "Tags": [
              "pirates",
              "holiday"
            ],
            "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
            "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
            "Contents": [
              {
                "Id": "00000000-0000-0000-0000-000000000001",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                "MaxClientVersion": "2.4.1",
                "MinClientVersion": "2.0.0"
              }
            ],
            "Images": [
              {
                "Id": "00000000-0000-0000-0000-000000000003",
                "Type": "Thumbnail",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
              }
            ],
            "ItemReferences": [
              {
                "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
                "Amount": 1
              }
            ],
            "PriceOptions": {
              "Prices": [
                {
                  "Amounts": [
                    {
                      "ItemId": "cccccccc-cccc-cccc-cccc-cccccccccccc",
                      "Amount": 3
                    }
                  ]
                }
              ]
            },
            "DisplayProperties": {
              "mapDetails": {
                "mapType": "desertIsland",
                "gameMode": "capture",
                "maxPlayers": 16
              },
              "averageMatchLengthInSeconds": 947
            },
            "DefaultStackId": "Static_Default_Stack_Id"
          },
          {
            "Id": "22222222-2222-2222-2222-222222222222",
            "Type": "store",
            "Title": {
              "NEUTRAL": "Neutral title",
              "en-US": "US English title"
            },
            "Description": {
              "NEUTRAL": "Neutral description",
              "en-US": "US English description"
            },
            "ContentType": "example item",
            "CreatorEntity": {
              "Id": "someId",
              "Type": "title_player_account",
              "TypeString": "title_player_account"
            },
            "Tags": [
              "pirates",
              "holiday"
            ],
            "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
            "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
            "Contents": [
              {
                "Id": "00000000-0000-0000-0000-000000000001",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                "MaxClientVersion": "2.4.1",
                "MinClientVersion": "2.0.0"
              }
            ],
            "Images": [
              {
                "Id": "00000000-0000-0000-0000-000000000003",
                "Type": "Thumbnail",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
              }
            ],
            "ItemReferences": [
              {
                "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
                "Amount": 1
              }
            ],
            "PriceOptions": {
              "Prices": [
                {
                  "Amounts": [
                    {
                      "ItemId": "cccccccc-cccc-cccc-cccc-cccccccccccc",
                      "Amount": 3
                    }
                  ]
                }
              ]
            },
            "DisplayProperties": {
              "mapDetails": {
                "mapType": "desertIsland",
                "gameMode": "capture",
                "maxPlayers": 16
              },
              "averageMatchLengthInSeconds": 947
            },
            "DefaultStackId": "Static_Default_Stack_Id"
          }
        ]
      }
    },
    "GetItemModerationStateRequest": {
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "description": "An alternate ID associated with this item.",
          "type": "object",
          "x-isclass": true
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Id": {
          "description": "The unique ID of the item.",
          "type": "string"
        }
      },
      "example": {
        "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      }
    },
    "GetItemModerationStateResponse": {
      "type": "object",
      "properties": {
        "State": {
          "$ref": "#/definitions/ModerationState",
          "description": "The current moderation state for the requested item.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "State": {
          "Status": "AwaitingModeration",
          "Reason": "User reports over threshold"
        }
      }
    },
    "GetItemPublishStatusRequest": {
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "description": "An alternate ID associated with this item.",
          "type": "object",
          "x-isclass": true
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Id": {
          "description": "The unique ID of the item.",
          "type": "string"
        }
      },
      "example": {
        "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      }
    },
    "GetItemPublishStatusResponse": {
      "type": "object",
      "properties": {
        "Result": {
          "$ref": "#/definitions/PublishResult",
          "description": "High level status of the published item.",
          "type": "string",
          "x-isenum": true
        },
        "StatusMessage": {
          "description": "Descriptive message about the current status of the publish.",
          "type": "string"
        }
      },
      "example": {
        "Result": "Pending",
        "StatusMessage": "publishing"
      }
    },
    "GetItemRequest": {
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "description": "An alternate ID associated with this item.",
          "type": "object",
          "x-isclass": true
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Id": {
          "description": "The unique ID of the item.",
          "type": "string"
        }
      },
      "example": {
        "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      }
    },
    "GetItemResponse": {
      "description": "Get item result.",
      "type": "object",
      "properties": {
        "Item": {
          "$ref": "#/definitions/CatalogItem",
          "description": "The item result.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Item": {
          "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
          "Type": "ugc",
          "Title": {
            "NEUTRAL": "Neutral title",
            "en-US": "US English title"
          },
          "Description": {
            "NEUTRAL": "Neutral description",
            "en-US": "US English description"
          },
          "Keywords": {
            "NEUTRAL": {
              "Values": [
                "Keyword_1",
                "Keyword_2"
              ]
            }
          },
          "ContentType": "example item",
          "CreatorEntity": {
            "Id": "someId",
            "Type": "title_player_account",
            "TypeString": "title_player_account"
          },
          "IsHidden": false,
          "Tags": [
            "pirates",
            "holiday"
          ],
          "DisplayVersion": "1.0.0",
          "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
          "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
          "Contents": [
            {
              "Id": "00000000-0000-0000-0000-000000000001",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
              "MaxClientVersion": "2.4.1",
              "MinClientVersion": "2.0.0"
            }
          ],
          "Images": [
            {
              "Id": "00000000-0000-0000-0000-000000000003",
              "Type": "Thumbnail",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
            }
          ],
          "DisplayProperties": {
            "mapDetails": {
              "mapType": "desertIsland",
              "gameMode": "capture",
              "maxPlayers": 16
            },
            "averageMatchLengthInSeconds": 947
          },
          "ETag": "opaqueString",
          "DefaultStackId": "Static_Default_Stack_Id"
        }
      }
    },
    "GetItemReviewsRequest": {
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "description": "An alternate ID associated with this item.",
          "type": "object",
          "x-isclass": true
        },
        "ContinuationToken": {
          "description": "An opaque token used to retrieve the next page of items, if any are available.",
          "type": "string"
        },
        "Count": {
          "description": "Number of items to retrieve. This value is optional. Default value is 10.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Id": {
          "description": "The unique ID of the item.",
          "type": "string"
        },
        "OrderBy": {
          "description": "An OData orderBy used to order the results of the query. Possible values are Helpfulness, Rating, and Submitted (For example: \"Submitted desc\")",
          "type": "string"
        }
      },
      "required": [
        "Count"
      ],
      "example": {
        "Count": 2,
        "Top": 10,
        "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      }
    },
    "GetItemReviewsResponse": {
      "type": "object",
      "properties": {
        "ContinuationToken": {
          "description": "An opaque token used to retrieve the next page of items, if any are available.",
          "type": "string"
        },
        "Reviews": {
          "description": "The paginated set of results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Review"
          },
          "x-isclass": true
        }
      },
      "example": {
        "Reviews": [
          {
            "ReviewId": "372f84cd-b45b-48a7-9549-2c09a6c12104",
            "ItemId": "dddddddd-dddd-dddd-dddd-dddddddddddd",
            "ReviewerEntity": {
              "Id": "ABCD1234",
              "Type": "title_player_account",
              "TypeString": "title_player_account"
            },
            "ReviewerId": "title_player_account!ABCD1234",
            "ItemVersion": "2.1.4",
            "Title": "Best game ever",
            "ReviewText": "I play this game every day. It's so much fun!",
            "Rating": 3,
            "IsInstalled": true,
            "Locale": "en-us",
            "HelpfulPositive": 11,
            "HelpfulNegative": 17,
            "Submitted": "2018-08-17T22:32:10.4729879+00:00"
          },
          {
            "ReviewId": "372f84cd-b45b-48a7-9549-2c09a6c12104",
            "ItemId": "dddddddd-dddd-dddd-dddd-dddddddddddd",
            "ReviewerEntity": {
              "Id": "ABCD1234",
              "Type": "title_player_account",
              "TypeString": "title_player_account"
            },
            "ReviewerId": "title_player_account!ABCD1234",
            "ItemVersion": "2.1.4",
            "Title": "Best game ever",
            "ReviewText": "I play this game every day. It's so much fun!",
            "Rating": 3,
            "IsInstalled": true,
            "Locale": "en-us",
            "HelpfulPositive": 11,
            "HelpfulNegative": 17,
            "Submitted": "2018-08-17T22:32:10.4729879+00:00"
          }
        ],
        "ContinuationToken": "+RID:IQkbAIvkRQD9oQIAAAAAAA==#RT:1#TRC:10#FPC:AgEKHAoKAPEhAOAhQP8DWIAMAgB8rRACAJeAHAIA0r0="
      }
    },
    "GetItemReviewSummaryRequest": {
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "description": "An alternate ID associated with this item.",
          "type": "object",
          "x-isclass": true
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Id": {
          "description": "The unique ID of the item.",
          "type": "string"
        }
      },
      "example": {
        "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      }
    },
    "GetItemReviewSummaryResponse": {
      "type": "object",
      "properties": {
        "LeastFavorableReview": {
          "$ref": "#/definitions/Review",
          "description": "The least favorable review for this item.",
          "type": "object",
          "x-isclass": true
        },
        "MostFavorableReview": {
          "$ref": "#/definitions/Review",
          "description": "The most favorable review for this item.",
          "type": "object",
          "x-isclass": true
        },
        "Rating": {
          "$ref": "#/definitions/Rating",
          "description": "The summary of ratings associated with this item.",
          "type": "object",
          "x-isclass": true
        },
        "ReviewsCount": {
          "description": "The total number of reviews associated with this item.",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "ReviewsCount"
      ],
      "example": {
        "Rating": {
          "Average": 3.6,
          "TotalCount": 8,
          "Count5Star": 1,
          "Count4Star": 4,
          "Count3Star": 2,
          "Count2Star": 1,
          "Count1Star": 0
        },
        "ReviewsCount": 8,
        "MostFavorableReview": {
          "ReviewId": "00000000-0000-0000-0000-000000000004",
          "ItemId": "00000000-0000-0000-0000-000000000005",
          "ReviewerEntity": {
            "Id": "ABCD1234",
            "Type": "title_player_account",
            "TypeString": "title_player_account"
          },
          "ReviewerId": "title_player_account!ABCD1234",
          "ItemVersion": "2.1.4",
          "Title": "Best game ever",
          "ReviewText": "I play this game every day. It's so much fun!",
          "Rating": 5,
          "IsInstalled": true,
          "Locale": "en-us",
          "HelpfulPositive": 16,
          "HelpfulNegative": 1,
          "Submitted": "2018-08-17T22:32:10.4729879+00:00"
        },
        "LeastFavorableReview": {
          "ReviewId": "00000000-0000-0000-0000-000000000006",
          "ItemId": "00000000-0000-0000-0000-000000000005",
          "ReviewerEntity": {
            "Id": "EFGH5678",
            "Type": "title_player_account",
            "TypeString": "title_player_account"
          },
          "ReviewerId": "title_player_account!EFGH5678",
          "ItemVersion": "2.1.2",
          "Title": "It's a game",
          "ReviewText": "",
          "Rating": 2,
          "IsInstalled": true,
          "Locale": "en-us",
          "HelpfulNegative": 10,
          "Submitted": "2018-08-17T22:32:10.4729879+00:00"
        }
      }
    },
    "GetItemsRequest": {
      "type": "object",
      "properties": {
        "AlternateIds": {
          "description": "List of item alternate IDs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogAlternateId"
          },
          "x-isclass": true
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Ids": {
          "description": "List of Item Ids.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "Ids": [
          "dddddddd-dddd-dddd-dddd-dddddddddddd",
          "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"
        ]
      }
    },
    "GetItemsResponse": {
      "type": "object",
      "properties": {
        "Items": {
          "description": "Metadata of set of items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogItem"
          },
          "x-isclass": true
        }
      },
      "example": {
        "Items": [
          {
            "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
            "Type": "ugc",
            "Title": {
              "NEUTRAL": "Neutral title",
              "en-US": "US English title"
            },
            "Description": {
              "NEUTRAL": "Neutral description",
              "en-US": "US English description"
            },
            "Keywords": {
              "NEUTRAL": {
                "Values": [
                  "Keyword_1",
                  "Keyword_2"
                ]
              }
            },
            "ContentType": "example item",
            "CreatorEntity": {
              "Id": "someId",
              "Type": "title_player_account",
              "TypeString": "title_player_account"
            },
            "IsHidden": false,
            "Tags": [
              "pirates",
              "holiday"
            ],
            "DisplayVersion": "1.0.0",
            "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
            "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
            "Contents": [
              {
                "Id": "00000000-0000-0000-0000-000000000001",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                "MaxClientVersion": "2.4.1",
                "MinClientVersion": "2.0.0"
              }
            ],
            "Images": [
              {
                "Id": "00000000-0000-0000-0000-000000000003",
                "Type": "Thumbnail",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
              }
            ],
            "DisplayProperties": {
              "mapDetails": {
                "mapType": "desertIsland",
                "gameMode": "capture",
                "maxPlayers": 16
              },
              "averageMatchLengthInSeconds": 947
            },
            "ETag": "opaqueString",
            "DefaultStackId": "Static_Default_Stack_Id"
          },
          {
            "Id": "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee",
            "Type": "ugc",
            "Title": {
              "NEUTRAL": "Neutral title",
              "en-US": "US English title"
            },
            "Description": {
              "NEUTRAL": "Neutral description",
              "en-US": "US English description"
            },
            "Keywords": {
              "NEUTRAL": {
                "Values": [
                  "Keyword_1",
                  "Keyword_2"
                ]
              }
            },
            "ContentType": "example item",
            "CreatorEntity": {
              "Id": "someId",
              "Type": "title_player_account",
              "TypeString": "title_player_account"
            },
            "IsHidden": false,
            "Tags": [
              "pirates",
              "holiday"
            ],
            "DisplayVersion": "1.0.0",
            "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
            "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
            "Contents": [
              {
                "Id": "00000000-0000-0000-0000-000000000001",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                "MaxClientVersion": "2.4.1",
                "MinClientVersion": "2.0.0"
              }
            ],
            "Images": [
              {
                "Id": "00000000-0000-0000-0000-000000000003",
                "Type": "Thumbnail",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
              }
            ],
            "DisplayProperties": {
              "mapDetails": {
                "mapType": "desertIsland",
                "gameMode": "capture",
                "maxPlayers": 16
              },
              "averageMatchLengthInSeconds": 947
            },
            "ETag": "opaqueString",
            "DefaultStackId": "Static_Default_Stack_Id"
          }
        ]
      }
    },
    "GetMicrosoftStoreAccessTokensRequest": {
      "description": "Gets the access tokens for Microsoft Store authentication.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        }
      },
      "example": {}
    },
    "GetMicrosoftStoreAccessTokensResponse": {
      "type": "object",
      "properties": {
        "CollectionsAccessToken": {
          "description": "The collections access token for calling https://onestore.microsoft.com/b2b/keys/create/collections to obtain a CollectionsIdKey for the user",
          "type": "string"
        },
        "CollectionsAccessTokenExpirationDate": {
          "description": "The date the collections access token expires",
          "type": "string"
        }
      },
      "required": [
        "CollectionsAccessTokenExpirationDate"
      ],
      "example": {
        "CollectionsAccessToken": "collectionsAccessToken",
        "CollectionsAccessTokenExpirationDate": "2022-09-07T00:00:00"
      }
    },
    "GetTransactionHistoryRequest": {
      "description": "Get transaction history for specified entity and collection.",
      "type": "object",
      "properties": {
        "CollectionId": {
          "description": "The id of the entity's collection to perform this action on. (Default=\"default\")",
          "type": "string"
        },
        "ContinuationToken": {
          "description": "An opaque token used to retrieve the next page of items, if any are available. Should be null on initial request.",
          "type": "string"
        },
        "Count": {
          "description": "Number of items to retrieve. This value is optional. The default value is 10",
          "type": "number",
          "x-actualtype": "int32"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Filter": {
          "description": "An OData filter used to refine the TransactionHistory. Transaction properties 'timestamp', 'transactionid', 'apiname' and 'operationtype' can be used in the filter. Properties 'transactionid', 'apiname', and 'operationtype' cannot be used together in a single request. The 'timestamp' property can be combined with 'apiname' or 'operationtype' in a single request. For example: \"timestamp ge 2023-06-20T23:30Z\" or \"transactionid eq '10'\" or \"(timestamp ge 2023-06-20T23:30Z) and (apiname eq 'AddInventoryItems')\". By default, a 6 month timespan from the current date is used.",
          "type": "string"
        }
      },
      "required": [
        "Count"
      ],
      "example": {
        "Count": 10,
        "CollectionId": "default"
      }
    },
    "GetTransactionHistoryResponse": {
      "type": "object",
      "properties": {
        "ContinuationToken": {
          "description": "An opaque token used to retrieve the next page of items, if any are available. Should be null on initial request.",
          "type": "string"
        },
        "Transactions": {
          "description": "The requested inventory transactions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transaction"
          },
          "x-isclass": true
        }
      },
      "example": {
        "Transactions": [
          {
            "TransactionId": "1",
            "ItemType": "catalogItem",
            "OperationType": "Add",
            "ApiName": "AddInventoryItems"
          },
          {
            "TransactionId": "2",
            "ItemType": "catalogItem",
            "OperationType": "Add",
            "ApiName": "AddInventoryItems"
          }
        ]
      }
    },
    "GooglePlayProductPurchase": {
      "type": "object",
      "properties": {
        "ProductId": {
          "description": "The Product ID (SKU) of the InApp product purchased from the Google Play store.",
          "type": "string"
        },
        "Token": {
          "description": "The token provided to the player's device when the product was purchased",
          "type": "string"
        }
      }
    },
    "HelpfulnessVote": {
      "type": "string",
      "enum": [
        "None",
        "UnHelpful",
        "Helpful"
      ]
    },
    "Image": {
      "type": "object",
      "properties": {
        "Id": {
          "description": "The image unique ID.",
          "type": "string"
        },
        "Tag": {
          "description": "The client-defined tag associated with this image. Tags must be defined in the Catalog Config before being used in images",
          "type": "string"
        },
        "Type": {
          "description": "Images can be defined as either a \"thumbnail\" or \"screenshot\". There can only be one \"thumbnail\" image per item.",
          "type": "string"
        },
        "Url": {
          "description": "The URL for retrieval of the image.",
          "type": "string"
        }
      }
    },
    "ImageConfig": {
      "type": "object",
      "properties": {
        "Tags": {
          "description": "The set of tags that will be used for validation. Each tag can have a maximum character length of 32 and up to 1024 tags can be listed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "InitialValues": {
      "type": "object",
      "properties": {
        "DisplayProperties": {
          "description": "Game specific properties for display purposes. The Display Properties field has a 1000 byte limit.",
          "type": "object"
        }
      }
    },
    "InventoryItem": {
      "type": "object",
      "properties": {
        "Amount": {
          "description": "The amount of the item.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "DisplayProperties": {
          "description": "Game specific properties for display purposes. This is an arbitrary JSON blob. The Display Properties field has a 1000 byte limit.",
          "type": "object"
        },
        "ExpirationDate": {
          "description": "Only used for subscriptions. The date of when the item will expire in UTC.",
          "type": "string"
        },
        "Id": {
          "description": "The id of the item. This should correspond to the item id in the catalog.",
          "type": "string"
        },
        "StackId": {
          "description": "The stack id of the item.",
          "type": "string"
        },
        "Type": {
          "description": "The type of the item. This should correspond to the item type in the catalog.",
          "type": "string"
        }
      }
    },
    "InventoryItemReference": {
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/AlternateId",
          "description": "The inventory item alternate id the request applies to.",
          "type": "object",
          "x-isclass": true
        },
        "Id": {
          "description": "The inventory item id the request applies to.",
          "type": "string"
        },
        "StackId": {
          "description": "The inventory stack id the request should redeem to. (Default=\"default\")",
          "type": "string"
        }
      }
    },
    "InventoryOperation": {
      "type": "object",
      "properties": {
        "Add": {
          "$ref": "#/definitions/AddInventoryItemsOperation",
          "description": "The add operation.",
          "type": "object",
          "x-isclass": true
        },
        "Delete": {
          "$ref": "#/definitions/DeleteInventoryItemsOperation",
          "description": "The delete operation.",
          "type": "object",
          "x-isclass": true
        },
        "Purchase": {
          "$ref": "#/definitions/PurchaseInventoryItemsOperation",
          "description": "The purchase operation.",
          "type": "object",
          "x-isclass": true
        },
        "Subtract": {
          "$ref": "#/definitions/SubtractInventoryItemsOperation",
          "description": "The subtract operation.",
          "type": "object",
          "x-isclass": true
        },
        "Transfer": {
          "$ref": "#/definitions/TransferInventoryItemsOperation",
          "description": "The transfer operation.",
          "type": "object",
          "x-isclass": true
        },
        "Update": {
          "$ref": "#/definitions/UpdateInventoryItemsOperation",
          "description": "The update operation.",
          "type": "object",
          "x-isclass": true
        }
      }
    },
    "KeywordSet": {
      "type": "object",
      "properties": {
        "Values": {
          "description": "A list of localized keywords.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ModerationState": {
      "type": "object",
      "properties": {
        "LastModifiedDate": {
          "description": "The date and time this moderation state was last updated.",
          "type": "string"
        },
        "Reason": {
          "description": "The current stated reason for the associated item being moderated.",
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/ModerationStatus",
          "description": "The current moderation status for the associated item.",
          "type": "string",
          "x-isenum": true
        }
      }
    },
    "ModerationStatus": {
      "type": "string",
      "enum": [
        "Unknown",
        "AwaitingModeration",
        "Approved",
        "Rejected"
      ]
    },
    "PayoutDetails": {
      "type": "object",
      "properties": {}
    },
    "PublishDraftItemRequest": {
      "description": "The call kicks off a workflow to publish the item to the public catalog. The Publish Status API should be used to monitor the publish job.",
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "description": "An alternate ID associated with this item.",
          "type": "object",
          "x-isclass": true
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ETag": {
          "description": "ETag of the catalog item to published from the working catalog to the public catalog. Used for optimistic concurrency. If the provided ETag does not match the ETag in the current working catalog, the request will be rejected. If not provided, the current version of the document in the working catalog will be published.",
          "type": "string"
        },
        "Id": {
          "description": "The unique ID of the item.",
          "type": "string"
        }
      },
      "example": {
        "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      }
    },
    "PublishDraftItemResponse": {
      "type": "object",
      "properties": {},
      "example": {}
    },
    "PublishResult": {
      "type": "string",
      "enum": [
        "Unknown",
        "Pending",
        "Succeeded",
        "Failed",
        "Canceled"
      ]
    },
    "PurchaseInventoryItemsOperation": {
      "type": "object",
      "properties": {
        "Amount": {
          "description": "The amount to purchase.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "DeleteEmptyStacks": {
          "description": "Indicates whether stacks reduced to an amount of 0 during the operation should be deleted from the inventory. (Default = false)",
          "type": "boolean"
        },
        "DurationInSeconds": {
          "description": "The duration to purchase.",
          "type": "number",
          "x-actualtype": "double"
        },
        "Item": {
          "$ref": "#/definitions/InventoryItemReference",
          "description": "The inventory item the operation applies to.",
          "type": "object",
          "x-isclass": true
        },
        "NewStackValues": {
          "$ref": "#/definitions/InitialValues",
          "description": "The values to apply to a stack newly created by this operation.",
          "type": "object",
          "x-isclass": true
        },
        "PriceAmounts": {
          "description": "The per-item price the item is expected to be purchased at. This must match a value configured in the Catalog or specified Store.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PurchasePriceAmount"
          },
          "x-isclass": true
        },
        "StoreId": {
          "description": "The id of the Store to purchase the item from.",
          "type": "string"
        }
      },
      "required": [
        "DeleteEmptyStacks"
      ]
    },
    "PurchaseInventoryItemsRequest": {
      "description": "Purchase a single item or bundle, paying the associated price.",
      "type": "object",
      "properties": {
        "Amount": {
          "description": "The amount to purchase.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "CollectionId": {
          "description": "The id of the entity's collection to perform this action on. (Default=\"default\"). The number of inventory collections is unlimited.",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "DeleteEmptyStacks": {
          "description": "Indicates whether stacks reduced to an amount of 0 during the request should be deleted from the inventory. (Default=false)",
          "type": "boolean"
        },
        "DurationInSeconds": {
          "description": "The duration to purchase.",
          "type": "number",
          "x-actualtype": "double"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ETag": {
          "description": "ETags are used for concurrency checking when updating resources. More information about using ETags can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/etags",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The Idempotency ID for this request. Idempotency IDs can be used to prevent operation replay in the medium term but will be garbage collected eventually.",
          "type": "string"
        },
        "Item": {
          "$ref": "#/definitions/InventoryItemReference",
          "description": "The inventory item the request applies to.",
          "type": "object",
          "x-isclass": true
        },
        "NewStackValues": {
          "$ref": "#/definitions/InitialValues",
          "description": "The values to apply to a stack newly created by this request.",
          "type": "object",
          "x-isclass": true
        },
        "PriceAmounts": {
          "description": "The per-item price the item is expected to be purchased at. This must match a value configured in the Catalog or specified Store. ",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PurchasePriceAmount"
          },
          "x-isclass": true
        },
        "StoreId": {
          "description": "The id of the Store to purchase the item from.",
          "type": "string"
        }
      },
      "required": [
        "DeleteEmptyStacks"
      ],
      "example": {
        "Item": {
          "Id": "11111111-1111-1111-1111-111111111111"
        },
        "Amount": 1,
        "PriceAmounts": [
          {
            "ItemId": "cccccccc-cccc-cccc-cccc-cccccccccccc",
            "Amount": 15
          }
        ]
      }
    },
    "PurchaseInventoryItemsResponse": {
      "type": "object",
      "properties": {
        "ETag": {
          "description": "ETags are used for concurrency checking when updating resources. More information about using ETags can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/etags",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The idempotency id used in the request.",
          "type": "string"
        },
        "TransactionIds": {
          "description": "The ids of transactions that occurred as a result of the request.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "IdempotencyId": "idempotencyId",
        "TransactionIds": [
          "transactionId1",
          "transactionId2"
        ]
      }
    },
    "PurchaseOverride": {
      "type": "object",
      "properties": {}
    },
    "PurchaseOverridesInfo": {
      "type": "object",
      "properties": {}
    },
    "PurchasePriceAmount": {
      "type": "object",
      "properties": {
        "Amount": {
          "description": "The amount of the inventory item to use in the purchase .",
          "type": "number",
          "x-actualtype": "int32"
        },
        "ItemId": {
          "description": "The inventory item id to use in the purchase .",
          "type": "string"
        },
        "StackId": {
          "description": "The inventory stack id the to use in the purchase. Set to \"default\" by default",
          "type": "string"
        }
      },
      "required": [
        "Amount"
      ]
    },
    "Rating": {
      "type": "object",
      "properties": {
        "Average": {
          "description": "The average rating for this item.",
          "type": "number",
          "x-actualtype": "float"
        },
        "Count1Star": {
          "description": "The total count of 1 star ratings for this item.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Count2Star": {
          "description": "The total count of 2 star ratings for this item.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Count3Star": {
          "description": "The total count of 3 star ratings for this item.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Count4Star": {
          "description": "The total count of 4 star ratings for this item.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Count5Star": {
          "description": "The total count of 5 star ratings for this item.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "TotalCount": {
          "description": "The total count of ratings for this item.",
          "type": "number",
          "x-actualtype": "int32"
        }
      }
    },
    "RedeemAppleAppStoreInventoryItemsRequest": {
      "description": "Redeem items from the Apple App Store.",
      "type": "object",
      "properties": {
        "CollectionId": {
          "description": "The id of the entity's collection to perform this action on. (Default=\"default\")",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Receipt": {
          "description": "The receipt provided by the Apple marketplace upon successful purchase.",
          "type": "string"
        }
      },
      "example": {
        "Receipt": "receipt"
      }
    },
    "RedeemAppleAppStoreInventoryItemsResponse": {
      "type": "object",
      "properties": {
        "Failed": {
          "description": "The list of failed redemptions from the external marketplace.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RedemptionFailure"
          },
          "x-isclass": true
        },
        "Succeeded": {
          "description": "The list of successful redemptions from the external marketplace.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RedemptionSuccess"
          },
          "x-isclass": true
        },
        "TransactionIds": {
          "description": "The Transaction IDs associated with the inventory modifications",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "TransactionIds": [
          "transactionId1",
          "transactionId2"
        ],
        "Succeeded": [
          {
            "SuccessCode": "success",
            "SuccessTimestamp": "2022-09-08T00:00:00",
            "MarketplaceTransactionId": "marketplaceTransactionId1",
            "OfferId": "marketplaceOfferId1"
          },
          {
            "SuccessCode": "success",
            "SuccessTimestamp": "2022-09-08T00:00:00",
            "MarketplaceTransactionId": "marketplaceTransactionId2",
            "OfferId": "marketplaceOfferId2"
          }
        ],
        "Failed": []
      }
    },
    "RedeemGooglePlayInventoryItemsRequest": {
      "description": "Redeem items from the Google Play Store.",
      "type": "object",
      "properties": {
        "CollectionId": {
          "description": "The id of the entity's collection to perform this action on. (Default=\"default\")",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Purchases": {
          "description": "The list of purchases to redeem",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GooglePlayProductPurchase"
          },
          "x-isclass": true
        }
      },
      "example": {
        "Purchases": [
          {
            "ProductId": "productId",
            "Token": "token"
          }
        ]
      }
    },
    "RedeemGooglePlayInventoryItemsResponse": {
      "type": "object",
      "properties": {
        "Failed": {
          "description": "The list of failed redemptions from the external marketplace.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RedemptionFailure"
          },
          "x-isclass": true
        },
        "Succeeded": {
          "description": "The list of successful redemptions from the external marketplace.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RedemptionSuccess"
          },
          "x-isclass": true
        },
        "TransactionIds": {
          "description": "The Transaction IDs associated with the inventory modifications",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "TransactionIds": [
          "transactionId1",
          "transactionId2"
        ],
        "Succeeded": [
          {
            "SuccessCode": "success",
            "SuccessTimestamp": "2022-09-08T00:00:00",
            "MarketplaceTransactionId": "marketplaceTransactionId1",
            "OfferId": "marketplaceOfferId1"
          },
          {
            "SuccessCode": "success",
            "SuccessTimestamp": "2022-09-08T00:00:00",
            "MarketplaceTransactionId": "marketplaceTransactionId2",
            "OfferId": "marketplaceOfferId2"
          }
        ],
        "Failed": []
      }
    },
    "RedeemMicrosoftStoreInventoryItemsRequest": {
      "description": "Redeem items from the Microsoft Store.",
      "type": "object",
      "properties": {
        "CollectionId": {
          "description": "The id of the entity's collection to perform this action on. (Default=\"default\")",
          "type": "string"
        },
        "CollectionsIdKey": {
          "description": "The OneStore Collections Id Key used for AAD authentication.",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "XboxToken": {
          "description": "Xbox Token used for delegated business partner authentication.",
          "type": "string"
        }
      },
      "example": {
        "CollectionsIdKey": "collectionsIdKey"
      }
    },
    "RedeemMicrosoftStoreInventoryItemsResponse": {
      "type": "object",
      "properties": {
        "Failed": {
          "description": "The list of failed redemptions from the external marketplace.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RedemptionFailure"
          },
          "x-isclass": true
        },
        "Succeeded": {
          "description": "The list of successful redemptions from the external marketplace.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RedemptionSuccess"
          },
          "x-isclass": true
        },
        "TransactionIds": {
          "description": "The Transaction IDs associated with the inventory modifications",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "TransactionIds": [
          "transactionId1",
          "transactionId2"
        ],
        "Succeeded": [
          {
            "SuccessCode": "success",
            "SuccessTimestamp": "2022-09-08T00:00:00",
            "MarketplaceTransactionId": "marketplaceTransactionId1",
            "OfferId": "marketplaceOfferId1"
          },
          {
            "SuccessCode": "success",
            "SuccessTimestamp": "2022-09-08T00:00:00",
            "MarketplaceTransactionId": "marketplaceTransactionId2",
            "OfferId": "marketplaceOfferId2"
          }
        ],
        "Failed": []
      }
    },
    "RedeemNintendoEShopInventoryItemsRequest": {
      "description": "Redeem items from the Nintendo EShop.",
      "type": "object",
      "properties": {
        "CollectionId": {
          "description": "The id of the entity's collection to perform this action on. (Default=\"default\")",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "NintendoServiceAccountIdToken": {
          "description": "The Nintendo provided token authorizing redemption",
          "type": "string"
        }
      },
      "example": {
        "NintendoServiceAccountIdToken": "nsaIdToken"
      }
    },
    "RedeemNintendoEShopInventoryItemsResponse": {
      "type": "object",
      "properties": {
        "Failed": {
          "description": "The list of failed redemptions from the external marketplace.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RedemptionFailure"
          },
          "x-isclass": true
        },
        "Succeeded": {
          "description": "The list of successful redemptions from the external marketplace.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RedemptionSuccess"
          },
          "x-isclass": true
        },
        "TransactionIds": {
          "description": "The Transaction IDs associated with the inventory modifications",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "TransactionIds": [
          "transactionId1",
          "transactionId2"
        ],
        "Succeeded": [
          {
            "SuccessCode": "success",
            "SuccessTimestamp": "2022-09-08T00:00:00",
            "MarketplaceTransactionId": "marketplaceTransactionId1",
            "OfferId": "marketplaceOfferId1"
          },
          {
            "SuccessCode": "success",
            "SuccessTimestamp": "2022-09-08T00:00:00",
            "MarketplaceTransactionId": "marketplaceTransactionId2",
            "OfferId": "marketplaceOfferId2"
          }
        ],
        "Failed": []
      }
    },
    "RedeemPlayStationStoreInventoryItemsRequest": {
      "description": "Redeem items from the PlayStation Store.",
      "type": "object",
      "properties": {
        "AuthorizationCode": {
          "description": "Auth code returned by PlayStation :tm: Network OAuth system.",
          "type": "string"
        },
        "CollectionId": {
          "description": "The id of the entity's collection to perform this action on. (Default=\"default\")",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "RedirectUri": {
          "description": "Redirect URI supplied to PlayStation :tm: Network when requesting an auth code",
          "type": "string"
        },
        "ServiceLabel": {
          "description": "Optional Service Label to pass into the request.",
          "type": "string"
        }
      },
      "example": {
        "AuthorizationCode": "authorizationCode",
        "RedirectUri": "orbis://games",
        "ServiceLabel": "0"
      }
    },
    "RedeemPlayStationStoreInventoryItemsResponse": {
      "type": "object",
      "properties": {
        "Failed": {
          "description": "The list of failed redemptions from the external marketplace.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RedemptionFailure"
          },
          "x-isclass": true
        },
        "Succeeded": {
          "description": "The list of successful redemptions from the external marketplace.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RedemptionSuccess"
          },
          "x-isclass": true
        },
        "TransactionIds": {
          "description": "The Transaction IDs associated with the inventory modifications",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "TransactionIds": [
          "transactionId1",
          "transactionId2"
        ],
        "Succeeded": [
          {
            "SuccessCode": "success",
            "SuccessTimestamp": "2022-09-08T00:00:00",
            "MarketplaceTransactionId": "marketplaceTransactionId1",
            "OfferId": "marketplaceOfferId1"
          },
          {
            "SuccessCode": "success",
            "SuccessTimestamp": "2022-09-08T00:00:00",
            "MarketplaceTransactionId": "marketplaceTransactionId2",
            "OfferId": "marketplaceOfferId2"
          }
        ],
        "Failed": []
      }
    },
    "RedeemSteamInventoryItemsRequest": {
      "description": "Redeem inventory items from Steam.",
      "type": "object",
      "properties": {
        "CollectionId": {
          "description": "The id of the entity's collection to perform this action on. (Default=\"default\")",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {}
    },
    "RedeemSteamInventoryItemsResponse": {
      "type": "object",
      "properties": {
        "Failed": {
          "description": "The list of failed redemptions from the external marketplace.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RedemptionFailure"
          },
          "x-isclass": true
        },
        "Succeeded": {
          "description": "The list of successful redemptions from the external marketplace.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RedemptionSuccess"
          },
          "x-isclass": true
        },
        "TransactionIds": {
          "description": "The Transaction IDs associated with the inventory modifications",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "TransactionIds": [
          "transactionId1",
          "transactionId2"
        ],
        "Succeeded": [
          {
            "SuccessCode": "success",
            "SuccessTimestamp": "2022-09-08T00:00:00",
            "MarketplaceTransactionId": "marketplaceTransactionId1",
            "OfferId": "marketplaceOfferId1"
          },
          {
            "SuccessCode": "success",
            "SuccessTimestamp": "2022-09-08T00:00:00",
            "MarketplaceTransactionId": "marketplaceTransactionId2",
            "OfferId": "marketplaceOfferId2"
          }
        ],
        "Failed": []
      }
    },
    "RedemptionFailure": {
      "type": "object",
      "properties": {
        "FailureCode": {
          "description": "The marketplace failure code.",
          "type": "string"
        },
        "FailureDetails": {
          "description": "The marketplace error details explaining why the offer failed to redeem.",
          "type": "string"
        },
        "MarketplaceTransactionId": {
          "description": "The transaction id in the external marketplace.",
          "type": "string"
        },
        "OfferId": {
          "description": "The ID of the offer being redeemed.",
          "type": "string"
        }
      }
    },
    "RedemptionSuccess": {
      "type": "object",
      "properties": {
        "MarketplaceTransactionId": {
          "description": "The transaction id in the external marketplace.",
          "type": "string"
        },
        "OfferId": {
          "description": "The ID of the offer being redeemed.",
          "type": "string"
        },
        "SuccessTimestamp": {
          "description": "The timestamp for when the redeem was completed.",
          "type": "string"
        }
      },
      "required": [
        "SuccessTimestamp"
      ]
    },
    "ReportItemRequest": {
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "description": "An alternate ID associated with this item.",
          "type": "object",
          "x-isclass": true
        },
        "ConcernCategory": {
          "$ref": "#/definitions/ConcernCategory",
          "description": "Category of concern for this report.",
          "type": "string",
          "x-isenum": true
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Id": {
          "description": "The unique ID of the item.",
          "type": "string"
        },
        "Reason": {
          "description": "The string reason for this report.",
          "type": "string"
        }
      },
      "example": {
        "ConcernCategory": "Profanity",
        "Reason": "There was swearing in the description.",
        "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      }
    },
    "ReportItemResponse": {
      "type": "object",
      "properties": {},
      "example": {}
    },
    "ReportItemReviewRequest": {
      "description": "Submit a report for an inappropriate review, allowing the submitting user to specify their concern.",
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "description": "An alternate ID of the item associated with the review.",
          "type": "object",
          "x-isclass": true
        },
        "ConcernCategory": {
          "$ref": "#/definitions/ConcernCategory",
          "description": "The reason this review is being reported.",
          "type": "string",
          "x-isenum": true
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ItemId": {
          "description": "The string ID of the item associated with the review.",
          "type": "string"
        },
        "Reason": {
          "description": "The string reason for this report.",
          "type": "string"
        },
        "ReviewId": {
          "description": "The ID of the review to submit a report for.",
          "type": "string"
        }
      },
      "example": {
        "ReviewId": "dddddddd-dddd-dddd-dddd-dddddddddddd",
        "ItemId": "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee",
        "ConcernCategory": "OffensiveContent",
        "Reason": "Foul language."
      }
    },
    "ReportItemReviewResponse": {
      "type": "object",
      "properties": {},
      "example": {}
    },
    "Review": {
      "type": "object",
      "properties": {
        "HelpfulNegative": {
          "description": "The number of negative helpfulness votes for this review.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "HelpfulPositive": {
          "description": "The number of positive helpfulness votes for this review.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "IsInstalled": {
          "description": "Indicates whether the review author has the item installed.",
          "type": "boolean"
        },
        "ItemId": {
          "description": "The ID of the item being reviewed.",
          "type": "string"
        },
        "ItemVersion": {
          "description": "The version of the item being reviewed.",
          "type": "string"
        },
        "Locale": {
          "description": "The locale for which this review was submitted in.",
          "type": "string"
        },
        "Rating": {
          "description": "Star rating associated with this review.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "ReviewerEntity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The ID of the author of the review.",
          "type": "object",
          "x-isclass": true
        },
        "ReviewerId": {
          "description": "Deprecated. Use ReviewerEntity instead. This property will be removed in a future release.",
          "type": "string"
        },
        "ReviewId": {
          "description": "The ID of the review.",
          "type": "string"
        },
        "ReviewText": {
          "description": "The full text of this review.",
          "type": "string"
        },
        "Submitted": {
          "description": "The date and time this review was last submitted.",
          "type": "string"
        },
        "Title": {
          "description": "The title of this review.",
          "type": "string"
        }
      },
      "required": [
        "Rating",
        "IsInstalled",
        "HelpfulPositive",
        "HelpfulNegative",
        "Submitted"
      ]
    },
    "ReviewItemRequest": {
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "description": "An alternate ID associated with this item.",
          "type": "object",
          "x-isclass": true
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Id": {
          "description": "The unique ID of the item.",
          "type": "string"
        },
        "Review": {
          "$ref": "#/definitions/Review",
          "description": "The review to submit.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Review": {
          "ItemVersion": "2.4.1",
          "Title": "Best Game Ever",
          "ReviewText": "I play this game every day. It's my favorite game yet.",
          "Rating": 5,
          "IsInstalled": true
        },
        "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      }
    },
    "ReviewItemResponse": {
      "type": "object",
      "properties": {},
      "example": {}
    },
    "ReviewTakedown": {
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "description": "An alternate ID associated with this item.",
          "type": "object",
          "x-isclass": true
        },
        "ItemId": {
          "description": "The ID of the item associated with the review to take down.",
          "type": "string"
        },
        "ReviewId": {
          "description": "The ID of the review to take down.",
          "type": "string"
        }
      },
      "example": {
        "ItemId": "00000000-0000-0000-0000-000000000003",
        "ReviewId": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      }
    },
    "ScanResult": {
      "type": "object",
      "properties": {
        "Url": {
          "description": "The URL of the item which failed the scan.",
          "type": "string"
        }
      },
      "example": {
        "Url": "http://example.com/00000000-0000-0000-0000-000000000000/content.bin"
      }
    },
    "SearchItemsRequest": {
      "type": "object",
      "properties": {
        "ContinuationToken": {
          "description": "An opaque token used to retrieve the next page of items, if any are available.",
          "type": "string"
        },
        "Count": {
          "description": "Number of items to retrieve. This value is optional. Maximum page size is 50. Default value is 10.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Filter": {
          "description": "An OData filter used to refine the search query (For example: \"type eq 'ugc'\"). More info about Filter Complexity limits can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/search#limits",
          "type": "string"
        },
        "Language": {
          "description": "The locale to be returned in the result.",
          "type": "string"
        },
        "OrderBy": {
          "description": "An OData orderBy used to order the results of the search query. For example: \"rating/average asc\" ",
          "type": "string"
        },
        "Search": {
          "description": "The text to search for.",
          "type": "string"
        },
        "Select": {
          "description": "An OData select query option used to augment the search results. If not defined, the default search result metadata will be returned.",
          "type": "string"
        },
        "Store": {
          "$ref": "#/definitions/StoreReference",
          "description": "The store to restrict the search request to.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Count"
      ],
      "example": {
        "Search": "Pirates",
        "Filter": "tags/any(t:t eq 'desert') and contentType eq 'map'",
        "OrderBy": "lastModifiedDate asc",
        "ContinuationToken": "abc=",
        "Count": 2
      }
    },
    "SearchItemsResponse": {
      "type": "object",
      "properties": {
        "ContinuationToken": {
          "description": "An opaque token used to retrieve the next page of items, if any are available.",
          "type": "string"
        },
        "Items": {
          "description": "The paginated set of results for the search query.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogItem"
          },
          "x-isclass": true
        }
      },
      "example": {
        "Items": [
          {
            "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
            "Type": "ugc",
            "Title": {
              "NEUTRAL": "Neutral title",
              "en-US": "US English title"
            },
            "Description": {
              "NEUTRAL": "Neutral description",
              "en-US": "US English description"
            },
            "ContentType": "example item",
            "CreatorEntity": {
              "Id": "someId",
              "Type": "title_player_account",
              "TypeString": "title_player_account"
            },
            "Tags": [
              "pirates",
              "holiday"
            ],
            "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
            "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
            "Contents": [
              {
                "Id": "00000000-0000-0000-0000-000000000001",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                "MaxClientVersion": "2.4.1",
                "MinClientVersion": "2.0.0"
              }
            ],
            "Images": [
              {
                "Id": "00000000-0000-0000-0000-000000000003",
                "Type": "Thumbnail",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
              }
            ],
            "PriceOptions": {
              "Prices": [
                {
                  "Amounts": [
                    {
                      "ItemId": "cccccccc-cccc-cccc-cccc-cccccccccccc",
                      "Amount": 3
                    }
                  ]
                }
              ]
            },
            "DisplayProperties": {
              "mapDetails": {
                "mapType": "desertIsland",
                "gameMode": "capture",
                "maxPlayers": 16
              },
              "averageMatchLengthInSeconds": 947
            },
            "DefaultStackId": "Static_Default_Stack_Id"
          },
          {
            "Id": "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee",
            "Type": "ugc",
            "Title": {
              "NEUTRAL": "Neutral title",
              "en-US": "US English title"
            },
            "Description": {
              "NEUTRAL": "Neutral description",
              "en-US": "US English description"
            },
            "ContentType": "example item",
            "CreatorEntity": {
              "Id": "someId",
              "Type": "title_player_account",
              "TypeString": "title_player_account"
            },
            "Tags": [
              "pirates",
              "holiday"
            ],
            "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
            "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
            "Contents": [
              {
                "Id": "00000000-0000-0000-0000-000000000001",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                "MaxClientVersion": "2.4.1",
                "MinClientVersion": "2.0.0"
              }
            ],
            "Images": [
              {
                "Id": "00000000-0000-0000-0000-000000000003",
                "Type": "Thumbnail",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
              }
            ],
            "PriceOptions": {
              "Prices": [
                {
                  "Amounts": [
                    {
                      "ItemId": "cccccccc-cccc-cccc-cccc-cccccccccccc",
                      "Amount": 3
                    }
                  ]
                }
              ]
            },
            "DisplayProperties": {
              "mapDetails": {
                "mapType": "desertIsland",
                "gameMode": "capture",
                "maxPlayers": 16
              },
              "averageMatchLengthInSeconds": 947
            },
            "DefaultStackId": "Static_Default_Stack_Id"
          }
        ],
        "ContinuationToken": "def=#"
      }
    },
    "SetItemModerationStateRequest": {
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "description": "An alternate ID associated with this item.",
          "type": "object",
          "x-isclass": true
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Id": {
          "description": "The unique ID of the item.",
          "type": "string"
        },
        "Reason": {
          "description": "The reason for the moderation state change for the associated item.",
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/ModerationStatus",
          "description": "The status to set for the associated item.",
          "type": "string",
          "x-isenum": true
        }
      },
      "example": {
        "Status": "AwaitingModeration",
        "Reason": "User reports over threshold",
        "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      }
    },
    "SetItemModerationStateResponse": {
      "type": "object",
      "properties": {},
      "example": {}
    },
    "StoreDetails": {
      "type": "object",
      "properties": {
        "FilterOptions": {
          "$ref": "#/definitions/FilterOptions",
          "description": "The options for the filter in filter-based stores. These options are mutually exclusive with item references.",
          "type": "object",
          "x-isclass": true
        },
        "PriceOptionsOverride": {
          "$ref": "#/definitions/CatalogPriceOptionsOverride",
          "description": "The global prices utilized in the store. These options are mutually exclusive with price options in item references.",
          "type": "object",
          "x-isclass": true
        }
      }
    },
    "StoreReference": {
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "description": "An alternate ID of the store.",
          "type": "object",
          "x-isclass": true
        },
        "Id": {
          "description": "The unique ID of the store.",
          "type": "string"
        }
      }
    },
    "SubmitItemReviewVoteRequest": {
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "description": "An alternate ID of the item associated with the review.",
          "type": "object",
          "x-isclass": true
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ItemId": {
          "description": "The string ID of the item associated with the review.",
          "type": "string"
        },
        "ReviewId": {
          "description": "The ID of the review to submit a helpfulness vote for.",
          "type": "string"
        },
        "Vote": {
          "$ref": "#/definitions/HelpfulnessVote",
          "description": "The helpfulness vote of the review.",
          "type": "string",
          "x-isenum": true
        }
      },
      "example": {
        "ReviewId": "dddddddd-dddd-dddd-dddd-dddddddddddd",
        "ItemId": "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee",
        "Vote": "Helpful"
      }
    },
    "SubmitItemReviewVoteResponse": {
      "type": "object",
      "properties": {},
      "example": {}
    },
    "SubscriptionDetails": {
      "type": "object",
      "properties": {
        "DurationInSeconds": {
          "description": "The length of time that the subscription will last in seconds.",
          "type": "number",
          "x-actualtype": "double"
        }
      },
      "required": [
        "DurationInSeconds"
      ]
    },
    "SubtractInventoryItemsOperation": {
      "type": "object",
      "properties": {
        "Amount": {
          "description": "The amount to subtract from the current item amount.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "DeleteEmptyStacks": {
          "description": "Indicates whether stacks reduced to an amount of 0 during the request should be deleted from the inventory. (Default = false).",
          "type": "boolean"
        },
        "DurationInSeconds": {
          "description": "The duration to subtract from the current item expiration date.",
          "type": "number",
          "x-actualtype": "double"
        },
        "Item": {
          "$ref": "#/definitions/InventoryItemReference",
          "description": "The inventory item the operation applies to.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "DeleteEmptyStacks"
      ]
    },
    "SubtractInventoryItemsRequest": {
      "description": "Given an entity type, entity identifier and container details, will subtract the specified inventory items. ",
      "type": "object",
      "properties": {
        "Amount": {
          "description": "The amount to subtract for the current item.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "CollectionId": {
          "description": "The id of the entity's collection to perform this action on. (Default=\"default\"). The number of inventory collections is unlimited.",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "DeleteEmptyStacks": {
          "description": "Indicates whether stacks reduced to an amount of 0 during the request should be deleted from the inventory. (Default=false)",
          "type": "boolean"
        },
        "DurationInSeconds": {
          "description": "The duration to subtract from the current item expiration date.",
          "type": "number",
          "x-actualtype": "double"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ETag": {
          "description": "ETags are used for concurrency checking when updating resources. More information about using ETags can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/etags",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The Idempotency ID for this request. Idempotency IDs can be used to prevent operation replay in the medium term but will be garbage collected eventually.",
          "type": "string"
        },
        "Item": {
          "$ref": "#/definitions/InventoryItemReference",
          "description": "The inventory item the request applies to.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "DeleteEmptyStacks"
      ],
      "example": {
        "Item": {
          "Id": "11111111-1111-1111-1111-111111111111"
        },
        "Amount": 3
      }
    },
    "SubtractInventoryItemsResponse": {
      "type": "object",
      "properties": {
        "ETag": {
          "description": "ETags are used for concurrency checking when updating resources. More information about using ETags can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/etags",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The idempotency id used in the request.",
          "type": "string"
        },
        "TransactionIds": {
          "description": "The ids of transactions that occurred as a result of the request.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "IdempotencyId": "idempotencyId",
        "TransactionIds": [
          "transactionId1",
          "transactionId2"
        ]
      }
    },
    "TakedownItemReviewsRequest": {
      "description": "Submit a request to takedown one or more reviews, removing them from public view. Authors will still be able to see their reviews after being taken down.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Reviews": {
          "description": "The set of reviews to take down.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReviewTakedown"
          },
          "x-isclass": true
        }
      },
      "example": {
        "Reviews": [
          {
            "ItemId": "00000000-0000-0000-0000-000000000003",
            "ReviewId": "dddddddd-dddd-dddd-dddd-dddddddddddd"
          }
        ]
      }
    },
    "TakedownItemReviewsResponse": {
      "type": "object",
      "properties": {},
      "example": {}
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "ApiName": {
          "description": "The API call that caused this transaction.",
          "type": "string"
        },
        "ItemType": {
          "description": "The type of item that the the operation occurred on.",
          "type": "string"
        },
        "Operations": {
          "description": "The operations that occurred.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionOperation"
          },
          "x-isclass": true
        },
        "OperationType": {
          "description": "The type of operation that was run.",
          "type": "string"
        },
        "PurchaseDetails": {
          "$ref": "#/definitions/TransactionPurchaseDetails",
          "description": "Additional details about the transaction. Null if it was not a purchase operation.",
          "type": "object",
          "x-isclass": true
        },
        "RedeemDetails": {
          "$ref": "#/definitions/TransactionRedeemDetails",
          "description": "Additional details about the transaction. Null if it was not a redeem operation.",
          "type": "object",
          "x-isclass": true
        },
        "Timestamp": {
          "description": "The time this transaction occurred in UTC.",
          "type": "string"
        },
        "TransactionId": {
          "description": "The id of the transaction. This should be treated like an opaque token.",
          "type": "string"
        },
        "TransferDetails": {
          "$ref": "#/definitions/TransactionTransferDetails",
          "description": "Additional details about the transaction. Null if it was not a transfer operation.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Timestamp"
      ]
    },
    "TransactionOperation": {
      "type": "object",
      "properties": {
        "Amount": {
          "description": "The amount of items in this transaction.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "DurationInSeconds": {
          "description": "The duration modified in this transaction.",
          "type": "number",
          "x-actualtype": "double"
        },
        "ItemId": {
          "description": "The item id of the items in this transaction.",
          "type": "string"
        },
        "ItemType": {
          "description": "The type of item that the operation occurred on.",
          "type": "string"
        },
        "StackId": {
          "description": "The stack id of the items in this transaction.",
          "type": "string"
        },
        "Type": {
          "description": "The type of the operation that occurred.",
          "type": "string"
        }
      }
    },
    "TransactionPurchaseDetails": {
      "type": "object",
      "properties": {
        "StoreId": {
          "description": "The id of the Store the item was purchased from or null.",
          "type": "string"
        }
      }
    },
    "TransactionRedeemDetails": {
      "type": "object",
      "properties": {
        "Marketplace": {
          "description": "The marketplace that the offer is being redeemed from.",
          "type": "string"
        },
        "MarketplaceTransactionId": {
          "description": "The transaction Id returned from the marketplace.",
          "type": "string"
        },
        "OfferId": {
          "description": "The offer Id of the item being redeemed.",
          "type": "string"
        }
      }
    },
    "TransactionTransferDetails": {
      "type": "object",
      "properties": {
        "GivingCollectionId": {
          "description": "The collection id the items were transferred from or null if it was the current collection.",
          "type": "string"
        },
        "GivingEntity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity the items were transferred from or null if it was the current entity.",
          "type": "object",
          "x-isclass": true
        },
        "ReceivingCollectionId": {
          "description": "The collection id the items were transferred to or null if it was the current collection.",
          "type": "string"
        },
        "ReceivingEntity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity the items were transferred to or null if it was the current entity.",
          "type": "object",
          "x-isclass": true
        },
        "TransferId": {
          "description": "The id of the transfer that occurred.",
          "type": "string"
        }
      }
    },
    "TransferInventoryItemsOperation": {
      "type": "object",
      "properties": {
        "Amount": {
          "description": "The amount to transfer.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "DeleteEmptyStacks": {
          "description": "Indicates whether stacks reduced to an amount of 0 during the operation should be deleted from the inventory. (Default = false)",
          "type": "boolean"
        },
        "GivingItem": {
          "$ref": "#/definitions/InventoryItemReference",
          "description": "The inventory item the operation is transferring from.",
          "type": "object",
          "x-isclass": true
        },
        "NewStackValues": {
          "$ref": "#/definitions/InitialValues",
          "description": "The values to apply to a stack newly created by this operation.",
          "type": "object",
          "x-isclass": true
        },
        "ReceivingItem": {
          "$ref": "#/definitions/InventoryItemReference",
          "description": "The inventory item the operation is transferring to.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "DeleteEmptyStacks"
      ]
    },
    "TransferInventoryItemsRequest": {
      "description": "Transfer the specified inventory items of an entity's container Id to another entity's container Id.",
      "type": "object",
      "properties": {
        "Amount": {
          "description": "The amount to transfer .",
          "type": "number",
          "x-actualtype": "int32"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "DeleteEmptyStacks": {
          "description": "Indicates whether stacks reduced to an amount of 0 during the request should be deleted from the inventory. (Default = false)",
          "type": "boolean"
        },
        "GivingCollectionId": {
          "description": "The inventory collection id the request is transferring from. (Default=\"default\")",
          "type": "string"
        },
        "GivingEntity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity the request is transferring from. Set to the caller by default.",
          "type": "object",
          "x-isclass": true
        },
        "GivingETag": {
          "description": "ETags are used for concurrency checking when updating resources (before transferring from). More information about using ETags can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/etags",
          "type": "string"
        },
        "GivingItem": {
          "$ref": "#/definitions/InventoryItemReference",
          "description": "The inventory item the request is transferring from.",
          "type": "object",
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The idempotency id for the request.",
          "type": "string"
        },
        "NewStackValues": {
          "$ref": "#/definitions/InitialValues",
          "description": "The values to apply to a stack newly created by this request.",
          "type": "object",
          "x-isclass": true
        },
        "ReceivingCollectionId": {
          "description": "The inventory collection id the request is transferring to. (Default=\"default\")",
          "type": "string"
        },
        "ReceivingEntity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity the request is transferring to. Set to the caller by default.",
          "type": "object",
          "x-isclass": true
        },
        "ReceivingItem": {
          "$ref": "#/definitions/InventoryItemReference",
          "description": "The inventory item the request is transferring to.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "DeleteEmptyStacks"
      ],
      "example": {
        "GivingItem": {
          "Id": "11111111-1111-1111-1111-111111111111"
        },
        "ReceivingItem": {
          "Id": "11111111-1111-1111-1111-111111111111"
        },
        "Amount": 1,
        "GivingCollectionId": "default",
        "ReceivingCollectionId": "backpack"
      }
    },
    "TransferInventoryItemsResponse": {
      "type": "object",
      "properties": {
        "GivingETag": {
          "description": "ETags are used for concurrency checking when updating resources (after transferring from). More information about using ETags can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/etags",
          "type": "string"
        },
        "GivingTransactionIds": {
          "description": "The ids of transactions that occurred as a result of the request's giving action.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IdempotencyId": {
          "description": "The idempotency id for the request.",
          "type": "string"
        },
        "OperationStatus": {
          "description": "The transfer operation status. Possible values are 'InProgress' or 'Completed'. If the operation has completed, the response code will be 200. Otherwise, it will be 202.",
          "type": "string"
        },
        "ReceivingTransactionIds": {
          "description": "The ids of transactions that occurred as a result of the request's receiving action.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "IdempotencyId": "idempotencyId",
        "GivingTransactionIds": [
          "givingTransactionId1",
          "givingTransactionId2"
        ],
        "ReceivingTransactionIds": [
          "receivingTransactionId1",
          "receivingTransactionId2"
        ]
      }
    },
    "UpdateCatalogConfigRequest": {
      "type": "object",
      "properties": {
        "Config": {
          "$ref": "#/definitions/CatalogConfig",
          "description": "The updated catalog configuration.",
          "type": "object",
          "x-isclass": true
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        }
      },
      "example": {
        "Config": {
          "IsCatalogEnabled": true,
          "AdminEntities": [
            {
              "Id": "ABC123",
              "Type": "title_player_account",
              "TypeString": "title_player_account"
            }
          ],
          "DisplayPropertyIndexInfos": [
            {
              "Name": "damage",
              "Type": "QueryDouble"
            }
          ],
          "ReviewerEntities": [
            {
              "Id": "ABC123",
              "Type": "title_player_account",
              "TypeString": "title_player_account"
            }
          ],
          "UserGeneratedContent": {
            "ContentTypes": [
              "skin",
              "map",
              "example item"
            ],
            "Tags": [
              "pirate",
              "holiday"
            ]
          }
        }
      }
    },
    "UpdateCatalogConfigResponse": {
      "type": "object",
      "properties": {},
      "example": {}
    },
    "UpdateDraftItemRequest": {
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Item": {
          "$ref": "#/definitions/CatalogItem",
          "description": "Updated metadata describing the catalog item to be updated.",
          "type": "object",
          "x-isclass": true
        },
        "Publish": {
          "description": "Whether the item should be published immediately. This value is optional, defaults to false.",
          "type": "boolean"
        }
      },
      "required": [
        "Publish"
      ],
      "example": {
        "Item": {
          "Id": "qqqqqqqq-qqqq-qqqq-qqqq-qqqqqqqqqqqq",
          "Type": "ugc",
          "Title": {
            "NEUTRAL": "Neutral title",
            "en-US": "US English title"
          },
          "Description": {
            "NEUTRAL": "Neutral description",
            "en-US": "US English description"
          },
          "Keywords": {
            "NEUTRAL": {
              "Values": [
                "Keyword_1",
                "Keyword_2"
              ]
            }
          },
          "ContentType": "example item",
          "CreatorEntity": {
            "Id": "someId",
            "Type": "title_player_account",
            "TypeString": "title_player_account"
          },
          "IsHidden": false,
          "Tags": [
            "pirates",
            "holiday"
          ],
          "DisplayVersion": "1.0.0",
          "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
          "Contents": [
            {
              "Id": "00000000-0000-0000-0000-000000000001",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
              "MaxClientVersion": "2.4.1",
              "MinClientVersion": "2.0.0"
            }
          ],
          "Images": [
            {
              "Id": "00000000-0000-0000-0000-000000000003",
              "Type": "Thumbnail",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
            }
          ],
          "DisplayProperties": {
            "mapDetails": {
              "mapType": "desertIsland",
              "gameMode": "capture",
              "maxPlayers": 16
            },
            "averageMatchLengthInSeconds": 947
          },
          "DefaultStackId": "Static_Default_Stack_Id"
        }
      }
    },
    "UpdateDraftItemResponse": {
      "type": "object",
      "properties": {
        "Item": {
          "$ref": "#/definitions/CatalogItem",
          "description": "Updated metadata describing the catalog item just updated.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Item": {
          "Id": "qqqqqqqq-qqqq-qqqq-qqqq-qqqqqqqqqqqq",
          "Type": "ugc",
          "Title": {
            "NEUTRAL": "Neutral title",
            "en-US": "US English title"
          },
          "Description": {
            "NEUTRAL": "Neutral description",
            "en-US": "US English description"
          },
          "Keywords": {
            "NEUTRAL": {
              "Values": [
                "Keyword_1",
                "Keyword_2"
              ]
            }
          },
          "ContentType": "example item",
          "CreatorEntity": {
            "Id": "someId",
            "Type": "title_player_account",
            "TypeString": "title_player_account"
          },
          "IsHidden": false,
          "Tags": [
            "pirates",
            "holiday"
          ],
          "DisplayVersion": "1.0.0",
          "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
          "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
          "Contents": [
            {
              "Id": "00000000-0000-0000-0000-000000000001",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
              "MaxClientVersion": "2.4.1",
              "MinClientVersion": "2.0.0"
            }
          ],
          "Images": [
            {
              "Id": "00000000-0000-0000-0000-000000000003",
              "Type": "Thumbnail",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
            }
          ],
          "DisplayProperties": {
            "mapDetails": {
              "mapType": "desertIsland",
              "gameMode": "capture",
              "maxPlayers": 16
            },
            "averageMatchLengthInSeconds": 947
          },
          "ETag": "opaqueString",
          "DefaultStackId": "Static_Default_Stack_Id"
        }
      }
    },
    "UpdateInventoryItemsOperation": {
      "type": "object",
      "properties": {
        "Item": {
          "$ref": "#/definitions/InventoryItem",
          "description": "The inventory item to update with the specified values.",
          "type": "object",
          "x-isclass": true
        }
      }
    },
    "UpdateInventoryItemsRequest": {
      "description": "Given an entity type, entity identifier and container details, will update the entity's inventory items",
      "type": "object",
      "properties": {
        "CollectionId": {
          "description": "The id of the entity's collection to perform this action on. (Default=\"default\"). The number of inventory collections is unlimited.",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ETag": {
          "description": "ETags are used for concurrency checking when updating resources. More information about using ETags can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/etags",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The Idempotency ID for this request. Idempotency IDs can be used to prevent operation replay in the medium term but will be garbage collected eventually.",
          "type": "string"
        },
        "Item": {
          "$ref": "#/definitions/InventoryItem",
          "description": "The inventory item to update with the specified values.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Item": {
          "Id": "11111111-1111-1111-1111-111111111111",
          "Amount": 3
        }
      }
    },
    "UpdateInventoryItemsResponse": {
      "type": "object",
      "properties": {
        "ETag": {
          "description": "ETags are used for concurrency checking when updating resources. More information about using ETags can be found here: https://learn.microsoft.com/en-us/gaming/playfab/features/economy-v2/catalog/etags",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The idempotency id used in the request.",
          "type": "string"
        },
        "TransactionIds": {
          "description": "The ids of transactions that occurred as a result of the request.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "IdempotencyId": "idempotencyId",
        "TransactionIds": [
          "transactionId1",
          "transactionId2"
        ]
      }
    },
    "UploadInfo": {
      "type": "object",
      "properties": {
        "FileName": {
          "description": "Name of the file to be uploaded.",
          "type": "string"
        }
      }
    },
    "UploadUrlMetadata": {
      "type": "object",
      "properties": {
        "FileName": {
          "description": "Name of the file for which this upload URL was requested.",
          "type": "string"
        },
        "Id": {
          "description": "Unique ID for the binary content to be uploaded to the target URL.",
          "type": "string"
        },
        "Url": {
          "description": "URL for the binary content to be uploaded to.",
          "type": "string"
        }
      }
    },
    "UserGeneratedContentSpecificConfig": {
      "type": "object",
      "properties": {
        "ContentTypes": {
          "description": "The set of content types that will be used for validation.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Tags": {
          "description": "The set of tags that will be used for validation.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "parameters": {
    "AddInventoryItemsRequest": {
      "name": "AddInventoryItemsRequest",
      "in": "body",
      "description": "Given an entity type, entity identifier and container details, will add the specified inventory items.",
      "schema": {
        "$ref": "#/definitions/AddInventoryItemsRequest"
      }
    },
    "CreateDraftItemRequest": {
      "name": "CreateDraftItemRequest",
      "in": "body",
      "description": "The item will not be published to the public catalog until the PublishItem API is called for the item.",
      "schema": {
        "$ref": "#/definitions/CreateDraftItemRequest"
      }
    },
    "CreateUploadUrlsRequest": {
      "name": "CreateUploadUrlsRequest",
      "in": "body",
      "description": "Upload URLs point to Azure Blobs; clients must follow the Microsoft Azure Storage Blob Service REST API pattern for uploading content. The response contains upload URLs and IDs for each file. The IDs and URLs returned must be added to the item metadata and committed using the CreateDraftItem or UpdateDraftItem Item APIs.",
      "schema": {
        "$ref": "#/definitions/CreateUploadUrlsRequest"
      }
    },
    "DeleteEntityItemReviewsRequest": {
      "name": "DeleteEntityItemReviewsRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/DeleteEntityItemReviewsRequest"
      }
    },
    "DeleteInventoryCollectionRequest": {
      "name": "DeleteInventoryCollectionRequest",
      "in": "body",
      "description": "Delete an Inventory Collection by the specified Id for an Entity",
      "schema": {
        "$ref": "#/definitions/DeleteInventoryCollectionRequest"
      }
    },
    "DeleteInventoryItemsRequest": {
      "name": "DeleteInventoryItemsRequest",
      "in": "body",
      "description": "Given an entity type, entity identifier and container details, will delete the entity's inventory items",
      "schema": {
        "$ref": "#/definitions/DeleteInventoryItemsRequest"
      }
    },
    "DeleteItemRequest": {
      "name": "DeleteItemRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/DeleteItemRequest"
      }
    },
    "ExecuteInventoryOperationsRequest": {
      "name": "ExecuteInventoryOperationsRequest",
      "in": "body",
      "description": "Execute a list of Inventory Operations for an Entity",
      "schema": {
        "$ref": "#/definitions/ExecuteInventoryOperationsRequest"
      }
    },
    "GetCatalogConfigRequest": {
      "name": "GetCatalogConfigRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/GetCatalogConfigRequest"
      }
    },
    "GetDraftItemRequest": {
      "name": "GetDraftItemRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/GetDraftItemRequest"
      }
    },
    "GetDraftItemsRequest": {
      "name": "GetDraftItemsRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/GetDraftItemsRequest"
      }
    },
    "GetEntityDraftItemsRequest": {
      "name": "GetEntityDraftItemsRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/GetEntityDraftItemsRequest"
      }
    },
    "GetEntityItemReviewRequest": {
      "name": "GetEntityItemReviewRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/GetEntityItemReviewRequest"
      }
    },
    "GetInventoryCollectionIdsRequest": {
      "name": "GetInventoryCollectionIdsRequest",
      "in": "body",
      "description": "Get a list of Inventory Collection Ids for the specified Entity",
      "schema": {
        "$ref": "#/definitions/GetInventoryCollectionIdsRequest"
      }
    },
    "GetInventoryItemsRequest": {
      "name": "GetInventoryItemsRequest",
      "in": "body",
      "description": "Given an entity type, entity identifier and container details, will get the entity's inventory items. ",
      "schema": {
        "$ref": "#/definitions/GetInventoryItemsRequest"
      }
    },
    "GetItemContainersRequest": {
      "name": "GetItemContainersRequest",
      "in": "body",
      "description": "Given an item, return a set of bundles and stores containing the item.",
      "schema": {
        "$ref": "#/definitions/GetItemContainersRequest"
      }
    },
    "GetItemModerationStateRequest": {
      "name": "GetItemModerationStateRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/GetItemModerationStateRequest"
      }
    },
    "GetItemPublishStatusRequest": {
      "name": "GetItemPublishStatusRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/GetItemPublishStatusRequest"
      }
    },
    "GetItemRequest": {
      "name": "GetItemRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/GetItemRequest"
      }
    },
    "GetItemReviewsRequest": {
      "name": "GetItemReviewsRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/GetItemReviewsRequest"
      }
    },
    "GetItemReviewSummaryRequest": {
      "name": "GetItemReviewSummaryRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/GetItemReviewSummaryRequest"
      }
    },
    "GetItemsRequest": {
      "name": "GetItemsRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/GetItemsRequest"
      }
    },
    "GetMicrosoftStoreAccessTokensRequest": {
      "name": "GetMicrosoftStoreAccessTokensRequest",
      "in": "body",
      "description": "Gets the access tokens for Microsoft Store authentication.",
      "schema": {
        "$ref": "#/definitions/GetMicrosoftStoreAccessTokensRequest"
      }
    },
    "GetTransactionHistoryRequest": {
      "name": "GetTransactionHistoryRequest",
      "in": "body",
      "description": "Get transaction history for specified entity and collection.",
      "schema": {
        "$ref": "#/definitions/GetTransactionHistoryRequest"
      }
    },
    "PublishDraftItemRequest": {
      "name": "PublishDraftItemRequest",
      "in": "body",
      "description": "The call kicks off a workflow to publish the item to the public catalog. The Publish Status API should be used to monitor the publish job.",
      "schema": {
        "$ref": "#/definitions/PublishDraftItemRequest"
      }
    },
    "PurchaseInventoryItemsRequest": {
      "name": "PurchaseInventoryItemsRequest",
      "in": "body",
      "description": "Purchase a single item or bundle, paying the associated price.",
      "schema": {
        "$ref": "#/definitions/PurchaseInventoryItemsRequest"
      }
    },
    "RedeemAppleAppStoreInventoryItemsRequest": {
      "name": "RedeemAppleAppStoreInventoryItemsRequest",
      "in": "body",
      "description": "Redeem items from the Apple App Store.",
      "schema": {
        "$ref": "#/definitions/RedeemAppleAppStoreInventoryItemsRequest"
      }
    },
    "RedeemGooglePlayInventoryItemsRequest": {
      "name": "RedeemGooglePlayInventoryItemsRequest",
      "in": "body",
      "description": "Redeem items from the Google Play Store.",
      "schema": {
        "$ref": "#/definitions/RedeemGooglePlayInventoryItemsRequest"
      }
    },
    "RedeemMicrosoftStoreInventoryItemsRequest": {
      "name": "RedeemMicrosoftStoreInventoryItemsRequest",
      "in": "body",
      "description": "Redeem items from the Microsoft Store.",
      "schema": {
        "$ref": "#/definitions/RedeemMicrosoftStoreInventoryItemsRequest"
      }
    },
    "RedeemNintendoEShopInventoryItemsRequest": {
      "name": "RedeemNintendoEShopInventoryItemsRequest",
      "in": "body",
      "description": "Redeem items from the Nintendo EShop.",
      "schema": {
        "$ref": "#/definitions/RedeemNintendoEShopInventoryItemsRequest"
      }
    },
    "RedeemPlayStationStoreInventoryItemsRequest": {
      "name": "RedeemPlayStationStoreInventoryItemsRequest",
      "in": "body",
      "description": "Redeem items from the PlayStation Store.",
      "schema": {
        "$ref": "#/definitions/RedeemPlayStationStoreInventoryItemsRequest"
      }
    },
    "RedeemSteamInventoryItemsRequest": {
      "name": "RedeemSteamInventoryItemsRequest",
      "in": "body",
      "description": "Redeem inventory items from Steam.",
      "schema": {
        "$ref": "#/definitions/RedeemSteamInventoryItemsRequest"
      }
    },
    "ReportItemRequest": {
      "name": "ReportItemRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/ReportItemRequest"
      }
    },
    "ReportItemReviewRequest": {
      "name": "ReportItemReviewRequest",
      "in": "body",
      "description": "Submit a report for an inappropriate review, allowing the submitting user to specify their concern.",
      "schema": {
        "$ref": "#/definitions/ReportItemReviewRequest"
      }
    },
    "ReviewItemRequest": {
      "name": "ReviewItemRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/ReviewItemRequest"
      }
    },
    "SearchItemsRequest": {
      "name": "SearchItemsRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/SearchItemsRequest"
      }
    },
    "SetItemModerationStateRequest": {
      "name": "SetItemModerationStateRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/SetItemModerationStateRequest"
      }
    },
    "SubmitItemReviewVoteRequest": {
      "name": "SubmitItemReviewVoteRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/SubmitItemReviewVoteRequest"
      }
    },
    "SubtractInventoryItemsRequest": {
      "name": "SubtractInventoryItemsRequest",
      "in": "body",
      "description": "Given an entity type, entity identifier and container details, will subtract the specified inventory items. ",
      "schema": {
        "$ref": "#/definitions/SubtractInventoryItemsRequest"
      }
    },
    "TakedownItemReviewsRequest": {
      "name": "TakedownItemReviewsRequest",
      "in": "body",
      "description": "Submit a request to takedown one or more reviews, removing them from public view. Authors will still be able to see their reviews after being taken down.",
      "schema": {
        "$ref": "#/definitions/TakedownItemReviewsRequest"
      }
    },
    "TransferInventoryItemsRequest": {
      "name": "TransferInventoryItemsRequest",
      "in": "body",
      "description": "Transfer the specified inventory items of an entity's container Id to another entity's container Id.",
      "schema": {
        "$ref": "#/definitions/TransferInventoryItemsRequest"
      }
    },
    "UpdateCatalogConfigRequest": {
      "name": "UpdateCatalogConfigRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/UpdateCatalogConfigRequest"
      }
    },
    "UpdateDraftItemRequest": {
      "name": "UpdateDraftItemRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/UpdateDraftItemRequest"
      }
    },
    "UpdateInventoryItemsRequest": {
      "name": "UpdateInventoryItemsRequest",
      "in": "body",
      "description": "Given an entity type, entity identifier and container details, will update the entity's inventory items",
      "schema": {
        "$ref": "#/definitions/UpdateInventoryItemsRequest"
      }
    }
  },
  "responses": {
    "ApiErrorWrapper": {
      "description": "This is the outer wrapper for all responses with errors",
      "schema": {
        "$ref": "#/definitions/ApiErrorWrapper"
      }
    },
    "AddInventoryItemsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/AddInventoryItemsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "IdempotencyId": "idempotencyId",
            "TransactionIds": [
              "transactionId1",
              "transactionId2"
            ]
          }
        }
      }
    },
    "CreateDraftItemResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CreateDraftItemResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Item": {
              "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
              "Type": "ugc",
              "Title": {
                "NEUTRAL": "Neutral title",
                "en-US": "US English title"
              },
              "Description": {
                "NEUTRAL": "Neutral description",
                "en-US": "US English description"
              },
              "Keywords": {
                "NEUTRAL": {
                  "Values": [
                    "Keyword_1",
                    "Keyword_2"
                  ]
                }
              },
              "ContentType": "example item",
              "CreatorEntity": {
                "Id": "someId",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "IsHidden": false,
              "Tags": [
                "pirates",
                "holiday"
              ],
              "DisplayVersion": "1.0.0",
              "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
              "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
              "Contents": [
                {
                  "Id": "00000000-0000-0000-0000-000000000001",
                  "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                  "MaxClientVersion": "2.4.1",
                  "MinClientVersion": "2.0.0"
                }
              ],
              "Images": [
                {
                  "Id": "00000000-0000-0000-0000-000000000003",
                  "Type": "Thumbnail",
                  "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
                }
              ],
              "DisplayProperties": {
                "mapDetails": {
                  "mapType": "desertIsland",
                  "gameMode": "capture",
                  "maxPlayers": 16
                },
                "averageMatchLengthInSeconds": 947
              },
              "ETag": "opaqueString",
              "DefaultStackId": "Static_Default_Stack_Id"
            }
          }
        }
      }
    },
    "CreateUploadUrlsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CreateUploadUrlsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "UploadUrls": [
              {
                "Id": "11111111-1111-1111-1111-111111111111",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/11111111-1111-1111-1111-111111111111/textures.zip",
                "FileName": "textures.zip"
              },
              {
                "Id": "22222222-2222-2222-2222-222222222222",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/22222222-2222-2222-2222-222222222222/sprites.png",
                "FileName": "sprites.png"
              }
            ]
          }
        }
      }
    },
    "DeleteEntityItemReviewsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/DeleteEntityItemReviewsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "DeleteInventoryCollectionResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/DeleteInventoryCollectionResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "DeleteInventoryItemsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/DeleteInventoryItemsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "IdempotencyId": "idempotencyId",
            "TransactionIds": [
              "transactionId1",
              "transactionId2"
            ]
          }
        }
      }
    },
    "DeleteItemResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/DeleteItemResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "ExecuteInventoryOperationsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ExecuteInventoryOperationsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "IdempotencyId": "idempotencyId",
            "TransactionIds": [
              "transactionId1",
              "transactionId2"
            ]
          }
        }
      }
    },
    "GetCatalogConfigResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetCatalogConfigResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Config": {
              "IsCatalogEnabled": true,
              "AdminEntities": [
                {
                  "Id": "ABC123",
                  "Type": "title_player_account",
                  "TypeString": "title_player_account"
                }
              ],
              "DisplayPropertyIndexInfos": [
                {
                  "Name": "damage",
                  "Type": "QueryDouble"
                }
              ],
              "ReviewerEntities": [
                {
                  "Id": "ABC123",
                  "Type": "title_player_account",
                  "TypeString": "title_player_account"
                }
              ],
              "UserGeneratedContent": {
                "ContentTypes": [
                  "skin",
                  "map",
                  "example item"
                ],
                "Tags": [
                  "pirate",
                  "holiday"
                ]
              }
            }
          }
        }
      }
    },
    "GetDraftItemResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetDraftItemResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Item": {
              "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
              "Type": "ugc",
              "Title": {
                "NEUTRAL": "Neutral title",
                "en-US": "US English title"
              },
              "Description": {
                "NEUTRAL": "Neutral description",
                "en-US": "US English description"
              },
              "Keywords": {
                "NEUTRAL": {
                  "Values": [
                    "Keyword_1",
                    "Keyword_2"
                  ]
                }
              },
              "ContentType": "example item",
              "CreatorEntity": {
                "Id": "someId",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "IsHidden": false,
              "Tags": [
                "pirates",
                "holiday"
              ],
              "DisplayVersion": "1.0.0",
              "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
              "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
              "Contents": [
                {
                  "Id": "00000000-0000-0000-0000-000000000001",
                  "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                  "MaxClientVersion": "2.4.1",
                  "MinClientVersion": "2.0.0"
                }
              ],
              "Images": [
                {
                  "Id": "00000000-0000-0000-0000-000000000003",
                  "Type": "Thumbnail",
                  "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
                }
              ],
              "DisplayProperties": {
                "mapDetails": {
                  "mapType": "desertIsland",
                  "gameMode": "capture",
                  "maxPlayers": 16
                },
                "averageMatchLengthInSeconds": 947
              },
              "ETag": "opaqueString",
              "DefaultStackId": "Static_Default_Stack_Id"
            }
          }
        }
      }
    },
    "GetDraftItemsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetDraftItemsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Items": [
              {
                "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
                "Type": "ugc",
                "Title": {
                  "NEUTRAL": "Neutral title",
                  "en-US": "US English title"
                },
                "Description": {
                  "NEUTRAL": "Neutral description",
                  "en-US": "US English description"
                },
                "Keywords": {
                  "NEUTRAL": {
                    "Values": [
                      "Keyword_1",
                      "Keyword_2"
                    ]
                  }
                },
                "ContentType": "example item",
                "CreatorEntity": {
                  "Id": "someId",
                  "Type": "title_player_account",
                  "TypeString": "title_player_account"
                },
                "IsHidden": false,
                "Tags": [
                  "pirates",
                  "holiday"
                ],
                "DisplayVersion": "1.0.0",
                "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
                "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
                "Contents": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000001",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                    "MaxClientVersion": "2.4.1",
                    "MinClientVersion": "2.0.0"
                  }
                ],
                "Images": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000003",
                    "Type": "Thumbnail",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
                  }
                ],
                "DisplayProperties": {
                  "mapDetails": {
                    "mapType": "desertIsland",
                    "gameMode": "capture",
                    "maxPlayers": 16
                  },
                  "averageMatchLengthInSeconds": 947
                },
                "ETag": "opaqueString",
                "DefaultStackId": "Static_Default_Stack_Id"
              },
              {
                "Id": "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee",
                "Type": "ugc",
                "Title": {
                  "NEUTRAL": "Neutral title",
                  "en-US": "US English title"
                },
                "Description": {
                  "NEUTRAL": "Neutral description",
                  "en-US": "US English description"
                },
                "Keywords": {
                  "NEUTRAL": {
                    "Values": [
                      "Keyword_1",
                      "Keyword_2"
                    ]
                  }
                },
                "ContentType": "example item",
                "CreatorEntity": {
                  "Id": "someId",
                  "Type": "title_player_account",
                  "TypeString": "title_player_account"
                },
                "IsHidden": false,
                "Tags": [
                  "pirates",
                  "holiday"
                ],
                "DisplayVersion": "1.0.0",
                "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
                "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
                "Contents": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000001",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                    "MaxClientVersion": "2.4.1",
                    "MinClientVersion": "2.0.0"
                  }
                ],
                "Images": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000003",
                    "Type": "Thumbnail",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
                  }
                ],
                "DisplayProperties": {
                  "mapDetails": {
                    "mapType": "desertIsland",
                    "gameMode": "capture",
                    "maxPlayers": 16
                  },
                  "averageMatchLengthInSeconds": 947
                },
                "ETag": "opaqueString",
                "DefaultStackId": "Static_Default_Stack_Id"
              }
            ],
            "ContinuationToken": "+RID:IQkbAIvkRQD9oQIAAAAAAA==#RT:1#TRC:10#FPC:AgEKHAoKAPEhAOAhQP8DWIAMAgB8rRACAJeAHAIA0r0="
          }
        }
      }
    },
    "GetEntityDraftItemsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetEntityDraftItemsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Items": [
              {
                "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
                "Type": "ugc",
                "Title": {
                  "NEUTRAL": "Neutral title",
                  "en-US": "US English title"
                },
                "Description": {
                  "NEUTRAL": "Neutral description",
                  "en-US": "US English description"
                },
                "Keywords": {
                  "NEUTRAL": {
                    "Values": [
                      "Keyword_1",
                      "Keyword_2"
                    ]
                  }
                },
                "ContentType": "example item",
                "CreatorEntity": {
                  "Id": "someId",
                  "Type": "title_player_account",
                  "TypeString": "title_player_account"
                },
                "IsHidden": false,
                "Tags": [
                  "pirates",
                  "holiday"
                ],
                "DisplayVersion": "1.0.0",
                "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
                "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
                "Contents": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000001",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                    "MaxClientVersion": "2.4.1",
                    "MinClientVersion": "2.0.0"
                  }
                ],
                "Images": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000003",
                    "Type": "Thumbnail",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
                  }
                ],
                "DisplayProperties": {
                  "mapDetails": {
                    "mapType": "desertIsland",
                    "gameMode": "capture",
                    "maxPlayers": 16
                  },
                  "averageMatchLengthInSeconds": 947
                },
                "ETag": "opaqueString",
                "DefaultStackId": "Static_Default_Stack_Id"
              },
              {
                "Id": "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee",
                "Type": "ugc",
                "Title": {
                  "NEUTRAL": "Neutral title",
                  "en-US": "US English title"
                },
                "Description": {
                  "NEUTRAL": "Neutral description",
                  "en-US": "US English description"
                },
                "Keywords": {
                  "NEUTRAL": {
                    "Values": [
                      "Keyword_1",
                      "Keyword_2"
                    ]
                  }
                },
                "ContentType": "example item",
                "CreatorEntity": {
                  "Id": "someId",
                  "Type": "title_player_account",
                  "TypeString": "title_player_account"
                },
                "IsHidden": false,
                "Tags": [
                  "pirates",
                  "holiday"
                ],
                "DisplayVersion": "1.0.0",
                "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
                "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
                "Contents": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000001",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                    "MaxClientVersion": "2.4.1",
                    "MinClientVersion": "2.0.0"
                  }
                ],
                "Images": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000003",
                    "Type": "Thumbnail",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
                  }
                ],
                "DisplayProperties": {
                  "mapDetails": {
                    "mapType": "desertIsland",
                    "gameMode": "capture",
                    "maxPlayers": 16
                  },
                  "averageMatchLengthInSeconds": 947
                },
                "ETag": "opaqueString",
                "DefaultStackId": "Static_Default_Stack_Id"
              }
            ],
            "ContinuationToken": "+RID:IQkbAIvkRQD9oQIAAAAAAA==#RT:1#TRC:10#FPC:AgEKHAoKAPEhAOAhQP8DWIAMAgB8rRACAJeAHAIA0r0="
          }
        }
      }
    },
    "GetEntityItemReviewResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetEntityItemReviewResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Review": {
              "ReviewId": "372f84cd-b45b-48a7-9549-2c09a6c12104",
              "ItemId": "dddddddd-dddd-dddd-dddd-dddddddddddd",
              "ReviewerEntity": {
                "Id": "ABCD1234",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "ReviewerId": "title_player_account!ABCD1234",
              "ItemVersion": "2.1.4",
              "Title": "Best game ever",
              "ReviewText": "I play this game every day. It's so much fun!",
              "Rating": 3,
              "IsInstalled": true,
              "Locale": "en-us",
              "HelpfulPositive": 11,
              "HelpfulNegative": 17,
              "Submitted": "2018-08-17T22:32:10.4729879+00:00"
            }
          }
        }
      }
    },
    "GetInventoryCollectionIdsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetInventoryCollectionIdsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "CollectionIds": [
              "default",
              "backpack"
            ]
          }
        }
      }
    },
    "GetInventoryItemsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetInventoryItemsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Items": [
              {
                "Id": "11111111-1111-1111-1111-111111111111",
                "StackId": "default",
                "Amount": 5,
                "Type": "catalogItem"
              },
              {
                "Id": "22222222-2222-2222-2222-222222222222",
                "StackId": "default",
                "Amount": 5,
                "Type": "catalogItem"
              }
            ]
          }
        }
      }
    },
    "GetItemContainersResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetItemContainersResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Containers": [
              {
                "Id": "11111111-1111-1111-1111-111111111111",
                "Type": "bundle",
                "Title": {
                  "NEUTRAL": "Neutral title",
                  "en-US": "US English title"
                },
                "Description": {
                  "NEUTRAL": "Neutral description",
                  "en-US": "US English description"
                },
                "ContentType": "example item",
                "CreatorEntity": {
                  "Id": "someId",
                  "Type": "title_player_account",
                  "TypeString": "title_player_account"
                },
                "Tags": [
                  "pirates",
                  "holiday"
                ],
                "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
                "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
                "Contents": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000001",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                    "MaxClientVersion": "2.4.1",
                    "MinClientVersion": "2.0.0"
                  }
                ],
                "Images": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000003",
                    "Type": "Thumbnail",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
                  }
                ],
                "ItemReferences": [
                  {
                    "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
                    "Amount": 1
                  }
                ],
                "PriceOptions": {
                  "Prices": [
                    {
                      "Amounts": [
                        {
                          "ItemId": "cccccccc-cccc-cccc-cccc-cccccccccccc",
                          "Amount": 3
                        }
                      ]
                    }
                  ]
                },
                "DisplayProperties": {
                  "mapDetails": {
                    "mapType": "desertIsland",
                    "gameMode": "capture",
                    "maxPlayers": 16
                  },
                  "averageMatchLengthInSeconds": 947
                },
                "DefaultStackId": "Static_Default_Stack_Id"
              },
              {
                "Id": "22222222-2222-2222-2222-222222222222",
                "Type": "store",
                "Title": {
                  "NEUTRAL": "Neutral title",
                  "en-US": "US English title"
                },
                "Description": {
                  "NEUTRAL": "Neutral description",
                  "en-US": "US English description"
                },
                "ContentType": "example item",
                "CreatorEntity": {
                  "Id": "someId",
                  "Type": "title_player_account",
                  "TypeString": "title_player_account"
                },
                "Tags": [
                  "pirates",
                  "holiday"
                ],
                "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
                "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
                "Contents": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000001",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                    "MaxClientVersion": "2.4.1",
                    "MinClientVersion": "2.0.0"
                  }
                ],
                "Images": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000003",
                    "Type": "Thumbnail",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
                  }
                ],
                "ItemReferences": [
                  {
                    "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
                    "Amount": 1
                  }
                ],
                "PriceOptions": {
                  "Prices": [
                    {
                      "Amounts": [
                        {
                          "ItemId": "cccccccc-cccc-cccc-cccc-cccccccccccc",
                          "Amount": 3
                        }
                      ]
                    }
                  ]
                },
                "DisplayProperties": {
                  "mapDetails": {
                    "mapType": "desertIsland",
                    "gameMode": "capture",
                    "maxPlayers": 16
                  },
                  "averageMatchLengthInSeconds": 947
                },
                "DefaultStackId": "Static_Default_Stack_Id"
              }
            ]
          }
        }
      }
    },
    "GetItemModerationStateResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetItemModerationStateResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "State": {
              "Status": "AwaitingModeration",
              "Reason": "User reports over threshold"
            }
          }
        }
      }
    },
    "GetItemPublishStatusResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetItemPublishStatusResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Result": "Pending",
            "StatusMessage": "publishing"
          }
        }
      }
    },
    "GetItemResponse": {
      "description": "Get item result.",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetItemResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Item": {
              "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
              "Type": "ugc",
              "Title": {
                "NEUTRAL": "Neutral title",
                "en-US": "US English title"
              },
              "Description": {
                "NEUTRAL": "Neutral description",
                "en-US": "US English description"
              },
              "Keywords": {
                "NEUTRAL": {
                  "Values": [
                    "Keyword_1",
                    "Keyword_2"
                  ]
                }
              },
              "ContentType": "example item",
              "CreatorEntity": {
                "Id": "someId",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "IsHidden": false,
              "Tags": [
                "pirates",
                "holiday"
              ],
              "DisplayVersion": "1.0.0",
              "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
              "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
              "Contents": [
                {
                  "Id": "00000000-0000-0000-0000-000000000001",
                  "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                  "MaxClientVersion": "2.4.1",
                  "MinClientVersion": "2.0.0"
                }
              ],
              "Images": [
                {
                  "Id": "00000000-0000-0000-0000-000000000003",
                  "Type": "Thumbnail",
                  "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
                }
              ],
              "DisplayProperties": {
                "mapDetails": {
                  "mapType": "desertIsland",
                  "gameMode": "capture",
                  "maxPlayers": 16
                },
                "averageMatchLengthInSeconds": 947
              },
              "ETag": "opaqueString",
              "DefaultStackId": "Static_Default_Stack_Id"
            }
          }
        }
      }
    },
    "GetItemReviewsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetItemReviewsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Reviews": [
              {
                "ReviewId": "372f84cd-b45b-48a7-9549-2c09a6c12104",
                "ItemId": "dddddddd-dddd-dddd-dddd-dddddddddddd",
                "ReviewerEntity": {
                  "Id": "ABCD1234",
                  "Type": "title_player_account",
                  "TypeString": "title_player_account"
                },
                "ReviewerId": "title_player_account!ABCD1234",
                "ItemVersion": "2.1.4",
                "Title": "Best game ever",
                "ReviewText": "I play this game every day. It's so much fun!",
                "Rating": 3,
                "IsInstalled": true,
                "Locale": "en-us",
                "HelpfulPositive": 11,
                "HelpfulNegative": 17,
                "Submitted": "2018-08-17T22:32:10.4729879+00:00"
              },
              {
                "ReviewId": "372f84cd-b45b-48a7-9549-2c09a6c12104",
                "ItemId": "dddddddd-dddd-dddd-dddd-dddddddddddd",
                "ReviewerEntity": {
                  "Id": "ABCD1234",
                  "Type": "title_player_account",
                  "TypeString": "title_player_account"
                },
                "ReviewerId": "title_player_account!ABCD1234",
                "ItemVersion": "2.1.4",
                "Title": "Best game ever",
                "ReviewText": "I play this game every day. It's so much fun!",
                "Rating": 3,
                "IsInstalled": true,
                "Locale": "en-us",
                "HelpfulPositive": 11,
                "HelpfulNegative": 17,
                "Submitted": "2018-08-17T22:32:10.4729879+00:00"
              }
            ],
            "ContinuationToken": "+RID:IQkbAIvkRQD9oQIAAAAAAA==#RT:1#TRC:10#FPC:AgEKHAoKAPEhAOAhQP8DWIAMAgB8rRACAJeAHAIA0r0="
          }
        }
      }
    },
    "GetItemReviewSummaryResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetItemReviewSummaryResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Rating": {
              "Average": 3.6,
              "TotalCount": 8,
              "Count5Star": 1,
              "Count4Star": 4,
              "Count3Star": 2,
              "Count2Star": 1,
              "Count1Star": 0
            },
            "ReviewsCount": 8,
            "MostFavorableReview": {
              "ReviewId": "00000000-0000-0000-0000-000000000004",
              "ItemId": "00000000-0000-0000-0000-000000000005",
              "ReviewerEntity": {
                "Id": "ABCD1234",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "ReviewerId": "title_player_account!ABCD1234",
              "ItemVersion": "2.1.4",
              "Title": "Best game ever",
              "ReviewText": "I play this game every day. It's so much fun!",
              "Rating": 5,
              "IsInstalled": true,
              "Locale": "en-us",
              "HelpfulPositive": 16,
              "HelpfulNegative": 1,
              "Submitted": "2018-08-17T22:32:10.4729879+00:00"
            },
            "LeastFavorableReview": {
              "ReviewId": "00000000-0000-0000-0000-000000000006",
              "ItemId": "00000000-0000-0000-0000-000000000005",
              "ReviewerEntity": {
                "Id": "EFGH5678",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "ReviewerId": "title_player_account!EFGH5678",
              "ItemVersion": "2.1.2",
              "Title": "It's a game",
              "ReviewText": "",
              "Rating": 2,
              "IsInstalled": true,
              "Locale": "en-us",
              "HelpfulNegative": 10,
              "Submitted": "2018-08-17T22:32:10.4729879+00:00"
            }
          }
        }
      }
    },
    "GetItemsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetItemsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Items": [
              {
                "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
                "Type": "ugc",
                "Title": {
                  "NEUTRAL": "Neutral title",
                  "en-US": "US English title"
                },
                "Description": {
                  "NEUTRAL": "Neutral description",
                  "en-US": "US English description"
                },
                "Keywords": {
                  "NEUTRAL": {
                    "Values": [
                      "Keyword_1",
                      "Keyword_2"
                    ]
                  }
                },
                "ContentType": "example item",
                "CreatorEntity": {
                  "Id": "someId",
                  "Type": "title_player_account",
                  "TypeString": "title_player_account"
                },
                "IsHidden": false,
                "Tags": [
                  "pirates",
                  "holiday"
                ],
                "DisplayVersion": "1.0.0",
                "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
                "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
                "Contents": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000001",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                    "MaxClientVersion": "2.4.1",
                    "MinClientVersion": "2.0.0"
                  }
                ],
                "Images": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000003",
                    "Type": "Thumbnail",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
                  }
                ],
                "DisplayProperties": {
                  "mapDetails": {
                    "mapType": "desertIsland",
                    "gameMode": "capture",
                    "maxPlayers": 16
                  },
                  "averageMatchLengthInSeconds": 947
                },
                "ETag": "opaqueString",
                "DefaultStackId": "Static_Default_Stack_Id"
              },
              {
                "Id": "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee",
                "Type": "ugc",
                "Title": {
                  "NEUTRAL": "Neutral title",
                  "en-US": "US English title"
                },
                "Description": {
                  "NEUTRAL": "Neutral description",
                  "en-US": "US English description"
                },
                "Keywords": {
                  "NEUTRAL": {
                    "Values": [
                      "Keyword_1",
                      "Keyword_2"
                    ]
                  }
                },
                "ContentType": "example item",
                "CreatorEntity": {
                  "Id": "someId",
                  "Type": "title_player_account",
                  "TypeString": "title_player_account"
                },
                "IsHidden": false,
                "Tags": [
                  "pirates",
                  "holiday"
                ],
                "DisplayVersion": "1.0.0",
                "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
                "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
                "Contents": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000001",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                    "MaxClientVersion": "2.4.1",
                    "MinClientVersion": "2.0.0"
                  }
                ],
                "Images": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000003",
                    "Type": "Thumbnail",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
                  }
                ],
                "DisplayProperties": {
                  "mapDetails": {
                    "mapType": "desertIsland",
                    "gameMode": "capture",
                    "maxPlayers": 16
                  },
                  "averageMatchLengthInSeconds": 947
                },
                "ETag": "opaqueString",
                "DefaultStackId": "Static_Default_Stack_Id"
              }
            ]
          }
        }
      }
    },
    "GetMicrosoftStoreAccessTokensResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetMicrosoftStoreAccessTokensResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "CollectionsAccessToken": "collectionsAccessToken",
            "CollectionsAccessTokenExpirationDate": "2022-09-07T00:00:00"
          }
        }
      }
    },
    "GetTransactionHistoryResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetTransactionHistoryResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Transactions": [
              {
                "TransactionId": "1",
                "ItemType": "catalogItem",
                "OperationType": "Add",
                "ApiName": "AddInventoryItems"
              },
              {
                "TransactionId": "2",
                "ItemType": "catalogItem",
                "OperationType": "Add",
                "ApiName": "AddInventoryItems"
              }
            ]
          }
        }
      }
    },
    "PublishDraftItemResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/PublishDraftItemResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "PurchaseInventoryItemsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/PurchaseInventoryItemsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "IdempotencyId": "idempotencyId",
            "TransactionIds": [
              "transactionId1",
              "transactionId2"
            ]
          }
        }
      }
    },
    "RedeemAppleAppStoreInventoryItemsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/RedeemAppleAppStoreInventoryItemsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "TransactionIds": [
              "transactionId1",
              "transactionId2"
            ],
            "Succeeded": [
              {
                "SuccessCode": "success",
                "SuccessTimestamp": "2022-09-08T00:00:00",
                "MarketplaceTransactionId": "marketplaceTransactionId1",
                "OfferId": "marketplaceOfferId1"
              },
              {
                "SuccessCode": "success",
                "SuccessTimestamp": "2022-09-08T00:00:00",
                "MarketplaceTransactionId": "marketplaceTransactionId2",
                "OfferId": "marketplaceOfferId2"
              }
            ],
            "Failed": []
          }
        }
      }
    },
    "RedeemGooglePlayInventoryItemsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/RedeemGooglePlayInventoryItemsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "TransactionIds": [
              "transactionId1",
              "transactionId2"
            ],
            "Succeeded": [
              {
                "SuccessCode": "success",
                "SuccessTimestamp": "2022-09-08T00:00:00",
                "MarketplaceTransactionId": "marketplaceTransactionId1",
                "OfferId": "marketplaceOfferId1"
              },
              {
                "SuccessCode": "success",
                "SuccessTimestamp": "2022-09-08T00:00:00",
                "MarketplaceTransactionId": "marketplaceTransactionId2",
                "OfferId": "marketplaceOfferId2"
              }
            ],
            "Failed": []
          }
        }
      }
    },
    "RedeemMicrosoftStoreInventoryItemsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/RedeemMicrosoftStoreInventoryItemsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "TransactionIds": [
              "transactionId1",
              "transactionId2"
            ],
            "Succeeded": [
              {
                "SuccessCode": "success",
                "SuccessTimestamp": "2022-09-08T00:00:00",
                "MarketplaceTransactionId": "marketplaceTransactionId1",
                "OfferId": "marketplaceOfferId1"
              },
              {
                "SuccessCode": "success",
                "SuccessTimestamp": "2022-09-08T00:00:00",
                "MarketplaceTransactionId": "marketplaceTransactionId2",
                "OfferId": "marketplaceOfferId2"
              }
            ],
            "Failed": []
          }
        }
      }
    },
    "RedeemNintendoEShopInventoryItemsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/RedeemNintendoEShopInventoryItemsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "TransactionIds": [
              "transactionId1",
              "transactionId2"
            ],
            "Succeeded": [
              {
                "SuccessCode": "success",
                "SuccessTimestamp": "2022-09-08T00:00:00",
                "MarketplaceTransactionId": "marketplaceTransactionId1",
                "OfferId": "marketplaceOfferId1"
              },
              {
                "SuccessCode": "success",
                "SuccessTimestamp": "2022-09-08T00:00:00",
                "MarketplaceTransactionId": "marketplaceTransactionId2",
                "OfferId": "marketplaceOfferId2"
              }
            ],
            "Failed": []
          }
        }
      }
    },
    "RedeemPlayStationStoreInventoryItemsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/RedeemPlayStationStoreInventoryItemsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "TransactionIds": [
              "transactionId1",
              "transactionId2"
            ],
            "Succeeded": [
              {
                "SuccessCode": "success",
                "SuccessTimestamp": "2022-09-08T00:00:00",
                "MarketplaceTransactionId": "marketplaceTransactionId1",
                "OfferId": "marketplaceOfferId1"
              },
              {
                "SuccessCode": "success",
                "SuccessTimestamp": "2022-09-08T00:00:00",
                "MarketplaceTransactionId": "marketplaceTransactionId2",
                "OfferId": "marketplaceOfferId2"
              }
            ],
            "Failed": []
          }
        }
      }
    },
    "RedeemSteamInventoryItemsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/RedeemSteamInventoryItemsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "TransactionIds": [
              "transactionId1",
              "transactionId2"
            ],
            "Succeeded": [
              {
                "SuccessCode": "success",
                "SuccessTimestamp": "2022-09-08T00:00:00",
                "MarketplaceTransactionId": "marketplaceTransactionId1",
                "OfferId": "marketplaceOfferId1"
              },
              {
                "SuccessCode": "success",
                "SuccessTimestamp": "2022-09-08T00:00:00",
                "MarketplaceTransactionId": "marketplaceTransactionId2",
                "OfferId": "marketplaceOfferId2"
              }
            ],
            "Failed": []
          }
        }
      }
    },
    "ReportItemResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ReportItemResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "ReportItemReviewResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ReportItemReviewResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "ReviewItemResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ReviewItemResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "SearchItemsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/SearchItemsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Items": [
              {
                "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
                "Type": "ugc",
                "Title": {
                  "NEUTRAL": "Neutral title",
                  "en-US": "US English title"
                },
                "Description": {
                  "NEUTRAL": "Neutral description",
                  "en-US": "US English description"
                },
                "ContentType": "example item",
                "CreatorEntity": {
                  "Id": "someId",
                  "Type": "title_player_account",
                  "TypeString": "title_player_account"
                },
                "Tags": [
                  "pirates",
                  "holiday"
                ],
                "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
                "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
                "Contents": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000001",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                    "MaxClientVersion": "2.4.1",
                    "MinClientVersion": "2.0.0"
                  }
                ],
                "Images": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000003",
                    "Type": "Thumbnail",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
                  }
                ],
                "PriceOptions": {
                  "Prices": [
                    {
                      "Amounts": [
                        {
                          "ItemId": "cccccccc-cccc-cccc-cccc-cccccccccccc",
                          "Amount": 3
                        }
                      ]
                    }
                  ]
                },
                "DisplayProperties": {
                  "mapDetails": {
                    "mapType": "desertIsland",
                    "gameMode": "capture",
                    "maxPlayers": 16
                  },
                  "averageMatchLengthInSeconds": 947
                },
                "DefaultStackId": "Static_Default_Stack_Id"
              },
              {
                "Id": "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee",
                "Type": "ugc",
                "Title": {
                  "NEUTRAL": "Neutral title",
                  "en-US": "US English title"
                },
                "Description": {
                  "NEUTRAL": "Neutral description",
                  "en-US": "US English description"
                },
                "ContentType": "example item",
                "CreatorEntity": {
                  "Id": "someId",
                  "Type": "title_player_account",
                  "TypeString": "title_player_account"
                },
                "Tags": [
                  "pirates",
                  "holiday"
                ],
                "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
                "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
                "Contents": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000001",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                    "MaxClientVersion": "2.4.1",
                    "MinClientVersion": "2.0.0"
                  }
                ],
                "Images": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000003",
                    "Type": "Thumbnail",
                    "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
                  }
                ],
                "PriceOptions": {
                  "Prices": [
                    {
                      "Amounts": [
                        {
                          "ItemId": "cccccccc-cccc-cccc-cccc-cccccccccccc",
                          "Amount": 3
                        }
                      ]
                    }
                  ]
                },
                "DisplayProperties": {
                  "mapDetails": {
                    "mapType": "desertIsland",
                    "gameMode": "capture",
                    "maxPlayers": 16
                  },
                  "averageMatchLengthInSeconds": 947
                },
                "DefaultStackId": "Static_Default_Stack_Id"
              }
            ],
            "ContinuationToken": "def=#"
          }
        }
      }
    },
    "SetItemModerationStateResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/SetItemModerationStateResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "SubmitItemReviewVoteResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/SubmitItemReviewVoteResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "SubtractInventoryItemsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/SubtractInventoryItemsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "IdempotencyId": "idempotencyId",
            "TransactionIds": [
              "transactionId1",
              "transactionId2"
            ]
          }
        }
      }
    },
    "TakedownItemReviewsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/TakedownItemReviewsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "TransferInventoryItemsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/TransferInventoryItemsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "IdempotencyId": "idempotencyId",
            "GivingTransactionIds": [
              "givingTransactionId1",
              "givingTransactionId2"
            ],
            "ReceivingTransactionIds": [
              "receivingTransactionId1",
              "receivingTransactionId2"
            ]
          }
        }
      }
    },
    "UpdateCatalogConfigResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/UpdateCatalogConfigResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "UpdateDraftItemResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/UpdateDraftItemResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Item": {
              "Id": "qqqqqqqq-qqqq-qqqq-qqqq-qqqqqqqqqqqq",
              "Type": "ugc",
              "Title": {
                "NEUTRAL": "Neutral title",
                "en-US": "US English title"
              },
              "Description": {
                "NEUTRAL": "Neutral description",
                "en-US": "US English description"
              },
              "Keywords": {
                "NEUTRAL": {
                  "Values": [
                    "Keyword_1",
                    "Keyword_2"
                  ]
                }
              },
              "ContentType": "example item",
              "CreatorEntity": {
                "Id": "someId",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "IsHidden": false,
              "Tags": [
                "pirates",
                "holiday"
              ],
              "DisplayVersion": "1.0.0",
              "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
              "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
              "Contents": [
                {
                  "Id": "00000000-0000-0000-0000-000000000001",
                  "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                  "MaxClientVersion": "2.4.1",
                  "MinClientVersion": "2.0.0"
                }
              ],
              "Images": [
                {
                  "Id": "00000000-0000-0000-0000-000000000003",
                  "Type": "Thumbnail",
                  "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
                }
              ],
              "DisplayProperties": {
                "mapDetails": {
                  "mapType": "desertIsland",
                  "gameMode": "capture",
                  "maxPlayers": 16
                },
                "averageMatchLengthInSeconds": 947
              },
              "ETag": "opaqueString",
              "DefaultStackId": "Static_Default_Stack_Id"
            }
          }
        }
      }
    },
    "UpdateInventoryItemsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/UpdateInventoryItemsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "IdempotencyId": "idempotencyId",
            "TransactionIds": [
              "transactionId1",
              "transactionId2"
            ]
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Catalog",
      "description": "Catalog Management APIs. In general for Catalog APIs, \n                    Read APIs are limited to 100 requests in 60 seconds \n                    for Player Entities while Title Entities are limited to 10000 requests\n                    in 10 seconds. For Write APIs, Player Entities are limited to 10 requests \n                    in 30 seconds and Title Entities are limited to 1000 requests in 10 seconds."
    },
    {
      "name": "Inventory",
      "description": "Player Inventory Management APIs. Inventory operations work on an \n                    eventually consistent system against a cache of the Catalog. It can take a few moments for \n                    changes to propagate. In general for Inventory APIs, Read APIs are limited to 100 requests \n                    in 60 seconds for Player Entities while Title Entities are limited to 10000 requests\n                    in 10 seconds. For Write APIs, Player Entities are limited to 30 requests \n                    in 90 seconds and Title Entities are limited to 1000 requests in 10 seconds."
    }
  ],
  "securityDefinitions": {
    "None": {
      "type": "apiKey",
      "in": "header",
      "name": "None",
      "description": "This API requires no authentication headers (usually provides one to other calls)."
    },
    "SessionTicket": {
      "type": "apiKey",
      "in": "header",
      "name": "X-Authorization",
      "description": "This API requires a client session ticket, available from any Client Login function."
    },
    "SecretKey": {
      "type": "apiKey",
      "in": "header",
      "name": "X-SecretKey",
      "description": "This API requires a title secret key, available to title admins, from PlayFab Game Manager."
    },
    "EntityToken": {
      "type": "apiKey",
      "in": "header",
      "name": "X-EntityToken",
      "description": "This API requires an Entity Session Token, available from the Entity GetEntityToken method."
    }
  },
  "x-ms-docs-errors-mapping": {
    "Success": {
      "name": "Success"
    },
    "UnkownError": {
      "id": 500,
      "name": "UnkownError"
    },
    "InvalidParams": {
      "id": 1000,
      "name": "InvalidParams"
    },
    "AccountNotFound": {
      "id": 1001,
      "name": "AccountNotFound"
    },
    "AccountBanned": {
      "id": 1002,
      "name": "AccountBanned"
    },
    "InvalidUsernameOrPassword": {
      "id": 1003,
      "name": "InvalidUsernameOrPassword"
    },
    "InvalidTitleId": {
      "id": 1004,
      "name": "InvalidTitleId"
    },
    "InvalidEmailAddress": {
      "id": 1005,
      "name": "InvalidEmailAddress"
    },
    "EmailAddressNotAvailable": {
      "id": 1006,
      "name": "EmailAddressNotAvailable"
    },
    "InvalidUsername": {
      "id": 1007,
      "name": "InvalidUsername"
    },
    "InvalidPassword": {
      "id": 1008,
      "name": "InvalidPassword"
    },
    "UsernameNotAvailable": {
      "id": 1009,
      "name": "UsernameNotAvailable"
    },
    "InvalidSteamTicket": {
      "id": 1010,
      "name": "InvalidSteamTicket"
    },
    "AccountAlreadyLinked": {
      "id": 1011,
      "name": "AccountAlreadyLinked"
    },
    "LinkedAccountAlreadyClaimed": {
      "id": 1012,
      "name": "LinkedAccountAlreadyClaimed"
    },
    "InvalidFacebookToken": {
      "id": 1013,
      "name": "InvalidFacebookToken"
    },
    "AccountNotLinked": {
      "id": 1014,
      "name": "AccountNotLinked"
    },
    "FailedByPaymentProvider": {
      "id": 1015,
      "name": "FailedByPaymentProvider"
    },
    "CouponCodeNotFound": {
      "id": 1016,
      "name": "CouponCodeNotFound"
    },
    "InvalidContainerItem": {
      "id": 1017,
      "name": "InvalidContainerItem"
    },
    "ContainerNotOwned": {
      "id": 1018,
      "name": "ContainerNotOwned"
    },
    "KeyNotOwned": {
      "id": 1019,
      "name": "KeyNotOwned"
    },
    "InvalidItemIdInTable": {
      "id": 1020,
      "name": "InvalidItemIdInTable"
    },
    "InvalidReceipt": {
      "id": 1021,
      "name": "InvalidReceipt"
    },
    "ReceiptAlreadyUsed": {
      "id": 1022,
      "name": "ReceiptAlreadyUsed"
    },
    "ReceiptCancelled": {
      "id": 1023,
      "name": "ReceiptCancelled"
    },
    "GameNotFound": {
      "id": 1024,
      "name": "GameNotFound"
    },
    "GameModeNotFound": {
      "id": 1025,
      "name": "GameModeNotFound"
    },
    "InvalidGoogleToken": {
      "id": 1026,
      "name": "InvalidGoogleToken"
    },
    "UserIsNotPartOfDeveloper": {
      "id": 1027,
      "name": "UserIsNotPartOfDeveloper"
    },
    "InvalidTitleForDeveloper": {
      "id": 1028,
      "name": "InvalidTitleForDeveloper"
    },
    "TitleNameConflicts": {
      "id": 1029,
      "name": "TitleNameConflicts"
    },
    "UserisNotValid": {
      "id": 1030,
      "name": "UserisNotValid"
    },
    "ValueAlreadyExists": {
      "id": 1031,
      "name": "ValueAlreadyExists"
    },
    "BuildNotFound": {
      "id": 1032,
      "name": "BuildNotFound"
    },
    "PlayerNotInGame": {
      "id": 1033,
      "name": "PlayerNotInGame"
    },
    "InvalidTicket": {
      "id": 1034,
      "name": "InvalidTicket"
    },
    "InvalidDeveloper": {
      "id": 1035,
      "name": "InvalidDeveloper"
    },
    "InvalidOrderInfo": {
      "id": 1036,
      "name": "InvalidOrderInfo"
    },
    "RegistrationIncomplete": {
      "id": 1037,
      "name": "RegistrationIncomplete"
    },
    "InvalidPlatform": {
      "id": 1038,
      "name": "InvalidPlatform"
    },
    "UnknownError": {
      "id": 1039,
      "name": "UnknownError"
    },
    "SteamApplicationNotOwned": {
      "id": 1040,
      "name": "SteamApplicationNotOwned"
    },
    "WrongSteamAccount": {
      "id": 1041,
      "name": "WrongSteamAccount"
    },
    "TitleNotActivated": {
      "id": 1042,
      "name": "TitleNotActivated"
    },
    "RegistrationSessionNotFound": {
      "id": 1043,
      "name": "RegistrationSessionNotFound"
    },
    "NoSuchMod": {
      "id": 1044,
      "name": "NoSuchMod"
    },
    "FileNotFound": {
      "id": 1045,
      "name": "FileNotFound"
    },
    "DuplicateEmail": {
      "id": 1046,
      "name": "DuplicateEmail"
    },
    "ItemNotFound": {
      "id": 1047,
      "name": "ItemNotFound"
    },
    "ItemNotOwned": {
      "id": 1048,
      "name": "ItemNotOwned"
    },
    "ItemNotRecycleable": {
      "id": 1049,
      "name": "ItemNotRecycleable"
    },
    "ItemNotAffordable": {
      "id": 1050,
      "name": "ItemNotAffordable"
    },
    "InvalidVirtualCurrency": {
      "id": 1051,
      "name": "InvalidVirtualCurrency"
    },
    "WrongVirtualCurrency": {
      "id": 1052,
      "name": "WrongVirtualCurrency"
    },
    "WrongPrice": {
      "id": 1053,
      "name": "WrongPrice"
    },
    "NonPositiveValue": {
      "id": 1054,
      "name": "NonPositiveValue"
    },
    "InvalidRegion": {
      "id": 1055,
      "name": "InvalidRegion"
    },
    "RegionAtCapacity": {
      "id": 1056,
      "name": "RegionAtCapacity"
    },
    "ServerFailedToStart": {
      "id": 1057,
      "name": "ServerFailedToStart"
    },
    "NameNotAvailable": {
      "id": 1058,
      "name": "NameNotAvailable"
    },
    "InsufficientFunds": {
      "id": 1059,
      "name": "InsufficientFunds"
    },
    "InvalidDeviceID": {
      "id": 1060,
      "name": "InvalidDeviceID"
    },
    "InvalidPushNotificationToken": {
      "id": 1061,
      "name": "InvalidPushNotificationToken"
    },
    "NoRemainingUses": {
      "id": 1062,
      "name": "NoRemainingUses"
    },
    "InvalidPaymentProvider": {
      "id": 1063,
      "name": "InvalidPaymentProvider"
    },
    "PurchaseInitializationFailure": {
      "id": 1064,
      "name": "PurchaseInitializationFailure"
    },
    "DuplicateUsername": {
      "id": 1065,
      "name": "DuplicateUsername"
    },
    "InvalidBuyerInfo": {
      "id": 1066,
      "name": "InvalidBuyerInfo"
    },
    "NoGameModeParamsSet": {
      "id": 1067,
      "name": "NoGameModeParamsSet"
    },
    "BodyTooLarge": {
      "id": 1068,
      "name": "BodyTooLarge"
    },
    "ReservedWordInBody": {
      "id": 1069,
      "name": "ReservedWordInBody"
    },
    "InvalidTypeInBody": {
      "id": 1070,
      "name": "InvalidTypeInBody"
    },
    "InvalidRequest": {
      "id": 1071,
      "name": "InvalidRequest"
    },
    "ReservedEventName": {
      "id": 1072,
      "name": "ReservedEventName"
    },
    "InvalidUserStatistics": {
      "id": 1073,
      "name": "InvalidUserStatistics"
    },
    "NotAuthenticated": {
      "id": 1074,
      "name": "NotAuthenticated"
    },
    "StreamAlreadyExists": {
      "id": 1075,
      "name": "StreamAlreadyExists"
    },
    "ErrorCreatingStream": {
      "id": 1076,
      "name": "ErrorCreatingStream"
    },
    "StreamNotFound": {
      "id": 1077,
      "name": "StreamNotFound"
    },
    "InvalidAccount": {
      "id": 1078,
      "name": "InvalidAccount"
    },
    "PurchaseDoesNotExist": {
      "id": 1080,
      "name": "PurchaseDoesNotExist"
    },
    "InvalidPurchaseTransactionStatus": {
      "id": 1081,
      "name": "InvalidPurchaseTransactionStatus"
    },
    "APINotEnabledForGameClientAccess": {
      "id": 1082,
      "name": "APINotEnabledForGameClientAccess"
    },
    "NoPushNotificationARNForTitle": {
      "id": 1083,
      "name": "NoPushNotificationARNForTitle"
    },
    "BuildAlreadyExists": {
      "id": 1084,
      "name": "BuildAlreadyExists"
    },
    "BuildPackageDoesNotExist": {
      "id": 1085,
      "name": "BuildPackageDoesNotExist"
    },
    "CustomAnalyticsEventsNotEnabledForTitle": {
      "id": 1087,
      "name": "CustomAnalyticsEventsNotEnabledForTitle"
    },
    "InvalidSharedGroupId": {
      "id": 1088,
      "name": "InvalidSharedGroupId"
    },
    "NotAuthorized": {
      "id": 1089,
      "name": "NotAuthorized"
    },
    "MissingTitleGoogleProperties": {
      "id": 1090,
      "name": "MissingTitleGoogleProperties"
    },
    "InvalidItemProperties": {
      "id": 1091,
      "name": "InvalidItemProperties"
    },
    "InvalidPSNAuthCode": {
      "id": 1092,
      "name": "InvalidPSNAuthCode"
    },
    "InvalidItemId": {
      "id": 1093,
      "name": "InvalidItemId"
    },
    "PushNotEnabledForAccount": {
      "id": 1094,
      "name": "PushNotEnabledForAccount"
    },
    "PushServiceError": {
      "id": 1095,
      "name": "PushServiceError"
    },
    "ReceiptDoesNotContainInAppItems": {
      "id": 1096,
      "name": "ReceiptDoesNotContainInAppItems"
    },
    "ReceiptContainsMultipleInAppItems": {
      "id": 1097,
      "name": "ReceiptContainsMultipleInAppItems"
    },
    "InvalidBundleID": {
      "id": 1098,
      "name": "InvalidBundleID"
    },
    "JavascriptException": {
      "id": 1099,
      "name": "JavascriptException"
    },
    "InvalidSessionTicket": {
      "id": 1100,
      "name": "InvalidSessionTicket"
    },
    "UnableToConnectToDatabase": {
      "id": 1101,
      "name": "UnableToConnectToDatabase"
    },
    "InternalServerError": {
      "id": 1110,
      "name": "InternalServerError"
    },
    "InvalidReportDate": {
      "id": 1111,
      "name": "InvalidReportDate"
    },
    "ReportNotAvailable": {
      "id": 1112,
      "name": "ReportNotAvailable"
    },
    "DatabaseThroughputExceeded": {
      "id": 1113,
      "name": "DatabaseThroughputExceeded"
    },
    "InvalidGameTicket": {
      "id": 1115,
      "name": "InvalidGameTicket"
    },
    "ExpiredGameTicket": {
      "id": 1116,
      "name": "ExpiredGameTicket"
    },
    "GameTicketDoesNotMatchLobby": {
      "id": 1117,
      "name": "GameTicketDoesNotMatchLobby"
    },
    "LinkedDeviceAlreadyClaimed": {
      "id": 1118,
      "name": "LinkedDeviceAlreadyClaimed"
    },
    "DeviceAlreadyLinked": {
      "id": 1119,
      "name": "DeviceAlreadyLinked"
    },
    "DeviceNotLinked": {
      "id": 1120,
      "name": "DeviceNotLinked"
    },
    "PartialFailure": {
      "id": 1121,
      "name": "PartialFailure"
    },
    "PublisherNotSet": {
      "id": 1122,
      "name": "PublisherNotSet"
    },
    "ServiceUnavailable": {
      "id": 1123,
      "name": "ServiceUnavailable"
    },
    "VersionNotFound": {
      "id": 1124,
      "name": "VersionNotFound"
    },
    "RevisionNotFound": {
      "id": 1125,
      "name": "RevisionNotFound"
    },
    "InvalidPublisherId": {
      "id": 1126,
      "name": "InvalidPublisherId"
    },
    "DownstreamServiceUnavailable": {
      "id": 1127,
      "name": "DownstreamServiceUnavailable"
    },
    "APINotIncludedInTitleUsageTier": {
      "id": 1128,
      "name": "APINotIncludedInTitleUsageTier"
    },
    "DAULimitExceeded": {
      "id": 1129,
      "name": "DAULimitExceeded"
    },
    "APIRequestLimitExceeded": {
      "id": 1130,
      "name": "APIRequestLimitExceeded"
    },
    "InvalidAPIEndpoint": {
      "id": 1131,
      "name": "InvalidAPIEndpoint"
    },
    "BuildNotAvailable": {
      "id": 1132,
      "name": "BuildNotAvailable"
    },
    "ConcurrentEditError": {
      "id": 1133,
      "name": "ConcurrentEditError"
    },
    "ContentNotFound": {
      "id": 1134,
      "name": "ContentNotFound"
    },
    "CharacterNotFound": {
      "id": 1135,
      "name": "CharacterNotFound"
    },
    "CloudScriptNotFound": {
      "id": 1136,
      "name": "CloudScriptNotFound"
    },
    "ContentQuotaExceeded": {
      "id": 1137,
      "name": "ContentQuotaExceeded"
    },
    "InvalidCharacterStatistics": {
      "id": 1138,
      "name": "InvalidCharacterStatistics"
    },
    "PhotonNotEnabledForTitle": {
      "id": 1139,
      "name": "PhotonNotEnabledForTitle"
    },
    "PhotonApplicationNotFound": {
      "id": 1140,
      "name": "PhotonApplicationNotFound"
    },
    "PhotonApplicationNotAssociatedWithTitle": {
      "id": 1141,
      "name": "PhotonApplicationNotAssociatedWithTitle"
    },
    "InvalidEmailOrPassword": {
      "id": 1142,
      "name": "InvalidEmailOrPassword"
    },
    "FacebookAPIError": {
      "id": 1143,
      "name": "FacebookAPIError"
    },
    "InvalidContentType": {
      "id": 1144,
      "name": "InvalidContentType"
    },
    "KeyLengthExceeded": {
      "id": 1145,
      "name": "KeyLengthExceeded"
    },
    "DataLengthExceeded": {
      "id": 1146,
      "name": "DataLengthExceeded"
    },
    "TooManyKeys": {
      "id": 1147,
      "name": "TooManyKeys"
    },
    "FreeTierCannotHaveVirtualCurrency": {
      "id": 1148,
      "name": "FreeTierCannotHaveVirtualCurrency"
    },
    "MissingAmazonSharedKey": {
      "id": 1149,
      "name": "MissingAmazonSharedKey"
    },
    "AmazonValidationError": {
      "id": 1150,
      "name": "AmazonValidationError"
    },
    "InvalidPSNIssuerId": {
      "id": 1151,
      "name": "InvalidPSNIssuerId"
    },
    "PSNInaccessible": {
      "id": 1152,
      "name": "PSNInaccessible"
    },
    "ExpiredAuthToken": {
      "id": 1153,
      "name": "ExpiredAuthToken"
    },
    "FailedToGetEntitlements": {
      "id": 1154,
      "name": "FailedToGetEntitlements"
    },
    "FailedToConsumeEntitlement": {
      "id": 1155,
      "name": "FailedToConsumeEntitlement"
    },
    "TradeAcceptingUserNotAllowed": {
      "id": 1156,
      "name": "TradeAcceptingUserNotAllowed"
    },
    "TradeInventoryItemIsAssignedToCharacter": {
      "id": 1157,
      "name": "TradeInventoryItemIsAssignedToCharacter"
    },
    "TradeInventoryItemIsBundle": {
      "id": 1158,
      "name": "TradeInventoryItemIsBundle"
    },
    "TradeStatusNotValidForCancelling": {
      "id": 1159,
      "name": "TradeStatusNotValidForCancelling"
    },
    "TradeStatusNotValidForAccepting": {
      "id": 1160,
      "name": "TradeStatusNotValidForAccepting"
    },
    "TradeDoesNotExist": {
      "id": 1161,
      "name": "TradeDoesNotExist"
    },
    "TradeCancelled": {
      "id": 1162,
      "name": "TradeCancelled"
    },
    "TradeAlreadyFilled": {
      "id": 1163,
      "name": "TradeAlreadyFilled"
    },
    "TradeWaitForStatusTimeout": {
      "id": 1164,
      "name": "TradeWaitForStatusTimeout"
    },
    "TradeInventoryItemExpired": {
      "id": 1165,
      "name": "TradeInventoryItemExpired"
    },
    "TradeMissingOfferedAndAcceptedItems": {
      "id": 1166,
      "name": "TradeMissingOfferedAndAcceptedItems"
    },
    "TradeAcceptedItemIsBundle": {
      "id": 1167,
      "name": "TradeAcceptedItemIsBundle"
    },
    "TradeAcceptedItemIsStackable": {
      "id": 1168,
      "name": "TradeAcceptedItemIsStackable"
    },
    "TradeInventoryItemInvalidStatus": {
      "id": 1169,
      "name": "TradeInventoryItemInvalidStatus"
    },
    "TradeAcceptedCatalogItemInvalid": {
      "id": 1170,
      "name": "TradeAcceptedCatalogItemInvalid"
    },
    "TradeAllowedUsersInvalid": {
      "id": 1171,
      "name": "TradeAllowedUsersInvalid"
    },
    "TradeInventoryItemDoesNotExist": {
      "id": 1172,
      "name": "TradeInventoryItemDoesNotExist"
    },
    "TradeInventoryItemIsConsumed": {
      "id": 1173,
      "name": "TradeInventoryItemIsConsumed"
    },
    "TradeInventoryItemIsStackable": {
      "id": 1174,
      "name": "TradeInventoryItemIsStackable"
    },
    "TradeAcceptedItemsMismatch": {
      "id": 1175,
      "name": "TradeAcceptedItemsMismatch"
    },
    "InvalidKongregateToken": {
      "id": 1176,
      "name": "InvalidKongregateToken"
    },
    "FeatureNotConfiguredForTitle": {
      "id": 1177,
      "name": "FeatureNotConfiguredForTitle"
    },
    "NoMatchingCatalogItemForReceipt": {
      "id": 1178,
      "name": "NoMatchingCatalogItemForReceipt"
    },
    "InvalidCurrencyCode": {
      "id": 1179,
      "name": "InvalidCurrencyCode"
    },
    "NoRealMoneyPriceForCatalogItem": {
      "id": 1180,
      "name": "NoRealMoneyPriceForCatalogItem"
    },
    "TradeInventoryItemIsNotTradable": {
      "id": 1181,
      "name": "TradeInventoryItemIsNotTradable"
    },
    "TradeAcceptedCatalogItemIsNotTradable": {
      "id": 1182,
      "name": "TradeAcceptedCatalogItemIsNotTradable"
    },
    "UsersAlreadyFriends": {
      "id": 1183,
      "name": "UsersAlreadyFriends"
    },
    "LinkedIdentifierAlreadyClaimed": {
      "id": 1184,
      "name": "LinkedIdentifierAlreadyClaimed"
    },
    "CustomIdNotLinked": {
      "id": 1185,
      "name": "CustomIdNotLinked"
    },
    "TotalDataSizeExceeded": {
      "id": 1186,
      "name": "TotalDataSizeExceeded"
    },
    "DeleteKeyConflict": {
      "id": 1187,
      "name": "DeleteKeyConflict"
    },
    "InvalidXboxLiveToken": {
      "id": 1188,
      "name": "InvalidXboxLiveToken"
    },
    "ExpiredXboxLiveToken": {
      "id": 1189,
      "name": "ExpiredXboxLiveToken"
    },
    "ResettableStatisticVersionRequired": {
      "id": 1190,
      "name": "ResettableStatisticVersionRequired"
    },
    "NotAuthorizedByTitle": {
      "id": 1191,
      "name": "NotAuthorizedByTitle"
    },
    "NoPartnerEnabled": {
      "id": 1192,
      "name": "NoPartnerEnabled"
    },
    "InvalidPartnerResponse": {
      "id": 1193,
      "name": "InvalidPartnerResponse"
    },
    "APINotEnabledForGameServerAccess": {
      "id": 1194,
      "name": "APINotEnabledForGameServerAccess"
    },
    "StatisticNotFound": {
      "id": 1195,
      "name": "StatisticNotFound"
    },
    "StatisticNameConflict": {
      "id": 1196,
      "name": "StatisticNameConflict"
    },
    "StatisticVersionClosedForWrites": {
      "id": 1197,
      "name": "StatisticVersionClosedForWrites"
    },
    "StatisticVersionInvalid": {
      "id": 1198,
      "name": "StatisticVersionInvalid"
    },
    "APIClientRequestRateLimitExceeded": {
      "id": 1199,
      "name": "APIClientRequestRateLimitExceeded"
    },
    "InvalidJSONContent": {
      "id": 1200,
      "name": "InvalidJSONContent"
    },
    "InvalidDropTable": {
      "id": 1201,
      "name": "InvalidDropTable"
    },
    "StatisticVersionAlreadyIncrementedForScheduledInterval": {
      "id": 1202,
      "name": "StatisticVersionAlreadyIncrementedForScheduledInterval"
    },
    "StatisticCountLimitExceeded": {
      "id": 1203,
      "name": "StatisticCountLimitExceeded"
    },
    "StatisticVersionIncrementRateExceeded": {
      "id": 1204,
      "name": "StatisticVersionIncrementRateExceeded"
    },
    "ContainerKeyInvalid": {
      "id": 1205,
      "name": "ContainerKeyInvalid"
    },
    "CloudScriptExecutionTimeLimitExceeded": {
      "id": 1206,
      "name": "CloudScriptExecutionTimeLimitExceeded"
    },
    "NoWritePermissionsForEvent": {
      "id": 1207,
      "name": "NoWritePermissionsForEvent"
    },
    "CloudScriptFunctionArgumentSizeExceeded": {
      "id": 1208,
      "name": "CloudScriptFunctionArgumentSizeExceeded"
    },
    "CloudScriptAPIRequestCountExceeded": {
      "id": 1209,
      "name": "CloudScriptAPIRequestCountExceeded"
    },
    "CloudScriptAPIRequestError": {
      "id": 1210,
      "name": "CloudScriptAPIRequestError"
    },
    "CloudScriptHTTPRequestError": {
      "id": 1211,
      "name": "CloudScriptHTTPRequestError"
    },
    "InsufficientGuildRole": {
      "id": 1212,
      "name": "InsufficientGuildRole"
    },
    "GuildNotFound": {
      "id": 1213,
      "name": "GuildNotFound"
    },
    "OverLimit": {
      "id": 1214,
      "name": "OverLimit"
    },
    "EventNotFound": {
      "id": 1215,
      "name": "EventNotFound"
    },
    "InvalidEventField": {
      "id": 1216,
      "name": "InvalidEventField"
    },
    "InvalidEventName": {
      "id": 1217,
      "name": "InvalidEventName"
    },
    "CatalogNotConfigured": {
      "id": 1218,
      "name": "CatalogNotConfigured"
    },
    "OperationNotSupportedForPlatform": {
      "id": 1219,
      "name": "OperationNotSupportedForPlatform"
    },
    "SegmentNotFound": {
      "id": 1220,
      "name": "SegmentNotFound"
    },
    "StoreNotFound": {
      "id": 1221,
      "name": "StoreNotFound"
    },
    "InvalidStatisticName": {
      "id": 1222,
      "name": "InvalidStatisticName"
    },
    "TitleNotQualifiedForLimit": {
      "id": 1223,
      "name": "TitleNotQualifiedForLimit"
    },
    "InvalidServiceLimitLevel": {
      "id": 1224,
      "name": "InvalidServiceLimitLevel"
    },
    "ServiceLimitLevelInTransition": {
      "id": 1225,
      "name": "ServiceLimitLevelInTransition"
    },
    "CouponAlreadyRedeemed": {
      "id": 1226,
      "name": "CouponAlreadyRedeemed"
    },
    "GameServerBuildSizeLimitExceeded": {
      "id": 1227,
      "name": "GameServerBuildSizeLimitExceeded"
    },
    "GameServerBuildCountLimitExceeded": {
      "id": 1228,
      "name": "GameServerBuildCountLimitExceeded"
    },
    "VirtualCurrencyCountLimitExceeded": {
      "id": 1229,
      "name": "VirtualCurrencyCountLimitExceeded"
    },
    "VirtualCurrencyCodeExists": {
      "id": 1230,
      "name": "VirtualCurrencyCodeExists"
    },
    "TitleNewsItemCountLimitExceeded": {
      "id": 1231,
      "name": "TitleNewsItemCountLimitExceeded"
    },
    "InvalidTwitchToken": {
      "id": 1232,
      "name": "InvalidTwitchToken"
    },
    "TwitchResponseError": {
      "id": 1233,
      "name": "TwitchResponseError"
    },
    "ProfaneDisplayName": {
      "id": 1234,
      "name": "ProfaneDisplayName"
    },
    "UserAlreadyAdded": {
      "id": 1235,
      "name": "UserAlreadyAdded"
    },
    "InvalidVirtualCurrencyCode": {
      "id": 1236,
      "name": "InvalidVirtualCurrencyCode"
    },
    "VirtualCurrencyCannotBeDeleted": {
      "id": 1237,
      "name": "VirtualCurrencyCannotBeDeleted"
    },
    "IdentifierAlreadyClaimed": {
      "id": 1238,
      "name": "IdentifierAlreadyClaimed"
    },
    "IdentifierNotLinked": {
      "id": 1239,
      "name": "IdentifierNotLinked"
    },
    "InvalidContinuationToken": {
      "id": 1240,
      "name": "InvalidContinuationToken"
    },
    "ExpiredContinuationToken": {
      "id": 1241,
      "name": "ExpiredContinuationToken"
    },
    "InvalidSegment": {
      "id": 1242,
      "name": "InvalidSegment"
    },
    "InvalidSessionId": {
      "id": 1243,
      "name": "InvalidSessionId"
    },
    "SessionLogNotFound": {
      "id": 1244,
      "name": "SessionLogNotFound"
    },
    "InvalidSearchTerm": {
      "id": 1245,
      "name": "InvalidSearchTerm"
    },
    "TwoFactorAuthenticationTokenRequired": {
      "id": 1246,
      "name": "TwoFactorAuthenticationTokenRequired"
    },
    "GameServerHostCountLimitExceeded": {
      "id": 1247,
      "name": "GameServerHostCountLimitExceeded"
    },
    "PlayerTagCountLimitExceeded": {
      "id": 1248,
      "name": "PlayerTagCountLimitExceeded"
    },
    "RequestAlreadyRunning": {
      "id": 1249,
      "name": "RequestAlreadyRunning"
    },
    "ActionGroupNotFound": {
      "id": 1250,
      "name": "ActionGroupNotFound"
    },
    "MaximumSegmentBulkActionJobsRunning": {
      "id": 1251,
      "name": "MaximumSegmentBulkActionJobsRunning"
    },
    "NoActionsOnPlayersInSegmentJob": {
      "id": 1252,
      "name": "NoActionsOnPlayersInSegmentJob"
    },
    "DuplicateStatisticName": {
      "id": 1253,
      "name": "DuplicateStatisticName"
    },
    "ScheduledTaskNameConflict": {
      "id": 1254,
      "name": "ScheduledTaskNameConflict"
    },
    "ScheduledTaskCreateConflict": {
      "id": 1255,
      "name": "ScheduledTaskCreateConflict"
    },
    "InvalidScheduledTaskName": {
      "id": 1256,
      "name": "InvalidScheduledTaskName"
    },
    "InvalidTaskSchedule": {
      "id": 1257,
      "name": "InvalidTaskSchedule"
    },
    "SteamNotEnabledForTitle": {
      "id": 1258,
      "name": "SteamNotEnabledForTitle"
    },
    "LimitNotAnUpgradeOption": {
      "id": 1259,
      "name": "LimitNotAnUpgradeOption"
    },
    "NoSecretKeyEnabledForCloudScript": {
      "id": 1260,
      "name": "NoSecretKeyEnabledForCloudScript"
    },
    "TaskNotFound": {
      "id": 1261,
      "name": "TaskNotFound"
    },
    "TaskInstanceNotFound": {
      "id": 1262,
      "name": "TaskInstanceNotFound"
    },
    "InvalidIdentityProviderId": {
      "id": 1263,
      "name": "InvalidIdentityProviderId"
    },
    "MisconfiguredIdentityProvider": {
      "id": 1264,
      "name": "MisconfiguredIdentityProvider"
    },
    "InvalidScheduledTaskType": {
      "id": 1265,
      "name": "InvalidScheduledTaskType"
    },
    "BillingInformationRequired": {
      "id": 1266,
      "name": "BillingInformationRequired"
    },
    "LimitedEditionItemUnavailable": {
      "id": 1267,
      "name": "LimitedEditionItemUnavailable"
    },
    "InvalidAdPlacementAndReward": {
      "id": 1268,
      "name": "InvalidAdPlacementAndReward"
    },
    "AllAdPlacementViewsAlreadyConsumed": {
      "id": 1269,
      "name": "AllAdPlacementViewsAlreadyConsumed"
    },
    "GoogleOAuthNotConfiguredForTitle": {
      "id": 1270,
      "name": "GoogleOAuthNotConfiguredForTitle"
    },
    "GoogleOAuthError": {
      "id": 1271,
      "name": "GoogleOAuthError"
    },
    "UserNotFriend": {
      "id": 1272,
      "name": "UserNotFriend"
    },
    "InvalidSignature": {
      "id": 1273,
      "name": "InvalidSignature"
    },
    "InvalidPublicKey": {
      "id": 1274,
      "name": "InvalidPublicKey"
    },
    "GoogleOAuthNoIdTokenIncludedInResponse": {
      "id": 1275,
      "name": "GoogleOAuthNoIdTokenIncludedInResponse"
    },
    "StatisticUpdateInProgress": {
      "id": 1276,
      "name": "StatisticUpdateInProgress"
    },
    "LeaderboardVersionNotAvailable": {
      "id": 1277,
      "name": "LeaderboardVersionNotAvailable"
    },
    "StatisticAlreadyHasPrizeTable": {
      "id": 1279,
      "name": "StatisticAlreadyHasPrizeTable"
    },
    "PrizeTableHasOverlappingRanks": {
      "id": 1280,
      "name": "PrizeTableHasOverlappingRanks"
    },
    "PrizeTableHasMissingRanks": {
      "id": 1281,
      "name": "PrizeTableHasMissingRanks"
    },
    "PrizeTableRankStartsAtZero": {
      "id": 1282,
      "name": "PrizeTableRankStartsAtZero"
    },
    "InvalidStatistic": {
      "id": 1283,
      "name": "InvalidStatistic"
    },
    "ExpressionParseFailure": {
      "id": 1284,
      "name": "ExpressionParseFailure"
    },
    "ExpressionInvokeFailure": {
      "id": 1285,
      "name": "ExpressionInvokeFailure"
    },
    "ExpressionTooLong": {
      "id": 1286,
      "name": "ExpressionTooLong"
    },
    "DataUpdateRateExceeded": {
      "id": 1287,
      "name": "DataUpdateRateExceeded"
    },
    "RestrictedEmailDomain": {
      "id": 1288,
      "name": "RestrictedEmailDomain"
    },
    "EncryptionKeyDisabled": {
      "id": 1289,
      "name": "EncryptionKeyDisabled"
    },
    "EncryptionKeyMissing": {
      "id": 1290,
      "name": "EncryptionKeyMissing"
    },
    "EncryptionKeyBroken": {
      "id": 1291,
      "name": "EncryptionKeyBroken"
    },
    "NoSharedSecretKeyConfigured": {
      "id": 1292,
      "name": "NoSharedSecretKeyConfigured"
    },
    "SecretKeyNotFound": {
      "id": 1293,
      "name": "SecretKeyNotFound"
    },
    "PlayerSecretAlreadyConfigured": {
      "id": 1294,
      "name": "PlayerSecretAlreadyConfigured"
    },
    "APIRequestsDisabledForTitle": {
      "id": 1295,
      "name": "APIRequestsDisabledForTitle"
    },
    "InvalidSharedSecretKey": {
      "id": 1296,
      "name": "InvalidSharedSecretKey"
    },
    "PrizeTableHasNoRanks": {
      "id": 1297,
      "name": "PrizeTableHasNoRanks"
    },
    "ProfileDoesNotExist": {
      "id": 1298,
      "name": "ProfileDoesNotExist"
    },
    "ContentS3OriginBucketNotConfigured": {
      "id": 1299,
      "name": "ContentS3OriginBucketNotConfigured"
    },
    "InvalidEnvironmentForReceipt": {
      "id": 1300,
      "name": "InvalidEnvironmentForReceipt"
    },
    "EncryptedRequestNotAllowed": {
      "id": 1301,
      "name": "EncryptedRequestNotAllowed"
    },
    "SignedRequestNotAllowed": {
      "id": 1302,
      "name": "SignedRequestNotAllowed"
    },
    "RequestViewConstraintParamsNotAllowed": {
      "id": 1303,
      "name": "RequestViewConstraintParamsNotAllowed"
    },
    "BadPartnerConfiguration": {
      "id": 1304,
      "name": "BadPartnerConfiguration"
    },
    "XboxBPCertificateFailure": {
      "id": 1305,
      "name": "XboxBPCertificateFailure"
    },
    "XboxXASSExchangeFailure": {
      "id": 1306,
      "name": "XboxXASSExchangeFailure"
    },
    "InvalidEntityId": {
      "id": 1307,
      "name": "InvalidEntityId"
    },
    "StatisticValueAggregationOverflow": {
      "id": 1308,
      "name": "StatisticValueAggregationOverflow"
    },
    "EmailMessageFromAddressIsMissing": {
      "id": 1309,
      "name": "EmailMessageFromAddressIsMissing"
    },
    "EmailMessageToAddressIsMissing": {
      "id": 1310,
      "name": "EmailMessageToAddressIsMissing"
    },
    "SmtpServerAuthenticationError": {
      "id": 1311,
      "name": "SmtpServerAuthenticationError"
    },
    "SmtpServerLimitExceeded": {
      "id": 1312,
      "name": "SmtpServerLimitExceeded"
    },
    "SmtpServerInsufficientStorage": {
      "id": 1313,
      "name": "SmtpServerInsufficientStorage"
    },
    "SmtpServerCommunicationError": {
      "id": 1314,
      "name": "SmtpServerCommunicationError"
    },
    "SmtpServerGeneralFailure": {
      "id": 1315,
      "name": "SmtpServerGeneralFailure"
    },
    "EmailClientTimeout": {
      "id": 1316,
      "name": "EmailClientTimeout"
    },
    "EmailClientCanceledTask": {
      "id": 1317,
      "name": "EmailClientCanceledTask"
    },
    "EmailTemplateMissing": {
      "id": 1318,
      "name": "EmailTemplateMissing"
    },
    "InvalidHostForTitleId": {
      "id": 1319,
      "name": "InvalidHostForTitleId"
    },
    "EmailConfirmationTokenDoesNotExist": {
      "id": 1320,
      "name": "EmailConfirmationTokenDoesNotExist"
    },
    "EmailConfirmationTokenExpired": {
      "id": 1321,
      "name": "EmailConfirmationTokenExpired"
    },
    "AccountDeleted": {
      "id": 1322,
      "name": "AccountDeleted"
    },
    "PlayerSecretNotConfigured": {
      "id": 1323,
      "name": "PlayerSecretNotConfigured"
    },
    "InvalidSignatureTime": {
      "id": 1324,
      "name": "InvalidSignatureTime"
    },
    "NoContactEmailAddressFound": {
      "id": 1325,
      "name": "NoContactEmailAddressFound"
    },
    "InvalidAuthToken": {
      "id": 1326,
      "name": "InvalidAuthToken"
    },
    "AuthTokenDoesNotExist": {
      "id": 1327,
      "name": "AuthTokenDoesNotExist"
    },
    "AuthTokenExpired": {
      "id": 1328,
      "name": "AuthTokenExpired"
    },
    "AuthTokenAlreadyUsedToResetPassword": {
      "id": 1329,
      "name": "AuthTokenAlreadyUsedToResetPassword"
    },
    "MembershipNameTooLong": {
      "id": 1330,
      "name": "MembershipNameTooLong"
    },
    "MembershipNotFound": {
      "id": 1331,
      "name": "MembershipNotFound"
    },
    "GoogleServiceAccountInvalid": {
      "id": 1332,
      "name": "GoogleServiceAccountInvalid"
    },
    "GoogleServiceAccountParseFailure": {
      "id": 1333,
      "name": "GoogleServiceAccountParseFailure"
    },
    "EntityTokenMissing": {
      "id": 1334,
      "name": "EntityTokenMissing"
    },
    "EntityTokenInvalid": {
      "id": 1335,
      "name": "EntityTokenInvalid"
    },
    "EntityTokenExpired": {
      "id": 1336,
      "name": "EntityTokenExpired"
    },
    "EntityTokenRevoked": {
      "id": 1337,
      "name": "EntityTokenRevoked"
    },
    "InvalidProductForSubscription": {
      "id": 1338,
      "name": "InvalidProductForSubscription"
    },
    "XboxInaccessible": {
      "id": 1339,
      "name": "XboxInaccessible"
    },
    "SubscriptionAlreadyTaken": {
      "id": 1340,
      "name": "SubscriptionAlreadyTaken"
    },
    "SmtpAddonNotEnabled": {
      "id": 1341,
      "name": "SmtpAddonNotEnabled"
    },
    "APIConcurrentRequestLimitExceeded": {
      "id": 1342,
      "name": "APIConcurrentRequestLimitExceeded"
    },
    "XboxRejectedXSTSExchangeRequest": {
      "id": 1343,
      "name": "XboxRejectedXSTSExchangeRequest"
    },
    "VariableNotDefined": {
      "id": 1344,
      "name": "VariableNotDefined"
    },
    "TemplateVersionNotDefined": {
      "id": 1345,
      "name": "TemplateVersionNotDefined"
    },
    "FileTooLarge": {
      "id": 1346,
      "name": "FileTooLarge"
    },
    "TitleDeleted": {
      "id": 1347,
      "name": "TitleDeleted"
    },
    "TitleContainsUserAccounts": {
      "id": 1348,
      "name": "TitleContainsUserAccounts"
    },
    "TitleDeletionPlayerCleanupFailure": {
      "id": 1349,
      "name": "TitleDeletionPlayerCleanupFailure"
    },
    "EntityFileOperationPending": {
      "id": 1350,
      "name": "EntityFileOperationPending"
    },
    "NoEntityFileOperationPending": {
      "id": 1351,
      "name": "NoEntityFileOperationPending"
    },
    "EntityProfileVersionMismatch": {
      "id": 1352,
      "name": "EntityProfileVersionMismatch"
    },
    "TemplateVersionTooOld": {
      "id": 1353,
      "name": "TemplateVersionTooOld"
    },
    "MembershipDefinitionInUse": {
      "id": 1354,
      "name": "MembershipDefinitionInUse"
    },
    "PaymentPageNotConfigured": {
      "id": 1355,
      "name": "PaymentPageNotConfigured"
    },
    "FailedLoginAttemptRateLimitExceeded": {
      "id": 1356,
      "name": "FailedLoginAttemptRateLimitExceeded"
    },
    "EntityBlockedByGroup": {
      "id": 1357,
      "name": "EntityBlockedByGroup"
    },
    "RoleDoesNotExist": {
      "id": 1358,
      "name": "RoleDoesNotExist"
    },
    "EntityIsAlreadyMember": {
      "id": 1359,
      "name": "EntityIsAlreadyMember"
    },
    "DuplicateRoleId": {
      "id": 1360,
      "name": "DuplicateRoleId"
    },
    "GroupInvitationNotFound": {
      "id": 1361,
      "name": "GroupInvitationNotFound"
    },
    "GroupApplicationNotFound": {
      "id": 1362,
      "name": "GroupApplicationNotFound"
    },
    "OutstandingInvitationAcceptedInstead": {
      "id": 1363,
      "name": "OutstandingInvitationAcceptedInstead"
    },
    "OutstandingApplicationAcceptedInstead": {
      "id": 1364,
      "name": "OutstandingApplicationAcceptedInstead"
    },
    "RoleIsGroupDefaultMember": {
      "id": 1365,
      "name": "RoleIsGroupDefaultMember"
    },
    "RoleIsGroupAdmin": {
      "id": 1366,
      "name": "RoleIsGroupAdmin"
    },
    "RoleNameNotAvailable": {
      "id": 1367,
      "name": "RoleNameNotAvailable"
    },
    "GroupNameNotAvailable": {
      "id": 1368,
      "name": "GroupNameNotAvailable"
    },
    "EmailReportAlreadySent": {
      "id": 1369,
      "name": "EmailReportAlreadySent"
    },
    "EmailReportRecipientBlacklisted": {
      "id": 1370,
      "name": "EmailReportRecipientBlacklisted"
    },
    "EventNamespaceNotAllowed": {
      "id": 1371,
      "name": "EventNamespaceNotAllowed"
    },
    "EventEntityNotAllowed": {
      "id": 1372,
      "name": "EventEntityNotAllowed"
    },
    "InvalidEntityType": {
      "id": 1373,
      "name": "InvalidEntityType"
    },
    "NullTokenResultFromAad": {
      "id": 1374,
      "name": "NullTokenResultFromAad"
    },
    "InvalidTokenResultFromAad": {
      "id": 1375,
      "name": "InvalidTokenResultFromAad"
    },
    "NoValidCertificateForAad": {
      "id": 1376,
      "name": "NoValidCertificateForAad"
    },
    "InvalidCertificateForAad": {
      "id": 1377,
      "name": "InvalidCertificateForAad"
    },
    "DuplicateDropTableId": {
      "id": 1378,
      "name": "DuplicateDropTableId"
    },
    "MultiplayerServerError": {
      "id": 1379,
      "name": "MultiplayerServerError"
    },
    "MultiplayerServerTooManyRequests": {
      "id": 1380,
      "name": "MultiplayerServerTooManyRequests"
    },
    "MultiplayerServerNoContent": {
      "id": 1381,
      "name": "MultiplayerServerNoContent"
    },
    "MultiplayerServerBadRequest": {
      "id": 1382,
      "name": "MultiplayerServerBadRequest"
    },
    "MultiplayerServerUnauthorized": {
      "id": 1383,
      "name": "MultiplayerServerUnauthorized"
    },
    "MultiplayerServerForbidden": {
      "id": 1384,
      "name": "MultiplayerServerForbidden"
    },
    "MultiplayerServerNotFound": {
      "id": 1385,
      "name": "MultiplayerServerNotFound"
    },
    "MultiplayerServerConflict": {
      "id": 1386,
      "name": "MultiplayerServerConflict"
    },
    "MultiplayerServerInternalServerError": {
      "id": 1387,
      "name": "MultiplayerServerInternalServerError"
    },
    "MultiplayerServerUnavailable": {
      "id": 1388,
      "name": "MultiplayerServerUnavailable"
    },
    "ExplicitContentDetected": {
      "id": 1389,
      "name": "ExplicitContentDetected"
    },
    "PIIContentDetected": {
      "id": 1390,
      "name": "PIIContentDetected"
    },
    "InvalidScheduledTaskParameter": {
      "id": 1391,
      "name": "InvalidScheduledTaskParameter"
    },
    "PerEntityEventRateLimitExceeded": {
      "id": 1392,
      "name": "PerEntityEventRateLimitExceeded"
    },
    "TitleDefaultLanguageNotSet": {
      "id": 1393,
      "name": "TitleDefaultLanguageNotSet"
    },
    "EmailTemplateMissingDefaultVersion": {
      "id": 1394,
      "name": "EmailTemplateMissingDefaultVersion"
    },
    "FacebookInstantGamesIdNotLinked": {
      "id": 1395,
      "name": "FacebookInstantGamesIdNotLinked"
    },
    "InvalidFacebookInstantGamesSignature": {
      "id": 1396,
      "name": "InvalidFacebookInstantGamesSignature"
    },
    "FacebookInstantGamesAuthNotConfiguredForTitle": {
      "id": 1397,
      "name": "FacebookInstantGamesAuthNotConfiguredForTitle"
    },
    "EntityProfileConstraintValidationFailed": {
      "id": 1398,
      "name": "EntityProfileConstraintValidationFailed"
    },
    "TelemetryIngestionKeyPending": {
      "id": 1399,
      "name": "TelemetryIngestionKeyPending"
    },
    "TelemetryIngestionKeyNotFound": {
      "id": 1400,
      "name": "TelemetryIngestionKeyNotFound"
    },
    "StatisticChildNameInvalid": {
      "id": 1402,
      "name": "StatisticChildNameInvalid"
    },
    "DataIntegrityError": {
      "id": 1403,
      "name": "DataIntegrityError"
    },
    "VirtualCurrencyCannotBeSetToOlderVersion": {
      "id": 1404,
      "name": "VirtualCurrencyCannotBeSetToOlderVersion"
    },
    "VirtualCurrencyMustBeWithinIntegerRange": {
      "id": 1405,
      "name": "VirtualCurrencyMustBeWithinIntegerRange"
    },
    "EmailTemplateInvalidSyntax": {
      "id": 1406,
      "name": "EmailTemplateInvalidSyntax"
    },
    "EmailTemplateMissingCallback": {
      "id": 1407,
      "name": "EmailTemplateMissingCallback"
    },
    "PushNotificationTemplateInvalidPayload": {
      "id": 1408,
      "name": "PushNotificationTemplateInvalidPayload"
    },
    "InvalidLocalizedPushNotificationLanguage": {
      "id": 1409,
      "name": "InvalidLocalizedPushNotificationLanguage"
    },
    "MissingLocalizedPushNotificationMessage": {
      "id": 1410,
      "name": "MissingLocalizedPushNotificationMessage"
    },
    "PushNotificationTemplateMissingPlatformPayload": {
      "id": 1411,
      "name": "PushNotificationTemplateMissingPlatformPayload"
    },
    "PushNotificationTemplatePayloadContainsInvalidJson": {
      "id": 1412,
      "name": "PushNotificationTemplatePayloadContainsInvalidJson"
    },
    "PushNotificationTemplateContainsInvalidIosPayload": {
      "id": 1413,
      "name": "PushNotificationTemplateContainsInvalidIosPayload"
    },
    "PushNotificationTemplateContainsInvalidAndroidPayload": {
      "id": 1414,
      "name": "PushNotificationTemplateContainsInvalidAndroidPayload"
    },
    "PushNotificationTemplateIosPayloadMissingNotificationBody": {
      "id": 1415,
      "name": "PushNotificationTemplateIosPayloadMissingNotificationBody"
    },
    "PushNotificationTemplateAndroidPayloadMissingNotificationBody": {
      "id": 1416,
      "name": "PushNotificationTemplateAndroidPayloadMissingNotificationBody"
    },
    "PushNotificationTemplateNotFound": {
      "id": 1417,
      "name": "PushNotificationTemplateNotFound"
    },
    "PushNotificationTemplateMissingDefaultVersion": {
      "id": 1418,
      "name": "PushNotificationTemplateMissingDefaultVersion"
    },
    "PushNotificationTemplateInvalidSyntax": {
      "id": 1419,
      "name": "PushNotificationTemplateInvalidSyntax"
    },
    "PushNotificationTemplateNoCustomPayloadForV1": {
      "id": 1420,
      "name": "PushNotificationTemplateNoCustomPayloadForV1"
    },
    "NoLeaderboardForStatistic": {
      "id": 1421,
      "name": "NoLeaderboardForStatistic"
    },
    "TitleNewsMissingDefaultLanguage": {
      "id": 1422,
      "name": "TitleNewsMissingDefaultLanguage"
    },
    "TitleNewsNotFound": {
      "id": 1423,
      "name": "TitleNewsNotFound"
    },
    "TitleNewsDuplicateLanguage": {
      "id": 1424,
      "name": "TitleNewsDuplicateLanguage"
    },
    "TitleNewsMissingTitleOrBody": {
      "id": 1425,
      "name": "TitleNewsMissingTitleOrBody"
    },
    "TitleNewsInvalidLanguage": {
      "id": 1426,
      "name": "TitleNewsInvalidLanguage"
    },
    "EmailRecipientBlacklisted": {
      "id": 1427,
      "name": "EmailRecipientBlacklisted"
    },
    "InvalidGameCenterAuthRequest": {
      "id": 1428,
      "name": "InvalidGameCenterAuthRequest"
    },
    "GameCenterAuthenticationFailed": {
      "id": 1429,
      "name": "GameCenterAuthenticationFailed"
    },
    "CannotEnablePartiesForTitle": {
      "id": 1430,
      "name": "CannotEnablePartiesForTitle"
    },
    "PartyError": {
      "id": 1431,
      "name": "PartyError"
    },
    "PartyRequests": {
      "id": 1432,
      "name": "PartyRequests"
    },
    "PartyNoContent": {
      "id": 1433,
      "name": "PartyNoContent"
    },
    "PartyBadRequest": {
      "id": 1434,
      "name": "PartyBadRequest"
    },
    "PartyUnauthorized": {
      "id": 1435,
      "name": "PartyUnauthorized"
    },
    "PartyForbidden": {
      "id": 1436,
      "name": "PartyForbidden"
    },
    "PartyNotFound": {
      "id": 1437,
      "name": "PartyNotFound"
    },
    "PartyConflict": {
      "id": 1438,
      "name": "PartyConflict"
    },
    "PartyInternalServerError": {
      "id": 1439,
      "name": "PartyInternalServerError"
    },
    "PartyUnavailable": {
      "id": 1440,
      "name": "PartyUnavailable"
    },
    "PartyTooManyRequests": {
      "id": 1441,
      "name": "PartyTooManyRequests"
    },
    "PushNotificationTemplateMissingName": {
      "id": 1442,
      "name": "PushNotificationTemplateMissingName"
    },
    "CannotEnableMultiplayerServersForTitle": {
      "id": 1443,
      "name": "CannotEnableMultiplayerServersForTitle"
    },
    "WriteAttemptedDuringExport": {
      "id": 1444,
      "name": "WriteAttemptedDuringExport"
    },
    "MultiplayerServerTitleQuotaCoresExceeded": {
      "id": 1445,
      "name": "MultiplayerServerTitleQuotaCoresExceeded"
    },
    "AutomationRuleNotFound": {
      "id": 1446,
      "name": "AutomationRuleNotFound"
    },
    "EntityAPIKeyLimitExceeded": {
      "id": 1447,
      "name": "EntityAPIKeyLimitExceeded"
    },
    "EntityAPIKeyNotFound": {
      "id": 1448,
      "name": "EntityAPIKeyNotFound"
    },
    "EntityAPIKeyOrSecretInvalid": {
      "id": 1449,
      "name": "EntityAPIKeyOrSecretInvalid"
    },
    "EconomyServiceUnavailable": {
      "id": 1450,
      "name": "EconomyServiceUnavailable"
    },
    "EconomyServiceInternalError": {
      "id": 1451,
      "name": "EconomyServiceInternalError"
    },
    "QueryRateLimitExceeded": {
      "id": 1452,
      "name": "QueryRateLimitExceeded"
    },
    "EntityAPIKeyCreationDisabledForEntity": {
      "id": 1453,
      "name": "EntityAPIKeyCreationDisabledForEntity"
    },
    "ForbiddenByEntityPolicy": {
      "id": 1454,
      "name": "ForbiddenByEntityPolicy"
    },
    "UpdateInventoryRateLimitExceeded": {
      "id": 1455,
      "name": "UpdateInventoryRateLimitExceeded"
    },
    "StudioCreationRateLimited": {
      "id": 1456,
      "name": "StudioCreationRateLimited"
    },
    "StudioCreationInProgress": {
      "id": 1457,
      "name": "StudioCreationInProgress"
    },
    "DuplicateStudioName": {
      "id": 1458,
      "name": "DuplicateStudioName"
    },
    "StudioNotFound": {
      "id": 1459,
      "name": "StudioNotFound"
    },
    "StudioDeleted": {
      "id": 1460,
      "name": "StudioDeleted"
    },
    "StudioDeactivated": {
      "id": 1461,
      "name": "StudioDeactivated"
    },
    "StudioActivated": {
      "id": 1462,
      "name": "StudioActivated"
    },
    "TitleCreationRateLimited": {
      "id": 1463,
      "name": "TitleCreationRateLimited"
    },
    "TitleCreationInProgress": {
      "id": 1464,
      "name": "TitleCreationInProgress"
    },
    "DuplicateTitleName": {
      "id": 1465,
      "name": "DuplicateTitleName"
    },
    "TitleActivationRateLimited": {
      "id": 1466,
      "name": "TitleActivationRateLimited"
    },
    "TitleActivationInProgress": {
      "id": 1467,
      "name": "TitleActivationInProgress"
    },
    "TitleDeactivated": {
      "id": 1468,
      "name": "TitleDeactivated"
    },
    "TitleActivated": {
      "id": 1469,
      "name": "TitleActivated"
    },
    "CloudScriptAzureFunctionsExecutionTimeLimitExceeded": {
      "id": 1470,
      "name": "CloudScriptAzureFunctionsExecutionTimeLimitExceeded"
    },
    "CloudScriptAzureFunctionsArgumentSizeExceeded": {
      "id": 1471,
      "name": "CloudScriptAzureFunctionsArgumentSizeExceeded"
    },
    "CloudScriptAzureFunctionsReturnSizeExceeded": {
      "id": 1472,
      "name": "CloudScriptAzureFunctionsReturnSizeExceeded"
    },
    "CloudScriptAzureFunctionsHTTPRequestError": {
      "id": 1473,
      "name": "CloudScriptAzureFunctionsHTTPRequestError"
    },
    "VirtualCurrencyBetaGetError": {
      "id": 1474,
      "name": "VirtualCurrencyBetaGetError"
    },
    "VirtualCurrencyBetaCreateError": {
      "id": 1475,
      "name": "VirtualCurrencyBetaCreateError"
    },
    "VirtualCurrencyBetaInitialDepositSaveError": {
      "id": 1476,
      "name": "VirtualCurrencyBetaInitialDepositSaveError"
    },
    "VirtualCurrencyBetaSaveError": {
      "id": 1477,
      "name": "VirtualCurrencyBetaSaveError"
    },
    "VirtualCurrencyBetaDeleteError": {
      "id": 1478,
      "name": "VirtualCurrencyBetaDeleteError"
    },
    "VirtualCurrencyBetaRestoreError": {
      "id": 1479,
      "name": "VirtualCurrencyBetaRestoreError"
    },
    "VirtualCurrencyBetaSaveConflict": {
      "id": 1480,
      "name": "VirtualCurrencyBetaSaveConflict"
    },
    "VirtualCurrencyBetaUpdateError": {
      "id": 1481,
      "name": "VirtualCurrencyBetaUpdateError"
    },
    "InsightsManagementDatabaseNotFound": {
      "id": 1482,
      "name": "InsightsManagementDatabaseNotFound"
    },
    "InsightsManagementOperationNotFound": {
      "id": 1483,
      "name": "InsightsManagementOperationNotFound"
    },
    "InsightsManagementErrorPendingOperationExists": {
      "id": 1484,
      "name": "InsightsManagementErrorPendingOperationExists"
    },
    "InsightsManagementSetPerformanceLevelInvalidParameter": {
      "id": 1485,
      "name": "InsightsManagementSetPerformanceLevelInvalidParameter"
    },
    "InsightsManagementSetStorageRetentionInvalidParameter": {
      "id": 1486,
      "name": "InsightsManagementSetStorageRetentionInvalidParameter"
    },
    "InsightsManagementGetStorageUsageInvalidParameter": {
      "id": 1487,
      "name": "InsightsManagementGetStorageUsageInvalidParameter"
    },
    "InsightsManagementGetOperationStatusInvalidParameter": {
      "id": 1488,
      "name": "InsightsManagementGetOperationStatusInvalidParameter"
    },
    "DuplicatePurchaseTransactionId": {
      "id": 1489,
      "name": "DuplicatePurchaseTransactionId"
    },
    "EvaluationModePlayerCountExceeded": {
      "id": 1490,
      "name": "EvaluationModePlayerCountExceeded"
    },
    "GetPlayersInSegmentRateLimitExceeded": {
      "id": 1491,
      "name": "GetPlayersInSegmentRateLimitExceeded"
    },
    "CloudScriptFunctionNameSizeExceeded": {
      "id": 1492,
      "name": "CloudScriptFunctionNameSizeExceeded"
    },
    "PaidInsightsFeaturesNotEnabled": {
      "id": 1493,
      "name": "PaidInsightsFeaturesNotEnabled"
    },
    "CloudScriptAzureFunctionsQueueRequestError": {
      "id": 1494,
      "name": "CloudScriptAzureFunctionsQueueRequestError"
    },
    "EvaluationModeTitleCountExceeded": {
      "id": 1495,
      "name": "EvaluationModeTitleCountExceeded"
    },
    "InsightsManagementTitleNotInFlight": {
      "id": 1496,
      "name": "InsightsManagementTitleNotInFlight"
    },
    "LimitNotFound": {
      "id": 1497,
      "name": "LimitNotFound"
    },
    "LimitNotAvailableViaAPI": {
      "id": 1498,
      "name": "LimitNotAvailableViaAPI"
    },
    "InsightsManagementSetStorageRetentionBelowMinimum": {
      "id": 1499,
      "name": "InsightsManagementSetStorageRetentionBelowMinimum"
    },
    "InsightsManagementSetStorageRetentionAboveMaximum": {
      "id": 1500,
      "name": "InsightsManagementSetStorageRetentionAboveMaximum"
    },
    "AppleNotEnabledForTitle": {
      "id": 1501,
      "name": "AppleNotEnabledForTitle"
    },
    "InsightsManagementNewActiveEventExportLimitInvalid": {
      "id": 1502,
      "name": "InsightsManagementNewActiveEventExportLimitInvalid"
    },
    "InsightsManagementSetPerformanceRateLimited": {
      "id": 1503,
      "name": "InsightsManagementSetPerformanceRateLimited"
    },
    "PartyRequestsThrottledFromRateLimiter": {
      "id": 1504,
      "name": "PartyRequestsThrottledFromRateLimiter"
    },
    "XboxServiceTooManyRequests": {
      "id": 1505,
      "name": "XboxServiceTooManyRequests"
    },
    "NintendoSwitchNotEnabledForTitle": {
      "id": 1506,
      "name": "NintendoSwitchNotEnabledForTitle"
    },
    "RequestMultiplayerServersThrottledFromRateLimiter": {
      "id": 1507,
      "name": "RequestMultiplayerServersThrottledFromRateLimiter"
    },
    "TitleDataOverrideNotFound": {
      "id": 1508,
      "name": "TitleDataOverrideNotFound"
    },
    "DuplicateKeys": {
      "id": 1509,
      "name": "DuplicateKeys"
    },
    "WasNotCreatedWithCloudRoot": {
      "id": 1510,
      "name": "WasNotCreatedWithCloudRoot"
    },
    "LegacyMultiplayerServersDeprecated": {
      "id": 1511,
      "name": "LegacyMultiplayerServersDeprecated"
    },
    "VirtualCurrencyCurrentlyUnavailable": {
      "id": 1512,
      "name": "VirtualCurrencyCurrentlyUnavailable"
    },
    "SteamUserNotFound": {
      "id": 1513,
      "name": "SteamUserNotFound"
    },
    "ElasticSearchOperationFailed": {
      "id": 1514,
      "name": "ElasticSearchOperationFailed"
    },
    "NotImplemented": {
      "id": 1515,
      "name": "NotImplemented"
    },
    "PublisherNotFound": {
      "id": 1516,
      "name": "PublisherNotFound"
    },
    "PublisherDeleted": {
      "id": 1517,
      "name": "PublisherDeleted"
    },
    "ApiDisabledForMigration": {
      "id": 1518,
      "name": "ApiDisabledForMigration"
    },
    "ResourceNameUpdateNotAllowed": {
      "id": 1519,
      "name": "ResourceNameUpdateNotAllowed"
    },
    "ApiNotEnabledForTitle": {
      "id": 1520,
      "name": "ApiNotEnabledForTitle"
    },
    "DuplicateTitleNameForPublisher": {
      "id": 1521,
      "name": "DuplicateTitleNameForPublisher"
    },
    "AzureTitleCreationInProgress": {
      "id": 1522,
      "name": "AzureTitleCreationInProgress"
    },
    "TitleConstraintsPublisherDeletion": {
      "id": 1524,
      "name": "TitleConstraintsPublisherDeletion"
    },
    "InvalidPlayerAccountPoolId": {
      "id": 1525,
      "name": "InvalidPlayerAccountPoolId"
    },
    "PlayerAccountPoolNotFound": {
      "id": 1526,
      "name": "PlayerAccountPoolNotFound"
    },
    "PlayerAccountPoolDeleted": {
      "id": 1527,
      "name": "PlayerAccountPoolDeleted"
    },
    "TitleCleanupInProgress": {
      "id": 1528,
      "name": "TitleCleanupInProgress"
    },
    "AzureResourceConcurrentOperationInProgress": {
      "id": 1529,
      "name": "AzureResourceConcurrentOperationInProgress"
    },
    "TitlePublisherUpdateNotAllowed": {
      "id": 1530,
      "name": "TitlePublisherUpdateNotAllowed"
    },
    "AzureResourceManagerNotSupportedInStamp": {
      "id": 1531,
      "name": "AzureResourceManagerNotSupportedInStamp"
    },
    "ApiNotIncludedInAzurePlayFabFeatureSet": {
      "id": 1532,
      "name": "ApiNotIncludedInAzurePlayFabFeatureSet"
    },
    "GoogleServiceAccountFailedAuth": {
      "id": 1533,
      "name": "GoogleServiceAccountFailedAuth"
    },
    "GoogleAPIServiceUnavailable": {
      "id": 1534,
      "name": "GoogleAPIServiceUnavailable"
    },
    "GoogleAPIServiceUnknownError": {
      "id": 1535,
      "name": "GoogleAPIServiceUnknownError"
    },
    "NoValidIdentityForAad": {
      "id": 1536,
      "name": "NoValidIdentityForAad"
    },
    "PlayerIdentityLinkNotFound": {
      "id": 1537,
      "name": "PlayerIdentityLinkNotFound"
    },
    "PhotonApplicationIdAlreadyInUse": {
      "id": 1538,
      "name": "PhotonApplicationIdAlreadyInUse"
    },
    "CloudScriptUnableToDeleteProductionRevision": {
      "id": 1539,
      "name": "CloudScriptUnableToDeleteProductionRevision"
    },
    "CustomIdNotFound": {
      "id": 1540,
      "name": "CustomIdNotFound"
    },
    "AutomationInvalidInput": {
      "id": 1541,
      "name": "AutomationInvalidInput"
    },
    "AutomationInvalidRuleName": {
      "id": 1542,
      "name": "AutomationInvalidRuleName"
    },
    "AutomationRuleAlreadyExists": {
      "id": 1543,
      "name": "AutomationRuleAlreadyExists"
    },
    "AutomationRuleLimitExceeded": {
      "id": 1544,
      "name": "AutomationRuleLimitExceeded"
    },
    "InvalidGooglePlayGamesServerAuthCode": {
      "id": 1545,
      "name": "InvalidGooglePlayGamesServerAuthCode"
    },
    "PlayStreamConnectionFailed": {
      "id": 1547,
      "name": "PlayStreamConnectionFailed"
    },
    "InvalidEventContents": {
      "id": 1548,
      "name": "InvalidEventContents"
    },
    "InsightsV1Deprecated": {
      "id": 1549,
      "name": "InsightsV1Deprecated"
    },
    "AnalysisSubscriptionNotFound": {
      "id": 1550,
      "name": "AnalysisSubscriptionNotFound"
    },
    "AnalysisSubscriptionFailed": {
      "id": 1551,
      "name": "AnalysisSubscriptionFailed"
    },
    "AnalysisSubscriptionFoundAlready": {
      "id": 1552,
      "name": "AnalysisSubscriptionFoundAlready"
    },
    "AnalysisSubscriptionManagementInvalidInput": {
      "id": 1553,
      "name": "AnalysisSubscriptionManagementInvalidInput"
    },
    "InvalidGameCenterId": {
      "id": 1554,
      "name": "InvalidGameCenterId"
    },
    "InvalidNintendoSwitchAccountId": {
      "id": 1555,
      "name": "InvalidNintendoSwitchAccountId"
    },
    "EntityAPIKeysNotSupported": {
      "id": 1556,
      "name": "EntityAPIKeysNotSupported"
    },
    "IpAddressBanned": {
      "id": 1557,
      "name": "IpAddressBanned"
    },
    "EntityLineageBanned": {
      "id": 1558,
      "name": "EntityLineageBanned"
    },
    "NamespaceMismatch": {
      "id": 1559,
      "name": "NamespaceMismatch"
    },
    "InvalidServiceConfiguration": {
      "id": 1560,
      "name": "InvalidServiceConfiguration"
    },
    "InvalidNamespaceMismatch": {
      "id": 1561,
      "name": "InvalidNamespaceMismatch"
    },
    "LeaderboardColumnLengthMismatch": {
      "id": 1562,
      "name": "LeaderboardColumnLengthMismatch"
    },
    "InvalidStatisticScore": {
      "id": 1563,
      "name": "InvalidStatisticScore"
    },
    "MatchmakingEntityInvalid": {
      "id": 2001,
      "name": "MatchmakingEntityInvalid"
    },
    "MatchmakingPlayerAttributesInvalid": {
      "id": 2002,
      "name": "MatchmakingPlayerAttributesInvalid"
    },
    "MatchmakingQueueNotFound": {
      "id": 2016,
      "name": "MatchmakingQueueNotFound"
    },
    "MatchmakingMatchNotFound": {
      "id": 2017,
      "name": "MatchmakingMatchNotFound"
    },
    "MatchmakingTicketNotFound": {
      "id": 2018,
      "name": "MatchmakingTicketNotFound"
    },
    "MatchmakingAlreadyJoinedTicket": {
      "id": 2028,
      "name": "MatchmakingAlreadyJoinedTicket"
    },
    "MatchmakingTicketAlreadyCompleted": {
      "id": 2029,
      "name": "MatchmakingTicketAlreadyCompleted"
    },
    "MatchmakingQueueConfigInvalid": {
      "id": 2031,
      "name": "MatchmakingQueueConfigInvalid"
    },
    "MatchmakingMemberProfileInvalid": {
      "id": 2032,
      "name": "MatchmakingMemberProfileInvalid"
    },
    "NintendoSwitchDeviceIdNotLinked": {
      "id": 2034,
      "name": "NintendoSwitchDeviceIdNotLinked"
    },
    "MatchmakingNotEnabled": {
      "id": 2035,
      "name": "MatchmakingNotEnabled"
    },
    "MatchmakingPlayerAttributesTooLarge": {
      "id": 2043,
      "name": "MatchmakingPlayerAttributesTooLarge"
    },
    "MatchmakingNumberOfPlayersInTicketTooLarge": {
      "id": 2044,
      "name": "MatchmakingNumberOfPlayersInTicketTooLarge"
    },
    "MatchmakingAttributeInvalid": {
      "id": 2046,
      "name": "MatchmakingAttributeInvalid"
    },
    "MatchmakingPlayerHasNotJoinedTicket": {
      "id": 2053,
      "name": "MatchmakingPlayerHasNotJoinedTicket"
    },
    "MatchmakingRateLimitExceeded": {
      "id": 2054,
      "name": "MatchmakingRateLimitExceeded"
    },
    "MatchmakingTicketMembershipLimitExceeded": {
      "id": 2055,
      "name": "MatchmakingTicketMembershipLimitExceeded"
    },
    "MatchmakingUnauthorized": {
      "id": 2056,
      "name": "MatchmakingUnauthorized"
    },
    "MatchmakingQueueLimitExceeded": {
      "id": 2057,
      "name": "MatchmakingQueueLimitExceeded"
    },
    "MatchmakingRequestTypeMismatch": {
      "id": 2058,
      "name": "MatchmakingRequestTypeMismatch"
    },
    "MatchmakingBadRequest": {
      "id": 2059,
      "name": "MatchmakingBadRequest"
    },
    "PubSubFeatureNotEnabledForTitle": {
      "id": 2500,
      "name": "PubSubFeatureNotEnabledForTitle"
    },
    "PubSubTooManyRequests": {
      "id": 2501,
      "name": "PubSubTooManyRequests"
    },
    "PubSubConnectionNotFoundForEntity": {
      "id": 2502,
      "name": "PubSubConnectionNotFoundForEntity"
    },
    "PubSubConnectionHandleInvalid": {
      "id": 2503,
      "name": "PubSubConnectionHandleInvalid"
    },
    "PubSubSubscriptionLimitExceeded": {
      "id": 2504,
      "name": "PubSubSubscriptionLimitExceeded"
    },
    "TitleConfigNotFound": {
      "id": 3001,
      "name": "TitleConfigNotFound"
    },
    "TitleConfigUpdateConflict": {
      "id": 3002,
      "name": "TitleConfigUpdateConflict"
    },
    "TitleConfigSerializationError": {
      "id": 3003,
      "name": "TitleConfigSerializationError"
    },
    "CatalogApiNotImplemented": {
      "id": 4000,
      "name": "CatalogApiNotImplemented"
    },
    "CatalogEntityInvalid": {
      "id": 4001,
      "name": "CatalogEntityInvalid"
    },
    "CatalogTitleIdMissing": {
      "id": 4002,
      "name": "CatalogTitleIdMissing"
    },
    "CatalogPlayerIdMissing": {
      "id": 4003,
      "name": "CatalogPlayerIdMissing"
    },
    "CatalogClientIdentityInvalid": {
      "id": 4004,
      "name": "CatalogClientIdentityInvalid"
    },
    "CatalogOneOrMoreFilesInvalid": {
      "id": 4005,
      "name": "CatalogOneOrMoreFilesInvalid"
    },
    "CatalogItemMetadataInvalid": {
      "id": 4006,
      "name": "CatalogItemMetadataInvalid"
    },
    "CatalogItemIdInvalid": {
      "id": 4007,
      "name": "CatalogItemIdInvalid"
    },
    "CatalogSearchParameterInvalid": {
      "id": 4008,
      "name": "CatalogSearchParameterInvalid"
    },
    "CatalogFeatureDisabled": {
      "id": 4009,
      "name": "CatalogFeatureDisabled"
    },
    "CatalogConfigInvalid": {
      "id": 4010,
      "name": "CatalogConfigInvalid"
    },
    "CatalogItemTypeInvalid": {
      "id": 4012,
      "name": "CatalogItemTypeInvalid"
    },
    "CatalogBadRequest": {
      "id": 4013,
      "name": "CatalogBadRequest"
    },
    "CatalogTooManyRequests": {
      "id": 4014,
      "name": "CatalogTooManyRequests"
    },
    "ExportInvalidStatusUpdate": {
      "id": 5000,
      "name": "ExportInvalidStatusUpdate"
    },
    "ExportInvalidPrefix": {
      "id": 5001,
      "name": "ExportInvalidPrefix"
    },
    "ExportBlobContainerDoesNotExist": {
      "id": 5002,
      "name": "ExportBlobContainerDoesNotExist"
    },
    "ExportNotFound": {
      "id": 5004,
      "name": "ExportNotFound"
    },
    "ExportCouldNotUpdate": {
      "id": 5005,
      "name": "ExportCouldNotUpdate"
    },
    "ExportInvalidStorageType": {
      "id": 5006,
      "name": "ExportInvalidStorageType"
    },
    "ExportAmazonBucketDoesNotExist": {
      "id": 5007,
      "name": "ExportAmazonBucketDoesNotExist"
    },
    "ExportInvalidBlobStorage": {
      "id": 5008,
      "name": "ExportInvalidBlobStorage"
    },
    "ExportKustoException": {
      "id": 5009,
      "name": "ExportKustoException"
    },
    "ExportKustoConnectionFailed": {
      "id": 5012,
      "name": "ExportKustoConnectionFailed"
    },
    "ExportUnknownError": {
      "id": 5013,
      "name": "ExportUnknownError"
    },
    "ExportCantEditPendingExport": {
      "id": 5014,
      "name": "ExportCantEditPendingExport"
    },
    "ExportLimitExports": {
      "id": 5015,
      "name": "ExportLimitExports"
    },
    "ExportLimitEvents": {
      "id": 5016,
      "name": "ExportLimitEvents"
    },
    "ExportInvalidPartitionStatusModification": {
      "id": 5017,
      "name": "ExportInvalidPartitionStatusModification"
    },
    "ExportCouldNotCreate": {
      "id": 5018,
      "name": "ExportCouldNotCreate"
    },
    "ExportNoBackingDatabaseFound": {
      "id": 5019,
      "name": "ExportNoBackingDatabaseFound"
    },
    "ExportCouldNotDelete": {
      "id": 5020,
      "name": "ExportCouldNotDelete"
    },
    "ExportCannotDetermineEventQuery": {
      "id": 5021,
      "name": "ExportCannotDetermineEventQuery"
    },
    "ExportInvalidQuerySchemaModification": {
      "id": 5022,
      "name": "ExportInvalidQuerySchemaModification"
    },
    "ExportQuerySchemaMissingRequiredColumns": {
      "id": 5023,
      "name": "ExportQuerySchemaMissingRequiredColumns"
    },
    "ExportCannotParseQuery": {
      "id": 5024,
      "name": "ExportCannotParseQuery"
    },
    "ExportControlCommandsNotAllowed": {
      "id": 5025,
      "name": "ExportControlCommandsNotAllowed"
    },
    "ExportQueryMissingTableReference": {
      "id": 5026,
      "name": "ExportQueryMissingTableReference"
    },
    "ExportInsightsV1Deprecated": {
      "id": 5027,
      "name": "ExportInsightsV1Deprecated"
    },
    "ExplorerBasicInvalidQueryName": {
      "id": 5100,
      "name": "ExplorerBasicInvalidQueryName"
    },
    "ExplorerBasicInvalidQueryDescription": {
      "id": 5101,
      "name": "ExplorerBasicInvalidQueryDescription"
    },
    "ExplorerBasicInvalidQueryConditions": {
      "id": 5102,
      "name": "ExplorerBasicInvalidQueryConditions"
    },
    "ExplorerBasicInvalidQueryStartDate": {
      "id": 5103,
      "name": "ExplorerBasicInvalidQueryStartDate"
    },
    "ExplorerBasicInvalidQueryEndDate": {
      "id": 5104,
      "name": "ExplorerBasicInvalidQueryEndDate"
    },
    "ExplorerBasicInvalidQueryGroupBy": {
      "id": 5105,
      "name": "ExplorerBasicInvalidQueryGroupBy"
    },
    "ExplorerBasicInvalidQueryAggregateType": {
      "id": 5106,
      "name": "ExplorerBasicInvalidQueryAggregateType"
    },
    "ExplorerBasicInvalidQueryAggregateProperty": {
      "id": 5107,
      "name": "ExplorerBasicInvalidQueryAggregateProperty"
    },
    "ExplorerBasicLoadQueriesError": {
      "id": 5108,
      "name": "ExplorerBasicLoadQueriesError"
    },
    "ExplorerBasicLoadQueryError": {
      "id": 5109,
      "name": "ExplorerBasicLoadQueryError"
    },
    "ExplorerBasicCreateQueryError": {
      "id": 5110,
      "name": "ExplorerBasicCreateQueryError"
    },
    "ExplorerBasicDeleteQueryError": {
      "id": 5111,
      "name": "ExplorerBasicDeleteQueryError"
    },
    "ExplorerBasicUpdateQueryError": {
      "id": 5112,
      "name": "ExplorerBasicUpdateQueryError"
    },
    "ExplorerBasicSavedQueriesLimit": {
      "id": 5113,
      "name": "ExplorerBasicSavedQueriesLimit"
    },
    "ExplorerBasicSavedQueryNotFound": {
      "id": 5114,
      "name": "ExplorerBasicSavedQueryNotFound"
    },
    "TenantShardMapperShardNotFound": {
      "id": 5500,
      "name": "TenantShardMapperShardNotFound"
    },
    "TitleNotEnabledForParty": {
      "id": 6000,
      "name": "TitleNotEnabledForParty"
    },
    "PartyVersionNotFound": {
      "id": 6001,
      "name": "PartyVersionNotFound"
    },
    "MultiplayerServerBuildReferencedByMatchmakingQueue": {
      "id": 6002,
      "name": "MultiplayerServerBuildReferencedByMatchmakingQueue"
    },
    "MultiplayerServerBuildReferencedByBuildAlias": {
      "id": 6003,
      "name": "MultiplayerServerBuildReferencedByBuildAlias"
    },
    "MultiplayerServerBuildAliasReferencedByMatchmakingQueue": {
      "id": 6004,
      "name": "MultiplayerServerBuildAliasReferencedByMatchmakingQueue"
    },
    "PartySerializationError": {
      "id": 6005,
      "name": "PartySerializationError"
    },
    "ExperimentationExperimentStopped": {
      "id": 7000,
      "name": "ExperimentationExperimentStopped"
    },
    "ExperimentationExperimentRunning": {
      "id": 7001,
      "name": "ExperimentationExperimentRunning"
    },
    "ExperimentationExperimentNotFound": {
      "id": 7002,
      "name": "ExperimentationExperimentNotFound"
    },
    "ExperimentationExperimentNeverStarted": {
      "id": 7003,
      "name": "ExperimentationExperimentNeverStarted"
    },
    "ExperimentationExperimentDeleted": {
      "id": 7004,
      "name": "ExperimentationExperimentDeleted"
    },
    "ExperimentationClientTimeout": {
      "id": 7005,
      "name": "ExperimentationClientTimeout"
    },
    "ExperimentationInvalidVariantConfiguration": {
      "id": 7006,
      "name": "ExperimentationInvalidVariantConfiguration"
    },
    "ExperimentationInvalidVariableConfiguration": {
      "id": 7007,
      "name": "ExperimentationInvalidVariableConfiguration"
    },
    "ExperimentInvalidId": {
      "id": 7008,
      "name": "ExperimentInvalidId"
    },
    "ExperimentationNoScorecard": {
      "id": 7009,
      "name": "ExperimentationNoScorecard"
    },
    "ExperimentationTreatmentAssignmentFailed": {
      "id": 7010,
      "name": "ExperimentationTreatmentAssignmentFailed"
    },
    "ExperimentationTreatmentAssignmentDisabled": {
      "id": 7011,
      "name": "ExperimentationTreatmentAssignmentDisabled"
    },
    "ExperimentationInvalidDuration": {
      "id": 7012,
      "name": "ExperimentationInvalidDuration"
    },
    "ExperimentationMaxExperimentsReached": {
      "id": 7013,
      "name": "ExperimentationMaxExperimentsReached"
    },
    "ExperimentationExperimentSchedulingInProgress": {
      "id": 7014,
      "name": "ExperimentationExperimentSchedulingInProgress"
    },
    "ExperimentationInvalidEndDate": {
      "id": 7015,
      "name": "ExperimentationInvalidEndDate"
    },
    "ExperimentationInvalidStartDate": {
      "id": 7016,
      "name": "ExperimentationInvalidStartDate"
    },
    "ExperimentationMaxDurationExceeded": {
      "id": 7017,
      "name": "ExperimentationMaxDurationExceeded"
    },
    "ExperimentationExclusionGroupNotFound": {
      "id": 7018,
      "name": "ExperimentationExclusionGroupNotFound"
    },
    "ExperimentationExclusionGroupInsufficientCapacity": {
      "id": 7019,
      "name": "ExperimentationExclusionGroupInsufficientCapacity"
    },
    "ExperimentationExclusionGroupCannotDelete": {
      "id": 7020,
      "name": "ExperimentationExclusionGroupCannotDelete"
    },
    "ExperimentationExclusionGroupInvalidTrafficAllocation": {
      "id": 7021,
      "name": "ExperimentationExclusionGroupInvalidTrafficAllocation"
    },
    "ExperimentationExclusionGroupInvalidName": {
      "id": 7022,
      "name": "ExperimentationExclusionGroupInvalidName"
    },
    "MaxActionDepthExceeded": {
      "id": 8000,
      "name": "MaxActionDepthExceeded"
    },
    "TitleNotOnUpdatedPricingPlan": {
      "id": 9000,
      "name": "TitleNotOnUpdatedPricingPlan"
    },
    "SegmentManagementTitleNotInFlight": {
      "id": 10000,
      "name": "SegmentManagementTitleNotInFlight"
    },
    "SegmentManagementNoExpressionTree": {
      "id": 10001,
      "name": "SegmentManagementNoExpressionTree"
    },
    "SegmentManagementTriggerActionCountOverLimit": {
      "id": 10002,
      "name": "SegmentManagementTriggerActionCountOverLimit"
    },
    "SegmentManagementSegmentCountOverLimit": {
      "id": 10003,
      "name": "SegmentManagementSegmentCountOverLimit"
    },
    "SegmentManagementInvalidSegmentId": {
      "id": 10004,
      "name": "SegmentManagementInvalidSegmentId"
    },
    "SegmentManagementInvalidInput": {
      "id": 10005,
      "name": "SegmentManagementInvalidInput"
    },
    "SegmentManagementInvalidSegmentName": {
      "id": 10006,
      "name": "SegmentManagementInvalidSegmentName"
    },
    "DeleteSegmentRateLimitExceeded": {
      "id": 10007,
      "name": "DeleteSegmentRateLimitExceeded"
    },
    "CreateSegmentRateLimitExceeded": {
      "id": 10008,
      "name": "CreateSegmentRateLimitExceeded"
    },
    "UpdateSegmentRateLimitExceeded": {
      "id": 10009,
      "name": "UpdateSegmentRateLimitExceeded"
    },
    "GetSegmentsRateLimitExceeded": {
      "id": 10010,
      "name": "GetSegmentsRateLimitExceeded"
    },
    "AsyncExportNotInFlight": {
      "id": 10011,
      "name": "AsyncExportNotInFlight"
    },
    "AsyncExportNotFound": {
      "id": 10012,
      "name": "AsyncExportNotFound"
    },
    "AsyncExportRateLimitExceeded": {
      "id": 10013,
      "name": "AsyncExportRateLimitExceeded"
    },
    "AnalyticsSegmentCountOverLimit": {
      "id": 10014,
      "name": "AnalyticsSegmentCountOverLimit"
    },
    "SnapshotNotFound": {
      "id": 11000,
      "name": "SnapshotNotFound"
    },
    "InventoryApiNotImplemented": {
      "id": 12000,
      "name": "InventoryApiNotImplemented"
    },
    "LobbyDoesNotExist": {
      "id": 13000,
      "name": "LobbyDoesNotExist"
    },
    "LobbyRateLimitExceeded": {
      "id": 13001,
      "name": "LobbyRateLimitExceeded"
    },
    "LobbyPlayerAlreadyJoined": {
      "id": 13002,
      "name": "LobbyPlayerAlreadyJoined"
    },
    "LobbyNotJoinable": {
      "id": 13003,
      "name": "LobbyNotJoinable"
    },
    "LobbyMemberCannotRejoin": {
      "id": 13004,
      "name": "LobbyMemberCannotRejoin"
    },
    "LobbyCurrentPlayersMoreThanMaxPlayers": {
      "id": 13005,
      "name": "LobbyCurrentPlayersMoreThanMaxPlayers"
    },
    "LobbyPlayerNotPresent": {
      "id": 13006,
      "name": "LobbyPlayerNotPresent"
    },
    "LobbyBadRequest": {
      "id": 13007,
      "name": "LobbyBadRequest"
    },
    "LobbyPlayerMaxLobbyLimitExceeded": {
      "id": 13008,
      "name": "LobbyPlayerMaxLobbyLimitExceeded"
    },
    "LobbyNewOwnerMustBeConnected": {
      "id": 13009,
      "name": "LobbyNewOwnerMustBeConnected"
    },
    "LobbyCurrentOwnerStillConnected": {
      "id": 13010,
      "name": "LobbyCurrentOwnerStillConnected"
    },
    "LobbyMemberIsNotOwner": {
      "id": 13011,
      "name": "LobbyMemberIsNotOwner"
    },
    "LobbyAssociatedServerMismatch": {
      "id": 13012,
      "name": "LobbyAssociatedServerMismatch"
    },
    "LobbyAssociatedServerNotFound": {
      "id": 13013,
      "name": "LobbyAssociatedServerNotFound"
    },
    "LobbyAssociatedToDifferentServer": {
      "id": 13014,
      "name": "LobbyAssociatedToDifferentServer"
    },
    "LobbyServerAlreadyAssociated": {
      "id": 13015,
      "name": "LobbyServerAlreadyAssociated"
    },
    "LobbyIsNotClientOwned": {
      "id": 13016,
      "name": "LobbyIsNotClientOwned"
    },
    "LobbyDoesNotUseConnections": {
      "id": 13017,
      "name": "LobbyDoesNotUseConnections"
    },
    "EventSamplingInvalidRatio": {
      "id": 14000,
      "name": "EventSamplingInvalidRatio"
    },
    "EventSamplingInvalidEventNamespace": {
      "id": 14001,
      "name": "EventSamplingInvalidEventNamespace"
    },
    "EventSamplingInvalidEventName": {
      "id": 14002,
      "name": "EventSamplingInvalidEventName"
    },
    "EventSamplingRatioNotFound": {
      "id": 14003,
      "name": "EventSamplingRatioNotFound"
    },
    "TelemetryKeyNotFound": {
      "id": 14200,
      "name": "TelemetryKeyNotFound"
    },
    "TelemetryKeyInvalidName": {
      "id": 14201,
      "name": "TelemetryKeyInvalidName"
    },
    "TelemetryKeyAlreadyExists": {
      "id": 14202,
      "name": "TelemetryKeyAlreadyExists"
    },
    "TelemetryKeyInvalid": {
      "id": 14203,
      "name": "TelemetryKeyInvalid"
    },
    "TelemetryKeyCountOverLimit": {
      "id": 14204,
      "name": "TelemetryKeyCountOverLimit"
    },
    "TelemetryKeyDeactivated": {
      "id": 14205,
      "name": "TelemetryKeyDeactivated"
    },
    "TelemetryKeyLongInsightsRetentionNotAllowed": {
      "id": 14206,
      "name": "TelemetryKeyLongInsightsRetentionNotAllowed"
    },
    "EventSinkConnectionInvalid": {
      "id": 15000,
      "name": "EventSinkConnectionInvalid"
    },
    "EventSinkConnectionUnauthorized": {
      "id": 15001,
      "name": "EventSinkConnectionUnauthorized"
    },
    "EventSinkRegionInvalid": {
      "id": 15002,
      "name": "EventSinkRegionInvalid"
    },
    "EventSinkLimitExceeded": {
      "id": 15003,
      "name": "EventSinkLimitExceeded"
    },
    "EventSinkSasTokenInvalid": {
      "id": 15004,
      "name": "EventSinkSasTokenInvalid"
    },
    "EventSinkNotFound": {
      "id": 15005,
      "name": "EventSinkNotFound"
    },
    "EventSinkNameInvalid": {
      "id": 15006,
      "name": "EventSinkNameInvalid"
    },
    "EventSinkSasTokenPermissionInvalid": {
      "id": 15007,
      "name": "EventSinkSasTokenPermissionInvalid"
    },
    "EventSinkSecretInvalid": {
      "id": 15008,
      "name": "EventSinkSecretInvalid"
    },
    "EventSinkTenantNotFound": {
      "id": 15009,
      "name": "EventSinkTenantNotFound"
    },
    "EventSinkAadNotFound": {
      "id": 15010,
      "name": "EventSinkAadNotFound"
    },
    "EventSinkDatabaseNotFound": {
      "id": 15011,
      "name": "EventSinkDatabaseNotFound"
    },
    "OperationCanceled": {
      "id": 16000,
      "name": "OperationCanceled"
    },
    "InvalidDisplayNameRandomSuffixLength": {
      "id": 17000,
      "name": "InvalidDisplayNameRandomSuffixLength"
    },
    "AllowNonUniquePlayerDisplayNamesDisableNotAllowed": {
      "id": 17001,
      "name": "AllowNonUniquePlayerDisplayNamesDisableNotAllowed"
    },
    "PartitionedEventInvalid": {
      "id": 18000,
      "name": "PartitionedEventInvalid"
    },
    "PartitionedEventCountOverLimit": {
      "id": 18001,
      "name": "PartitionedEventCountOverLimit"
    },
    "ManageEventNamespaceInvalid": {
      "id": 18002,
      "name": "ManageEventNamespaceInvalid"
    },
    "ManageEventNameInvalid": {
      "id": 18003,
      "name": "ManageEventNameInvalid"
    },
    "ManagedEventNotFound": {
      "id": 18004,
      "name": "ManagedEventNotFound"
    },
    "ManageEventsInvalidRatio": {
      "id": 18005,
      "name": "ManageEventsInvalidRatio"
    },
    "ManagedEventInvalid": {
      "id": 18006,
      "name": "ManagedEventInvalid"
    },
    "PlayerCustomPropertiesPropertyNameTooLong": {
      "id": 19000,
      "name": "PlayerCustomPropertiesPropertyNameTooLong"
    },
    "PlayerCustomPropertiesPropertyNameIsInvalid": {
      "id": 19001,
      "name": "PlayerCustomPropertiesPropertyNameIsInvalid"
    },
    "PlayerCustomPropertiesStringPropertyValueTooLong": {
      "id": 19002,
      "name": "PlayerCustomPropertiesStringPropertyValueTooLong"
    },
    "PlayerCustomPropertiesValueIsInvalidType": {
      "id": 19003,
      "name": "PlayerCustomPropertiesValueIsInvalidType"
    },
    "PlayerCustomPropertiesVersionMismatch": {
      "id": 19004,
      "name": "PlayerCustomPropertiesVersionMismatch"
    },
    "PlayerCustomPropertiesPropertyCountTooHigh": {
      "id": 19005,
      "name": "PlayerCustomPropertiesPropertyCountTooHigh"
    },
    "PlayerCustomPropertiesDuplicatePropertyName": {
      "id": 19006,
      "name": "PlayerCustomPropertiesDuplicatePropertyName"
    },
    "PlayerCustomPropertiesPropertyDoesNotExist": {
      "id": 19007,
      "name": "PlayerCustomPropertiesPropertyDoesNotExist"
    },
    "AddonAlreadyExists": {
      "id": 19008,
      "name": "AddonAlreadyExists"
    },
    "AddonDoesntExist": {
      "id": 19009,
      "name": "AddonDoesntExist"
    }
  }
}