{
  "swagger": "2.0",
  "info": {
    "version": "220506",
    "title": "PlayFab Multiplayer API",
    "description": "API methods for managing multiplayer servers. API methods for managing parties. The lobby service helps players group together to play multiplayer games. It is often used as a rendezvous point for players to share connection information.",
    "termsOfService": "https://playfab.com/terms/",
    "contact": {
      "url": "https://community.playfab.com/index.html"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://github.com/PlayFab/API_Specs/blob/master/LICENSE"
    }
  },
  "host": "titleId.playfabapi.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/Match/CancelAllMatchmakingTicketsForPlayer": {
      "post": {
        "operationId": "CancelAllMatchmakingTicketsForPlayer",
        "tags": [
          "Matchmaking"
        ],
        "description": "Cancel all active tickets the player is a member of in a given queue.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/matchmaking/cancelallmatchmakingticketsforplayer"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CancelAllMatchmakingTicketsForPlayerRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CancelAllMatchmakingTicketsForPlayerResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Cancels all tickets of which the player is a member in a given queue that are not cancelled or matched. This API is useful if you lose track of what tickets the player is a member of (if the title crashes for instance) and want to \"reset\". The Entity field is optional if the caller is a player and defaults to that player. Players may not cancel tickets for other people. The Entity field is required if the caller is a server (authenticated as the title).",
        "x-ms-docs-errors": [
          "MatchmakingEntityInvalid",
          "MatchmakingQueueNotFound",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/CancelAllServerBackfillTicketsForPlayer": {
      "post": {
        "operationId": "CancelAllServerBackfillTicketsForPlayer",
        "tags": [
          "Matchmaking"
        ],
        "description": "Cancel all active backfill tickets the player is a member of in a given queue.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/matchmaking/cancelallserverbackfillticketsforplayer"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CancelAllServerBackfillTicketsForPlayerRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CancelAllServerBackfillTicketsForPlayerResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Cancels all backfill tickets of which the player is a member in a given queue that are not cancelled or matched. This API is useful if you lose track of what tickets the player is a member of (if the server crashes for instance) and want to \"reset\".",
        "x-ms-docs-errors": [
          "MatchmakingEntityInvalid",
          "MatchmakingQueueNotFound",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/CancelMatchmakingTicket": {
      "post": {
        "operationId": "CancelMatchmakingTicket",
        "tags": [
          "Matchmaking"
        ],
        "description": "Cancel a matchmaking ticket.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/matchmaking/cancelmatchmakingticket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CancelMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CancelMatchmakingTicketResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Only servers and ticket members can cancel a ticket. The ticket can be in five different states when it is cancelled. 1: the ticket is waiting for members to join it, and it has not started matching. If the ticket is cancelled at this stage, it will never match. 2: the ticket is matching. If the ticket is cancelled, it will stop matching. 3: the ticket is matched. A matched ticket cannot be cancelled. 4: the ticket is already cancelled and nothing happens. 5: the ticket is waiting for a server. If the ticket is cancelled, server allocation will be stopped. A server may still be allocated due to a race condition, but that will not be reflected in the ticket. There may be race conditions between the ticket getting matched and the client making a cancellation request. The client must handle the possibility that the cancel request fails if a match is found before the cancellation request is processed. We do not allow resubmitting a cancelled ticket because players must consent to enter matchmaking again. Create a new ticket instead.",
        "x-ms-docs-errors": [
          "MatchmakingEntityInvalid",
          "MatchmakingPlayerHasNotJoinedTicket",
          "MatchmakingQueueNotFound",
          "MatchmakingRequestTypeMismatch",
          "MatchmakingTicketAlreadyCompleted",
          "MatchmakingTicketNotFound",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/CancelServerBackfillTicket": {
      "post": {
        "operationId": "CancelServerBackfillTicket",
        "tags": [
          "Matchmaking"
        ],
        "description": "Cancel a server backfill ticket.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/matchmaking/cancelserverbackfillticket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CancelServerBackfillTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CancelServerBackfillTicketResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Only servers can cancel a backfill ticket. The ticket can be in three different states when it is cancelled. 1: the ticket is matching. If the ticket is cancelled, it will stop matching. 2: the ticket is matched. A matched ticket cannot be cancelled. 3: the ticket is already cancelled and nothing happens. There may be race conditions between the ticket getting matched and the server making a cancellation request. The server must handle the possibility that the cancel request fails if a match is found before the cancellation request is processed. We do not allow resubmitting a cancelled ticket. Create a new ticket instead.",
        "x-ms-docs-errors": [
          "MatchmakingEntityInvalid",
          "MatchmakingQueueNotFound",
          "MatchmakingRequestTypeMismatch",
          "MatchmakingTicketAlreadyCompleted",
          "MatchmakingTicketNotFound",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/CreateMatchmakingTicket": {
      "post": {
        "operationId": "CreateMatchmakingTicket",
        "tags": [
          "Matchmaking"
        ],
        "description": "Create a matchmaking ticket as a client.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/matchmaking/creatematchmakingticket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateMatchmakingTicketResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The client specifies the creator's attributes and optionally a list of other users to match with.",
        "x-ms-docs-errors": [
          "MatchmakingAttributeInvalid",
          "MatchmakingBadRequest",
          "MatchmakingEntityInvalid",
          "MatchmakingNumberOfPlayersInTicketTooLarge",
          "MatchmakingPlayerAttributesInvalid",
          "MatchmakingPlayerAttributesTooLarge",
          "MatchmakingQueueNotFound",
          "MatchmakingRateLimitExceeded",
          "MatchmakingTicketMembershipLimitExceeded",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/CreateServerBackfillTicket": {
      "post": {
        "operationId": "CreateServerBackfillTicket",
        "tags": [
          "Matchmaking"
        ],
        "description": "Create a backfill matchmaking ticket as a server. A backfill ticket represents an ongoing game. The matchmaking service automatically starts matching the backfill ticket against other matchmaking tickets. Backfill tickets cannot match with other backfill tickets.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/matchmaking/createserverbackfillticket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateServerBackfillTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateServerBackfillTicketResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The server specifies all the members, their teams and their attributes, and the server details if applicable.",
        "x-ms-docs-errors": [
          "MatchmakingAttributeInvalid",
          "MatchmakingBadRequest",
          "MatchmakingEntityInvalid",
          "MatchmakingMemberProfileInvalid",
          "MatchmakingNumberOfPlayersInTicketTooLarge",
          "MatchmakingPlayerAttributesInvalid",
          "MatchmakingPlayerAttributesTooLarge",
          "MatchmakingQueueNotFound",
          "MatchmakingRateLimitExceeded",
          "MatchmakingTicketMembershipLimitExceeded",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/CreateServerMatchmakingTicket": {
      "post": {
        "operationId": "CreateServerMatchmakingTicket",
        "tags": [
          "Matchmaking"
        ],
        "description": "Create a matchmaking ticket as a server. The matchmaking service automatically starts matching the ticket against other matchmaking tickets.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/matchmaking/createservermatchmakingticket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateServerMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateMatchmakingTicketResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The server specifies all the members and their attributes.",
        "x-ms-docs-errors": [
          "MatchmakingAttributeInvalid",
          "MatchmakingEntityInvalid",
          "MatchmakingMemberProfileInvalid",
          "MatchmakingNumberOfPlayersInTicketTooLarge",
          "MatchmakingPlayerAttributesInvalid",
          "MatchmakingPlayerAttributesTooLarge",
          "MatchmakingQueueNotFound",
          "MatchmakingRateLimitExceeded",
          "MatchmakingTicketMembershipLimitExceeded",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/GetMatch": {
      "post": {
        "operationId": "GetMatch",
        "tags": [
          "Matchmaking"
        ],
        "description": "Get a match.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/matchmaking/getmatch"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetMatchRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetMatchResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "When matchmaking has successfully matched together a collection of tickets, it produces a 'match' with an Id. The match contains all of the players that were matched together, and their team assigments. Only servers and ticket members can get the match.",
        "x-ms-docs-errors": [
          "MatchmakingEntityInvalid",
          "MatchmakingMatchNotFound",
          "MatchmakingQueueNotFound",
          "MatchmakingRateLimitExceeded",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/GetMatchmakingTicket": {
      "post": {
        "operationId": "GetMatchmakingTicket",
        "tags": [
          "Matchmaking"
        ],
        "description": "Get a matchmaking ticket by ticket Id.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/matchmaking/getmatchmakingticket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetMatchmakingTicketResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The ticket includes the invited players, their attributes if they have joined, the ticket status, the match Id when applicable, etc. Only servers, the ticket creator and the invited players can get the ticket.",
        "x-ms-docs-errors": [
          "MatchmakingEntityInvalid",
          "MatchmakingQueueNotFound",
          "MatchmakingRateLimitExceeded",
          "MatchmakingRequestTypeMismatch",
          "MatchmakingTicketNotFound",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/GetQueueStatistics": {
      "post": {
        "operationId": "GetQueueStatistics",
        "tags": [
          "Matchmaking"
        ],
        "description": "Get the statistics for a queue.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/matchmaking/getqueuestatistics"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetQueueStatisticsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetQueueStatisticsResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns the matchmaking statistics for a queue. These include the number of players matching and the statistics related to the time to match statistics in seconds (average and percentiles). Statistics are refreshed once every 5 minutes. Servers can access all statistics no matter what the ClientStatisticsVisibility is configured to. Clients can access statistics according to the ClientStatisticsVisibility. Client requests are forbidden if all visibility fields are false.",
        "x-ms-docs-errors": [
          "MatchmakingEntityInvalid",
          "MatchmakingQueueNotFound",
          "MatchmakingRateLimitExceeded",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/GetServerBackfillTicket": {
      "post": {
        "operationId": "GetServerBackfillTicket",
        "tags": [
          "Matchmaking"
        ],
        "description": "Get a matchmaking backfill ticket by ticket Id.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/matchmaking/getserverbackfillticket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetServerBackfillTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetServerBackfillTicketResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The ticket includes the players, their attributes, their teams, the ticket status, the match Id and the server details when applicable, etc. Only servers can get the ticket.",
        "x-ms-docs-errors": [
          "MatchmakingEntityInvalid",
          "MatchmakingQueueNotFound",
          "MatchmakingRateLimitExceeded",
          "MatchmakingRequestTypeMismatch",
          "MatchmakingTicketNotFound",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/JoinMatchmakingTicket": {
      "post": {
        "operationId": "JoinMatchmakingTicket",
        "tags": [
          "Matchmaking"
        ],
        "description": "Join a matchmaking ticket.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/matchmaking/joinmatchmakingticket"
        },
        "parameters": [
          {
            "$ref": "#/parameters/JoinMatchmakingTicketRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JoinMatchmakingTicketResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Add the player to a matchmaking ticket and specify all of its matchmaking attributes. Players can join a ticket if and only if their EntityKeys are already listed in the ticket's Members list. The matchmaking service automatically starts matching the ticket against other matchmaking tickets once all players have joined the ticket. It is not possible to join a ticket once it has started matching.",
        "x-ms-docs-errors": [
          "MatchmakingAlreadyJoinedTicket",
          "MatchmakingAttributeInvalid",
          "MatchmakingEntityInvalid",
          "MatchmakingMemberProfileInvalid",
          "MatchmakingPlayerAttributesInvalid",
          "MatchmakingPlayerAttributesTooLarge",
          "MatchmakingQueueNotFound",
          "MatchmakingRateLimitExceeded",
          "MatchmakingTicketAlreadyCompleted",
          "MatchmakingTicketMembershipLimitExceeded",
          "MatchmakingTicketNotFound",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/ListMatchmakingTicketsForPlayer": {
      "post": {
        "operationId": "ListMatchmakingTicketsForPlayer",
        "tags": [
          "Matchmaking"
        ],
        "description": "List all matchmaking ticket Ids the user is a member of.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/matchmaking/listmatchmakingticketsforplayer"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListMatchmakingTicketsForPlayerRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListMatchmakingTicketsForPlayerResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "If the caller is a title, the EntityKey in the request is required. If the caller is a player, then it is optional. If it is provided it must match the caller's entity.",
        "x-ms-docs-errors": [
          "MatchmakingEntityInvalid",
          "MatchmakingQueueNotFound",
          "MatchmakingRateLimitExceeded",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/ListServerBackfillTicketsForPlayer": {
      "post": {
        "operationId": "ListServerBackfillTicketsForPlayer",
        "tags": [
          "Matchmaking"
        ],
        "description": "List all server backfill ticket Ids the user is a member of.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/matchmaking/listserverbackfillticketsforplayer"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListServerBackfillTicketsForPlayerRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListServerBackfillTicketsForPlayerResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "List all server backfill ticket Ids the user is a member of.",
        "x-ms-docs-errors": [
          "MatchmakingEntityInvalid",
          "MatchmakingQueueNotFound",
          "MatchmakingRateLimitExceeded",
          "MatchmakingUnauthorized"
        ]
      }
    },
    "/Match/SubscribeToMatchmakingResource": {
      "post": {
        "operationId": "SubscribeToMatchmakingResource",
        "tags": [
          "Matchmaking"
        ],
        "description": "Subscribe to match resource notifications.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/matchmaking/subscribetomatchmakingresource"
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscribeToMatchResourceRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SubscribeToMatchResourceResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Subscribe to match resource notifications. Match subscriptions have two types; MatchInvite and MatchTicketStatusChange",
        "x-AnyInclusiveFlags": [
          "RequiresOptionalValueSupport"
        ],
        "x-ms-docs-errors": [
          "MatchmakingBadRequest",
          "MatchmakingEntityInvalid",
          "MatchmakingTicketNotFound",
          "MatchmakingUnauthorized",
          "PubSubConnectionHandleInvalid",
          "PubSubConnectionNotFoundForEntity",
          "PubSubSubscriptionLimitExceeded"
        ]
      }
    },
    "/Match/UnsubscribeFromMatchmakingResource": {
      "post": {
        "operationId": "UnsubscribeFromMatchmakingResource",
        "tags": [
          "Matchmaking"
        ],
        "description": "Unsubscribe from match resource notifications.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/matchmaking/unsubscribefrommatchmakingresource"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UnsubscribeFromMatchResourceRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UnsubscribeFromMatchResourceResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Unsubscribe from a Match resource's notifications. For MatchInvite, players are expected to unsubscribe once they can no longer accept invites. For MatchTicketStatusChange, players are expected to unsusbcribe once the ticket has reached a canceled or matched state.",
        "x-AnyInclusiveFlags": [
          "RequiresOptionalValueSupport"
        ],
        "x-ms-docs-errors": [
          "MatchmakingBadRequest",
          "MatchmakingEntityInvalid",
          "MatchmakingTicketNotFound",
          "MatchmakingUnauthorized",
          "PubSubConnectionHandleInvalid",
          "PubSubConnectionNotFoundForEntity"
        ]
      }
    },
    "/MultiplayerServer/CreateRemoteUser": {
      "post": {
        "operationId": "CreateRemoteUser",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Creates a remote user to log on to a VM for a multiplayer server build.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/multiplayerserver/createremoteuser"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateRemoteUserRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateRemoteUserResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Creates a remote user to log on to a VM for a multiplayer server build in a specific region. Returns user credential information necessary to log on.",
        "x-seeAlso": [
          "MultiplayerServer/DeleteRemoteUser",
          "MultiplayerServer/GetRemoteLoginEndpoint"
        ],
        "x-ms-docs-errors": [
          "APINotEnabledForGameClientAccess",
          "MultiplayerServerBadRequest",
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/DeleteCertificate": {
      "post": {
        "operationId": "DeleteCertificate",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Deletes a multiplayer server game certificate.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/multiplayerserver/deletecertificate"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteCertificateRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EmptyResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Deletes a multiplayer server game certificate.",
        "x-seeAlso": [
          "MultiplayerServer/ListCertificateSummaries",
          "MultiplayerServer/UploadCertificate"
        ],
        "x-ms-docs-errors": [
          "APINotEnabledForGameClientAccess",
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNoContent",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/DeleteRemoteUser": {
      "post": {
        "operationId": "DeleteRemoteUser",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Deletes a remote user to log on to a VM for a multiplayer server build.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/multiplayerserver/deleteremoteuser"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteRemoteUserRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EmptyResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Deletes a remote user to log on to a VM for a multiplayer server build in a specific region. Returns user credential information necessary to log on.",
        "x-seeAlso": [
          "MultiplayerServer/CreateRemoteUser",
          "MultiplayerServer/GetRemoteLoginEndpoint"
        ],
        "x-ms-docs-errors": [
          "APINotEnabledForGameClientAccess",
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNoContent",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/GetMultiplayerServerDetails": {
      "post": {
        "operationId": "GetMultiplayerServerDetails",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Gets multiplayer server session details for a build.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/multiplayerserver/getmultiplayerserverdetails"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetMultiplayerServerDetailsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetMultiplayerServerDetailsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Gets multiplayer server session details for a build in a specific region.",
        "x-seeAlso": [
          "MultiplayerServer/RequestMultiplayerServer"
        ],
        "x-ms-docs-errors": [
          "APINotEnabledForGameClientAccess",
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/GetMultiplayerServerLogs": {
      "post": {
        "operationId": "GetMultiplayerServerLogs",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Gets multiplayer server logs after a server has terminated.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/multiplayerserver/getmultiplayerserverlogs"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetMultiplayerServerLogsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetMultiplayerServerLogsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Gets multiplayer server logs for a specific server id in a region. The logs are available only after a server has terminated.",
        "x-seeAlso": [
          "MultiplayerServer/GetMultiplayerServerDetails",
          "MultiplayerServer/RequestMultiplayerServer"
        ],
        "x-ms-docs-errors": [
          "APINotEnabledForGameClientAccess",
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/GetMultiplayerSessionLogsBySessionId": {
      "post": {
        "operationId": "GetMultiplayerSessionLogsBySessionId",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Gets multiplayer server logs after a server has terminated.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/multiplayerserver/getmultiplayersessionlogsbysessionid"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetMultiplayerSessionLogsBySessionIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetMultiplayerServerLogsResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Gets multiplayer server logs for a specific server id in a region. The logs are available only after a server has terminated.",
        "x-seeAlso": [
          "MultiplayerServer/GetMultiplayerServerDetails",
          "MultiplayerServer/RequestMultiplayerServer"
        ],
        "x-ms-docs-errors": [
          "APINotEnabledForGameClientAccess",
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/GetRemoteLoginEndpoint": {
      "post": {
        "operationId": "GetRemoteLoginEndpoint",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Gets a remote login endpoint to a VM that is hosting a multiplayer server build.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/multiplayerserver/getremoteloginendpoint"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetRemoteLoginEndpointRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetRemoteLoginEndpointResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Gets a remote login endpoint to a VM that is hosting a multiplayer server build in a specific region.",
        "x-seeAlso": [
          "MultiplayerServer/CreateRemoteUser"
        ],
        "x-ms-docs-errors": [
          "APINotEnabledForGameClientAccess",
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/ListArchivedMultiplayerServers": {
      "post": {
        "operationId": "ListArchivedMultiplayerServers",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Lists archived multiplayer server sessions for a build.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/multiplayerserver/listarchivedmultiplayerservers"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListMultiplayerServersRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListMultiplayerServersResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns a list of archived multiplayer servers for a build in a specific region.",
        "x-seeAlso": [
          "MultiplayerServer/RequestMultiplayerServer"
        ],
        "x-ms-docs-errors": [
          "APINotEnabledForGameClientAccess",
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/ListBuildAliases": {
      "post": {
        "operationId": "ListBuildAliases",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Lists details of all build aliases for a title. Accepts tokens for title and if game client access is enabled, allows game client to request list of builds with player entity token.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/multiplayerserver/listbuildaliases"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListBuildAliasesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListBuildAliasesResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns a list of summarized details of all multiplayer server builds for a title.",
        "x-seeAlso": [
          "MultiplayerServer/CreateBuildWithManagedContainer",
          "MultiplayerServer/DeleteBuild",
          "MultiplayerServer/GetBuild"
        ],
        "x-ms-docs-errors": [
          "APINotEnabledForGameClientAccess",
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/ListBuildSummariesV2": {
      "post": {
        "operationId": "ListBuildSummariesV2",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Lists summarized details of all multiplayer server builds for a title. Accepts tokens for title and if game client access is enabled, allows game client to request list of builds with player entity token.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/multiplayerserver/listbuildsummariesv2"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListBuildSummariesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListBuildSummariesResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns a list of summarized details of all multiplayer server builds for a title.",
        "x-seeAlso": [
          "MultiplayerServer/CreateBuildWithManagedContainer",
          "MultiplayerServer/DeleteBuild",
          "MultiplayerServer/GetBuild"
        ],
        "x-ms-docs-errors": [
          "APINotEnabledForGameClientAccess",
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/ListCertificateSummaries": {
      "post": {
        "operationId": "ListCertificateSummaries",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Lists multiplayer server game certificates for a title.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/multiplayerserver/listcertificatesummaries"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListCertificateSummariesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListCertificateSummariesResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns a list of multiplayer server game certificates for a title.",
        "x-seeAlso": [
          "MultiplayerServer/DeleteCertificate",
          "MultiplayerServer/UploadCertificate"
        ],
        "x-ms-docs-errors": [
          "APINotEnabledForGameClientAccess",
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/ListMultiplayerServers": {
      "post": {
        "operationId": "ListMultiplayerServers",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Lists multiplayer server sessions for a build.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/multiplayerserver/listmultiplayerservers"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListMultiplayerServersRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListMultiplayerServersResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns a list of multiplayer servers for a build in a specific region.",
        "x-seeAlso": [
          "MultiplayerServer/RequestMultiplayerServer"
        ],
        "x-ms-docs-errors": [
          "APINotEnabledForGameClientAccess",
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/ListPartyQosServers": {
      "post": {
        "operationId": "ListPartyQosServers",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Lists quality of service servers for party.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/multiplayerserver/listpartyqosservers"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListPartyQosServersRequest"
          }
        ],
        "security": [
          {
            "None": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListPartyQosServersResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns a list of quality of service servers for party.",
        "x-ms-docs-errors": [
          "APINotEnabledForGameClientAccess",
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/ListQosServersForTitle": {
      "post": {
        "operationId": "ListQosServersForTitle",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Lists quality of service servers for the title. By default, servers are only returned for regions where a Multiplayer Servers build has been deployed.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/multiplayerserver/listqosserversfortitle"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListQosServersForTitleRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListQosServersForTitleResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns a list of quality of service servers for a title.",
        "x-ms-docs-errors": [
          "APINotEnabledForGameClientAccess",
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/ListVirtualMachineSummaries": {
      "post": {
        "operationId": "ListVirtualMachineSummaries",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Lists virtual machines for a title.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/multiplayerserver/listvirtualmachinesummaries"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ListVirtualMachineSummariesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListVirtualMachineSummariesResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Returns a list of virtual machines for a title.",
        "x-ms-docs-errors": [
          "APINotEnabledForGameClientAccess",
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/RequestMultiplayerServer": {
      "post": {
        "operationId": "RequestMultiplayerServer",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Request a multiplayer server session. Accepts tokens for title and if game client access is enabled, allows game client to request a server with player entity token.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/multiplayerserver/requestmultiplayerserver"
        },
        "parameters": [
          {
            "$ref": "#/parameters/RequestMultiplayerServerRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/RequestMultiplayerServerResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Requests a multiplayer server session from a particular build in any of the given preferred regions.",
        "x-seeAlso": [
          "MultiplayerServer/GetMultiplayerServerDetails"
        ],
        "x-ms-docs-errors": [
          "APINotEnabledForGameClientAccess",
          "MultiplayerServerBadRequest",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable",
          "RequestMultiplayerServersThrottledFromRateLimiter"
        ]
      }
    },
    "/MultiplayerServer/ShutdownMultiplayerServer": {
      "post": {
        "operationId": "ShutdownMultiplayerServer",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Shuts down a multiplayer server session.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/multiplayerserver/shutdownmultiplayerserver"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ShutdownMultiplayerServerRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EmptyResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Executes the shutdown callback from the GSDK and terminates the multiplayer server session. The callback in the GSDK will allow for graceful shutdown with a 15 minute timeoutIf graceful shutdown has not been completed before 15 minutes have elapsed, the multiplayer server session will be forcefully terminated on it's own.",
        "x-seeAlso": [
          "MultiplayerServer/GetMultiplayerServerDetails",
          "MultiplayerServer/RequestMultiplayerServer"
        ],
        "x-ms-docs-errors": [
          "APINotEnabledForGameClientAccess",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNoContent",
          "MultiplayerServerNotFound",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    },
    "/MultiplayerServer/UploadCertificate": {
      "post": {
        "operationId": "UploadCertificate",
        "tags": [
          "MultiplayerServer"
        ],
        "description": "Uploads a multiplayer server game certificate.",
        "externalDocs": {
          "url": "https://docs.microsoft.com/rest/api/playfab/multiplayer/multiplayerserver/uploadcertificate"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UploadCertificateRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/EmptyResponse"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Uploads a multiplayer server game certificate.",
        "x-seeAlso": [
          "MultiplayerServer/DeleteCertificate",
          "MultiplayerServer/ListCertificateSummaries"
        ],
        "x-ms-docs-errors": [
          "APINotEnabledForGameClientAccess",
          "MultiplayerServerBadRequest",
          "MultiplayerServerConflict",
          "MultiplayerServerForbidden",
          "MultiplayerServerInternalServerError",
          "MultiplayerServerNoContent",
          "MultiplayerServerNotFound",
          "MultiplayerServerTooManyRequests",
          "MultiplayerServerUnauthorized",
          "MultiplayerServerUnavailable"
        ]
      }
    }
  },
  "definitions": {
    "ApiErrorWrapper": {
      "description": "The basic wrapper around every failed API response",
      "type": "object",
      "properties": {
        "code": {
          "description": "Numerical HTTP code",
          "type": "integer"
        },
        "status": {
          "description": "String HTTP code",
          "type": "string"
        },
        "error": {
          "description": "Playfab error code",
          "type": "string"
        },
        "errorCode": {
          "description": "Numerical PlayFab error code",
          "type": "integer"
        },
        "errorMessage": {
          "description": "Description for the PlayFab errorCode",
          "type": "string"
        },
        "errorDetails": {
          "description": "Detailed description of individual issues with the request object",
          "type": "object"
        }
      },
      "required": [
        "code",
        "errorCode"
      ]
    },
    "AzureRegion": {
      "type": "string",
      "enum": [
        "AustraliaEast",
        "AustraliaSoutheast",
        "BrazilSouth",
        "CentralUs",
        "EastAsia",
        "EastUs",
        "EastUs2",
        "JapanEast",
        "JapanWest",
        "NorthCentralUs",
        "NorthEurope",
        "SouthCentralUs",
        "SoutheastAsia",
        "WestEurope",
        "WestUs",
        "SouthAfricaNorth",
        "WestCentralUs",
        "KoreaCentral",
        "FranceCentral",
        "WestUs2",
        "CentralIndia",
        "UaeNorth",
        "UkSouth"
      ]
    },
    "AzureVmSize": {
      "type": "string",
      "enum": [
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A1_v2",
        "Standard_A2_v2",
        "Standard_A4_v2",
        "Standard_A8_v2",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D2_v3",
        "Standard_D4_v3",
        "Standard_D8_v3",
        "Standard_D16_v3",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_F2s_v2",
        "Standard_F4s_v2",
        "Standard_F8s_v2",
        "Standard_F16s_v2",
        "Standard_D2as_v4",
        "Standard_D4as_v4",
        "Standard_D8as_v4",
        "Standard_D16as_v4",
        "Standard_D2a_v4",
        "Standard_D4a_v4",
        "Standard_D8a_v4",
        "Standard_D16a_v4",
        "Standard_E2a_v4",
        "Standard_E4a_v4",
        "Standard_E8a_v4",
        "Standard_E16a_v4",
        "Standard_E2as_v4",
        "Standard_E4as_v4",
        "Standard_E8as_v4",
        "Standard_E16as_v4",
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_NC4as_T4_v3",
        "Standard_D2d_v4",
        "Standard_D4d_v4",
        "Standard_D8d_v4",
        "Standard_D16d_v4",
        "Standard_D2ds_v4",
        "Standard_D4ds_v4",
        "Standard_D8ds_v4",
        "Standard_D16ds_v4",
        "Standard_HB120_16rs_v3",
        "Standard_HB120_32rs_v3",
        "Standard_HB120_64rs_v3",
        "Standard_HB120_96rs_v3",
        "Standard_HB120rs_v3"
      ]
    },
    "BuildAliasDetailsResponse": {
      "type": "object",
      "properties": {
        "AliasId": {
          "description": "The guid string alias Id of the alias to be created or updated.",
          "type": "string"
        },
        "AliasName": {
          "description": "The alias name.",
          "type": "string"
        },
        "BuildSelectionCriteria": {
          "description": "Array of build selection criteria.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildSelectionCriterion"
          },
          "x-isclass": true
        }
      },
      "example": {
        "AliasId": "21781fa8-096d-4d9c-b699-75433d579285",
        "AliasName": "AliasName",
        "BuildSelectionCriteria": [
          {
            "BuildWeightDistribution": {
              "53781fa8-006d-4e9c-b733-57433d579285": 1
            }
          }
        ]
      }
    },
    "BuildAliasParams": {
      "type": "object",
      "properties": {
        "AliasId": {
          "description": "The guid string alias ID to use for the request.",
          "type": "string"
        }
      },
      "required": [
        "AliasId"
      ]
    },
    "BuildRegion": {
      "type": "object",
      "properties": {
        "CurrentServerStats": {
          "$ref": "#/definitions/CurrentServerStats",
          "description": "The current multiplayer server stats for the region.",
          "type": "object",
          "x-isclass": true
        },
        "DynamicStandbySettings": {
          "$ref": "#/definitions/DynamicStandbySettings",
          "description": "Optional settings to control dynamic adjustment of standby target",
          "type": "object",
          "x-isclass": true
        },
        "IsAssetReplicationComplete": {
          "description": "Whether the game assets provided for the build have been replicated to this region.",
          "type": "boolean"
        },
        "MaxServers": {
          "description": "The maximum number of multiplayer servers for the region.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "MultiplayerServerCountPerVm": {
          "description": "Regional override for the number of multiplayer servers to host on a single VM of the build.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The build region.",
          "type": "string"
        },
        "ScheduledStandbySettings": {
          "$ref": "#/definitions/ScheduledStandbySettings",
          "description": "Optional settings to set the standby target to specified values during the supplied schedules",
          "type": "object",
          "x-isclass": true
        },
        "StandbyServers": {
          "description": "The target number of standby multiplayer servers for the region.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Status": {
          "description": "The status of multiplayer servers in the build region. Valid values are - Unknown, Initialized, Deploying, Deployed, Unhealthy, Deleting, Deleted.",
          "type": "string"
        },
        "VmSize": {
          "$ref": "#/definitions/AzureVmSize",
          "description": "Regional override for the VM size the build was created on.",
          "type": "string",
          "x-isenum": true
        }
      },
      "required": [
        "MaxServers",
        "StandbyServers",
        "IsAssetReplicationComplete"
      ]
    },
    "BuildSelectionCriterion": {
      "type": "object",
      "properties": {
        "BuildWeightDistribution": {
          "description": "Dictionary of build ids and their respective weights for distribution of allocation requests.",
          "type": "object",
          "x-actualtype": "uint32"
        }
      },
      "example": {
        "BuildWeightDistribution": {
          "53781fa8-006d-4e9c-b733-57433d579285": 1
        }
      }
    },
    "BuildSummary": {
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID of the build.",
          "type": "string"
        },
        "BuildName": {
          "description": "The build name.",
          "type": "string"
        },
        "CreationTime": {
          "description": "The time the build was created in UTC.",
          "type": "string"
        },
        "Metadata": {
          "description": "The metadata of the build.",
          "type": "object"
        },
        "RegionConfigurations": {
          "description": "The configuration and status for each region in the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildRegion"
          },
          "x-isclass": true
        }
      }
    },
    "CancelAllMatchmakingTicketsForPlayerRequest": {
      "description": "Cancels all tickets of which the player is a member in a given queue that are not cancelled or matched. This API is useful if you lose track of what tickets the player is a member of (if the title crashes for instance) and want to \"reset\". The Entity field is optional if the caller is a player and defaults to that player. Players may not cancel tickets for other people. The Entity field is required if the caller is a server (authenticated as the title).",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity key of the player whose tickets should be canceled.",
          "type": "object",
          "x-isclass": true
        },
        "QueueName": {
          "description": "The name of the queue from which a player's tickets should be canceled.",
          "type": "string"
        }
      },
      "required": [
        "QueueName"
      ],
      "example": {
        "Entity": {
          "Id": "123123123",
          "Type": "title_player_account",
          "TypeString": "title_player_account",
          "IsTitlePlayer": true
        },
        "QueueName": "custom123"
      }
    },
    "CancelAllMatchmakingTicketsForPlayerResult": {
      "type": "object",
      "properties": {},
      "example": {}
    },
    "CancelAllServerBackfillTicketsForPlayerRequest": {
      "description": "Cancels all backfill tickets of which the player is a member in a given queue that are not cancelled or matched. This API is useful if you lose track of what tickets the player is a member of (if the server crashes for instance) and want to \"reset\".",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity key of the player whose backfill tickets should be canceled.",
          "type": "object",
          "x-isclass": true
        },
        "QueueName": {
          "description": "The name of the queue from which a player's backfill tickets should be canceled.",
          "type": "string"
        }
      },
      "required": [
        "Entity",
        "QueueName"
      ],
      "example": {
        "Entity": {
          "Id": "123123123",
          "Type": "title_player_account",
          "TypeString": "title_player_account",
          "IsTitlePlayer": true
        },
        "QueueName": "custom123"
      }
    },
    "CancelAllServerBackfillTicketsForPlayerResult": {
      "type": "object",
      "properties": {},
      "example": {}
    },
    "CancellationReason": {
      "type": "string",
      "enum": [
        "Requested",
        "Internal",
        "Timeout"
      ]
    },
    "CancelMatchmakingTicketRequest": {
      "description": "Only servers and ticket members can cancel a ticket. The ticket can be in five different states when it is cancelled. 1: the ticket is waiting for members to join it, and it has not started matching. If the ticket is cancelled at this stage, it will never match. 2: the ticket is matching. If the ticket is cancelled, it will stop matching. 3: the ticket is matched. A matched ticket cannot be cancelled. 4: the ticket is already cancelled and nothing happens. 5: the ticket is waiting for a server. If the ticket is cancelled, server allocation will be stopped. A server may still be allocated due to a race condition, but that will not be reflected in the ticket. There may be race conditions between the ticket getting matched and the client making a cancellation request. The client must handle the possibility that the cancel request fails if a match is found before the cancellation request is processed. We do not allow resubmitting a cancelled ticket because players must consent to enter matchmaking again. Create a new ticket instead.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "QueueName": {
          "description": "The name of the queue the ticket is in.",
          "type": "string"
        },
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "TicketId",
        "QueueName"
      ],
      "example": {
        "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
        "QueueName": "custom123"
      }
    },
    "CancelMatchmakingTicketResult": {
      "type": "object",
      "properties": {},
      "example": {}
    },
    "CancelServerBackfillTicketRequest": {
      "description": "Only servers can cancel a backfill ticket. The ticket can be in three different states when it is cancelled. 1: the ticket is matching. If the ticket is cancelled, it will stop matching. 2: the ticket is matched. A matched ticket cannot be cancelled. 3: the ticket is already cancelled and nothing happens. There may be race conditions between the ticket getting matched and the server making a cancellation request. The server must handle the possibility that the cancel request fails if a match is found before the cancellation request is processed. We do not allow resubmitting a cancelled ticket. Create a new ticket instead.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "QueueName": {
          "description": "The name of the queue the ticket is in.",
          "type": "string"
        },
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "TicketId",
        "QueueName"
      ],
      "example": {
        "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
        "QueueName": "custom123"
      }
    },
    "CancelServerBackfillTicketResult": {
      "type": "object",
      "properties": {},
      "example": {}
    },
    "Certificate": {
      "type": "object",
      "properties": {
        "Base64EncodedValue": {
          "description": "Base64 encoded string contents of the certificate.",
          "type": "string"
        },
        "Name": {
          "description": "A name for the certificate. This is used to reference certificates in build configurations.",
          "type": "string"
        },
        "Password": {
          "description": "If required for your PFX certificate, use this field to provide a password that will be used to install the certificate on the container.",
          "type": "string"
        }
      },
      "required": [
        "Name",
        "Base64EncodedValue"
      ]
    },
    "CertificateSummary": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name of the certificate.",
          "type": "string"
        },
        "Thumbprint": {
          "description": "The thumbprint for the certificate.",
          "type": "string"
        }
      }
    },
    "ConnectedPlayer": {
      "type": "object",
      "properties": {
        "PlayerId": {
          "description": "The player ID of the player connected to the multiplayer server.",
          "type": "string"
        }
      }
    },
    "CreateMatchmakingTicketRequest": {
      "description": "The client specifies the creator's attributes and optionally a list of other users to match with.",
      "type": "object",
      "properties": {
        "Creator": {
          "$ref": "#/definitions/MatchmakingPlayer",
          "description": "The User who created this ticket.",
          "type": "object",
          "x-isclass": true
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "GiveUpAfterSeconds": {
          "description": "How long to attempt matching this ticket in seconds.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "MembersToMatchWith": {
          "description": "A list of Entity Keys of other users to match with.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityKey"
          },
          "x-isclass": true
        },
        "QueueName": {
          "description": "The Id of a match queue.",
          "type": "string"
        }
      },
      "required": [
        "Creator",
        "GiveUpAfterSeconds",
        "QueueName"
      ],
      "example": {
        "Creator": {},
        "MembersToMatchWith": [],
        "GiveUpAfterSeconds": 100,
        "QueueName": "custom123"
      }
    },
    "CreateMatchmakingTicketResult": {
      "type": "object",
      "properties": {
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "TicketId"
      ],
      "example": {
        "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c"
      }
    },
    "CreateRemoteUserRequest": {
      "description": "Creates a remote user to log on to a VM for a multiplayer server build in a specific region. Returns user credential information necessary to log on.",
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID of to create the remote user for.",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "ExpirationTime": {
          "description": "The expiration time for the remote user created. Defaults to expiring in one day if not specified.",
          "type": "string"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region of virtual machine to create the remote user for.",
          "type": "string"
        },
        "Username": {
          "description": "The username to create the remote user with.",
          "type": "string"
        },
        "VmId": {
          "description": "The virtual machine ID the multiplayer server is located on.",
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "Region",
        "VmId",
        "Username"
      ],
      "example": {
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
        "Region": "SouthCentralUs",
        "VmId": "VmID1",
        "Username": "AUsername",
        "ExpirationTime": "2014-04-07T09:04:28"
      }
    },
    "CreateRemoteUserResponse": {
      "type": "object",
      "properties": {
        "ExpirationTime": {
          "description": "The expiration time for the remote user created.",
          "type": "string"
        },
        "Password": {
          "description": "The generated password for the remote user that was created.",
          "type": "string"
        },
        "Username": {
          "description": "The username for the remote user that was created.",
          "type": "string"
        }
      }
    },
    "CreateServerBackfillTicketRequest": {
      "description": "The server specifies all the members, their teams and their attributes, and the server details if applicable.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "GiveUpAfterSeconds": {
          "description": "How long to attempt matching this ticket in seconds.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Members": {
          "description": "The users who will be part of this ticket, along with their team assignments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MatchmakingPlayerWithTeamAssignment"
          },
          "x-isclass": true
        },
        "QueueName": {
          "description": "The Id of a match queue.",
          "type": "string"
        },
        "ServerDetails": {
          "$ref": "#/definitions/ServerDetails",
          "description": "The details of the server the members are connected to.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Members",
        "GiveUpAfterSeconds",
        "QueueName"
      ],
      "example": {
        "Members": [],
        "GiveUpAfterSeconds": 100,
        "ServerDetails": {
          "IPV4Address": "10.250.24.54",
          "Ports": [
            {
              "Name": "PortName",
              "Num": 1243
            }
          ],
          "Region": "WestUS",
          "Fqdn": "vm.azure.cloudapp.net"
        },
        "QueueName": "custom123"
      }
    },
    "CreateServerBackfillTicketResult": {
      "type": "object",
      "properties": {
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "TicketId"
      ],
      "example": {
        "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c"
      }
    },
    "CreateServerMatchmakingTicketRequest": {
      "description": "The server specifies all the members and their attributes.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "GiveUpAfterSeconds": {
          "description": "How long to attempt matching this ticket in seconds.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Members": {
          "description": "The users who will be part of this ticket.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MatchmakingPlayer"
          },
          "x-isclass": true
        },
        "QueueName": {
          "description": "The Id of a match queue.",
          "type": "string"
        }
      },
      "required": [
        "Members",
        "GiveUpAfterSeconds",
        "QueueName"
      ],
      "example": {
        "Members": [
          null
        ],
        "GiveUpAfterSeconds": 100,
        "QueueName": "custom123"
      }
    },
    "CurrentServerStats": {
      "type": "object",
      "properties": {
        "Active": {
          "description": "The number of active multiplayer servers.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Propping": {
          "description": "The number of multiplayer servers still downloading game resources (such as assets).",
          "type": "number",
          "x-actualtype": "int32"
        },
        "StandingBy": {
          "description": "The number of standingby multiplayer servers.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Total": {
          "description": "The total number of multiplayer servers.",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "Active",
        "StandingBy",
        "Propping",
        "Total"
      ]
    },
    "DeleteCertificateRequest": {
      "description": "Deletes a multiplayer server game certificate.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Name": {
          "description": "The name of the certificate.",
          "type": "string"
        }
      },
      "required": [
        "Name"
      ],
      "example": {
        "Name": "GameCertificate1"
      }
    },
    "DeleteRemoteUserRequest": {
      "description": "Deletes a remote user to log on to a VM for a multiplayer server build in a specific region. Returns user credential information necessary to log on.",
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID of the multiplayer server where the remote user is to delete.",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region of the multiplayer server where the remote user is to delete.",
          "type": "string"
        },
        "Username": {
          "description": "The username of the remote user to delete.",
          "type": "string"
        },
        "VmId": {
          "description": "The virtual machine ID the multiplayer server is located on.",
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "Region",
        "VmId",
        "Username"
      ],
      "example": {
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
        "Region": "SouthCentralUs",
        "VmId": "VmID1",
        "Username": "AUsername"
      }
    },
    "DynamicStandbySettings": {
      "type": "object",
      "properties": {
        "DynamicFloorMultiplierThresholds": {
          "description": "List of auto standing by trigger values and corresponding standing by multiplier. Defaults to 1.5X at 50%, 3X at 25%, and 4X at 5%",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DynamicStandbyThreshold"
          },
          "x-isclass": true
        },
        "IsEnabled": {
          "description": "When true, dynamic standby will be enabled",
          "type": "boolean"
        },
        "RampDownSeconds": {
          "description": "The time it takes to reduce target standing by to configured floor value after an increase. Defaults to 30 minutes",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "IsEnabled"
      ]
    },
    "DynamicStandbyThreshold": {
      "type": "object",
      "properties": {
        "Multiplier": {
          "description": "When the trigger threshold is reached, multiply by this value",
          "type": "number",
          "x-actualtype": "double"
        },
        "TriggerThresholdPercentage": {
          "description": "The multiplier will be applied when the actual standby divided by target standby floor is less than this value",
          "type": "number",
          "x-actualtype": "double"
        }
      },
      "required": [
        "TriggerThresholdPercentage",
        "Multiplier"
      ]
    },
    "EmptyResponse": {
      "type": "object",
      "properties": {}
    },
    "EntityKey": {
      "description": "Combined entity type and ID structure which uniquely identifies a single entity.",
      "type": "object",
      "properties": {
        "Id": {
          "description": "Unique ID of the entity.",
          "type": "string"
        },
        "Type": {
          "description": "Entity type. See https://docs.microsoft.com/gaming/playfab/features/data/entities/available-built-in-entity-types",
          "type": "string"
        }
      },
      "required": [
        "Id"
      ]
    },
    "GetMatchmakingTicketRequest": {
      "description": "The ticket includes the invited players, their attributes if they have joined, the ticket status, the match Id when applicable, etc. Only servers, the ticket creator and the invited players can get the ticket.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "EscapeObject": {
          "description": "Determines whether the matchmaking attributes will be returned as an escaped JSON string or as an un-escaped JSON object.",
          "type": "boolean"
        },
        "QueueName": {
          "description": "The name of the queue to find a match for.",
          "type": "string"
        },
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "TicketId",
        "QueueName",
        "EscapeObject"
      ],
      "example": {
        "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
        "QueueName": "custom123"
      }
    },
    "GetMatchmakingTicketResult": {
      "type": "object",
      "properties": {
        "CancellationReasonString": {
          "description": "The reason why the current ticket was canceled. This field is only set if the ticket is in canceled state.",
          "type": "string"
        },
        "ChangeNumber": {
          "description": "Change number used for differentiating older matchmaking status updates from newer ones.",
          "type": "number",
          "x-actualtype": "uint32"
        },
        "Created": {
          "description": "The server date and time at which ticket was created.",
          "type": "string"
        },
        "Creator": {
          "$ref": "#/definitions/EntityKey",
          "description": "The Creator's entity key.",
          "type": "object",
          "x-isclass": true
        },
        "GiveUpAfterSeconds": {
          "description": "How long to attempt matching this ticket in seconds.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "MatchId": {
          "description": "The Id of a match.",
          "type": "string"
        },
        "Members": {
          "description": "A list of Users that have joined this ticket.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MatchmakingPlayer"
          },
          "x-isclass": true
        },
        "MembersToMatchWith": {
          "description": "A list of PlayFab Ids of Users to match with.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityKey"
          },
          "x-isclass": true
        },
        "QueueName": {
          "description": "The Id of a match queue.",
          "type": "string"
        },
        "Status": {
          "description": "The current ticket status. Possible values are: WaitingForPlayers, WaitingForMatch, WaitingForServer, Canceled and Matched.",
          "type": "string"
        },
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "TicketId",
        "QueueName",
        "Created",
        "Status",
        "GiveUpAfterSeconds",
        "Members",
        "Creator"
      ],
      "example": {
        "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
        "QueueName": "custom123",
        "MatchId": "4e0c5fd7-80e9-4744-b0ce-061a7f067ff5",
        "Created": "2016-08-23T12:33:14",
        "Status": "Matched",
        "GiveUpAfterSeconds": 100,
        "MembersToMatchWith": [
          {
            "Id": "456456456",
            "Type": "title_player_account",
            "TypeString": "title_player_account",
            "IsTitlePlayer": true
          }
        ],
        "Members": [],
        "Creator": {
          "Id": "123123123",
          "Type": "title_player_account",
          "TypeString": "title_player_account",
          "IsTitlePlayer": true
        },
        "ChangeNumber": 10
      }
    },
    "GetMatchRequest": {
      "description": "When matchmaking has successfully matched together a collection of tickets, it produces a 'match' with an Id. The match contains all of the players that were matched together, and their team assigments. Only servers and ticket members can get the match.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "EscapeObject": {
          "description": "Determines whether the matchmaking attributes will be returned as an escaped JSON string or as an un-escaped JSON object.",
          "type": "boolean"
        },
        "MatchId": {
          "description": "The Id of a match.",
          "type": "string"
        },
        "QueueName": {
          "description": "The name of the queue to join.",
          "type": "string"
        },
        "ReturnMemberAttributes": {
          "description": "Determines whether the matchmaking attributes for each user should be returned in the response for match request.",
          "type": "boolean"
        }
      },
      "required": [
        "MatchId",
        "QueueName",
        "EscapeObject",
        "ReturnMemberAttributes"
      ],
      "example": {
        "MatchId": "4e0c5fd7-80e9-4744-b0ce-061a7f067ff5",
        "QueueName": "custom123"
      }
    },
    "GetMatchResult": {
      "type": "object",
      "properties": {
        "ArrangementString": {
          "description": "A string that is used by players that are matched together to join an arranged lobby.",
          "type": "string"
        },
        "MatchId": {
          "description": "The Id of a match.",
          "type": "string"
        },
        "Members": {
          "description": "A list of Users that are matched together, along with their team assignments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MatchmakingPlayerWithTeamAssignment"
          },
          "x-isclass": true
        },
        "RegionPreferences": {
          "description": "A list of regions that the match could be played in sorted by preference. This value is only set if the queue has a region selection rule.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ServerDetails": {
          "$ref": "#/definitions/ServerDetails",
          "description": "The details of the server that the match has been allocated to.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "MatchId",
        "Members"
      ],
      "example": {
        "MatchId": "4e0c5fd7-80e9-4744-b0ce-061a7f067ff5",
        "Members": [],
        "RegionPreferences": [
          "Region1",
          "Region2"
        ],
        "ServerDetails": {
          "IPV4Address": "10.250.24.54",
          "Ports": [
            {
              "Name": "PortName",
              "Num": 1243
            }
          ],
          "Region": "WestUS",
          "Fqdn": "vm.azure.cloudapp.net"
        },
        "ArrangementString": "1:bd7a3abe-b740-4b2a-81e2-b0ae212ee91b|1337|title_player_account!123|1624579200|mv1:GAKac7ryTQNk5EF8D9wwKfwUjijLxc/+gQc+iV5Ke9Y="
      }
    },
    "GetMultiplayerServerDetailsRequest": {
      "description": "Gets multiplayer server session details for a build in a specific region.",
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID of the multiplayer server to get details for.",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region the multiplayer server is located in to get details for.",
          "type": "string"
        },
        "SessionId": {
          "description": "The title generated guid string session ID of the multiplayer server to get details for. This is to keep track of multiplayer server sessions.",
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "SessionId",
        "Region"
      ],
      "example": {
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
        "SessionId": "02bdef0e-e01e-4b29-8efe-ff9f47a06d8c",
        "Region": "SouthCentralUs"
      }
    },
    "GetMultiplayerServerDetailsResponse": {
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The identity of the build in which the server was allocated.",
          "type": "string"
        },
        "ConnectedPlayers": {
          "description": "The connected players in the multiplayer server.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectedPlayer"
          },
          "x-isclass": true
        },
        "FQDN": {
          "description": "The fully qualified domain name of the virtual machine that is hosting this multiplayer server.",
          "type": "string"
        },
        "IPV4Address": {
          "description": "The IPv4 address of the virtual machine that is hosting this multiplayer server.",
          "type": "string"
        },
        "LastStateTransitionTime": {
          "description": "The time (UTC) at which a change in the multiplayer server state was observed.",
          "type": "string"
        },
        "Ports": {
          "description": "The ports the multiplayer server uses.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          },
          "x-isclass": true
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region the multiplayer server is located in.",
          "type": "string"
        },
        "ServerId": {
          "description": "The string server ID of the multiplayer server generated by PlayFab.",
          "type": "string"
        },
        "SessionId": {
          "description": "The guid string session ID of the multiplayer server.",
          "type": "string"
        },
        "State": {
          "description": "The state of the multiplayer server.",
          "type": "string"
        },
        "VmId": {
          "description": "The virtual machine ID that the multiplayer server is located on.",
          "type": "string"
        }
      },
      "example": {
        "SessionId": "02bdef0e-e01e-4b29-8efe-ff9f47a06d8c",
        "ServerId": "AMultiplayerGameServer",
        "VmId": "VmID1",
        "IPV4Address": "10.250.24.54",
        "FQDN": "vmId1.azure.cloudapp.net",
        "Ports": [
          {
            "Name": "PortName",
            "Num": 1243
          }
        ],
        "Region": "SouthCentralUs",
        "State": "Active",
        "ConnectedPlayers": [
          {
            "PlayerId": "10931352888739351331"
          },
          {
            "PlayerId": "10271352123739051532"
          }
        ],
        "BuildId": "4da1a0f6-7e36-430c-a264-723ff6a605de"
      }
    },
    "GetMultiplayerServerLogsRequest": {
      "description": "Gets multiplayer server logs for a specific server id in a region. The logs are available only after a server has terminated.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "ServerId": {
          "description": "The server ID of multiplayer server to get logs for.",
          "type": "string"
        }
      },
      "required": [
        "ServerId"
      ],
      "example": {
        "ServerId": "SomeServerId"
      }
    },
    "GetMultiplayerServerLogsResponse": {
      "type": "object",
      "properties": {
        "LogDownloadUrl": {
          "description": "URL for logs download.",
          "type": "string"
        }
      },
      "example": {
        "LogDownloadUrl": "TheLogDownloadUrl"
      }
    },
    "GetMultiplayerSessionLogsBySessionIdRequest": {
      "description": "Gets multiplayer server logs for a specific server id in a region. The logs are available only after a server has terminated.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "SessionId": {
          "description": "The server ID of multiplayer server to get logs for.",
          "type": "string"
        }
      },
      "required": [
        "SessionId"
      ],
      "example": {
        "SessionId": "92e29db9-4004-4349-9a1f-b70ac01bdc08"
      }
    },
    "GetQueueStatisticsRequest": {
      "description": "Returns the matchmaking statistics for a queue. These include the number of players matching and the statistics related to the time to match statistics in seconds (average and percentiles). Statistics are refreshed once every 5 minutes. Servers can access all statistics no matter what the ClientStatisticsVisibility is configured to. Clients can access statistics according to the ClientStatisticsVisibility. Client requests are forbidden if all visibility fields are false.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "QueueName": {
          "description": "The name of the queue.",
          "type": "string"
        }
      },
      "required": [
        "QueueName"
      ],
      "example": {
        "QueueName": "custom123"
      }
    },
    "GetQueueStatisticsResult": {
      "type": "object",
      "properties": {
        "NumberOfPlayersMatching": {
          "description": "The current number of players in the matchmaking queue, who are waiting to be matched.",
          "type": "number",
          "x-actualtype": "uint32"
        },
        "TimeToMatchStatisticsInSeconds": {
          "$ref": "#/definitions/Statistics",
          "description": "Statistics representing the time (in seconds) it takes for tickets to find a match.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "NumberOfPlayersMatching": 563,
        "TimeToMatchStatisticsInSeconds": {
          "Average": 2.2,
          "Percentile50": 2.1,
          "Percentile90": 2.21,
          "Percentile99": 3
        }
      }
    },
    "GetRemoteLoginEndpointRequest": {
      "description": "Gets a remote login endpoint to a VM that is hosting a multiplayer server build in a specific region.",
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID of the multiplayer server to get remote login information for.",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region of the multiplayer server to get remote login information for.",
          "type": "string"
        },
        "VmId": {
          "description": "The virtual machine ID the multiplayer server is located on.",
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "Region",
        "VmId"
      ],
      "example": {
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
        "Region": "SouthCentralUs",
        "VmId": "VmID1"
      }
    },
    "GetRemoteLoginEndpointResponse": {
      "type": "object",
      "properties": {
        "IPV4Address": {
          "description": "The remote login IPV4 address of multiplayer server.",
          "type": "string"
        },
        "Port": {
          "description": "The remote login port of multiplayer server.",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "Port"
      ],
      "example": {
        "IPV4Address": "10.250.24.54",
        "Port": 1234
      }
    },
    "GetServerBackfillTicketRequest": {
      "description": "The ticket includes the players, their attributes, their teams, the ticket status, the match Id and the server details when applicable, etc. Only servers can get the ticket.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "EscapeObject": {
          "description": "Determines whether the matchmaking attributes will be returned as an escaped JSON string or as an un-escaped JSON object.",
          "type": "boolean"
        },
        "QueueName": {
          "description": "The name of the queue to find a match for.",
          "type": "string"
        },
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "TicketId",
        "QueueName",
        "EscapeObject"
      ],
      "example": {
        "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
        "QueueName": "custom123"
      }
    },
    "GetServerBackfillTicketResult": {
      "type": "object",
      "properties": {
        "CancellationReasonString": {
          "description": "The reason why the current ticket was canceled. This field is only set if the ticket is in canceled state.",
          "type": "string"
        },
        "Created": {
          "description": "The server date and time at which ticket was created.",
          "type": "string"
        },
        "GiveUpAfterSeconds": {
          "description": "How long to attempt matching this ticket in seconds.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "MatchId": {
          "description": "The Id of a match.",
          "type": "string"
        },
        "Members": {
          "description": "A list of Users that are part of this ticket, along with their team assignments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MatchmakingPlayerWithTeamAssignment"
          },
          "x-isclass": true
        },
        "QueueName": {
          "description": "The Id of a match queue.",
          "type": "string"
        },
        "ServerDetails": {
          "$ref": "#/definitions/ServerDetails",
          "description": "The details of the server the members are connected to.",
          "type": "object",
          "x-isclass": true
        },
        "Status": {
          "description": "The current ticket status. Possible values are: WaitingForMatch, Canceled and Matched.",
          "type": "string"
        },
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "TicketId",
        "QueueName",
        "Created",
        "Status",
        "GiveUpAfterSeconds",
        "Members",
        "ServerDetails"
      ],
      "example": {
        "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
        "QueueName": "custom123",
        "MatchId": "4e0c5fd7-80e9-4744-b0ce-061a7f067ff5",
        "Created": "2016-08-23T12:33:14",
        "Status": "Matched",
        "GiveUpAfterSeconds": 100,
        "Members": [],
        "ServerDetails": {
          "IPV4Address": "10.250.24.54",
          "Ports": [
            {
              "Name": "PortName",
              "Num": 1243
            }
          ],
          "Region": "WestUS",
          "Fqdn": "vm.azure.cloudapp.net"
        }
      }
    },
    "JoinMatchmakingTicketRequest": {
      "description": "Add the player to a matchmaking ticket and specify all of its matchmaking attributes. Players can join a ticket if and only if their EntityKeys are already listed in the ticket's Members list. The matchmaking service automatically starts matching the ticket against other matchmaking tickets once all players have joined the ticket. It is not possible to join a ticket once it has started matching.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Member": {
          "$ref": "#/definitions/MatchmakingPlayer",
          "description": "The User who wants to join the ticket. Their Id must be listed in PlayFabIdsToMatchWith.",
          "type": "object",
          "x-isclass": true
        },
        "QueueName": {
          "description": "The name of the queue to join.",
          "type": "string"
        },
        "TicketId": {
          "description": "The Id of the ticket to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "TicketId",
        "QueueName",
        "Member"
      ],
      "example": {
        "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
        "QueueName": "custom123",
        "Member": {}
      }
    },
    "JoinMatchmakingTicketResult": {
      "type": "object",
      "properties": {},
      "example": {}
    },
    "ListBuildAliasesRequest": {
      "description": "Returns a list of summarized details of all multiplayer server builds for a title.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "PageSize": {
          "description": "The page size for the request.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "description": "The skip token for the paged request.",
          "type": "string"
        }
      },
      "example": {
        "PageSize": 10
      }
    },
    "ListBuildAliasesResponse": {
      "type": "object",
      "properties": {
        "BuildAliases": {
          "description": "The list of build aliases for the title",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildAliasDetailsResponse"
          },
          "x-isclass": true
        },
        "PageSize": {
          "description": "The page size on the response.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "description": "The skip token for the paged response.",
          "type": "string"
        }
      },
      "required": [
        "PageSize"
      ]
    },
    "ListBuildSummariesRequest": {
      "description": "Returns a list of summarized details of all multiplayer server builds for a title.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "PageSize": {
          "description": "The page size for the request.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "description": "The skip token for the paged request.",
          "type": "string"
        }
      },
      "example": {
        "PageSize": 10
      }
    },
    "ListBuildSummariesResponse": {
      "type": "object",
      "properties": {
        "BuildSummaries": {
          "description": "The list of build summaries for a title.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildSummary"
          },
          "x-isclass": true
        },
        "PageSize": {
          "description": "The page size on the response.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "description": "The skip token for the paged response.",
          "type": "string"
        }
      },
      "required": [
        "PageSize"
      ]
    },
    "ListCertificateSummariesRequest": {
      "description": "Returns a list of multiplayer server game certificates for a title.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "PageSize": {
          "description": "The page size for the request.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "description": "The skip token for the paged request.",
          "type": "string"
        }
      },
      "example": {
        "PageSize": 10
      }
    },
    "ListCertificateSummariesResponse": {
      "type": "object",
      "properties": {
        "CertificateSummaries": {
          "description": "The list of game certificates.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateSummary"
          },
          "x-isclass": true
        },
        "PageSize": {
          "description": "The page size on the response.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "description": "The skip token for the paged response.",
          "type": "string"
        }
      },
      "required": [
        "PageSize"
      ],
      "example": {
        "CertificateSummaries": [
          {
            "Name": "GameCertificate1",
            "Thumbprint": "Thumbprint1"
          },
          {
            "Name": "GameCertificate2",
            "Thumbprint": "Thumbprint2"
          }
        ],
        "PageSize": 10
      }
    },
    "ListMatchmakingTicketsForPlayerRequest": {
      "description": "If the caller is a title, the EntityKey in the request is required. If the caller is a player, then it is optional. If it is provided it must match the caller's entity.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity key for which to find the ticket Ids.",
          "type": "object",
          "x-isclass": true
        },
        "QueueName": {
          "description": "The name of the queue to find a match for.",
          "type": "string"
        }
      },
      "required": [
        "QueueName"
      ],
      "example": {
        "Entity": {
          "Id": "123123123",
          "Type": "title_player_account",
          "TypeString": "title_player_account",
          "IsTitlePlayer": true
        },
        "QueueName": "custom123"
      }
    },
    "ListMatchmakingTicketsForPlayerResult": {
      "type": "object",
      "properties": {
        "TicketIds": {
          "description": "The list of ticket Ids the user is a member of.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "TicketIds"
      ],
      "example": {
        "TicketIds": [
          "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
          "d7cf891d-1dea-4f32-9e7e-277c0a245064"
        ]
      }
    },
    "ListMultiplayerServersRequest": {
      "description": "Returns a list of multiplayer servers for a build in a specific region.",
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID of the multiplayer servers to list.",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "PageSize": {
          "description": "The page size for the request.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region the multiplayer servers to list.",
          "type": "string"
        },
        "SkipToken": {
          "description": "The skip token for the paged request.",
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "Region"
      ],
      "example": {
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
        "Region": "SouthCentralUs"
      }
    },
    "ListMultiplayerServersResponse": {
      "type": "object",
      "properties": {
        "MultiplayerServerSummaries": {
          "description": "The list of multiplayer server summary details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MultiplayerServerSummary"
          },
          "x-isclass": true
        },
        "PageSize": {
          "description": "The page size on the response.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "description": "The skip token for the paged response.",
          "type": "string"
        }
      },
      "required": [
        "PageSize"
      ],
      "example": {
        "MultiplayerServerSummaries": [
          {
            "ServerId": "AMultiplayerGameServer",
            "SessionId": "02bdef0e-e01e-4b29-8efe-ff9f47a06d8c",
            "VmId": "VmID1",
            "Region": "SouthCentralUs",
            "State": "Active",
            "ConnectedPlayers": [
              {
                "PlayerId": "10931352888739351331"
              },
              {
                "PlayerId": "10271352123739051532"
              }
            ],
            "IPV4Address": "10.250.24.54",
            "FQDN": "vm.azure.cloudapp.net",
            "Ports": [
              {
                "Name": "PortName",
                "Num": 1243
              }
            ]
          },
          {
            "ServerId": "SomeOtherMultiplayerGameServer",
            "SessionId": "82bdef0e-a21e-3b29-8efe-ff9e57a08c1d",
            "VmId": "VmID2",
            "Region": "SouthCentralUs",
            "State": "Terminated",
            "ConnectedPlayers": [],
            "IPV4Address": "10.250.24.54",
            "FQDN": "vm.azure.cloudapp.net",
            "Ports": [
              {
                "Name": "PortName",
                "Num": 1243
              }
            ]
          }
        ]
      }
    },
    "ListPartyQosServersRequest": {
      "description": "Returns a list of quality of service servers for party.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        }
      },
      "example": {
        "Version": "1.0.0"
      }
    },
    "ListPartyQosServersResponse": {
      "type": "object",
      "properties": {
        "PageSize": {
          "description": "The page size on the response.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "QosServers": {
          "description": "The list of QoS servers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QosServer"
          },
          "x-isclass": true
        },
        "SkipToken": {
          "description": "The skip token for the paged response.",
          "type": "string"
        }
      },
      "required": [
        "PageSize"
      ],
      "example": {
        "QosServers": [
          {
            "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
            "Region": "WestUs"
          },
          {
            "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
            "Region": "SouthCentralUs"
          },
          {
            "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
            "Region": "EastUs"
          },
          {
            "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
            "Region": "NorthEurope"
          },
          {
            "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
            "Region": "WestEurope"
          }
        ],
        "PageSize": 10
      }
    },
    "ListQosServersForTitleRequest": {
      "description": "Returns a list of quality of service servers for a title.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "IncludeAllRegions": {
          "description": "Indicates that the response should contain Qos servers for all regions, including those where there are no builds deployed for the title.",
          "type": "boolean"
        }
      },
      "example": {
        "IncludeAllRegions": true
      }
    },
    "ListQosServersForTitleResponse": {
      "type": "object",
      "properties": {
        "PageSize": {
          "description": "The page size on the response.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "QosServers": {
          "description": "The list of QoS servers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QosServer"
          },
          "x-isclass": true
        },
        "SkipToken": {
          "description": "The skip token for the paged response.",
          "type": "string"
        }
      },
      "required": [
        "PageSize"
      ],
      "example": {
        "QosServers": [
          {
            "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
            "Region": "WestUs"
          },
          {
            "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
            "Region": "SouthCentralUs"
          },
          {
            "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
            "Region": "EastUs"
          },
          {
            "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
            "Region": "NorthEurope"
          },
          {
            "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
            "Region": "WestEurope"
          }
        ],
        "PageSize": 10
      }
    },
    "ListServerBackfillTicketsForPlayerRequest": {
      "description": "List all server backfill ticket Ids the user is a member of.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity key for which to find the ticket Ids.",
          "type": "object",
          "x-isclass": true
        },
        "QueueName": {
          "description": "The name of the queue the tickets are in.",
          "type": "string"
        }
      },
      "required": [
        "Entity",
        "QueueName"
      ],
      "example": {
        "Entity": {
          "Id": "123123123",
          "Type": "title_player_account",
          "TypeString": "title_player_account",
          "IsTitlePlayer": true
        },
        "QueueName": "custom123"
      }
    },
    "ListServerBackfillTicketsForPlayerResult": {
      "type": "object",
      "properties": {
        "TicketIds": {
          "description": "The list of backfill ticket Ids the user is a member of.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "TicketIds"
      ],
      "example": {
        "TicketIds": [
          "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
          "d7cf891d-1dea-4f32-9e7e-277c0a245064"
        ]
      }
    },
    "ListVirtualMachineSummariesRequest": {
      "description": "Returns a list of virtual machines for a title.",
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The guid string build ID of the virtual machines to list.",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "PageSize": {
          "description": "The page size for the request.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region of the virtual machines to list.",
          "type": "string"
        },
        "SkipToken": {
          "description": "The skip token for the paged request.",
          "type": "string"
        }
      },
      "required": [
        "BuildId",
        "Region"
      ],
      "example": {
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
        "Region": "SouthCentralUs",
        "PageSize": 10
      }
    },
    "ListVirtualMachineSummariesResponse": {
      "type": "object",
      "properties": {
        "PageSize": {
          "description": "The page size on the response.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SkipToken": {
          "description": "The skip token for the paged response.",
          "type": "string"
        },
        "VirtualMachines": {
          "description": "The list of virtual machine summaries.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualMachineSummary"
          },
          "x-isclass": true
        }
      },
      "required": [
        "PageSize"
      ],
      "example": {
        "VirtualMachines": [
          {
            "VmId": "VmID1",
            "State": "Running",
            "HealthStatus": "Healthy"
          },
          {
            "VmId": "VmID2",
            "State": "Propping",
            "HealthStatus": "Healthy"
          }
        ],
        "PageSize": 10
      }
    },
    "MatchmakingPlayer": {
      "description": "A user in a matchmaking ticket.",
      "type": "object",
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/MatchmakingPlayerAttributes",
          "description": "The user's attributes custom to the title.",
          "type": "object",
          "x-isclass": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity key of the matchmaking user.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Entity"
      ]
    },
    "MatchmakingPlayerAttributes": {
      "description": "The matchmaking attributes for a user.",
      "type": "object",
      "properties": {
        "DataObject": {
          "description": "A data object representing a user's attributes.",
          "type": "object"
        },
        "EscapedDataObject": {
          "description": "An escaped data object representing a user's attributes.",
          "type": "string"
        }
      }
    },
    "MatchmakingPlayerWithTeamAssignment": {
      "description": "A player in a created matchmaking match with a team assignment.",
      "type": "object",
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/MatchmakingPlayerAttributes",
          "description": "The user's attributes custom to the title. These attributes will be null unless the request has ReturnMemberAttributes flag set to true.",
          "type": "object",
          "x-isclass": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity key of the matchmaking user.",
          "type": "object",
          "x-isclass": true
        },
        "TeamId": {
          "description": "The Id of the team the User is assigned to.",
          "type": "string"
        }
      },
      "required": [
        "Entity"
      ]
    },
    "MultiplayerServerSummary": {
      "type": "object",
      "properties": {
        "ConnectedPlayers": {
          "description": "The connected players in the multiplayer server.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectedPlayer"
          },
          "x-isclass": true
        },
        "LastStateTransitionTime": {
          "description": "The time (UTC) at which a change in the multiplayer server state was observed.",
          "type": "string"
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region the multiplayer server is located in.",
          "type": "string"
        },
        "ServerId": {
          "description": "The string server ID of the multiplayer server generated by PlayFab.",
          "type": "string"
        },
        "SessionId": {
          "description": "The title generated guid string session ID of the multiplayer server.",
          "type": "string"
        },
        "State": {
          "description": "The state of the multiplayer server.",
          "type": "string"
        },
        "VmId": {
          "description": "The virtual machine ID that the multiplayer server is located on.",
          "type": "string"
        }
      }
    },
    "Port": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name for the port.",
          "type": "string"
        },
        "Num": {
          "description": "The number for the port.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Protocol": {
          "$ref": "#/definitions/ProtocolType",
          "description": "The protocol for the port.",
          "type": "string",
          "x-isenum": true
        }
      },
      "required": [
        "Name",
        "Num",
        "Protocol"
      ]
    },
    "ProtocolType": {
      "type": "string",
      "enum": [
        "TCP",
        "UDP"
      ]
    },
    "QosServer": {
      "type": "object",
      "properties": {
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region the QoS server is located in.",
          "type": "string"
        },
        "ServerUrl": {
          "description": "The QoS server URL.",
          "type": "string"
        }
      }
    },
    "RequestMultiplayerServerRequest": {
      "description": "Requests a multiplayer server session from a particular build in any of the given preferred regions.",
      "type": "object",
      "properties": {
        "BuildAliasParams": {
          "$ref": "#/definitions/BuildAliasParams",
          "description": "The identifiers of the build alias to use for the request.",
          "type": "object",
          "x-isclass": true
        },
        "BuildId": {
          "description": "The guid string build ID of the multiplayer server to request.",
          "type": "string"
        },
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "InitialPlayers": {
          "description": "Initial list of players (potentially matchmade) allowed to connect to the game. This list is passed to the game server when requested (via GSDK) and can be used to validate players connecting to it.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "PreferredRegions": {
          "description": "The preferred regions to request a multiplayer server from. The Multiplayer Service will iterate through the regions in the specified order and allocate a server from the first one that has servers available.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AzureRegion"
          }
        },
        "SessionCookie": {
          "description": "Data encoded as a string that is passed to the game server when requested. This can be used to to communicate information such as game mode or map through the request flow.",
          "type": "string"
        },
        "SessionId": {
          "description": "A guid string session ID created track the multiplayer server session over its life.",
          "type": "string"
        }
      },
      "required": [
        "SessionId",
        "PreferredRegions"
      ],
      "example": {
        "BuildId": "21781fa8-096d-4d9c-b699-75433d579285",
        "SessionId": "02bdef0e-e01e-4b29-8efe-ff9f47a06d8c",
        "SessionCookie": "U2Vzc2lvbkNvb2tpZQ==",
        "InitialPlayers": [
          "gamer1",
          "gamer2"
        ],
        "PreferredRegions": [
          "SouthCentralUs",
          "WestUs"
        ]
      }
    },
    "RequestMultiplayerServerResponse": {
      "type": "object",
      "properties": {
        "BuildId": {
          "description": "The identity of the build in which the server was allocated.",
          "type": "string"
        },
        "ConnectedPlayers": {
          "description": "The connected players in the multiplayer server.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectedPlayer"
          },
          "x-isclass": true
        },
        "FQDN": {
          "description": "The fully qualified domain name of the virtual machine that is hosting this multiplayer server.",
          "type": "string"
        },
        "IPV4Address": {
          "description": "The IPv4 address of the virtual machine that is hosting this multiplayer server.",
          "type": "string"
        },
        "LastStateTransitionTime": {
          "description": "The time (UTC) at which a change in the multiplayer server state was observed.",
          "type": "string"
        },
        "Ports": {
          "description": "The ports the multiplayer server uses.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          },
          "x-isclass": true
        },
        "Region": {
          "$ref": "#/definitions/AzureRegion",
          "description": "The region the multiplayer server is located in.",
          "type": "string"
        },
        "ServerId": {
          "description": "The string server ID of the multiplayer server generated by PlayFab.",
          "type": "string"
        },
        "SessionId": {
          "description": "The guid string session ID of the multiplayer server.",
          "type": "string"
        },
        "State": {
          "description": "The state of the multiplayer server.",
          "type": "string"
        },
        "VmId": {
          "description": "The virtual machine ID that the multiplayer server is located on.",
          "type": "string"
        }
      },
      "example": {
        "SessionId": "02bdef0e-e01e-4b29-8efe-ff9f47a06d8c",
        "ServerId": "AMultiplayerGameServer",
        "VmId": "80c00b02-a559-4961-9b31-4a04b39e26a6",
        "IPV4Address": "10.250.24.54",
        "FQDN": "vm.azure.cloudapp.net",
        "Ports": [
          {
            "Name": "PortName",
            "Num": 1243
          }
        ],
        "Region": "SouthCentralUs",
        "State": "Active",
        "ConnectedPlayers": [
          {
            "PlayerId": "10931352888739351331"
          },
          {
            "PlayerId": "10271352123739051532"
          }
        ],
        "BuildId": "4da1a0f6-7e36-430c-a264-723ff6a605de"
      }
    },
    "Schedule": {
      "type": "object",
      "properties": {
        "Description": {
          "description": "A short description about this schedule. For example, \"Game launch on July 15th\".",
          "type": "string"
        },
        "EndTime": {
          "description": "The date and time in UTC at which the schedule ends. If IsRecurringWeekly is true, this schedule will keep renewing for future weeks until disabled or removed.",
          "type": "string"
        },
        "IsDisabled": {
          "description": "Disables the schedule.",
          "type": "boolean"
        },
        "IsRecurringWeekly": {
          "description": "If true, the StartTime and EndTime will get renewed every week.",
          "type": "boolean"
        },
        "StartTime": {
          "description": "The date and time in UTC at which the schedule starts.",
          "type": "string"
        },
        "TargetStandby": {
          "description": "The standby target to maintain for the duration of the schedule.",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "StartTime",
        "EndTime",
        "IsRecurringWeekly",
        "IsDisabled",
        "TargetStandby"
      ]
    },
    "ScheduledStandbySettings": {
      "type": "object",
      "properties": {
        "IsEnabled": {
          "description": "When true, scheduled standby will be enabled",
          "type": "boolean"
        },
        "ScheduleList": {
          "description": "A list of non-overlapping schedules",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Schedule"
          },
          "x-isclass": true
        }
      },
      "required": [
        "IsEnabled"
      ]
    },
    "ServerDetails": {
      "type": "object",
      "properties": {
        "Fqdn": {
          "description": "The fully qualified domain name of the virtual machine that is hosting this multiplayer server.",
          "type": "string"
        },
        "IPV4Address": {
          "description": "The IPv4 address of the virtual machine that is hosting this multiplayer server.",
          "type": "string"
        },
        "Ports": {
          "description": "The ports the multiplayer server uses.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          },
          "x-isclass": true
        },
        "Region": {
          "description": "The server's region.",
          "type": "string"
        }
      },
      "example": {
        "IPV4Address": "10.250.24.54",
        "Ports": [
          {
            "Name": "PortName",
            "Num": 1243
          }
        ],
        "Region": "WestUS",
        "Fqdn": "vm.azure.cloudapp.net"
      }
    },
    "ShutdownMultiplayerServerRequest": {
      "description": "Executes the shutdown callback from the GSDK and terminates the multiplayer server session. The callback in the GSDK will allow for graceful shutdown with a 15 minute timeoutIf graceful shutdown has not been completed before 15 minutes have elapsed, the multiplayer server session will be forcefully terminated on it's own.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "SessionId": {
          "description": "A guid string session ID of the multiplayer server to shut down.",
          "type": "string"
        }
      },
      "required": [
        "SessionId"
      ],
      "example": {
        "SessionId": "02bdef0e-e01e-4b29-8efe-ff9f47a06d8c"
      }
    },
    "Statistics": {
      "type": "object",
      "properties": {
        "Average": {
          "description": "The average.",
          "type": "number",
          "x-actualtype": "double"
        },
        "Percentile50": {
          "description": "The 50th percentile.",
          "type": "number",
          "x-actualtype": "double"
        },
        "Percentile90": {
          "description": "The 90th percentile.",
          "type": "number",
          "x-actualtype": "double"
        },
        "Percentile99": {
          "description": "The 99th percentile.",
          "type": "number",
          "x-actualtype": "double"
        }
      },
      "required": [
        "Average",
        "Percentile50",
        "Percentile90",
        "Percentile99"
      ]
    },
    "SubscribeToMatchResourceRequest": {
      "description": "Subscribe to match resource notifications. Match subscriptions have two types; MatchInvite and MatchTicketStatusChange",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "EntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity performing the subscription. The entity must be authorized to use this connectionHandle.",
          "type": "object",
          "x-isclass": true
        },
        "PubSubConnectionHandle": {
          "description": "Opaque string, given to a client upon creating a connection with PubSub. Notifications will be sent to the connection associated with this handle.",
          "type": "string"
        },
        "ResourceId": {
          "description": "The name of the resource to subscribe to.",
          "type": "string"
        },
        "SubscriptionVersion": {
          "description": "Version number for the subscription of this resource. Current supported version must be 1.",
          "type": "number",
          "x-actualtype": "uint32"
        },
        "Type": {
          "description": "Subscription type. MatchInvite subscriptions are per-player. MatchTicketStatusChange subscriptions are per-ticket. Subscribe calls are idempotent. Subscribing on the same resource for the same connection results in success.",
          "type": "string"
        }
      },
      "required": [
        "Type",
        "ResourceId",
        "SubscriptionVersion",
        "PubSubConnectionHandle",
        "EntityKey"
      ],
      "example": {
        "Type": "MatchTicketStatusChange",
        "ResourceId": "cd4f0b47-a924-4e6e-9977-5b00b8970289",
        "SubscriptionVersion": 1,
        "PubSubConnectionHandle": "PubSubConnection",
        "EntityKey": {}
      },
      "x-AnyInclusiveFlags": [
        "RequiresOptionalValueSupport"
      ]
    },
    "SubscribeToMatchResourceResult": {
      "type": "object",
      "properties": {
        "Topic": {
          "description": "Matchmaking resource",
          "type": "string"
        }
      },
      "required": [
        "Topic"
      ],
      "example": {
        "Topic": "MatchResourceTopic"
      },
      "x-AnyInclusiveFlags": [
        "RequiresOptionalValueSupport"
      ]
    },
    "UnsubscribeFromMatchResourceRequest": {
      "description": "Unsubscribe from a Match resource's notifications. For MatchInvite, players are expected to unsubscribe once they can no longer accept invites. For MatchTicketStatusChange, players are expected to unsusbcribe once the ticket has reached a canceled or matched state.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "EntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity performing the unsubscription. The entity must be authorized to use this connectionHandle.",
          "type": "object",
          "x-isclass": true
        },
        "PubSubConnectionHandle": {
          "description": "Opaque string, given to a client upon creating a connection with PubSub.",
          "type": "string"
        },
        "ResourceId": {
          "description": "The resource to unsubscribe from.",
          "type": "string"
        },
        "SubscriptionVersion": {
          "description": "Version number for the unsubscription from this resource.",
          "type": "number",
          "x-actualtype": "uint32"
        },
        "Type": {
          "description": "Type of the subscription to be canceled.",
          "type": "string"
        }
      },
      "required": [
        "Type",
        "ResourceId",
        "SubscriptionVersion",
        "PubSubConnectionHandle",
        "EntityKey"
      ],
      "example": {
        "Type": "MatchTicketStatusChange",
        "ResourceId": "9dbbeb05-8eee-4925-9e23-3ffcc9e4d18e",
        "SubscriptionVersion": 1,
        "PubSubConnectionHandle": "PubSubConnection",
        "EntityKey": {}
      },
      "x-AnyInclusiveFlags": [
        "RequiresOptionalValueSupport"
      ]
    },
    "UnsubscribeFromMatchResourceResult": {
      "type": "object",
      "properties": {},
      "example": {},
      "x-AnyInclusiveFlags": [
        "RequiresOptionalValueSupport"
      ]
    },
    "UploadCertificateRequest": {
      "description": "Uploads a multiplayer server game certificate.",
      "type": "object",
      "properties": {
        "CustomTags": {
          "description": "The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).",
          "type": "object"
        },
        "GameCertificate": {
          "$ref": "#/definitions/Certificate",
          "description": "The game certificate to upload.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "GameCertificate"
      ],
      "example": {
        "GameCertificate": {
          "Name": "GameCertificate1",
          "Base64EncodedValue": "UGxheUZhYlJvY2tzISEhTGV0J3NtYWtlYWxvdG9mZ2FtZXMh",
          "Password": "PasswordForPFXCertificate"
        }
      }
    },
    "VirtualMachineSummary": {
      "type": "object",
      "properties": {
        "HealthStatus": {
          "description": "The virtual machine health status.",
          "type": "string"
        },
        "State": {
          "description": "The virtual machine state.",
          "type": "string"
        },
        "VmId": {
          "description": "The virtual machine ID.",
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "CancelAllMatchmakingTicketsForPlayerRequest": {
      "name": "CancelAllMatchmakingTicketsForPlayerRequest",
      "in": "body",
      "description": "Cancels all tickets of which the player is a member in a given queue that are not cancelled or matched. This API is useful if you lose track of what tickets the player is a member of (if the title crashes for instance) and want to \"reset\". The Entity field is optional if the caller is a player and defaults to that player. Players may not cancel tickets for other people. The Entity field is required if the caller is a server (authenticated as the title).",
      "schema": {
        "$ref": "#/definitions/CancelAllMatchmakingTicketsForPlayerRequest"
      }
    },
    "CancelAllServerBackfillTicketsForPlayerRequest": {
      "name": "CancelAllServerBackfillTicketsForPlayerRequest",
      "in": "body",
      "description": "Cancels all backfill tickets of which the player is a member in a given queue that are not cancelled or matched. This API is useful if you lose track of what tickets the player is a member of (if the server crashes for instance) and want to \"reset\".",
      "schema": {
        "$ref": "#/definitions/CancelAllServerBackfillTicketsForPlayerRequest"
      }
    },
    "CancelMatchmakingTicketRequest": {
      "name": "CancelMatchmakingTicketRequest",
      "in": "body",
      "description": "Only servers and ticket members can cancel a ticket. The ticket can be in five different states when it is cancelled. 1: the ticket is waiting for members to join it, and it has not started matching. If the ticket is cancelled at this stage, it will never match. 2: the ticket is matching. If the ticket is cancelled, it will stop matching. 3: the ticket is matched. A matched ticket cannot be cancelled. 4: the ticket is already cancelled and nothing happens. 5: the ticket is waiting for a server. If the ticket is cancelled, server allocation will be stopped. A server may still be allocated due to a race condition, but that will not be reflected in the ticket. There may be race conditions between the ticket getting matched and the client making a cancellation request. The client must handle the possibility that the cancel request fails if a match is found before the cancellation request is processed. We do not allow resubmitting a cancelled ticket because players must consent to enter matchmaking again. Create a new ticket instead.",
      "schema": {
        "$ref": "#/definitions/CancelMatchmakingTicketRequest"
      }
    },
    "CancelServerBackfillTicketRequest": {
      "name": "CancelServerBackfillTicketRequest",
      "in": "body",
      "description": "Only servers can cancel a backfill ticket. The ticket can be in three different states when it is cancelled. 1: the ticket is matching. If the ticket is cancelled, it will stop matching. 2: the ticket is matched. A matched ticket cannot be cancelled. 3: the ticket is already cancelled and nothing happens. There may be race conditions between the ticket getting matched and the server making a cancellation request. The server must handle the possibility that the cancel request fails if a match is found before the cancellation request is processed. We do not allow resubmitting a cancelled ticket. Create a new ticket instead.",
      "schema": {
        "$ref": "#/definitions/CancelServerBackfillTicketRequest"
      }
    },
    "CreateMatchmakingTicketRequest": {
      "name": "CreateMatchmakingTicketRequest",
      "in": "body",
      "description": "The client specifies the creator's attributes and optionally a list of other users to match with.",
      "schema": {
        "$ref": "#/definitions/CreateMatchmakingTicketRequest"
      }
    },
    "CreateRemoteUserRequest": {
      "name": "CreateRemoteUserRequest",
      "in": "body",
      "description": "Creates a remote user to log on to a VM for a multiplayer server build in a specific region. Returns user credential information necessary to log on.",
      "schema": {
        "$ref": "#/definitions/CreateRemoteUserRequest"
      }
    },
    "CreateServerBackfillTicketRequest": {
      "name": "CreateServerBackfillTicketRequest",
      "in": "body",
      "description": "The server specifies all the members, their teams and their attributes, and the server details if applicable.",
      "schema": {
        "$ref": "#/definitions/CreateServerBackfillTicketRequest"
      }
    },
    "CreateServerMatchmakingTicketRequest": {
      "name": "CreateServerMatchmakingTicketRequest",
      "in": "body",
      "description": "The server specifies all the members and their attributes.",
      "schema": {
        "$ref": "#/definitions/CreateServerMatchmakingTicketRequest"
      }
    },
    "DeleteCertificateRequest": {
      "name": "DeleteCertificateRequest",
      "in": "body",
      "description": "Deletes a multiplayer server game certificate.",
      "schema": {
        "$ref": "#/definitions/DeleteCertificateRequest"
      }
    },
    "DeleteRemoteUserRequest": {
      "name": "DeleteRemoteUserRequest",
      "in": "body",
      "description": "Deletes a remote user to log on to a VM for a multiplayer server build in a specific region. Returns user credential information necessary to log on.",
      "schema": {
        "$ref": "#/definitions/DeleteRemoteUserRequest"
      }
    },
    "GetMatchmakingTicketRequest": {
      "name": "GetMatchmakingTicketRequest",
      "in": "body",
      "description": "The ticket includes the invited players, their attributes if they have joined, the ticket status, the match Id when applicable, etc. Only servers, the ticket creator and the invited players can get the ticket.",
      "schema": {
        "$ref": "#/definitions/GetMatchmakingTicketRequest"
      }
    },
    "GetMatchRequest": {
      "name": "GetMatchRequest",
      "in": "body",
      "description": "When matchmaking has successfully matched together a collection of tickets, it produces a 'match' with an Id. The match contains all of the players that were matched together, and their team assigments. Only servers and ticket members can get the match.",
      "schema": {
        "$ref": "#/definitions/GetMatchRequest"
      }
    },
    "GetMultiplayerServerDetailsRequest": {
      "name": "GetMultiplayerServerDetailsRequest",
      "in": "body",
      "description": "Gets multiplayer server session details for a build in a specific region.",
      "schema": {
        "$ref": "#/definitions/GetMultiplayerServerDetailsRequest"
      }
    },
    "GetMultiplayerServerLogsRequest": {
      "name": "GetMultiplayerServerLogsRequest",
      "in": "body",
      "description": "Gets multiplayer server logs for a specific server id in a region. The logs are available only after a server has terminated.",
      "schema": {
        "$ref": "#/definitions/GetMultiplayerServerLogsRequest"
      }
    },
    "GetMultiplayerSessionLogsBySessionIdRequest": {
      "name": "GetMultiplayerSessionLogsBySessionIdRequest",
      "in": "body",
      "description": "Gets multiplayer server logs for a specific server id in a region. The logs are available only after a server has terminated.",
      "schema": {
        "$ref": "#/definitions/GetMultiplayerSessionLogsBySessionIdRequest"
      }
    },
    "GetQueueStatisticsRequest": {
      "name": "GetQueueStatisticsRequest",
      "in": "body",
      "description": "Returns the matchmaking statistics for a queue. These include the number of players matching and the statistics related to the time to match statistics in seconds (average and percentiles). Statistics are refreshed once every 5 minutes. Servers can access all statistics no matter what the ClientStatisticsVisibility is configured to. Clients can access statistics according to the ClientStatisticsVisibility. Client requests are forbidden if all visibility fields are false.",
      "schema": {
        "$ref": "#/definitions/GetQueueStatisticsRequest"
      }
    },
    "GetRemoteLoginEndpointRequest": {
      "name": "GetRemoteLoginEndpointRequest",
      "in": "body",
      "description": "Gets a remote login endpoint to a VM that is hosting a multiplayer server build in a specific region.",
      "schema": {
        "$ref": "#/definitions/GetRemoteLoginEndpointRequest"
      }
    },
    "GetServerBackfillTicketRequest": {
      "name": "GetServerBackfillTicketRequest",
      "in": "body",
      "description": "The ticket includes the players, their attributes, their teams, the ticket status, the match Id and the server details when applicable, etc. Only servers can get the ticket.",
      "schema": {
        "$ref": "#/definitions/GetServerBackfillTicketRequest"
      }
    },
    "JoinMatchmakingTicketRequest": {
      "name": "JoinMatchmakingTicketRequest",
      "in": "body",
      "description": "Add the player to a matchmaking ticket and specify all of its matchmaking attributes. Players can join a ticket if and only if their EntityKeys are already listed in the ticket's Members list. The matchmaking service automatically starts matching the ticket against other matchmaking tickets once all players have joined the ticket. It is not possible to join a ticket once it has started matching.",
      "schema": {
        "$ref": "#/definitions/JoinMatchmakingTicketRequest"
      }
    },
    "ListBuildAliasesRequest": {
      "name": "ListBuildAliasesRequest",
      "in": "body",
      "description": "Returns a list of summarized details of all multiplayer server builds for a title.",
      "schema": {
        "$ref": "#/definitions/ListBuildAliasesRequest"
      }
    },
    "ListBuildSummariesRequest": {
      "name": "ListBuildSummariesRequest",
      "in": "body",
      "description": "Returns a list of summarized details of all multiplayer server builds for a title.",
      "schema": {
        "$ref": "#/definitions/ListBuildSummariesRequest"
      }
    },
    "ListCertificateSummariesRequest": {
      "name": "ListCertificateSummariesRequest",
      "in": "body",
      "description": "Returns a list of multiplayer server game certificates for a title.",
      "schema": {
        "$ref": "#/definitions/ListCertificateSummariesRequest"
      }
    },
    "ListMatchmakingTicketsForPlayerRequest": {
      "name": "ListMatchmakingTicketsForPlayerRequest",
      "in": "body",
      "description": "If the caller is a title, the EntityKey in the request is required. If the caller is a player, then it is optional. If it is provided it must match the caller's entity.",
      "schema": {
        "$ref": "#/definitions/ListMatchmakingTicketsForPlayerRequest"
      }
    },
    "ListMultiplayerServersRequest": {
      "name": "ListMultiplayerServersRequest",
      "in": "body",
      "description": "Returns a list of multiplayer servers for a build in a specific region.",
      "schema": {
        "$ref": "#/definitions/ListMultiplayerServersRequest"
      }
    },
    "ListPartyQosServersRequest": {
      "name": "ListPartyQosServersRequest",
      "in": "body",
      "description": "Returns a list of quality of service servers for party.",
      "schema": {
        "$ref": "#/definitions/ListPartyQosServersRequest"
      }
    },
    "ListQosServersForTitleRequest": {
      "name": "ListQosServersForTitleRequest",
      "in": "body",
      "description": "Returns a list of quality of service servers for a title.",
      "schema": {
        "$ref": "#/definitions/ListQosServersForTitleRequest"
      }
    },
    "ListServerBackfillTicketsForPlayerRequest": {
      "name": "ListServerBackfillTicketsForPlayerRequest",
      "in": "body",
      "description": "List all server backfill ticket Ids the user is a member of.",
      "schema": {
        "$ref": "#/definitions/ListServerBackfillTicketsForPlayerRequest"
      }
    },
    "ListVirtualMachineSummariesRequest": {
      "name": "ListVirtualMachineSummariesRequest",
      "in": "body",
      "description": "Returns a list of virtual machines for a title.",
      "schema": {
        "$ref": "#/definitions/ListVirtualMachineSummariesRequest"
      }
    },
    "RequestMultiplayerServerRequest": {
      "name": "RequestMultiplayerServerRequest",
      "in": "body",
      "description": "Requests a multiplayer server session from a particular build in any of the given preferred regions.",
      "schema": {
        "$ref": "#/definitions/RequestMultiplayerServerRequest"
      }
    },
    "ShutdownMultiplayerServerRequest": {
      "name": "ShutdownMultiplayerServerRequest",
      "in": "body",
      "description": "Executes the shutdown callback from the GSDK and terminates the multiplayer server session. The callback in the GSDK will allow for graceful shutdown with a 15 minute timeoutIf graceful shutdown has not been completed before 15 minutes have elapsed, the multiplayer server session will be forcefully terminated on it's own.",
      "schema": {
        "$ref": "#/definitions/ShutdownMultiplayerServerRequest"
      }
    },
    "SubscribeToMatchResourceRequest": {
      "name": "SubscribeToMatchResourceRequest",
      "in": "body",
      "description": "Subscribe to match resource notifications. Match subscriptions have two types; MatchInvite and MatchTicketStatusChange",
      "schema": {
        "$ref": "#/definitions/SubscribeToMatchResourceRequest"
      }
    },
    "UnsubscribeFromMatchResourceRequest": {
      "name": "UnsubscribeFromMatchResourceRequest",
      "in": "body",
      "description": "Unsubscribe from a Match resource's notifications. For MatchInvite, players are expected to unsubscribe once they can no longer accept invites. For MatchTicketStatusChange, players are expected to unsusbcribe once the ticket has reached a canceled or matched state.",
      "schema": {
        "$ref": "#/definitions/UnsubscribeFromMatchResourceRequest"
      }
    },
    "UploadCertificateRequest": {
      "name": "UploadCertificateRequest",
      "in": "body",
      "description": "Uploads a multiplayer server game certificate.",
      "schema": {
        "$ref": "#/definitions/UploadCertificateRequest"
      }
    }
  },
  "responses": {
    "ApiErrorWrapper": {
      "description": "This is the outer wrapper for all responses with errors",
      "schema": {
        "$ref": "#/definitions/ApiErrorWrapper"
      }
    },
    "CancelAllMatchmakingTicketsForPlayerResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CancelAllMatchmakingTicketsForPlayerResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "CancelAllServerBackfillTicketsForPlayerResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CancelAllServerBackfillTicketsForPlayerResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "CancelMatchmakingTicketResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CancelMatchmakingTicketResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "CancelServerBackfillTicketResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CancelServerBackfillTicketResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "CreateMatchmakingTicketResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CreateMatchmakingTicketResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c"
          }
        }
      }
    },
    "CreateRemoteUserResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CreateRemoteUserResponse"
          }
        }
      }
    },
    "CreateServerBackfillTicketResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CreateServerBackfillTicketResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c"
          }
        }
      }
    },
    "EmptyResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/EmptyResponse"
          }
        }
      }
    },
    "GetMatchmakingTicketResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetMatchmakingTicketResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
            "QueueName": "custom123",
            "MatchId": "4e0c5fd7-80e9-4744-b0ce-061a7f067ff5",
            "Created": "2016-08-23T12:33:14",
            "Status": "Matched",
            "GiveUpAfterSeconds": 100,
            "MembersToMatchWith": [
              {
                "Id": "456456456",
                "Type": "title_player_account",
                "TypeString": "title_player_account",
                "IsTitlePlayer": true
              }
            ],
            "Members": [],
            "Creator": {
              "Id": "123123123",
              "Type": "title_player_account",
              "TypeString": "title_player_account",
              "IsTitlePlayer": true
            },
            "ChangeNumber": 10
          }
        }
      }
    },
    "GetMatchResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetMatchResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "MatchId": "4e0c5fd7-80e9-4744-b0ce-061a7f067ff5",
            "Members": [],
            "RegionPreferences": [
              "Region1",
              "Region2"
            ],
            "ServerDetails": {
              "IPV4Address": "10.250.24.54",
              "Ports": [
                {
                  "Name": "PortName",
                  "Num": 1243
                }
              ],
              "Region": "WestUS",
              "Fqdn": "vm.azure.cloudapp.net"
            },
            "ArrangementString": "1:bd7a3abe-b740-4b2a-81e2-b0ae212ee91b|1337|title_player_account!123|1624579200|mv1:GAKac7ryTQNk5EF8D9wwKfwUjijLxc/+gQc+iV5Ke9Y="
          }
        }
      }
    },
    "GetMultiplayerServerDetailsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetMultiplayerServerDetailsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "SessionId": "02bdef0e-e01e-4b29-8efe-ff9f47a06d8c",
            "ServerId": "AMultiplayerGameServer",
            "VmId": "VmID1",
            "IPV4Address": "10.250.24.54",
            "FQDN": "vmId1.azure.cloudapp.net",
            "Ports": [
              {
                "Name": "PortName",
                "Num": 1243
              }
            ],
            "Region": "SouthCentralUs",
            "State": "Active",
            "ConnectedPlayers": [
              {
                "PlayerId": "10931352888739351331"
              },
              {
                "PlayerId": "10271352123739051532"
              }
            ],
            "BuildId": "4da1a0f6-7e36-430c-a264-723ff6a605de"
          }
        }
      }
    },
    "GetMultiplayerServerLogsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetMultiplayerServerLogsResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "LogDownloadUrl": "TheLogDownloadUrl"
          }
        }
      }
    },
    "GetQueueStatisticsResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetQueueStatisticsResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "NumberOfPlayersMatching": 563,
            "TimeToMatchStatisticsInSeconds": {
              "Average": 2.2,
              "Percentile50": 2.1,
              "Percentile90": 2.21,
              "Percentile99": 3
            }
          }
        }
      }
    },
    "GetRemoteLoginEndpointResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetRemoteLoginEndpointResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "IPV4Address": "10.250.24.54",
            "Port": 1234
          }
        }
      }
    },
    "GetServerBackfillTicketResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetServerBackfillTicketResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "TicketId": "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
            "QueueName": "custom123",
            "MatchId": "4e0c5fd7-80e9-4744-b0ce-061a7f067ff5",
            "Created": "2016-08-23T12:33:14",
            "Status": "Matched",
            "GiveUpAfterSeconds": 100,
            "Members": [],
            "ServerDetails": {
              "IPV4Address": "10.250.24.54",
              "Ports": [
                {
                  "Name": "PortName",
                  "Num": 1243
                }
              ],
              "Region": "WestUS",
              "Fqdn": "vm.azure.cloudapp.net"
            }
          }
        }
      }
    },
    "JoinMatchmakingTicketResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/JoinMatchmakingTicketResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "ListBuildAliasesResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ListBuildAliasesResponse"
          }
        }
      }
    },
    "ListBuildSummariesResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ListBuildSummariesResponse"
          }
        }
      }
    },
    "ListCertificateSummariesResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ListCertificateSummariesResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "CertificateSummaries": [
              {
                "Name": "GameCertificate1",
                "Thumbprint": "Thumbprint1"
              },
              {
                "Name": "GameCertificate2",
                "Thumbprint": "Thumbprint2"
              }
            ],
            "PageSize": 10
          }
        }
      }
    },
    "ListMatchmakingTicketsForPlayerResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ListMatchmakingTicketsForPlayerResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "TicketIds": [
              "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
              "d7cf891d-1dea-4f32-9e7e-277c0a245064"
            ]
          }
        }
      }
    },
    "ListMultiplayerServersResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ListMultiplayerServersResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "MultiplayerServerSummaries": [
              {
                "ServerId": "AMultiplayerGameServer",
                "SessionId": "02bdef0e-e01e-4b29-8efe-ff9f47a06d8c",
                "VmId": "VmID1",
                "Region": "SouthCentralUs",
                "State": "Active",
                "ConnectedPlayers": [
                  {
                    "PlayerId": "10931352888739351331"
                  },
                  {
                    "PlayerId": "10271352123739051532"
                  }
                ],
                "IPV4Address": "10.250.24.54",
                "FQDN": "vm.azure.cloudapp.net",
                "Ports": [
                  {
                    "Name": "PortName",
                    "Num": 1243
                  }
                ]
              },
              {
                "ServerId": "SomeOtherMultiplayerGameServer",
                "SessionId": "82bdef0e-a21e-3b29-8efe-ff9e57a08c1d",
                "VmId": "VmID2",
                "Region": "SouthCentralUs",
                "State": "Terminated",
                "ConnectedPlayers": [],
                "IPV4Address": "10.250.24.54",
                "FQDN": "vm.azure.cloudapp.net",
                "Ports": [
                  {
                    "Name": "PortName",
                    "Num": 1243
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "ListPartyQosServersResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ListPartyQosServersResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "QosServers": [
              {
                "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
                "Region": "WestUs"
              },
              {
                "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
                "Region": "SouthCentralUs"
              },
              {
                "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
                "Region": "EastUs"
              },
              {
                "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
                "Region": "NorthEurope"
              },
              {
                "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
                "Region": "WestEurope"
              }
            ],
            "PageSize": 10
          }
        }
      }
    },
    "ListQosServersForTitleResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ListQosServersForTitleResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "QosServers": [
              {
                "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
                "Region": "WestUs"
              },
              {
                "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
                "Region": "SouthCentralUs"
              },
              {
                "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
                "Region": "EastUs"
              },
              {
                "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
                "Region": "NorthEurope"
              },
              {
                "ServerUrl": "xblcxplatqos-wus-9-18-2-0.cloudapp.net",
                "Region": "WestEurope"
              }
            ],
            "PageSize": 10
          }
        }
      }
    },
    "ListServerBackfillTicketsForPlayerResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ListServerBackfillTicketsForPlayerResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "TicketIds": [
              "1c4b0daa-150e-47ae-9923-d770c0f9b07c",
              "d7cf891d-1dea-4f32-9e7e-277c0a245064"
            ]
          }
        }
      }
    },
    "ListVirtualMachineSummariesResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ListVirtualMachineSummariesResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "VirtualMachines": [
              {
                "VmId": "VmID1",
                "State": "Running",
                "HealthStatus": "Healthy"
              },
              {
                "VmId": "VmID2",
                "State": "Propping",
                "HealthStatus": "Healthy"
              }
            ],
            "PageSize": 10
          }
        }
      }
    },
    "RequestMultiplayerServerResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/RequestMultiplayerServerResponse"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "SessionId": "02bdef0e-e01e-4b29-8efe-ff9f47a06d8c",
            "ServerId": "AMultiplayerGameServer",
            "VmId": "80c00b02-a559-4961-9b31-4a04b39e26a6",
            "IPV4Address": "10.250.24.54",
            "FQDN": "vm.azure.cloudapp.net",
            "Ports": [
              {
                "Name": "PortName",
                "Num": 1243
              }
            ],
            "Region": "SouthCentralUs",
            "State": "Active",
            "ConnectedPlayers": [
              {
                "PlayerId": "10931352888739351331"
              },
              {
                "PlayerId": "10271352123739051532"
              }
            ],
            "BuildId": "4da1a0f6-7e36-430c-a264-723ff6a605de"
          }
        }
      }
    },
    "SubscribeToMatchResourceResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/SubscribeToMatchResourceResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Topic": "MatchResourceTopic"
          }
        }
      }
    },
    "UnsubscribeFromMatchResourceResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/UnsubscribeFromMatchResourceResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    }
  },
  "tags": [
    {
      "name": "Matchmaking",
      "description": "Matchmaking APIs"
    },
    {
      "name": "MultiplayerServer",
      "description": "Multiplayer Server APIs"
    }
  ],
  "securityDefinitions": {
    "None": {
      "type": "apiKey",
      "in": "header",
      "name": "None",
      "description": "This API requires no authentication headers (usually provides one to other calls)."
    },
    "SessionTicket": {
      "type": "apiKey",
      "in": "header",
      "name": "X-Authorization",
      "description": "This API requires a client session ticket, available from any Client Login function."
    },
    "SecretKey": {
      "type": "apiKey",
      "in": "header",
      "name": "X-SecretKey",
      "description": "This API requires a title secret key, available to title admins, from PlayFab Game Manager."
    },
    "EntityToken": {
      "type": "apiKey",
      "in": "header",
      "name": "X-EntityToken",
      "description": "This API requires an Entity Session Token, available from the Entity GetEntityToken method."
    }
  },
  "x-ms-docs-errors-mapping": {
    "Success": {
      "name": "Success"
    },
    "UnkownError": {
      "id": 500,
      "name": "UnkownError"
    },
    "InvalidParams": {
      "id": 1000,
      "name": "InvalidParams"
    },
    "AccountNotFound": {
      "id": 1001,
      "name": "AccountNotFound"
    },
    "AccountBanned": {
      "id": 1002,
      "name": "AccountBanned"
    },
    "InvalidUsernameOrPassword": {
      "id": 1003,
      "name": "InvalidUsernameOrPassword"
    },
    "InvalidTitleId": {
      "id": 1004,
      "name": "InvalidTitleId"
    },
    "InvalidEmailAddress": {
      "id": 1005,
      "name": "InvalidEmailAddress"
    },
    "EmailAddressNotAvailable": {
      "id": 1006,
      "name": "EmailAddressNotAvailable"
    },
    "InvalidUsername": {
      "id": 1007,
      "name": "InvalidUsername"
    },
    "InvalidPassword": {
      "id": 1008,
      "name": "InvalidPassword"
    },
    "UsernameNotAvailable": {
      "id": 1009,
      "name": "UsernameNotAvailable"
    },
    "InvalidSteamTicket": {
      "id": 1010,
      "name": "InvalidSteamTicket"
    },
    "AccountAlreadyLinked": {
      "id": 1011,
      "name": "AccountAlreadyLinked"
    },
    "LinkedAccountAlreadyClaimed": {
      "id": 1012,
      "name": "LinkedAccountAlreadyClaimed"
    },
    "InvalidFacebookToken": {
      "id": 1013,
      "name": "InvalidFacebookToken"
    },
    "AccountNotLinked": {
      "id": 1014,
      "name": "AccountNotLinked"
    },
    "FailedByPaymentProvider": {
      "id": 1015,
      "name": "FailedByPaymentProvider"
    },
    "CouponCodeNotFound": {
      "id": 1016,
      "name": "CouponCodeNotFound"
    },
    "InvalidContainerItem": {
      "id": 1017,
      "name": "InvalidContainerItem"
    },
    "ContainerNotOwned": {
      "id": 1018,
      "name": "ContainerNotOwned"
    },
    "KeyNotOwned": {
      "id": 1019,
      "name": "KeyNotOwned"
    },
    "InvalidItemIdInTable": {
      "id": 1020,
      "name": "InvalidItemIdInTable"
    },
    "InvalidReceipt": {
      "id": 1021,
      "name": "InvalidReceipt"
    },
    "ReceiptAlreadyUsed": {
      "id": 1022,
      "name": "ReceiptAlreadyUsed"
    },
    "ReceiptCancelled": {
      "id": 1023,
      "name": "ReceiptCancelled"
    },
    "GameNotFound": {
      "id": 1024,
      "name": "GameNotFound"
    },
    "GameModeNotFound": {
      "id": 1025,
      "name": "GameModeNotFound"
    },
    "InvalidGoogleToken": {
      "id": 1026,
      "name": "InvalidGoogleToken"
    },
    "UserIsNotPartOfDeveloper": {
      "id": 1027,
      "name": "UserIsNotPartOfDeveloper"
    },
    "InvalidTitleForDeveloper": {
      "id": 1028,
      "name": "InvalidTitleForDeveloper"
    },
    "TitleNameConflicts": {
      "id": 1029,
      "name": "TitleNameConflicts"
    },
    "UserisNotValid": {
      "id": 1030,
      "name": "UserisNotValid"
    },
    "ValueAlreadyExists": {
      "id": 1031,
      "name": "ValueAlreadyExists"
    },
    "BuildNotFound": {
      "id": 1032,
      "name": "BuildNotFound"
    },
    "PlayerNotInGame": {
      "id": 1033,
      "name": "PlayerNotInGame"
    },
    "InvalidTicket": {
      "id": 1034,
      "name": "InvalidTicket"
    },
    "InvalidDeveloper": {
      "id": 1035,
      "name": "InvalidDeveloper"
    },
    "InvalidOrderInfo": {
      "id": 1036,
      "name": "InvalidOrderInfo"
    },
    "RegistrationIncomplete": {
      "id": 1037,
      "name": "RegistrationIncomplete"
    },
    "InvalidPlatform": {
      "id": 1038,
      "name": "InvalidPlatform"
    },
    "UnknownError": {
      "id": 1039,
      "name": "UnknownError"
    },
    "SteamApplicationNotOwned": {
      "id": 1040,
      "name": "SteamApplicationNotOwned"
    },
    "WrongSteamAccount": {
      "id": 1041,
      "name": "WrongSteamAccount"
    },
    "TitleNotActivated": {
      "id": 1042,
      "name": "TitleNotActivated"
    },
    "RegistrationSessionNotFound": {
      "id": 1043,
      "name": "RegistrationSessionNotFound"
    },
    "NoSuchMod": {
      "id": 1044,
      "name": "NoSuchMod"
    },
    "FileNotFound": {
      "id": 1045,
      "name": "FileNotFound"
    },
    "DuplicateEmail": {
      "id": 1046,
      "name": "DuplicateEmail"
    },
    "ItemNotFound": {
      "id": 1047,
      "name": "ItemNotFound"
    },
    "ItemNotOwned": {
      "id": 1048,
      "name": "ItemNotOwned"
    },
    "ItemNotRecycleable": {
      "id": 1049,
      "name": "ItemNotRecycleable"
    },
    "ItemNotAffordable": {
      "id": 1050,
      "name": "ItemNotAffordable"
    },
    "InvalidVirtualCurrency": {
      "id": 1051,
      "name": "InvalidVirtualCurrency"
    },
    "WrongVirtualCurrency": {
      "id": 1052,
      "name": "WrongVirtualCurrency"
    },
    "WrongPrice": {
      "id": 1053,
      "name": "WrongPrice"
    },
    "NonPositiveValue": {
      "id": 1054,
      "name": "NonPositiveValue"
    },
    "InvalidRegion": {
      "id": 1055,
      "name": "InvalidRegion"
    },
    "RegionAtCapacity": {
      "id": 1056,
      "name": "RegionAtCapacity"
    },
    "ServerFailedToStart": {
      "id": 1057,
      "name": "ServerFailedToStart"
    },
    "NameNotAvailable": {
      "id": 1058,
      "name": "NameNotAvailable"
    },
    "InsufficientFunds": {
      "id": 1059,
      "name": "InsufficientFunds"
    },
    "InvalidDeviceID": {
      "id": 1060,
      "name": "InvalidDeviceID"
    },
    "InvalidPushNotificationToken": {
      "id": 1061,
      "name": "InvalidPushNotificationToken"
    },
    "NoRemainingUses": {
      "id": 1062,
      "name": "NoRemainingUses"
    },
    "InvalidPaymentProvider": {
      "id": 1063,
      "name": "InvalidPaymentProvider"
    },
    "PurchaseInitializationFailure": {
      "id": 1064,
      "name": "PurchaseInitializationFailure"
    },
    "DuplicateUsername": {
      "id": 1065,
      "name": "DuplicateUsername"
    },
    "InvalidBuyerInfo": {
      "id": 1066,
      "name": "InvalidBuyerInfo"
    },
    "NoGameModeParamsSet": {
      "id": 1067,
      "name": "NoGameModeParamsSet"
    },
    "BodyTooLarge": {
      "id": 1068,
      "name": "BodyTooLarge"
    },
    "ReservedWordInBody": {
      "id": 1069,
      "name": "ReservedWordInBody"
    },
    "InvalidTypeInBody": {
      "id": 1070,
      "name": "InvalidTypeInBody"
    },
    "InvalidRequest": {
      "id": 1071,
      "name": "InvalidRequest"
    },
    "ReservedEventName": {
      "id": 1072,
      "name": "ReservedEventName"
    },
    "InvalidUserStatistics": {
      "id": 1073,
      "name": "InvalidUserStatistics"
    },
    "NotAuthenticated": {
      "id": 1074,
      "name": "NotAuthenticated"
    },
    "StreamAlreadyExists": {
      "id": 1075,
      "name": "StreamAlreadyExists"
    },
    "ErrorCreatingStream": {
      "id": 1076,
      "name": "ErrorCreatingStream"
    },
    "StreamNotFound": {
      "id": 1077,
      "name": "StreamNotFound"
    },
    "InvalidAccount": {
      "id": 1078,
      "name": "InvalidAccount"
    },
    "PurchaseDoesNotExist": {
      "id": 1080,
      "name": "PurchaseDoesNotExist"
    },
    "InvalidPurchaseTransactionStatus": {
      "id": 1081,
      "name": "InvalidPurchaseTransactionStatus"
    },
    "APINotEnabledForGameClientAccess": {
      "id": 1082,
      "name": "APINotEnabledForGameClientAccess"
    },
    "NoPushNotificationARNForTitle": {
      "id": 1083,
      "name": "NoPushNotificationARNForTitle"
    },
    "BuildAlreadyExists": {
      "id": 1084,
      "name": "BuildAlreadyExists"
    },
    "BuildPackageDoesNotExist": {
      "id": 1085,
      "name": "BuildPackageDoesNotExist"
    },
    "CustomAnalyticsEventsNotEnabledForTitle": {
      "id": 1087,
      "name": "CustomAnalyticsEventsNotEnabledForTitle"
    },
    "InvalidSharedGroupId": {
      "id": 1088,
      "name": "InvalidSharedGroupId"
    },
    "NotAuthorized": {
      "id": 1089,
      "name": "NotAuthorized"
    },
    "MissingTitleGoogleProperties": {
      "id": 1090,
      "name": "MissingTitleGoogleProperties"
    },
    "InvalidItemProperties": {
      "id": 1091,
      "name": "InvalidItemProperties"
    },
    "InvalidPSNAuthCode": {
      "id": 1092,
      "name": "InvalidPSNAuthCode"
    },
    "InvalidItemId": {
      "id": 1093,
      "name": "InvalidItemId"
    },
    "PushNotEnabledForAccount": {
      "id": 1094,
      "name": "PushNotEnabledForAccount"
    },
    "PushServiceError": {
      "id": 1095,
      "name": "PushServiceError"
    },
    "ReceiptDoesNotContainInAppItems": {
      "id": 1096,
      "name": "ReceiptDoesNotContainInAppItems"
    },
    "ReceiptContainsMultipleInAppItems": {
      "id": 1097,
      "name": "ReceiptContainsMultipleInAppItems"
    },
    "InvalidBundleID": {
      "id": 1098,
      "name": "InvalidBundleID"
    },
    "JavascriptException": {
      "id": 1099,
      "name": "JavascriptException"
    },
    "InvalidSessionTicket": {
      "id": 1100,
      "name": "InvalidSessionTicket"
    },
    "UnableToConnectToDatabase": {
      "id": 1101,
      "name": "UnableToConnectToDatabase"
    },
    "InternalServerError": {
      "id": 1110,
      "name": "InternalServerError"
    },
    "InvalidReportDate": {
      "id": 1111,
      "name": "InvalidReportDate"
    },
    "ReportNotAvailable": {
      "id": 1112,
      "name": "ReportNotAvailable"
    },
    "DatabaseThroughputExceeded": {
      "id": 1113,
      "name": "DatabaseThroughputExceeded"
    },
    "InvalidGameTicket": {
      "id": 1115,
      "name": "InvalidGameTicket"
    },
    "ExpiredGameTicket": {
      "id": 1116,
      "name": "ExpiredGameTicket"
    },
    "GameTicketDoesNotMatchLobby": {
      "id": 1117,
      "name": "GameTicketDoesNotMatchLobby"
    },
    "LinkedDeviceAlreadyClaimed": {
      "id": 1118,
      "name": "LinkedDeviceAlreadyClaimed"
    },
    "DeviceAlreadyLinked": {
      "id": 1119,
      "name": "DeviceAlreadyLinked"
    },
    "DeviceNotLinked": {
      "id": 1120,
      "name": "DeviceNotLinked"
    },
    "PartialFailure": {
      "id": 1121,
      "name": "PartialFailure"
    },
    "PublisherNotSet": {
      "id": 1122,
      "name": "PublisherNotSet"
    },
    "ServiceUnavailable": {
      "id": 1123,
      "name": "ServiceUnavailable"
    },
    "VersionNotFound": {
      "id": 1124,
      "name": "VersionNotFound"
    },
    "RevisionNotFound": {
      "id": 1125,
      "name": "RevisionNotFound"
    },
    "InvalidPublisherId": {
      "id": 1126,
      "name": "InvalidPublisherId"
    },
    "DownstreamServiceUnavailable": {
      "id": 1127,
      "name": "DownstreamServiceUnavailable"
    },
    "APINotIncludedInTitleUsageTier": {
      "id": 1128,
      "name": "APINotIncludedInTitleUsageTier"
    },
    "DAULimitExceeded": {
      "id": 1129,
      "name": "DAULimitExceeded"
    },
    "APIRequestLimitExceeded": {
      "id": 1130,
      "name": "APIRequestLimitExceeded"
    },
    "InvalidAPIEndpoint": {
      "id": 1131,
      "name": "InvalidAPIEndpoint"
    },
    "BuildNotAvailable": {
      "id": 1132,
      "name": "BuildNotAvailable"
    },
    "ConcurrentEditError": {
      "id": 1133,
      "name": "ConcurrentEditError"
    },
    "ContentNotFound": {
      "id": 1134,
      "name": "ContentNotFound"
    },
    "CharacterNotFound": {
      "id": 1135,
      "name": "CharacterNotFound"
    },
    "CloudScriptNotFound": {
      "id": 1136,
      "name": "CloudScriptNotFound"
    },
    "ContentQuotaExceeded": {
      "id": 1137,
      "name": "ContentQuotaExceeded"
    },
    "InvalidCharacterStatistics": {
      "id": 1138,
      "name": "InvalidCharacterStatistics"
    },
    "PhotonNotEnabledForTitle": {
      "id": 1139,
      "name": "PhotonNotEnabledForTitle"
    },
    "PhotonApplicationNotFound": {
      "id": 1140,
      "name": "PhotonApplicationNotFound"
    },
    "PhotonApplicationNotAssociatedWithTitle": {
      "id": 1141,
      "name": "PhotonApplicationNotAssociatedWithTitle"
    },
    "InvalidEmailOrPassword": {
      "id": 1142,
      "name": "InvalidEmailOrPassword"
    },
    "FacebookAPIError": {
      "id": 1143,
      "name": "FacebookAPIError"
    },
    "InvalidContentType": {
      "id": 1144,
      "name": "InvalidContentType"
    },
    "KeyLengthExceeded": {
      "id": 1145,
      "name": "KeyLengthExceeded"
    },
    "DataLengthExceeded": {
      "id": 1146,
      "name": "DataLengthExceeded"
    },
    "TooManyKeys": {
      "id": 1147,
      "name": "TooManyKeys"
    },
    "FreeTierCannotHaveVirtualCurrency": {
      "id": 1148,
      "name": "FreeTierCannotHaveVirtualCurrency"
    },
    "MissingAmazonSharedKey": {
      "id": 1149,
      "name": "MissingAmazonSharedKey"
    },
    "AmazonValidationError": {
      "id": 1150,
      "name": "AmazonValidationError"
    },
    "InvalidPSNIssuerId": {
      "id": 1151,
      "name": "InvalidPSNIssuerId"
    },
    "PSNInaccessible": {
      "id": 1152,
      "name": "PSNInaccessible"
    },
    "ExpiredAuthToken": {
      "id": 1153,
      "name": "ExpiredAuthToken"
    },
    "FailedToGetEntitlements": {
      "id": 1154,
      "name": "FailedToGetEntitlements"
    },
    "FailedToConsumeEntitlement": {
      "id": 1155,
      "name": "FailedToConsumeEntitlement"
    },
    "TradeAcceptingUserNotAllowed": {
      "id": 1156,
      "name": "TradeAcceptingUserNotAllowed"
    },
    "TradeInventoryItemIsAssignedToCharacter": {
      "id": 1157,
      "name": "TradeInventoryItemIsAssignedToCharacter"
    },
    "TradeInventoryItemIsBundle": {
      "id": 1158,
      "name": "TradeInventoryItemIsBundle"
    },
    "TradeStatusNotValidForCancelling": {
      "id": 1159,
      "name": "TradeStatusNotValidForCancelling"
    },
    "TradeStatusNotValidForAccepting": {
      "id": 1160,
      "name": "TradeStatusNotValidForAccepting"
    },
    "TradeDoesNotExist": {
      "id": 1161,
      "name": "TradeDoesNotExist"
    },
    "TradeCancelled": {
      "id": 1162,
      "name": "TradeCancelled"
    },
    "TradeAlreadyFilled": {
      "id": 1163,
      "name": "TradeAlreadyFilled"
    },
    "TradeWaitForStatusTimeout": {
      "id": 1164,
      "name": "TradeWaitForStatusTimeout"
    },
    "TradeInventoryItemExpired": {
      "id": 1165,
      "name": "TradeInventoryItemExpired"
    },
    "TradeMissingOfferedAndAcceptedItems": {
      "id": 1166,
      "name": "TradeMissingOfferedAndAcceptedItems"
    },
    "TradeAcceptedItemIsBundle": {
      "id": 1167,
      "name": "TradeAcceptedItemIsBundle"
    },
    "TradeAcceptedItemIsStackable": {
      "id": 1168,
      "name": "TradeAcceptedItemIsStackable"
    },
    "TradeInventoryItemInvalidStatus": {
      "id": 1169,
      "name": "TradeInventoryItemInvalidStatus"
    },
    "TradeAcceptedCatalogItemInvalid": {
      "id": 1170,
      "name": "TradeAcceptedCatalogItemInvalid"
    },
    "TradeAllowedUsersInvalid": {
      "id": 1171,
      "name": "TradeAllowedUsersInvalid"
    },
    "TradeInventoryItemDoesNotExist": {
      "id": 1172,
      "name": "TradeInventoryItemDoesNotExist"
    },
    "TradeInventoryItemIsConsumed": {
      "id": 1173,
      "name": "TradeInventoryItemIsConsumed"
    },
    "TradeInventoryItemIsStackable": {
      "id": 1174,
      "name": "TradeInventoryItemIsStackable"
    },
    "TradeAcceptedItemsMismatch": {
      "id": 1175,
      "name": "TradeAcceptedItemsMismatch"
    },
    "InvalidKongregateToken": {
      "id": 1176,
      "name": "InvalidKongregateToken"
    },
    "FeatureNotConfiguredForTitle": {
      "id": 1177,
      "name": "FeatureNotConfiguredForTitle"
    },
    "NoMatchingCatalogItemForReceipt": {
      "id": 1178,
      "name": "NoMatchingCatalogItemForReceipt"
    },
    "InvalidCurrencyCode": {
      "id": 1179,
      "name": "InvalidCurrencyCode"
    },
    "NoRealMoneyPriceForCatalogItem": {
      "id": 1180,
      "name": "NoRealMoneyPriceForCatalogItem"
    },
    "TradeInventoryItemIsNotTradable": {
      "id": 1181,
      "name": "TradeInventoryItemIsNotTradable"
    },
    "TradeAcceptedCatalogItemIsNotTradable": {
      "id": 1182,
      "name": "TradeAcceptedCatalogItemIsNotTradable"
    },
    "UsersAlreadyFriends": {
      "id": 1183,
      "name": "UsersAlreadyFriends"
    },
    "LinkedIdentifierAlreadyClaimed": {
      "id": 1184,
      "name": "LinkedIdentifierAlreadyClaimed"
    },
    "CustomIdNotLinked": {
      "id": 1185,
      "name": "CustomIdNotLinked"
    },
    "TotalDataSizeExceeded": {
      "id": 1186,
      "name": "TotalDataSizeExceeded"
    },
    "DeleteKeyConflict": {
      "id": 1187,
      "name": "DeleteKeyConflict"
    },
    "InvalidXboxLiveToken": {
      "id": 1188,
      "name": "InvalidXboxLiveToken"
    },
    "ExpiredXboxLiveToken": {
      "id": 1189,
      "name": "ExpiredXboxLiveToken"
    },
    "ResettableStatisticVersionRequired": {
      "id": 1190,
      "name": "ResettableStatisticVersionRequired"
    },
    "NotAuthorizedByTitle": {
      "id": 1191,
      "name": "NotAuthorizedByTitle"
    },
    "NoPartnerEnabled": {
      "id": 1192,
      "name": "NoPartnerEnabled"
    },
    "InvalidPartnerResponse": {
      "id": 1193,
      "name": "InvalidPartnerResponse"
    },
    "APINotEnabledForGameServerAccess": {
      "id": 1194,
      "name": "APINotEnabledForGameServerAccess"
    },
    "StatisticNotFound": {
      "id": 1195,
      "name": "StatisticNotFound"
    },
    "StatisticNameConflict": {
      "id": 1196,
      "name": "StatisticNameConflict"
    },
    "StatisticVersionClosedForWrites": {
      "id": 1197,
      "name": "StatisticVersionClosedForWrites"
    },
    "StatisticVersionInvalid": {
      "id": 1198,
      "name": "StatisticVersionInvalid"
    },
    "APIClientRequestRateLimitExceeded": {
      "id": 1199,
      "name": "APIClientRequestRateLimitExceeded"
    },
    "InvalidJSONContent": {
      "id": 1200,
      "name": "InvalidJSONContent"
    },
    "InvalidDropTable": {
      "id": 1201,
      "name": "InvalidDropTable"
    },
    "StatisticVersionAlreadyIncrementedForScheduledInterval": {
      "id": 1202,
      "name": "StatisticVersionAlreadyIncrementedForScheduledInterval"
    },
    "StatisticCountLimitExceeded": {
      "id": 1203,
      "name": "StatisticCountLimitExceeded"
    },
    "StatisticVersionIncrementRateExceeded": {
      "id": 1204,
      "name": "StatisticVersionIncrementRateExceeded"
    },
    "ContainerKeyInvalid": {
      "id": 1205,
      "name": "ContainerKeyInvalid"
    },
    "CloudScriptExecutionTimeLimitExceeded": {
      "id": 1206,
      "name": "CloudScriptExecutionTimeLimitExceeded"
    },
    "NoWritePermissionsForEvent": {
      "id": 1207,
      "name": "NoWritePermissionsForEvent"
    },
    "CloudScriptFunctionArgumentSizeExceeded": {
      "id": 1208,
      "name": "CloudScriptFunctionArgumentSizeExceeded"
    },
    "CloudScriptAPIRequestCountExceeded": {
      "id": 1209,
      "name": "CloudScriptAPIRequestCountExceeded"
    },
    "CloudScriptAPIRequestError": {
      "id": 1210,
      "name": "CloudScriptAPIRequestError"
    },
    "CloudScriptHTTPRequestError": {
      "id": 1211,
      "name": "CloudScriptHTTPRequestError"
    },
    "InsufficientGuildRole": {
      "id": 1212,
      "name": "InsufficientGuildRole"
    },
    "GuildNotFound": {
      "id": 1213,
      "name": "GuildNotFound"
    },
    "OverLimit": {
      "id": 1214,
      "name": "OverLimit"
    },
    "EventNotFound": {
      "id": 1215,
      "name": "EventNotFound"
    },
    "InvalidEventField": {
      "id": 1216,
      "name": "InvalidEventField"
    },
    "InvalidEventName": {
      "id": 1217,
      "name": "InvalidEventName"
    },
    "CatalogNotConfigured": {
      "id": 1218,
      "name": "CatalogNotConfigured"
    },
    "OperationNotSupportedForPlatform": {
      "id": 1219,
      "name": "OperationNotSupportedForPlatform"
    },
    "SegmentNotFound": {
      "id": 1220,
      "name": "SegmentNotFound"
    },
    "StoreNotFound": {
      "id": 1221,
      "name": "StoreNotFound"
    },
    "InvalidStatisticName": {
      "id": 1222,
      "name": "InvalidStatisticName"
    },
    "TitleNotQualifiedForLimit": {
      "id": 1223,
      "name": "TitleNotQualifiedForLimit"
    },
    "InvalidServiceLimitLevel": {
      "id": 1224,
      "name": "InvalidServiceLimitLevel"
    },
    "ServiceLimitLevelInTransition": {
      "id": 1225,
      "name": "ServiceLimitLevelInTransition"
    },
    "CouponAlreadyRedeemed": {
      "id": 1226,
      "name": "CouponAlreadyRedeemed"
    },
    "GameServerBuildSizeLimitExceeded": {
      "id": 1227,
      "name": "GameServerBuildSizeLimitExceeded"
    },
    "GameServerBuildCountLimitExceeded": {
      "id": 1228,
      "name": "GameServerBuildCountLimitExceeded"
    },
    "VirtualCurrencyCountLimitExceeded": {
      "id": 1229,
      "name": "VirtualCurrencyCountLimitExceeded"
    },
    "VirtualCurrencyCodeExists": {
      "id": 1230,
      "name": "VirtualCurrencyCodeExists"
    },
    "TitleNewsItemCountLimitExceeded": {
      "id": 1231,
      "name": "TitleNewsItemCountLimitExceeded"
    },
    "InvalidTwitchToken": {
      "id": 1232,
      "name": "InvalidTwitchToken"
    },
    "TwitchResponseError": {
      "id": 1233,
      "name": "TwitchResponseError"
    },
    "ProfaneDisplayName": {
      "id": 1234,
      "name": "ProfaneDisplayName"
    },
    "UserAlreadyAdded": {
      "id": 1235,
      "name": "UserAlreadyAdded"
    },
    "InvalidVirtualCurrencyCode": {
      "id": 1236,
      "name": "InvalidVirtualCurrencyCode"
    },
    "VirtualCurrencyCannotBeDeleted": {
      "id": 1237,
      "name": "VirtualCurrencyCannotBeDeleted"
    },
    "IdentifierAlreadyClaimed": {
      "id": 1238,
      "name": "IdentifierAlreadyClaimed"
    },
    "IdentifierNotLinked": {
      "id": 1239,
      "name": "IdentifierNotLinked"
    },
    "InvalidContinuationToken": {
      "id": 1240,
      "name": "InvalidContinuationToken"
    },
    "ExpiredContinuationToken": {
      "id": 1241,
      "name": "ExpiredContinuationToken"
    },
    "InvalidSegment": {
      "id": 1242,
      "name": "InvalidSegment"
    },
    "InvalidSessionId": {
      "id": 1243,
      "name": "InvalidSessionId"
    },
    "SessionLogNotFound": {
      "id": 1244,
      "name": "SessionLogNotFound"
    },
    "InvalidSearchTerm": {
      "id": 1245,
      "name": "InvalidSearchTerm"
    },
    "TwoFactorAuthenticationTokenRequired": {
      "id": 1246,
      "name": "TwoFactorAuthenticationTokenRequired"
    },
    "GameServerHostCountLimitExceeded": {
      "id": 1247,
      "name": "GameServerHostCountLimitExceeded"
    },
    "PlayerTagCountLimitExceeded": {
      "id": 1248,
      "name": "PlayerTagCountLimitExceeded"
    },
    "RequestAlreadyRunning": {
      "id": 1249,
      "name": "RequestAlreadyRunning"
    },
    "ActionGroupNotFound": {
      "id": 1250,
      "name": "ActionGroupNotFound"
    },
    "MaximumSegmentBulkActionJobsRunning": {
      "id": 1251,
      "name": "MaximumSegmentBulkActionJobsRunning"
    },
    "NoActionsOnPlayersInSegmentJob": {
      "id": 1252,
      "name": "NoActionsOnPlayersInSegmentJob"
    },
    "DuplicateStatisticName": {
      "id": 1253,
      "name": "DuplicateStatisticName"
    },
    "ScheduledTaskNameConflict": {
      "id": 1254,
      "name": "ScheduledTaskNameConflict"
    },
    "ScheduledTaskCreateConflict": {
      "id": 1255,
      "name": "ScheduledTaskCreateConflict"
    },
    "InvalidScheduledTaskName": {
      "id": 1256,
      "name": "InvalidScheduledTaskName"
    },
    "InvalidTaskSchedule": {
      "id": 1257,
      "name": "InvalidTaskSchedule"
    },
    "SteamNotEnabledForTitle": {
      "id": 1258,
      "name": "SteamNotEnabledForTitle"
    },
    "LimitNotAnUpgradeOption": {
      "id": 1259,
      "name": "LimitNotAnUpgradeOption"
    },
    "NoSecretKeyEnabledForCloudScript": {
      "id": 1260,
      "name": "NoSecretKeyEnabledForCloudScript"
    },
    "TaskNotFound": {
      "id": 1261,
      "name": "TaskNotFound"
    },
    "TaskInstanceNotFound": {
      "id": 1262,
      "name": "TaskInstanceNotFound"
    },
    "InvalidIdentityProviderId": {
      "id": 1263,
      "name": "InvalidIdentityProviderId"
    },
    "MisconfiguredIdentityProvider": {
      "id": 1264,
      "name": "MisconfiguredIdentityProvider"
    },
    "InvalidScheduledTaskType": {
      "id": 1265,
      "name": "InvalidScheduledTaskType"
    },
    "BillingInformationRequired": {
      "id": 1266,
      "name": "BillingInformationRequired"
    },
    "LimitedEditionItemUnavailable": {
      "id": 1267,
      "name": "LimitedEditionItemUnavailable"
    },
    "InvalidAdPlacementAndReward": {
      "id": 1268,
      "name": "InvalidAdPlacementAndReward"
    },
    "AllAdPlacementViewsAlreadyConsumed": {
      "id": 1269,
      "name": "AllAdPlacementViewsAlreadyConsumed"
    },
    "GoogleOAuthNotConfiguredForTitle": {
      "id": 1270,
      "name": "GoogleOAuthNotConfiguredForTitle"
    },
    "GoogleOAuthError": {
      "id": 1271,
      "name": "GoogleOAuthError"
    },
    "UserNotFriend": {
      "id": 1272,
      "name": "UserNotFriend"
    },
    "InvalidSignature": {
      "id": 1273,
      "name": "InvalidSignature"
    },
    "InvalidPublicKey": {
      "id": 1274,
      "name": "InvalidPublicKey"
    },
    "GoogleOAuthNoIdTokenIncludedInResponse": {
      "id": 1275,
      "name": "GoogleOAuthNoIdTokenIncludedInResponse"
    },
    "StatisticUpdateInProgress": {
      "id": 1276,
      "name": "StatisticUpdateInProgress"
    },
    "LeaderboardVersionNotAvailable": {
      "id": 1277,
      "name": "LeaderboardVersionNotAvailable"
    },
    "StatisticAlreadyHasPrizeTable": {
      "id": 1279,
      "name": "StatisticAlreadyHasPrizeTable"
    },
    "PrizeTableHasOverlappingRanks": {
      "id": 1280,
      "name": "PrizeTableHasOverlappingRanks"
    },
    "PrizeTableHasMissingRanks": {
      "id": 1281,
      "name": "PrizeTableHasMissingRanks"
    },
    "PrizeTableRankStartsAtZero": {
      "id": 1282,
      "name": "PrizeTableRankStartsAtZero"
    },
    "InvalidStatistic": {
      "id": 1283,
      "name": "InvalidStatistic"
    },
    "ExpressionParseFailure": {
      "id": 1284,
      "name": "ExpressionParseFailure"
    },
    "ExpressionInvokeFailure": {
      "id": 1285,
      "name": "ExpressionInvokeFailure"
    },
    "ExpressionTooLong": {
      "id": 1286,
      "name": "ExpressionTooLong"
    },
    "DataUpdateRateExceeded": {
      "id": 1287,
      "name": "DataUpdateRateExceeded"
    },
    "RestrictedEmailDomain": {
      "id": 1288,
      "name": "RestrictedEmailDomain"
    },
    "EncryptionKeyDisabled": {
      "id": 1289,
      "name": "EncryptionKeyDisabled"
    },
    "EncryptionKeyMissing": {
      "id": 1290,
      "name": "EncryptionKeyMissing"
    },
    "EncryptionKeyBroken": {
      "id": 1291,
      "name": "EncryptionKeyBroken"
    },
    "NoSharedSecretKeyConfigured": {
      "id": 1292,
      "name": "NoSharedSecretKeyConfigured"
    },
    "SecretKeyNotFound": {
      "id": 1293,
      "name": "SecretKeyNotFound"
    },
    "PlayerSecretAlreadyConfigured": {
      "id": 1294,
      "name": "PlayerSecretAlreadyConfigured"
    },
    "APIRequestsDisabledForTitle": {
      "id": 1295,
      "name": "APIRequestsDisabledForTitle"
    },
    "InvalidSharedSecretKey": {
      "id": 1296,
      "name": "InvalidSharedSecretKey"
    },
    "PrizeTableHasNoRanks": {
      "id": 1297,
      "name": "PrizeTableHasNoRanks"
    },
    "ProfileDoesNotExist": {
      "id": 1298,
      "name": "ProfileDoesNotExist"
    },
    "ContentS3OriginBucketNotConfigured": {
      "id": 1299,
      "name": "ContentS3OriginBucketNotConfigured"
    },
    "InvalidEnvironmentForReceipt": {
      "id": 1300,
      "name": "InvalidEnvironmentForReceipt"
    },
    "EncryptedRequestNotAllowed": {
      "id": 1301,
      "name": "EncryptedRequestNotAllowed"
    },
    "SignedRequestNotAllowed": {
      "id": 1302,
      "name": "SignedRequestNotAllowed"
    },
    "RequestViewConstraintParamsNotAllowed": {
      "id": 1303,
      "name": "RequestViewConstraintParamsNotAllowed"
    },
    "BadPartnerConfiguration": {
      "id": 1304,
      "name": "BadPartnerConfiguration"
    },
    "XboxBPCertificateFailure": {
      "id": 1305,
      "name": "XboxBPCertificateFailure"
    },
    "XboxXASSExchangeFailure": {
      "id": 1306,
      "name": "XboxXASSExchangeFailure"
    },
    "InvalidEntityId": {
      "id": 1307,
      "name": "InvalidEntityId"
    },
    "StatisticValueAggregationOverflow": {
      "id": 1308,
      "name": "StatisticValueAggregationOverflow"
    },
    "EmailMessageFromAddressIsMissing": {
      "id": 1309,
      "name": "EmailMessageFromAddressIsMissing"
    },
    "EmailMessageToAddressIsMissing": {
      "id": 1310,
      "name": "EmailMessageToAddressIsMissing"
    },
    "SmtpServerAuthenticationError": {
      "id": 1311,
      "name": "SmtpServerAuthenticationError"
    },
    "SmtpServerLimitExceeded": {
      "id": 1312,
      "name": "SmtpServerLimitExceeded"
    },
    "SmtpServerInsufficientStorage": {
      "id": 1313,
      "name": "SmtpServerInsufficientStorage"
    },
    "SmtpServerCommunicationError": {
      "id": 1314,
      "name": "SmtpServerCommunicationError"
    },
    "SmtpServerGeneralFailure": {
      "id": 1315,
      "name": "SmtpServerGeneralFailure"
    },
    "EmailClientTimeout": {
      "id": 1316,
      "name": "EmailClientTimeout"
    },
    "EmailClientCanceledTask": {
      "id": 1317,
      "name": "EmailClientCanceledTask"
    },
    "EmailTemplateMissing": {
      "id": 1318,
      "name": "EmailTemplateMissing"
    },
    "InvalidHostForTitleId": {
      "id": 1319,
      "name": "InvalidHostForTitleId"
    },
    "EmailConfirmationTokenDoesNotExist": {
      "id": 1320,
      "name": "EmailConfirmationTokenDoesNotExist"
    },
    "EmailConfirmationTokenExpired": {
      "id": 1321,
      "name": "EmailConfirmationTokenExpired"
    },
    "AccountDeleted": {
      "id": 1322,
      "name": "AccountDeleted"
    },
    "PlayerSecretNotConfigured": {
      "id": 1323,
      "name": "PlayerSecretNotConfigured"
    },
    "InvalidSignatureTime": {
      "id": 1324,
      "name": "InvalidSignatureTime"
    },
    "NoContactEmailAddressFound": {
      "id": 1325,
      "name": "NoContactEmailAddressFound"
    },
    "InvalidAuthToken": {
      "id": 1326,
      "name": "InvalidAuthToken"
    },
    "AuthTokenDoesNotExist": {
      "id": 1327,
      "name": "AuthTokenDoesNotExist"
    },
    "AuthTokenExpired": {
      "id": 1328,
      "name": "AuthTokenExpired"
    },
    "AuthTokenAlreadyUsedToResetPassword": {
      "id": 1329,
      "name": "AuthTokenAlreadyUsedToResetPassword"
    },
    "MembershipNameTooLong": {
      "id": 1330,
      "name": "MembershipNameTooLong"
    },
    "MembershipNotFound": {
      "id": 1331,
      "name": "MembershipNotFound"
    },
    "GoogleServiceAccountInvalid": {
      "id": 1332,
      "name": "GoogleServiceAccountInvalid"
    },
    "GoogleServiceAccountParseFailure": {
      "id": 1333,
      "name": "GoogleServiceAccountParseFailure"
    },
    "EntityTokenMissing": {
      "id": 1334,
      "name": "EntityTokenMissing"
    },
    "EntityTokenInvalid": {
      "id": 1335,
      "name": "EntityTokenInvalid"
    },
    "EntityTokenExpired": {
      "id": 1336,
      "name": "EntityTokenExpired"
    },
    "EntityTokenRevoked": {
      "id": 1337,
      "name": "EntityTokenRevoked"
    },
    "InvalidProductForSubscription": {
      "id": 1338,
      "name": "InvalidProductForSubscription"
    },
    "XboxInaccessible": {
      "id": 1339,
      "name": "XboxInaccessible"
    },
    "SubscriptionAlreadyTaken": {
      "id": 1340,
      "name": "SubscriptionAlreadyTaken"
    },
    "SmtpAddonNotEnabled": {
      "id": 1341,
      "name": "SmtpAddonNotEnabled"
    },
    "APIConcurrentRequestLimitExceeded": {
      "id": 1342,
      "name": "APIConcurrentRequestLimitExceeded"
    },
    "XboxRejectedXSTSExchangeRequest": {
      "id": 1343,
      "name": "XboxRejectedXSTSExchangeRequest"
    },
    "VariableNotDefined": {
      "id": 1344,
      "name": "VariableNotDefined"
    },
    "TemplateVersionNotDefined": {
      "id": 1345,
      "name": "TemplateVersionNotDefined"
    },
    "FileTooLarge": {
      "id": 1346,
      "name": "FileTooLarge"
    },
    "TitleDeleted": {
      "id": 1347,
      "name": "TitleDeleted"
    },
    "TitleContainsUserAccounts": {
      "id": 1348,
      "name": "TitleContainsUserAccounts"
    },
    "TitleDeletionPlayerCleanupFailure": {
      "id": 1349,
      "name": "TitleDeletionPlayerCleanupFailure"
    },
    "EntityFileOperationPending": {
      "id": 1350,
      "name": "EntityFileOperationPending"
    },
    "NoEntityFileOperationPending": {
      "id": 1351,
      "name": "NoEntityFileOperationPending"
    },
    "EntityProfileVersionMismatch": {
      "id": 1352,
      "name": "EntityProfileVersionMismatch"
    },
    "TemplateVersionTooOld": {
      "id": 1353,
      "name": "TemplateVersionTooOld"
    },
    "MembershipDefinitionInUse": {
      "id": 1354,
      "name": "MembershipDefinitionInUse"
    },
    "PaymentPageNotConfigured": {
      "id": 1355,
      "name": "PaymentPageNotConfigured"
    },
    "FailedLoginAttemptRateLimitExceeded": {
      "id": 1356,
      "name": "FailedLoginAttemptRateLimitExceeded"
    },
    "EntityBlockedByGroup": {
      "id": 1357,
      "name": "EntityBlockedByGroup"
    },
    "RoleDoesNotExist": {
      "id": 1358,
      "name": "RoleDoesNotExist"
    },
    "EntityIsAlreadyMember": {
      "id": 1359,
      "name": "EntityIsAlreadyMember"
    },
    "DuplicateRoleId": {
      "id": 1360,
      "name": "DuplicateRoleId"
    },
    "GroupInvitationNotFound": {
      "id": 1361,
      "name": "GroupInvitationNotFound"
    },
    "GroupApplicationNotFound": {
      "id": 1362,
      "name": "GroupApplicationNotFound"
    },
    "OutstandingInvitationAcceptedInstead": {
      "id": 1363,
      "name": "OutstandingInvitationAcceptedInstead"
    },
    "OutstandingApplicationAcceptedInstead": {
      "id": 1364,
      "name": "OutstandingApplicationAcceptedInstead"
    },
    "RoleIsGroupDefaultMember": {
      "id": 1365,
      "name": "RoleIsGroupDefaultMember"
    },
    "RoleIsGroupAdmin": {
      "id": 1366,
      "name": "RoleIsGroupAdmin"
    },
    "RoleNameNotAvailable": {
      "id": 1367,
      "name": "RoleNameNotAvailable"
    },
    "GroupNameNotAvailable": {
      "id": 1368,
      "name": "GroupNameNotAvailable"
    },
    "EmailReportAlreadySent": {
      "id": 1369,
      "name": "EmailReportAlreadySent"
    },
    "EmailReportRecipientBlacklisted": {
      "id": 1370,
      "name": "EmailReportRecipientBlacklisted"
    },
    "EventNamespaceNotAllowed": {
      "id": 1371,
      "name": "EventNamespaceNotAllowed"
    },
    "EventEntityNotAllowed": {
      "id": 1372,
      "name": "EventEntityNotAllowed"
    },
    "InvalidEntityType": {
      "id": 1373,
      "name": "InvalidEntityType"
    },
    "NullTokenResultFromAad": {
      "id": 1374,
      "name": "NullTokenResultFromAad"
    },
    "InvalidTokenResultFromAad": {
      "id": 1375,
      "name": "InvalidTokenResultFromAad"
    },
    "NoValidCertificateForAad": {
      "id": 1376,
      "name": "NoValidCertificateForAad"
    },
    "InvalidCertificateForAad": {
      "id": 1377,
      "name": "InvalidCertificateForAad"
    },
    "DuplicateDropTableId": {
      "id": 1378,
      "name": "DuplicateDropTableId"
    },
    "MultiplayerServerError": {
      "id": 1379,
      "name": "MultiplayerServerError"
    },
    "MultiplayerServerTooManyRequests": {
      "id": 1380,
      "name": "MultiplayerServerTooManyRequests"
    },
    "MultiplayerServerNoContent": {
      "id": 1381,
      "name": "MultiplayerServerNoContent"
    },
    "MultiplayerServerBadRequest": {
      "id": 1382,
      "name": "MultiplayerServerBadRequest"
    },
    "MultiplayerServerUnauthorized": {
      "id": 1383,
      "name": "MultiplayerServerUnauthorized"
    },
    "MultiplayerServerForbidden": {
      "id": 1384,
      "name": "MultiplayerServerForbidden"
    },
    "MultiplayerServerNotFound": {
      "id": 1385,
      "name": "MultiplayerServerNotFound"
    },
    "MultiplayerServerConflict": {
      "id": 1386,
      "name": "MultiplayerServerConflict"
    },
    "MultiplayerServerInternalServerError": {
      "id": 1387,
      "name": "MultiplayerServerInternalServerError"
    },
    "MultiplayerServerUnavailable": {
      "id": 1388,
      "name": "MultiplayerServerUnavailable"
    },
    "ExplicitContentDetected": {
      "id": 1389,
      "name": "ExplicitContentDetected"
    },
    "PIIContentDetected": {
      "id": 1390,
      "name": "PIIContentDetected"
    },
    "InvalidScheduledTaskParameter": {
      "id": 1391,
      "name": "InvalidScheduledTaskParameter"
    },
    "PerEntityEventRateLimitExceeded": {
      "id": 1392,
      "name": "PerEntityEventRateLimitExceeded"
    },
    "TitleDefaultLanguageNotSet": {
      "id": 1393,
      "name": "TitleDefaultLanguageNotSet"
    },
    "EmailTemplateMissingDefaultVersion": {
      "id": 1394,
      "name": "EmailTemplateMissingDefaultVersion"
    },
    "FacebookInstantGamesIdNotLinked": {
      "id": 1395,
      "name": "FacebookInstantGamesIdNotLinked"
    },
    "InvalidFacebookInstantGamesSignature": {
      "id": 1396,
      "name": "InvalidFacebookInstantGamesSignature"
    },
    "FacebookInstantGamesAuthNotConfiguredForTitle": {
      "id": 1397,
      "name": "FacebookInstantGamesAuthNotConfiguredForTitle"
    },
    "EntityProfileConstraintValidationFailed": {
      "id": 1398,
      "name": "EntityProfileConstraintValidationFailed"
    },
    "TelemetryIngestionKeyPending": {
      "id": 1399,
      "name": "TelemetryIngestionKeyPending"
    },
    "TelemetryIngestionKeyNotFound": {
      "id": 1400,
      "name": "TelemetryIngestionKeyNotFound"
    },
    "StatisticChildNameInvalid": {
      "id": 1402,
      "name": "StatisticChildNameInvalid"
    },
    "DataIntegrityError": {
      "id": 1403,
      "name": "DataIntegrityError"
    },
    "VirtualCurrencyCannotBeSetToOlderVersion": {
      "id": 1404,
      "name": "VirtualCurrencyCannotBeSetToOlderVersion"
    },
    "VirtualCurrencyMustBeWithinIntegerRange": {
      "id": 1405,
      "name": "VirtualCurrencyMustBeWithinIntegerRange"
    },
    "EmailTemplateInvalidSyntax": {
      "id": 1406,
      "name": "EmailTemplateInvalidSyntax"
    },
    "EmailTemplateMissingCallback": {
      "id": 1407,
      "name": "EmailTemplateMissingCallback"
    },
    "PushNotificationTemplateInvalidPayload": {
      "id": 1408,
      "name": "PushNotificationTemplateInvalidPayload"
    },
    "InvalidLocalizedPushNotificationLanguage": {
      "id": 1409,
      "name": "InvalidLocalizedPushNotificationLanguage"
    },
    "MissingLocalizedPushNotificationMessage": {
      "id": 1410,
      "name": "MissingLocalizedPushNotificationMessage"
    },
    "PushNotificationTemplateMissingPlatformPayload": {
      "id": 1411,
      "name": "PushNotificationTemplateMissingPlatformPayload"
    },
    "PushNotificationTemplatePayloadContainsInvalidJson": {
      "id": 1412,
      "name": "PushNotificationTemplatePayloadContainsInvalidJson"
    },
    "PushNotificationTemplateContainsInvalidIosPayload": {
      "id": 1413,
      "name": "PushNotificationTemplateContainsInvalidIosPayload"
    },
    "PushNotificationTemplateContainsInvalidAndroidPayload": {
      "id": 1414,
      "name": "PushNotificationTemplateContainsInvalidAndroidPayload"
    },
    "PushNotificationTemplateIosPayloadMissingNotificationBody": {
      "id": 1415,
      "name": "PushNotificationTemplateIosPayloadMissingNotificationBody"
    },
    "PushNotificationTemplateAndroidPayloadMissingNotificationBody": {
      "id": 1416,
      "name": "PushNotificationTemplateAndroidPayloadMissingNotificationBody"
    },
    "PushNotificationTemplateNotFound": {
      "id": 1417,
      "name": "PushNotificationTemplateNotFound"
    },
    "PushNotificationTemplateMissingDefaultVersion": {
      "id": 1418,
      "name": "PushNotificationTemplateMissingDefaultVersion"
    },
    "PushNotificationTemplateInvalidSyntax": {
      "id": 1419,
      "name": "PushNotificationTemplateInvalidSyntax"
    },
    "PushNotificationTemplateNoCustomPayloadForV1": {
      "id": 1420,
      "name": "PushNotificationTemplateNoCustomPayloadForV1"
    },
    "NoLeaderboardForStatistic": {
      "id": 1421,
      "name": "NoLeaderboardForStatistic"
    },
    "TitleNewsMissingDefaultLanguage": {
      "id": 1422,
      "name": "TitleNewsMissingDefaultLanguage"
    },
    "TitleNewsNotFound": {
      "id": 1423,
      "name": "TitleNewsNotFound"
    },
    "TitleNewsDuplicateLanguage": {
      "id": 1424,
      "name": "TitleNewsDuplicateLanguage"
    },
    "TitleNewsMissingTitleOrBody": {
      "id": 1425,
      "name": "TitleNewsMissingTitleOrBody"
    },
    "TitleNewsInvalidLanguage": {
      "id": 1426,
      "name": "TitleNewsInvalidLanguage"
    },
    "EmailRecipientBlacklisted": {
      "id": 1427,
      "name": "EmailRecipientBlacklisted"
    },
    "InvalidGameCenterAuthRequest": {
      "id": 1428,
      "name": "InvalidGameCenterAuthRequest"
    },
    "GameCenterAuthenticationFailed": {
      "id": 1429,
      "name": "GameCenterAuthenticationFailed"
    },
    "CannotEnablePartiesForTitle": {
      "id": 1430,
      "name": "CannotEnablePartiesForTitle"
    },
    "PartyError": {
      "id": 1431,
      "name": "PartyError"
    },
    "PartyRequests": {
      "id": 1432,
      "name": "PartyRequests"
    },
    "PartyNoContent": {
      "id": 1433,
      "name": "PartyNoContent"
    },
    "PartyBadRequest": {
      "id": 1434,
      "name": "PartyBadRequest"
    },
    "PartyUnauthorized": {
      "id": 1435,
      "name": "PartyUnauthorized"
    },
    "PartyForbidden": {
      "id": 1436,
      "name": "PartyForbidden"
    },
    "PartyNotFound": {
      "id": 1437,
      "name": "PartyNotFound"
    },
    "PartyConflict": {
      "id": 1438,
      "name": "PartyConflict"
    },
    "PartyInternalServerError": {
      "id": 1439,
      "name": "PartyInternalServerError"
    },
    "PartyUnavailable": {
      "id": 1440,
      "name": "PartyUnavailable"
    },
    "PartyTooManyRequests": {
      "id": 1441,
      "name": "PartyTooManyRequests"
    },
    "PushNotificationTemplateMissingName": {
      "id": 1442,
      "name": "PushNotificationTemplateMissingName"
    },
    "CannotEnableMultiplayerServersForTitle": {
      "id": 1443,
      "name": "CannotEnableMultiplayerServersForTitle"
    },
    "WriteAttemptedDuringExport": {
      "id": 1444,
      "name": "WriteAttemptedDuringExport"
    },
    "MultiplayerServerTitleQuotaCoresExceeded": {
      "id": 1445,
      "name": "MultiplayerServerTitleQuotaCoresExceeded"
    },
    "AutomationRuleNotFound": {
      "id": 1446,
      "name": "AutomationRuleNotFound"
    },
    "EntityAPIKeyLimitExceeded": {
      "id": 1447,
      "name": "EntityAPIKeyLimitExceeded"
    },
    "EntityAPIKeyNotFound": {
      "id": 1448,
      "name": "EntityAPIKeyNotFound"
    },
    "EntityAPIKeyOrSecretInvalid": {
      "id": 1449,
      "name": "EntityAPIKeyOrSecretInvalid"
    },
    "EconomyServiceUnavailable": {
      "id": 1450,
      "name": "EconomyServiceUnavailable"
    },
    "EconomyServiceInternalError": {
      "id": 1451,
      "name": "EconomyServiceInternalError"
    },
    "QueryRateLimitExceeded": {
      "id": 1452,
      "name": "QueryRateLimitExceeded"
    },
    "EntityAPIKeyCreationDisabledForEntity": {
      "id": 1453,
      "name": "EntityAPIKeyCreationDisabledForEntity"
    },
    "ForbiddenByEntityPolicy": {
      "id": 1454,
      "name": "ForbiddenByEntityPolicy"
    },
    "UpdateInventoryRateLimitExceeded": {
      "id": 1455,
      "name": "UpdateInventoryRateLimitExceeded"
    },
    "StudioCreationRateLimited": {
      "id": 1456,
      "name": "StudioCreationRateLimited"
    },
    "StudioCreationInProgress": {
      "id": 1457,
      "name": "StudioCreationInProgress"
    },
    "DuplicateStudioName": {
      "id": 1458,
      "name": "DuplicateStudioName"
    },
    "StudioNotFound": {
      "id": 1459,
      "name": "StudioNotFound"
    },
    "StudioDeleted": {
      "id": 1460,
      "name": "StudioDeleted"
    },
    "StudioDeactivated": {
      "id": 1461,
      "name": "StudioDeactivated"
    },
    "StudioActivated": {
      "id": 1462,
      "name": "StudioActivated"
    },
    "TitleCreationRateLimited": {
      "id": 1463,
      "name": "TitleCreationRateLimited"
    },
    "TitleCreationInProgress": {
      "id": 1464,
      "name": "TitleCreationInProgress"
    },
    "DuplicateTitleName": {
      "id": 1465,
      "name": "DuplicateTitleName"
    },
    "TitleActivationRateLimited": {
      "id": 1466,
      "name": "TitleActivationRateLimited"
    },
    "TitleActivationInProgress": {
      "id": 1467,
      "name": "TitleActivationInProgress"
    },
    "TitleDeactivated": {
      "id": 1468,
      "name": "TitleDeactivated"
    },
    "TitleActivated": {
      "id": 1469,
      "name": "TitleActivated"
    },
    "CloudScriptAzureFunctionsExecutionTimeLimitExceeded": {
      "id": 1470,
      "name": "CloudScriptAzureFunctionsExecutionTimeLimitExceeded"
    },
    "CloudScriptAzureFunctionsArgumentSizeExceeded": {
      "id": 1471,
      "name": "CloudScriptAzureFunctionsArgumentSizeExceeded"
    },
    "CloudScriptAzureFunctionsReturnSizeExceeded": {
      "id": 1472,
      "name": "CloudScriptAzureFunctionsReturnSizeExceeded"
    },
    "CloudScriptAzureFunctionsHTTPRequestError": {
      "id": 1473,
      "name": "CloudScriptAzureFunctionsHTTPRequestError"
    },
    "VirtualCurrencyBetaGetError": {
      "id": 1474,
      "name": "VirtualCurrencyBetaGetError"
    },
    "VirtualCurrencyBetaCreateError": {
      "id": 1475,
      "name": "VirtualCurrencyBetaCreateError"
    },
    "VirtualCurrencyBetaInitialDepositSaveError": {
      "id": 1476,
      "name": "VirtualCurrencyBetaInitialDepositSaveError"
    },
    "VirtualCurrencyBetaSaveError": {
      "id": 1477,
      "name": "VirtualCurrencyBetaSaveError"
    },
    "VirtualCurrencyBetaDeleteError": {
      "id": 1478,
      "name": "VirtualCurrencyBetaDeleteError"
    },
    "VirtualCurrencyBetaRestoreError": {
      "id": 1479,
      "name": "VirtualCurrencyBetaRestoreError"
    },
    "VirtualCurrencyBetaSaveConflict": {
      "id": 1480,
      "name": "VirtualCurrencyBetaSaveConflict"
    },
    "VirtualCurrencyBetaUpdateError": {
      "id": 1481,
      "name": "VirtualCurrencyBetaUpdateError"
    },
    "InsightsManagementDatabaseNotFound": {
      "id": 1482,
      "name": "InsightsManagementDatabaseNotFound"
    },
    "InsightsManagementOperationNotFound": {
      "id": 1483,
      "name": "InsightsManagementOperationNotFound"
    },
    "InsightsManagementErrorPendingOperationExists": {
      "id": 1484,
      "name": "InsightsManagementErrorPendingOperationExists"
    },
    "InsightsManagementSetPerformanceLevelInvalidParameter": {
      "id": 1485,
      "name": "InsightsManagementSetPerformanceLevelInvalidParameter"
    },
    "InsightsManagementSetStorageRetentionInvalidParameter": {
      "id": 1486,
      "name": "InsightsManagementSetStorageRetentionInvalidParameter"
    },
    "InsightsManagementGetStorageUsageInvalidParameter": {
      "id": 1487,
      "name": "InsightsManagementGetStorageUsageInvalidParameter"
    },
    "InsightsManagementGetOperationStatusInvalidParameter": {
      "id": 1488,
      "name": "InsightsManagementGetOperationStatusInvalidParameter"
    },
    "DuplicatePurchaseTransactionId": {
      "id": 1489,
      "name": "DuplicatePurchaseTransactionId"
    },
    "EvaluationModePlayerCountExceeded": {
      "id": 1490,
      "name": "EvaluationModePlayerCountExceeded"
    },
    "GetPlayersInSegmentRateLimitExceeded": {
      "id": 1491,
      "name": "GetPlayersInSegmentRateLimitExceeded"
    },
    "CloudScriptFunctionNameSizeExceeded": {
      "id": 1492,
      "name": "CloudScriptFunctionNameSizeExceeded"
    },
    "PaidInsightsFeaturesNotEnabled": {
      "id": 1493,
      "name": "PaidInsightsFeaturesNotEnabled"
    },
    "CloudScriptAzureFunctionsQueueRequestError": {
      "id": 1494,
      "name": "CloudScriptAzureFunctionsQueueRequestError"
    },
    "EvaluationModeTitleCountExceeded": {
      "id": 1495,
      "name": "EvaluationModeTitleCountExceeded"
    },
    "InsightsManagementTitleNotInFlight": {
      "id": 1496,
      "name": "InsightsManagementTitleNotInFlight"
    },
    "LimitNotFound": {
      "id": 1497,
      "name": "LimitNotFound"
    },
    "LimitNotAvailableViaAPI": {
      "id": 1498,
      "name": "LimitNotAvailableViaAPI"
    },
    "InsightsManagementSetStorageRetentionBelowMinimum": {
      "id": 1499,
      "name": "InsightsManagementSetStorageRetentionBelowMinimum"
    },
    "InsightsManagementSetStorageRetentionAboveMaximum": {
      "id": 1500,
      "name": "InsightsManagementSetStorageRetentionAboveMaximum"
    },
    "AppleNotEnabledForTitle": {
      "id": 1501,
      "name": "AppleNotEnabledForTitle"
    },
    "InsightsManagementNewActiveEventExportLimitInvalid": {
      "id": 1502,
      "name": "InsightsManagementNewActiveEventExportLimitInvalid"
    },
    "InsightsManagementSetPerformanceRateLimited": {
      "id": 1503,
      "name": "InsightsManagementSetPerformanceRateLimited"
    },
    "PartyRequestsThrottledFromRateLimiter": {
      "id": 1504,
      "name": "PartyRequestsThrottledFromRateLimiter"
    },
    "XboxServiceTooManyRequests": {
      "id": 1505,
      "name": "XboxServiceTooManyRequests"
    },
    "NintendoSwitchNotEnabledForTitle": {
      "id": 1506,
      "name": "NintendoSwitchNotEnabledForTitle"
    },
    "RequestMultiplayerServersThrottledFromRateLimiter": {
      "id": 1507,
      "name": "RequestMultiplayerServersThrottledFromRateLimiter"
    },
    "TitleDataOverrideNotFound": {
      "id": 1508,
      "name": "TitleDataOverrideNotFound"
    },
    "DuplicateKeys": {
      "id": 1509,
      "name": "DuplicateKeys"
    },
    "WasNotCreatedWithCloudRoot": {
      "id": 1510,
      "name": "WasNotCreatedWithCloudRoot"
    },
    "LegacyMultiplayerServersDeprecated": {
      "id": 1511,
      "name": "LegacyMultiplayerServersDeprecated"
    },
    "VirtualCurrencyCurrentlyUnavailable": {
      "id": 1512,
      "name": "VirtualCurrencyCurrentlyUnavailable"
    },
    "SteamUserNotFound": {
      "id": 1513,
      "name": "SteamUserNotFound"
    },
    "ElasticSearchOperationFailed": {
      "id": 1514,
      "name": "ElasticSearchOperationFailed"
    },
    "NotImplemented": {
      "id": 1515,
      "name": "NotImplemented"
    },
    "PublisherNotFound": {
      "id": 1516,
      "name": "PublisherNotFound"
    },
    "PublisherDeleted": {
      "id": 1517,
      "name": "PublisherDeleted"
    },
    "ApiDisabledForMigration": {
      "id": 1518,
      "name": "ApiDisabledForMigration"
    },
    "ResourceNameUpdateNotAllowed": {
      "id": 1519,
      "name": "ResourceNameUpdateNotAllowed"
    },
    "ApiNotEnabledForTitle": {
      "id": 1520,
      "name": "ApiNotEnabledForTitle"
    },
    "DuplicateTitleNameForPublisher": {
      "id": 1521,
      "name": "DuplicateTitleNameForPublisher"
    },
    "AzureTitleCreationInProgress": {
      "id": 1522,
      "name": "AzureTitleCreationInProgress"
    },
    "TitleConstraintsPublisherDeletion": {
      "id": 1524,
      "name": "TitleConstraintsPublisherDeletion"
    },
    "InvalidPlayerAccountPoolId": {
      "id": 1525,
      "name": "InvalidPlayerAccountPoolId"
    },
    "PlayerAccountPoolNotFound": {
      "id": 1526,
      "name": "PlayerAccountPoolNotFound"
    },
    "PlayerAccountPoolDeleted": {
      "id": 1527,
      "name": "PlayerAccountPoolDeleted"
    },
    "TitleCleanupInProgress": {
      "id": 1528,
      "name": "TitleCleanupInProgress"
    },
    "AzureResourceConcurrentOperationInProgress": {
      "id": 1529,
      "name": "AzureResourceConcurrentOperationInProgress"
    },
    "TitlePublisherUpdateNotAllowed": {
      "id": 1530,
      "name": "TitlePublisherUpdateNotAllowed"
    },
    "AzureResourceManagerNotSupportedInStamp": {
      "id": 1531,
      "name": "AzureResourceManagerNotSupportedInStamp"
    },
    "ApiNotIncludedInAzurePlayFabFeatureSet": {
      "id": 1532,
      "name": "ApiNotIncludedInAzurePlayFabFeatureSet"
    },
    "GoogleServiceAccountFailedAuth": {
      "id": 1533,
      "name": "GoogleServiceAccountFailedAuth"
    },
    "GoogleAPIServiceUnavailable": {
      "id": 1534,
      "name": "GoogleAPIServiceUnavailable"
    },
    "GoogleAPIServiceUnknownError": {
      "id": 1535,
      "name": "GoogleAPIServiceUnknownError"
    },
    "NoValidIdentityForAad": {
      "id": 1536,
      "name": "NoValidIdentityForAad"
    },
    "PlayerIdentityLinkNotFound": {
      "id": 1537,
      "name": "PlayerIdentityLinkNotFound"
    },
    "PhotonApplicationIdAlreadyInUse": {
      "id": 1538,
      "name": "PhotonApplicationIdAlreadyInUse"
    },
    "CloudScriptUnableToDeleteProductionRevision": {
      "id": 1539,
      "name": "CloudScriptUnableToDeleteProductionRevision"
    },
    "CustomIdNotFound": {
      "id": 1540,
      "name": "CustomIdNotFound"
    },
    "MatchmakingEntityInvalid": {
      "id": 2001,
      "name": "MatchmakingEntityInvalid"
    },
    "MatchmakingPlayerAttributesInvalid": {
      "id": 2002,
      "name": "MatchmakingPlayerAttributesInvalid"
    },
    "MatchmakingQueueNotFound": {
      "id": 2016,
      "name": "MatchmakingQueueNotFound"
    },
    "MatchmakingMatchNotFound": {
      "id": 2017,
      "name": "MatchmakingMatchNotFound"
    },
    "MatchmakingTicketNotFound": {
      "id": 2018,
      "name": "MatchmakingTicketNotFound"
    },
    "MatchmakingAlreadyJoinedTicket": {
      "id": 2028,
      "name": "MatchmakingAlreadyJoinedTicket"
    },
    "MatchmakingTicketAlreadyCompleted": {
      "id": 2029,
      "name": "MatchmakingTicketAlreadyCompleted"
    },
    "MatchmakingQueueConfigInvalid": {
      "id": 2031,
      "name": "MatchmakingQueueConfigInvalid"
    },
    "MatchmakingMemberProfileInvalid": {
      "id": 2032,
      "name": "MatchmakingMemberProfileInvalid"
    },
    "NintendoSwitchDeviceIdNotLinked": {
      "id": 2034,
      "name": "NintendoSwitchDeviceIdNotLinked"
    },
    "MatchmakingNotEnabled": {
      "id": 2035,
      "name": "MatchmakingNotEnabled"
    },
    "MatchmakingPlayerAttributesTooLarge": {
      "id": 2043,
      "name": "MatchmakingPlayerAttributesTooLarge"
    },
    "MatchmakingNumberOfPlayersInTicketTooLarge": {
      "id": 2044,
      "name": "MatchmakingNumberOfPlayersInTicketTooLarge"
    },
    "MatchmakingAttributeInvalid": {
      "id": 2046,
      "name": "MatchmakingAttributeInvalid"
    },
    "MatchmakingPlayerHasNotJoinedTicket": {
      "id": 2053,
      "name": "MatchmakingPlayerHasNotJoinedTicket"
    },
    "MatchmakingRateLimitExceeded": {
      "id": 2054,
      "name": "MatchmakingRateLimitExceeded"
    },
    "MatchmakingTicketMembershipLimitExceeded": {
      "id": 2055,
      "name": "MatchmakingTicketMembershipLimitExceeded"
    },
    "MatchmakingUnauthorized": {
      "id": 2056,
      "name": "MatchmakingUnauthorized"
    },
    "MatchmakingQueueLimitExceeded": {
      "id": 2057,
      "name": "MatchmakingQueueLimitExceeded"
    },
    "MatchmakingRequestTypeMismatch": {
      "id": 2058,
      "name": "MatchmakingRequestTypeMismatch"
    },
    "MatchmakingBadRequest": {
      "id": 2059,
      "name": "MatchmakingBadRequest"
    },
    "PubSubFeatureNotEnabledForTitle": {
      "id": 2500,
      "name": "PubSubFeatureNotEnabledForTitle"
    },
    "PubSubTooManyRequests": {
      "id": 2501,
      "name": "PubSubTooManyRequests"
    },
    "PubSubConnectionNotFoundForEntity": {
      "id": 2502,
      "name": "PubSubConnectionNotFoundForEntity"
    },
    "PubSubConnectionHandleInvalid": {
      "id": 2503,
      "name": "PubSubConnectionHandleInvalid"
    },
    "PubSubSubscriptionLimitExceeded": {
      "id": 2504,
      "name": "PubSubSubscriptionLimitExceeded"
    },
    "TitleConfigNotFound": {
      "id": 3001,
      "name": "TitleConfigNotFound"
    },
    "TitleConfigUpdateConflict": {
      "id": 3002,
      "name": "TitleConfigUpdateConflict"
    },
    "TitleConfigSerializationError": {
      "id": 3003,
      "name": "TitleConfigSerializationError"
    },
    "CatalogApiNotImplemented": {
      "id": 4000,
      "name": "CatalogApiNotImplemented"
    },
    "CatalogEntityInvalid": {
      "id": 4001,
      "name": "CatalogEntityInvalid"
    },
    "CatalogTitleIdMissing": {
      "id": 4002,
      "name": "CatalogTitleIdMissing"
    },
    "CatalogPlayerIdMissing": {
      "id": 4003,
      "name": "CatalogPlayerIdMissing"
    },
    "CatalogClientIdentityInvalid": {
      "id": 4004,
      "name": "CatalogClientIdentityInvalid"
    },
    "CatalogOneOrMoreFilesInvalid": {
      "id": 4005,
      "name": "CatalogOneOrMoreFilesInvalid"
    },
    "CatalogItemMetadataInvalid": {
      "id": 4006,
      "name": "CatalogItemMetadataInvalid"
    },
    "CatalogItemIdInvalid": {
      "id": 4007,
      "name": "CatalogItemIdInvalid"
    },
    "CatalogSearchParameterInvalid": {
      "id": 4008,
      "name": "CatalogSearchParameterInvalid"
    },
    "CatalogFeatureDisabled": {
      "id": 4009,
      "name": "CatalogFeatureDisabled"
    },
    "CatalogConfigInvalid": {
      "id": 4010,
      "name": "CatalogConfigInvalid"
    },
    "CatalogItemTypeInvalid": {
      "id": 4012,
      "name": "CatalogItemTypeInvalid"
    },
    "CatalogBadRequest": {
      "id": 4013,
      "name": "CatalogBadRequest"
    },
    "CatalogTooManyRequests": {
      "id": 4014,
      "name": "CatalogTooManyRequests"
    },
    "ExportInvalidStatusUpdate": {
      "id": 5000,
      "name": "ExportInvalidStatusUpdate"
    },
    "ExportInvalidPrefix": {
      "id": 5001,
      "name": "ExportInvalidPrefix"
    },
    "ExportBlobContainerDoesNotExist": {
      "id": 5002,
      "name": "ExportBlobContainerDoesNotExist"
    },
    "ExportNotFound": {
      "id": 5004,
      "name": "ExportNotFound"
    },
    "ExportCouldNotUpdate": {
      "id": 5005,
      "name": "ExportCouldNotUpdate"
    },
    "ExportInvalidStorageType": {
      "id": 5006,
      "name": "ExportInvalidStorageType"
    },
    "ExportAmazonBucketDoesNotExist": {
      "id": 5007,
      "name": "ExportAmazonBucketDoesNotExist"
    },
    "ExportInvalidBlobStorage": {
      "id": 5008,
      "name": "ExportInvalidBlobStorage"
    },
    "ExportKustoException": {
      "id": 5009,
      "name": "ExportKustoException"
    },
    "ExportKustoConnectionFailed": {
      "id": 5012,
      "name": "ExportKustoConnectionFailed"
    },
    "ExportUnknownError": {
      "id": 5013,
      "name": "ExportUnknownError"
    },
    "ExportCantEditPendingExport": {
      "id": 5014,
      "name": "ExportCantEditPendingExport"
    },
    "ExportLimitExports": {
      "id": 5015,
      "name": "ExportLimitExports"
    },
    "ExportLimitEvents": {
      "id": 5016,
      "name": "ExportLimitEvents"
    },
    "ExportInvalidPartitionStatusModification": {
      "id": 5017,
      "name": "ExportInvalidPartitionStatusModification"
    },
    "ExportCouldNotCreate": {
      "id": 5018,
      "name": "ExportCouldNotCreate"
    },
    "ExportNoBackingDatabaseFound": {
      "id": 5019,
      "name": "ExportNoBackingDatabaseFound"
    },
    "ExportCouldNotDelete": {
      "id": 5020,
      "name": "ExportCouldNotDelete"
    },
    "ExportCannotDetermineEventQuery": {
      "id": 5021,
      "name": "ExportCannotDetermineEventQuery"
    },
    "ExportInvalidQuerySchemaModification": {
      "id": 5022,
      "name": "ExportInvalidQuerySchemaModification"
    },
    "ExportQuerySchemaMissingRequiredColumns": {
      "id": 5023,
      "name": "ExportQuerySchemaMissingRequiredColumns"
    },
    "ExportCannotParseQuery": {
      "id": 5024,
      "name": "ExportCannotParseQuery"
    },
    "ExportControlCommandsNotAllowed": {
      "id": 5025,
      "name": "ExportControlCommandsNotAllowed"
    },
    "ExportQueryMissingTableReference": {
      "id": 5026,
      "name": "ExportQueryMissingTableReference"
    },
    "ExplorerBasicInvalidQueryName": {
      "id": 5100,
      "name": "ExplorerBasicInvalidQueryName"
    },
    "ExplorerBasicInvalidQueryDescription": {
      "id": 5101,
      "name": "ExplorerBasicInvalidQueryDescription"
    },
    "ExplorerBasicInvalidQueryConditions": {
      "id": 5102,
      "name": "ExplorerBasicInvalidQueryConditions"
    },
    "ExplorerBasicInvalidQueryStartDate": {
      "id": 5103,
      "name": "ExplorerBasicInvalidQueryStartDate"
    },
    "ExplorerBasicInvalidQueryEndDate": {
      "id": 5104,
      "name": "ExplorerBasicInvalidQueryEndDate"
    },
    "ExplorerBasicInvalidQueryGroupBy": {
      "id": 5105,
      "name": "ExplorerBasicInvalidQueryGroupBy"
    },
    "ExplorerBasicInvalidQueryAggregateType": {
      "id": 5106,
      "name": "ExplorerBasicInvalidQueryAggregateType"
    },
    "ExplorerBasicInvalidQueryAggregateProperty": {
      "id": 5107,
      "name": "ExplorerBasicInvalidQueryAggregateProperty"
    },
    "ExplorerBasicLoadQueriesError": {
      "id": 5108,
      "name": "ExplorerBasicLoadQueriesError"
    },
    "ExplorerBasicLoadQueryError": {
      "id": 5109,
      "name": "ExplorerBasicLoadQueryError"
    },
    "ExplorerBasicCreateQueryError": {
      "id": 5110,
      "name": "ExplorerBasicCreateQueryError"
    },
    "ExplorerBasicDeleteQueryError": {
      "id": 5111,
      "name": "ExplorerBasicDeleteQueryError"
    },
    "ExplorerBasicUpdateQueryError": {
      "id": 5112,
      "name": "ExplorerBasicUpdateQueryError"
    },
    "ExplorerBasicSavedQueriesLimit": {
      "id": 5113,
      "name": "ExplorerBasicSavedQueriesLimit"
    },
    "ExplorerBasicSavedQueryNotFound": {
      "id": 5114,
      "name": "ExplorerBasicSavedQueryNotFound"
    },
    "TenantShardMapperShardNotFound": {
      "id": 5500,
      "name": "TenantShardMapperShardNotFound"
    },
    "TitleNotEnabledForParty": {
      "id": 6000,
      "name": "TitleNotEnabledForParty"
    },
    "PartyVersionNotFound": {
      "id": 6001,
      "name": "PartyVersionNotFound"
    },
    "MultiplayerServerBuildReferencedByMatchmakingQueue": {
      "id": 6002,
      "name": "MultiplayerServerBuildReferencedByMatchmakingQueue"
    },
    "MultiplayerServerBuildReferencedByBuildAlias": {
      "id": 6003,
      "name": "MultiplayerServerBuildReferencedByBuildAlias"
    },
    "ExperimentationExperimentStopped": {
      "id": 7000,
      "name": "ExperimentationExperimentStopped"
    },
    "ExperimentationExperimentRunning": {
      "id": 7001,
      "name": "ExperimentationExperimentRunning"
    },
    "ExperimentationExperimentNotFound": {
      "id": 7002,
      "name": "ExperimentationExperimentNotFound"
    },
    "ExperimentationExperimentNeverStarted": {
      "id": 7003,
      "name": "ExperimentationExperimentNeverStarted"
    },
    "ExperimentationExperimentDeleted": {
      "id": 7004,
      "name": "ExperimentationExperimentDeleted"
    },
    "ExperimentationClientTimeout": {
      "id": 7005,
      "name": "ExperimentationClientTimeout"
    },
    "ExperimentationInvalidVariantConfiguration": {
      "id": 7006,
      "name": "ExperimentationInvalidVariantConfiguration"
    },
    "ExperimentationInvalidVariableConfiguration": {
      "id": 7007,
      "name": "ExperimentationInvalidVariableConfiguration"
    },
    "ExperimentInvalidId": {
      "id": 7008,
      "name": "ExperimentInvalidId"
    },
    "ExperimentationNoScorecard": {
      "id": 7009,
      "name": "ExperimentationNoScorecard"
    },
    "ExperimentationTreatmentAssignmentFailed": {
      "id": 7010,
      "name": "ExperimentationTreatmentAssignmentFailed"
    },
    "ExperimentationTreatmentAssignmentDisabled": {
      "id": 7011,
      "name": "ExperimentationTreatmentAssignmentDisabled"
    },
    "ExperimentationInvalidDuration": {
      "id": 7012,
      "name": "ExperimentationInvalidDuration"
    },
    "ExperimentationMaxExperimentsReached": {
      "id": 7013,
      "name": "ExperimentationMaxExperimentsReached"
    },
    "ExperimentationExperimentSchedulingInProgress": {
      "id": 7014,
      "name": "ExperimentationExperimentSchedulingInProgress"
    },
    "ExperimentationInvalidEndDate": {
      "id": 7015,
      "name": "ExperimentationInvalidEndDate"
    },
    "ExperimentationInvalidStartDate": {
      "id": 7016,
      "name": "ExperimentationInvalidStartDate"
    },
    "ExperimentationMaxDurationExceeded": {
      "id": 7017,
      "name": "ExperimentationMaxDurationExceeded"
    },
    "ExperimentationExclusionGroupNotFound": {
      "id": 7018,
      "name": "ExperimentationExclusionGroupNotFound"
    },
    "ExperimentationExclusionGroupInsufficientCapacity": {
      "id": 7019,
      "name": "ExperimentationExclusionGroupInsufficientCapacity"
    },
    "ExperimentationExclusionGroupCannotDelete": {
      "id": 7020,
      "name": "ExperimentationExclusionGroupCannotDelete"
    },
    "ExperimentationExclusionGroupInvalidTrafficAllocation": {
      "id": 7021,
      "name": "ExperimentationExclusionGroupInvalidTrafficAllocation"
    },
    "ExperimentationExclusionGroupInvalidName": {
      "id": 7022,
      "name": "ExperimentationExclusionGroupInvalidName"
    },
    "MaxActionDepthExceeded": {
      "id": 8000,
      "name": "MaxActionDepthExceeded"
    },
    "TitleNotOnUpdatedPricingPlan": {
      "id": 9000,
      "name": "TitleNotOnUpdatedPricingPlan"
    },
    "SegmentManagementTitleNotInFlight": {
      "id": 10000,
      "name": "SegmentManagementTitleNotInFlight"
    },
    "SegmentManagementNoExpressionTree": {
      "id": 10001,
      "name": "SegmentManagementNoExpressionTree"
    },
    "SegmentManagementTriggerActionCountOverLimit": {
      "id": 10002,
      "name": "SegmentManagementTriggerActionCountOverLimit"
    },
    "SegmentManagementSegmentCountOverLimit": {
      "id": 10003,
      "name": "SegmentManagementSegmentCountOverLimit"
    },
    "SegmentManagementInvalidSegmentId": {
      "id": 10004,
      "name": "SegmentManagementInvalidSegmentId"
    },
    "SegmentManagementInvalidInput": {
      "id": 10005,
      "name": "SegmentManagementInvalidInput"
    },
    "SegmentManagementInvalidSegmentName": {
      "id": 10006,
      "name": "SegmentManagementInvalidSegmentName"
    },
    "DeleteSegmentRateLimitExceeded": {
      "id": 10007,
      "name": "DeleteSegmentRateLimitExceeded"
    },
    "CreateSegmentRateLimitExceeded": {
      "id": 10008,
      "name": "CreateSegmentRateLimitExceeded"
    },
    "UpdateSegmentRateLimitExceeded": {
      "id": 10009,
      "name": "UpdateSegmentRateLimitExceeded"
    },
    "GetSegmentsRateLimitExceeded": {
      "id": 10010,
      "name": "GetSegmentsRateLimitExceeded"
    },
    "AsyncExportNotInFlight": {
      "id": 10011,
      "name": "AsyncExportNotInFlight"
    },
    "AsyncExportNotFound": {
      "id": 10012,
      "name": "AsyncExportNotFound"
    },
    "AsyncExportRateLimitExceeded": {
      "id": 10013,
      "name": "AsyncExportRateLimitExceeded"
    },
    "SnapshotNotFound": {
      "id": 11000,
      "name": "SnapshotNotFound"
    },
    "InventoryApiNotImplemented": {
      "id": 12000,
      "name": "InventoryApiNotImplemented"
    },
    "LobbyDoesNotExist": {
      "id": 13000,
      "name": "LobbyDoesNotExist"
    },
    "LobbyRateLimitExceeded": {
      "id": 13001,
      "name": "LobbyRateLimitExceeded"
    },
    "LobbyPlayerAlreadyJoined": {
      "id": 13002,
      "name": "LobbyPlayerAlreadyJoined"
    },
    "LobbyNotJoinable": {
      "id": 13003,
      "name": "LobbyNotJoinable"
    },
    "LobbyMemberCannotRejoin": {
      "id": 13004,
      "name": "LobbyMemberCannotRejoin"
    },
    "LobbyCurrentPlayersMoreThanMaxPlayers": {
      "id": 13005,
      "name": "LobbyCurrentPlayersMoreThanMaxPlayers"
    },
    "LobbyPlayerNotPresent": {
      "id": 13006,
      "name": "LobbyPlayerNotPresent"
    },
    "LobbyBadRequest": {
      "id": 13007,
      "name": "LobbyBadRequest"
    },
    "LobbyPlayerMaxLobbyLimitExceeded": {
      "id": 13008,
      "name": "LobbyPlayerMaxLobbyLimitExceeded"
    },
    "LobbyNewOwnerMustBeConnected": {
      "id": 13009,
      "name": "LobbyNewOwnerMustBeConnected"
    },
    "LobbyCurrentOwnerStillConnected": {
      "id": 13010,
      "name": "LobbyCurrentOwnerStillConnected"
    },
    "LobbyMemberIsNotOwner": {
      "id": 13011,
      "name": "LobbyMemberIsNotOwner"
    },
    "EventSamplingInvalidRatio": {
      "id": 14000,
      "name": "EventSamplingInvalidRatio"
    },
    "EventSamplingInvalidEventNamespace": {
      "id": 14001,
      "name": "EventSamplingInvalidEventNamespace"
    },
    "EventSamplingInvalidEventName": {
      "id": 14002,
      "name": "EventSamplingInvalidEventName"
    },
    "EventSamplingRatioNotFound": {
      "id": 14003,
      "name": "EventSamplingRatioNotFound"
    },
    "EventSinkConnectionInvalid": {
      "id": 15000,
      "name": "EventSinkConnectionInvalid"
    },
    "EventSinkConnectionUnauthorized": {
      "id": 15001,
      "name": "EventSinkConnectionUnauthorized"
    },
    "EventSinkRegionInvalid": {
      "id": 15002,
      "name": "EventSinkRegionInvalid"
    },
    "EventSinkLimitExceeded": {
      "id": 15003,
      "name": "EventSinkLimitExceeded"
    },
    "EventSinkSasTokenInvalid": {
      "id": 15004,
      "name": "EventSinkSasTokenInvalid"
    },
    "EventSinkNotFound": {
      "id": 15005,
      "name": "EventSinkNotFound"
    },
    "EventSinkNameInvalid": {
      "id": 15006,
      "name": "EventSinkNameInvalid"
    },
    "EventSinkSasTokenPermissionInvalid": {
      "id": 15007,
      "name": "EventSinkSasTokenPermissionInvalid"
    },
    "EventSinkSecretInvalid": {
      "id": 15008,
      "name": "EventSinkSecretInvalid"
    },
    "OperationCanceled": {
      "id": 16000,
      "name": "OperationCanceled"
    },
    "InvalidDisplayNameRandomSuffixLength": {
      "id": 17000,
      "name": "InvalidDisplayNameRandomSuffixLength"
    },
    "AllowNonUniquePlayerDisplayNamesDisableNotAllowed": {
      "id": 17001,
      "name": "AllowNonUniquePlayerDisplayNamesDisableNotAllowed"
    }
  }
}